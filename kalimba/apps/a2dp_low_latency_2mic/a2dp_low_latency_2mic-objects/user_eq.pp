.linefile 1 "user_eq.asm"
.linefile 1 "<command-line>"
.linefile 1 "user_eq.asm"
.linefile 11 "user_eq.asm"
.linefile 1 "C:/ADK4.0.0/kalimba/lib_sets/sdk/include/stack.h" 1
.linefile 12 "user_eq.asm" 2
.linefile 1 "C:/ADK4.0.0/kalimba/lib_sets/sdk/include/a2dp_low_latency_2mic_library_gen.h" 1
.linefile 12 "C:/ADK4.0.0/kalimba/lib_sets/sdk/include/a2dp_low_latency_2mic_library_gen.h"
.CONST $A2DP_LOW_LATENCY_2MIC_SYSID 0xE103;


.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.SPKR_EQ_BYPASS 0x000400;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.EQFLAT 0x000200;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.USER_EQ_BYPASS 0x000100;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BASS_BOOST_BYPASS 0x000080;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.SPATIAL_BYPASS 0x000040;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.COMPANDER_BYPASS 0x000020;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.DITHER_BYPASS 0x000010;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.USER_EQ_SELECT 0x000007;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.CNGENA 0x200000;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_SNDAGC 0x000800;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.SIDETONEENA 0x002000;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.RERENA 0x000004;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.AECENA 0x000002;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.HDBYP 0x001000;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_AGCPERSIST 0x008000;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_MGDC 0x000002;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_SPP 0x000040;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_GSMOOTH 0x000080;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_NFLOOR 0x000100;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.GSCHEME 0x000200;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.DMSS_MODE 0x000001;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_ADF 0x000008;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_NC 0x000010;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_WNR 0x000004;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_DMS 0x000020;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONFIG.BYPASS_MGDCPERSIST 0x000400;


.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CUR_MODE_OFFSET 0;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.SYSCONTROL_OFFSET 1;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.FUNC_MIPS_OFFSET 2;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.DECODER_MIPS_OFFSET 3;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_PCMINL_OFFSET 4;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_PCMINR_OFFSET 5;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_DACL_OFFSET 6;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_DACR_OFFSET 7;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_SUB_OFFSET 8;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CUR_DACL_OFFSET 9;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.USER_EQ_BANK_OFFSET 10;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CONFIG_FLAG_OFFSET 11;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.DELAY 12;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_TYPE_OFFSET 13;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_FS_OFFSET 14;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_CHANNEL_MODE 15;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_STAT1 16;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_STAT2 17;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_STAT3 18;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_STAT4 19;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_STAT5 20;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.INTERFACE_TYPE 21;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.INPUT_RATE 22;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.OUTPUT_RATE 23;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CODEC_RATE 24;

.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CALL_STATE_OFFSET 25;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.SEC_STAT_OFFSET 26;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_ADC_LEFT_OFFSET 27;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_ADC_RIGHT_OFFSET 28;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_SCO_OUT_OFFSET 29;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_MIPS_OFFSET 30;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_AUX_OFFSET 31;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.CONNSTAT 32;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.SIDETONE_GAIN 33;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.VOLUME 34;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.PEAK_SIDETONE 35;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.SND_AGC_SPEECH_LVL 36;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.SND_AGC_GAIN 37;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.AEC_COUPLING_OFFSET 38;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.WNR_POWER 39;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.WNR_WIND_PHASE 40;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.WIND_FLAG 41;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.DSP_VOL_FLAG 42;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.DSP_VOL 43;
.CONST $M.A2DP_LOW_LATENCY_2MIC.STATUS.BLOCK_SIZE 44;


.CONST $M.A2DP_LOW_LATENCY_2MIC.SYSMODE.STANDBY 0;
.CONST $M.A2DP_LOW_LATENCY_2MIC.SYSMODE.PSTHRGH_LEFT 1;
.CONST $M.A2DP_LOW_LATENCY_2MIC.SYSMODE.PSTHRGH_RIGHT 2;
.CONST $M.A2DP_LOW_LATENCY_2MIC.SYSMODE.FULLPROC 3;
.CONST $M.A2DP_LOW_LATENCY_2MIC.SYSMODE.LOWVOLUME 4;
.CONST $M.A2DP_LOW_LATENCY_2MIC.SYSMODE.MAX_MODES 5;


.CONST $M.A2DP_LOW_LATENCY_2MIC.CONTROL.DAC_OVERRIDE 0x8000;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONTROL.CALLSTATE_OVERRIDE 0x4000;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CONTROL.MODE_OVERRIDE 0x2000;


.CONST $M.A2DP_LOW_LATENCY_2MIC.INTERFACE.UNUSED 0;
.CONST $M.A2DP_LOW_LATENCY_2MIC.INTERFACE.ANALOG 1;
.CONST $M.A2DP_LOW_LATENCY_2MIC.INTERFACE.I2S 2;


.CONST $M.A2DP_LOW_LATENCY_2MIC.CALLST.MUTE 0;
.CONST $M.A2DP_LOW_LATENCY_2MIC.CALLST.CONNECTED 1;


.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CONFIG 0;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ1_CONFIG 1;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_NUM_BANDS 2;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_MASTER_GAIN 3;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE1_TYPE 4;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE1_FC 5;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE1_GAIN 6;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE1_Q 7;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE2_TYPE 8;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE2_FC 9;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE2_GAIN 10;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE2_Q 11;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE3_TYPE 12;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE3_FC 13;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE3_GAIN 14;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE3_Q 15;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE4_TYPE 16;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE4_FC 17;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE4_GAIN 18;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE4_Q 19;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE5_TYPE 20;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE5_FC 21;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE5_GAIN 22;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE5_Q 23;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE6_TYPE 24;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE6_FC 25;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE6_GAIN 26;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE6_Q 27;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE7_TYPE 28;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE7_FC 29;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE7_GAIN 30;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE7_Q 31;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE8_TYPE 32;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE8_FC 33;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE8_GAIN 34;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE8_Q 35;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE9_TYPE 36;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE9_FC 37;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE9_GAIN 38;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE9_Q 39;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE10_TYPE 40;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE10_FC 41;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE10_GAIN 42;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SPKR_EQ_STAGE10_Q 43;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BOOST_EQ_NUM_BANDS 44;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BOOST_EQ_MASTER_GAIN 45;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BOOST_EQ_TYPE 46;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BOOST_EQ_FC 47;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BOOST_EQ_GAIN 48;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BOOST_EQ_Q 49;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ_NUM_BANKS 50;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_NUM_BANDS 51;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_MASTER_GAIN 52;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE1_TYPE 53;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE1_FC 54;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE1_GAIN 55;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE1_Q 56;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE2_TYPE 57;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE2_FC 58;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE2_GAIN 59;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE2_Q 60;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE3_TYPE 61;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE3_FC 62;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE3_GAIN 63;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE3_Q 64;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE4_TYPE 65;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE4_FC 66;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE4_GAIN 67;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE4_Q 68;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE5_TYPE 69;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE5_FC 70;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE5_GAIN 71;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ1_STAGE5_Q 72;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_NUM_BANDS 73;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_MAST_ERGAIN 74;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE1_TYPE 75;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE1_FC 76;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE1_GAIN 77;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE1_Q 78;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE2_TYPE 79;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE2_FC 80;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE2_GAIN 81;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE2_Q 82;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE3_TYPE 83;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE3_FC 84;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE3_GAIN 85;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE3_Q 86;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE4_TYPE 87;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE4_FC 88;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE4_GAIN 89;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE4_Q 90;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE5_TYPE 91;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE5_FC 92;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE5_GAIN 93;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ2_STAGE5_Q 94;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_NUM_BANDS 95;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_MASTER_GAIN 96;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE1_TYPE 97;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE1_FC 98;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE1_GAIN 99;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE1_Q 100;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE2_TYPE 101;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE2_FC 102;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE2_GAIN 103;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE2_Q 104;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE3_TYPE 105;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE3_FC 106;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE3_GAIN 107;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE3_Q 108;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE4_TYPE 109;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE4_FC 110;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE4_GAIN 111;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE4_Q 112;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE5_TYPE 113;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE5_FC 114;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE5_GAIN 115;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ3_STAGE5_Q 116;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_NUM_BANDS 117;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_MASTER_GAIN 118;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE1_TYPE 119;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE1_FC 120;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE1_GAIN 121;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE1_Q 122;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE2_TYPE 123;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE2_FC 124;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE2_GAIN 125;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE2_Q 126;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE3_TYPE 127;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE3_FC 128;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE3_GAIN 129;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE3_Q 130;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE4_TYPE 131;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE4_FC 132;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE4_GAIN 133;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE4_Q 134;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE5_TYPE 135;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE5_FC 136;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE5_GAIN 137;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ4_STAGE5_Q 138;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_NUM_BANDS 139;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_MASTER_GAIN 140;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE1_TYPE 141;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE1_FC 142;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE1_GAIN 143;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE1_Q 144;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE2_TYPE 145;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE2_FC 146;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE2_GAIN 147;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE2_Q 148;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE3_TYPE 149;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE3_FC 150;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE3_GAIN 151;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE3_Q 152;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE4_TYPE 153;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE4_FC 154;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE4_GAIN 155;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE4_Q 156;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE5_TYPE 157;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE5_FC 158;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE5_GAIN 159;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ5_STAGE5_Q 160;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_NUM_BANDS 161;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_MASTER_GAIN 162;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE1_TYPE 163;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE1_FC 164;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE1_GAIN 165;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE1_Q 166;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE2_TYPE 167;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE2_FC 168;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE2_GAIN 169;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE2_Q 170;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE3_TYPE 171;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE3_FC 172;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE3_GAIN 173;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE3_Q 174;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE4_TYPE 175;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE4_FC 176;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE4_GAIN 177;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE4_Q 178;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE5_TYPE 179;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE5_FC 180;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE5_GAIN 181;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ6_STAGE5_Q 182;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SDICONFIG 183;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DAC_GAIN_L 184;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DAC_GAIN_R 185;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TABLE_SIZE 186;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE0 187;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE1 188;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE2 189;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE3 190;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE4 191;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE5 192;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE6 193;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE7 194;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE8 195;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE9 196;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE10 197;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE11 198;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE12 199;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE13 200;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE14 201;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE15 202;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SB_TABLE16 203;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE0 204;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE1 205;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE2 206;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE3 207;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE4 208;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE5 209;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE6 210;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE7 211;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE8 212;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE9 213;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE10 214;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE11 215;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE12 216;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE13 217;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE14 218;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE15 219;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_SW_TABLE16 220;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TRIM_TABLE_SIZE 221;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TRIM_TABLE0 222;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TRIM_TABLE1 223;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TRIM_TABLE2 224;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TRIM_TABLE3 225;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TRIM_TABLE4 226;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TRIM_TABLE5 227;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SWAT_TRIM_TABLE6 228;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BASS_MANAGER_CONFIG 229;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A1 230;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A2 231;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A3 232;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A4 233;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BASS_MANAGER_COEF_A5 234;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_BASS_MANAGER_COEF_FREQ 235;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_S_EQ_B1 236;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_S_EQ_B0 237;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_S_EQ_A1 238;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_L_AP1_B2 239;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_L_AP1_B1 240;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_L_AP1_B0 241;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_L_AP2_B2 242;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_L_AP2_B1 243;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_L_AP2_B0 244;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_R_AP1_B2 245;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_R_AP1_B1 246;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_R_AP1_B0 247;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_R_AP2_B2 248;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_R_AP2_B1 249;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MELOD_EXPANSION_R_AP2_B0 250;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_EXPAND_THRESHOLD1 251;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LINEAR_THRESHOLD1 252;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_COMPRESS_THRESHOLD1 253;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LIMIT_THRESHOLD1 254;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_EXPAND_RATIO1 255;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_LINEAR_RATIO1 256;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_COMPRESS_RATIO1 257;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_LIMIT_RATIO1 258;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_EXPAND_ATTACK_TC1 259;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_EXPAND_DECAY_TC1 260;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LINEAR_ATTACK_TC1 261;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LINEAR_DECAY_TC1 262;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_COMPRESS_ATTACK_TC1 263;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_COMPRESS_DECAY_TC1 264;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LIMIT_ATTACK_TC1 265;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LIMIT_DECAY_TC1 266;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MAKEUP_GAIN1 267;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_EXPAND_THRESHOLD2 268;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LINEAR_THRESHOLD2 269;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_COMPRESS_THRESHOLD2 270;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LIMIT_THRESHOLD2 271;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_EXPAND_RATIO2 272;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_LINEAR_RATIO2 273;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_COMPRESS_RATIO2 274;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_LIMIT_RATIO2 275;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_EXPAND_ATTACK_TC2 276;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_EXPAND_DECAY_TC2 277;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LINEAR_ATTACK_TC2 278;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LINEAR_DECAY_TC2 279;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_COMPRESS_ATTACK_TC2 280;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_COMPRESS_DECAY_TC2 281;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LIMIT_ATTACK_TC2 282;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LIMIT_DECAY_TC2 283;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MAKEUP_GAIN2 284;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DITHER_NOISE_SHAPE 285;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC1_CONFIG 286;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC2_CONFIG 287;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC3_CONFIG 288;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC4_CONFIG 289;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC5_CONFIG 290;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC6_CONFIG 291;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC7_CONFIG 292;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC8_CONFIG 293;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC9_CONFIG 294;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CODEC10_CONFIG 295;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_HFK_CONFIG 296;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ADC_GAIN_LEFT 297;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ADC_GAIN_RIGHT 298;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_CONFIG 299;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_GAIN_EXP 300;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_GAIN_MANT 301;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE1_B2 302;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE1_B1 303;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE1_B0 304;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE1_A2 305;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE1_A1 306;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE2_B2 307;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE2_B1 308;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE2_B0 309;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE2_A2 310;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE2_A1 311;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE3_B2 312;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE3_B1 313;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE3_B0 314;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE3_A2 315;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE3_A1 316;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE4_B2 317;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE4_B1 318;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE4_B0 319;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE4_A2 320;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE4_A1 321;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE5_B2 322;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE5_B1 323;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE5_B0 324;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE5_A2 325;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_STAGE5_A1 326;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_SCALE1 327;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_SCALE2 328;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_SCALE3 329;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_SCALE4 330;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_PEQ_SCALE5 331;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE 332;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE1 333;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE2 334;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE3 335;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE4 336;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE5 337;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE6 338;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE7 339;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE8 340;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE9 341;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE10 342;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE11 343;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE12 344;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE13 345;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE14 346;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_INV_DAC_GAIN_TABLE15 347;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_CLIP_POINT 348;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_ADJUST_LIMIT 349;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_STF_SWITCH 350;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_STF_NOISE_LOW_THRES 351;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_STF_NOISE_HIGH_THRES 352;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_STF_GAIN_EXP 353;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_STF_GAIN_MANTISSA 354;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_CONFIG 355;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_GAIN_EXP 356;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_GAIN_MANT 357;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE1_B2 358;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE1_B1 359;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE1_B0 360;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE1_A2 361;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE1_A1 362;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE2_B2 363;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE2_B1 364;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE2_B0 365;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE2_A2 366;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE2_A1 367;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE3_B2 368;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE3_B1 369;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE3_B0 370;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE3_A2 371;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_STAGE3_A1 372;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_SCALE1 373;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_SCALE2 374;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ST_PEQ_SCALE3 375;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SNDGAIN_MANTISSA 376;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SNDGAIN_EXPONENT 377;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_PT_SNDGAIN_MANTISSA 378;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_PT_SNDGAIN_EXPONENT 379;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_G_INITIAL 380;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_TARGET 381;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_ATTACK_TC 382;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_DECAY_TC 383;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_A_90_PK 384;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_D_90_PK 385;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_G_MAX 386;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_START_COMP 387;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_COMP 388;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_INP_THRESH 389;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_SP_ATTACK 390;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_AD_THRESH1 391;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_AD_THRESH2 392;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_G_MIN 393;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_ECHO_HOLD_TIME 394;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_SND_AGC_NOISE_HOLD_TIME 395;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_ATTACK_TC 396;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_DECAY_TC 397;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_ENVELOPE_TC 398;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_INIT_FRAME_THRESH 399;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_RATIO 400;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_MIN_SIGNAL 401;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_MIN_MAX_ENVELOPE 402;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_DELTA_THRESHOLD 403;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RCV_VAD_COUNT_THRESHOLD 404;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ENABLE_AEC_REUSE 405;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DMSS_LPN_MIC 406;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DMSS_CONFIG 407;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ASF_MIC_DISTANCE 408;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ASF_WNR_AGGR 409;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ASF_WNR_THRESHOLD 410;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ASF_BETA0 411;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ASF_BETA1 412;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_WNR_THRESH_PHASE 413;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_WNR_THRESH_COHERENCE 414;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MGDC_MAXCOMP 415;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_MGDC_TH 416;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ASR_OMS_AGGR 417;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DMS_AGGR 418;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_RESIDUAL_NFLOOR 419;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_LVMODE_THRES 420;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_REF_DELAY 421;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_ADCGAIN_SSR 422;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CNG_Q 423;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CNG_SHAPE 424;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DTC_AGGR 425;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_HD_THRESH_GAIN 426;

.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_0 427;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_1 428;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_2 429;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_3 430;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_4 431;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_5 432;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_6 433;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_7 434;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_8 435;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_DSP_USER_9 436;
.CONST $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.STRUCT_SIZE 437;
.linefile 13 "user_eq.asm" 2
.linefile 1 "C:/ADK4.0.0/kalimba/lib_sets/sdk/include/a2dp_low_latency_2mic_config.h" 1
.linefile 14 "user_eq.asm" 2
.linefile 1 "user_eq.h" 1
.linefile 11 "user_eq.h"
.linefile 1 "C:/ADK4.0.0/kalimba/lib_sets/sdk/include/cbuffer.h" 1
.linefile 11 "C:/ADK4.0.0/kalimba/lib_sets/sdk/include/cbuffer.h"
   .CONST $cbuffer.SIZE_FIELD 0;
   .CONST $cbuffer.READ_ADDR_FIELD 1;
   .CONST $cbuffer.WRITE_ADDR_FIELD 2;




      .CONST $cbuffer.STRUC_SIZE 3;




 .CONST $frmbuffer.CBUFFER_PTR_FIELD 0;
 .CONST $frmbuffer.FRAME_PTR_FIELD 1;
 .CONST $frmbuffer.FRAME_SIZE_FIELD 2;
 .CONST $frmbuffer.STRUC_SIZE 3;
.linefile 42 "C:/ADK4.0.0/kalimba/lib_sets/sdk/include/cbuffer.h"
      .CONST $cbuffer.NUM_PORTS 12;
      .CONST $cbuffer.WRITE_PORT_OFFSET 0x00000C;
      .CONST $cbuffer.PORT_NUMBER_MASK 0x00000F;
      .CONST $cbuffer.TOTAL_PORT_NUMBER_MASK 0x00001F;
      .CONST $cbuffer.TOTAL_CONTINUOUS_PORTS 8;







   .CONST $cbuffer.MMU_PAGE_SIZE 64;


   .CONST $cbuffer.READ_PORT_MASK 0x800000;
   .CONST $cbuffer.WRITE_PORT_MASK $cbuffer.READ_PORT_MASK + $cbuffer.WRITE_PORT_OFFSET;




   .CONST $cbuffer.FORCE_ENDIAN_MASK 0x300000;
   .CONST $cbuffer.FORCE_ENDIAN_SHIFT_AMOUNT -21;
   .CONST $cbuffer.FORCE_LITTLE_ENDIAN 0x100000;
   .CONST $cbuffer.FORCE_BIG_ENDIAN 0x300000;


   .CONST $cbuffer.FORCE_SIGN_EXTEND_MASK 0x0C0000;
   .CONST $cbuffer.FORCE_SIGN_EXTEND_SHIFT_AMOUNT -19;
   .CONST $cbuffer.FORCE_SIGN_EXTEND 0x040000;
   .CONST $cbuffer.FORCE_NO_SIGN_EXTEND 0x0C0000;


   .CONST $cbuffer.FORCE_BITWIDTH_MASK 0x038000;
   .CONST $cbuffer.FORCE_BITWIDTH_SHIFT_AMOUNT -16;
   .CONST $cbuffer.FORCE_8BIT_WORD 0x008000;
   .CONST $cbuffer.FORCE_16BIT_WORD 0x018000;
   .CONST $cbuffer.FORCE_24BIT_WORD 0x028000;
   .CONST $cbuffer.FORCE_32BIT_WORD 0x038000;


   .CONST $cbuffer.FORCE_SATURATE_MASK 0x006000;
   .CONST $cbuffer.FORCE_SATURATE_SHIFT_AMOUNT -14;
   .CONST $cbuffer.FORCE_NO_SATURATE 0x002000;
   .CONST $cbuffer.FORCE_SATURATE 0x006000;


   .CONST $cbuffer.FORCE_PADDING_MASK 0x001C00;
   .CONST $cbuffer.FORCE_PADDING_SHIFT_AMOUNT -11;
   .CONST $cbuffer.FORCE_PADDING_NONE 0x000400;
   .CONST $cbuffer.FORCE_PADDING_LS_BYTE 0x000C00;
   .CONST $cbuffer.FORCE_PADDING_MS_BYTE 0x001400;


   .CONST $cbuffer.FORCE_PCM_AUDIO $cbuffer.FORCE_LITTLE_ENDIAN +
                                                      $cbuffer.FORCE_SIGN_EXTEND +
                                                      $cbuffer.FORCE_SATURATE;
   .CONST $cbuffer.FORCE_24B_PCM_AUDIO $cbuffer.FORCE_LITTLE_ENDIAN +
                                                      $cbuffer.FORCE_32BIT_WORD +
                                                      $cbuffer.FORCE_PADDING_MS_BYTE +
                                                      $cbuffer.FORCE_NO_SATURATE;

   .CONST $cbuffer.FORCE_16BIT_DATA_STREAM $cbuffer.FORCE_BIG_ENDIAN +
                                                      $cbuffer.FORCE_NO_SIGN_EXTEND +
                                                      $cbuffer.FORCE_NO_SATURATE;
.linefile 12 "user_eq.h" 2



    .const $user_eq.DEFINITION_TABLE_MAX_NUM_BANKS 0;
    .const $user_eq.DEFINITION_TABLE_MAX_NUM_BANDS 1;
    .const $user_eq.DEFINITION_TABLE_LEFT_DM_PTR 2;
    .const $user_eq.DEFINITION_TABLE_RIGHT_DM_PTR 3;
    .const $user_eq.DEFINITION_TABLE_COEFS_A_PTR 4;
    .const $user_eq.DEFINITION_TABLE_COEFS_B_PTR 5;

    .const $user_eq.DEFINITION_TABLE_SIZE 6;



    .const $user_eq.num_bands 0;
    .const $user_eq.pre_gain 1;



    .const $user_eq.filter_type.bypass 0;

    .const $user_eq.filter_type.lp_1 1;
    .const $user_eq.filter_type.hp_1 2;
    .const $user_eq.filter_type.ap_1 3;

    .const $user_eq.filter_type.ls_1 4;
    .const $user_eq.filter_type.hs_1 5;
    .const $user_eq.filter_type.tlt_1 6;

    .const $user_eq.filter_type.lp_2 7;
    .const $user_eq.filter_type.hp_2 8;
    .const $user_eq.filter_type.ap_2 9;

    .const $user_eq.filter_type.ls_2 10;
    .const $user_eq.filter_type.hs_2 11;
    .const $user_eq.filter_type.tlt_2 12;

    .const $user_eq.filter_type.peq 13;



    .const $user_eq.freq_param_scale 3;
    .const $user_eq.gain_param_scale 60;
    .const $user_eq.q_param_scale 12;


    .const $user_eq.gain_lo_gain_limit -2160;
    .const $user_eq.gain_hi_gain_limit 720;


    .const $user_eq.hi_nyquist_freq_limit 0.453515;






    .const $user_eq.xp_1_lo_freq_limit 1;
    .const $user_eq.xp_1_hi_freq_limit 60000;


    .const $user_eq.xp_2_lo_freq_limit 120;
    .const $user_eq.xp_2_hi_freq_limit 60000;
    .const $user_eq.xp_2_lo_q_limit 0x0400;
    .const $user_eq.xp_2_hi_q_limit 0x2000;


    .const $user_eq.shelf_1_lo_freq_limit 60;
    .const $user_eq.shelf_1_hi_freq_limit 60000;
    .const $user_eq.shelf_1_lo_gain_limit -720;
    .const $user_eq.shelf_1_hi_gain_limit 720;


    .const $user_eq.shelf_2_lo_freq_limit 120;
    .const $user_eq.shelf_2_hi_freq_limit 60000;
    .const $user_eq.shelf_2_lo_gain_limit -720;
    .const $user_eq.shelf_2_hi_gain_limit 720;
    .const $user_eq.shelf_2_lo_q_limit 0x0400;
    .const $user_eq.shelf_2_hi_q_limit 0x2000;


    .const $user_eq.peq_lo_freq_limit 60;
    .const $user_eq.peq_hi_freq_limit 60000;
    .const $user_eq.peq_lo_gain_limit -2160;
    .const $user_eq.peq_hi_gain_limit 720;
    .const $user_eq.peq_lo_q_limit 0x0400;
    .const $user_eq.peq_hi_q_limit 0x8000;



    .const $user_eq.GAIAMSG.SET_USER_PARAM 0x121a;
    .const $user_eq.GAIAMSG.GET_USER_PARAM 0x129a;
    .const $user_eq.GAIAMSG.SET_USER_GROUP_PARAM 0x121b;
    .const $user_eq.GAIAMSG.GET_USER_GROUP_PARAM 0x129b;

    .const $user_eq.GAIAMSG.SET_USER_PARAM_RESP 0x321a;
    .const $user_eq.GAIAMSG.GET_USER_PARAM_RESP 0x329a;
    .const $user_eq.GAIAMSG.SET_USER_GROUP_PARAM_RESP 0x321b;
    .const $user_eq.GAIAMSG.GET_USER_GROUP_PARAM_RESP 0x329b;
.linefile 15 "user_eq.asm" 2


.module $user_eq;
.CODESEGMENT PM;

.DATASEGMENT DM;


userEqInitialize:







    push rLink;


    r2 = M[&$M.CVC.data.CurParams + $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_CONFIG];
    r2 = r2 and $M.A2DP_LOW_LATENCY_2MIC.CONFIG.USER_EQ_SELECT;
    r1 = m[r7 + $user_eq.DEFINITION_TABLE_MAX_NUM_BANKS];
    r2 = min r1;

    r0 = m[r7 + $user_eq.DEFINITION_TABLE_COEFS_A_PTR];
    r1 = m[r7 + $user_eq.DEFINITION_TABLE_COEFS_B_PTR];

    r8 = r8 + r2;
    r8 = m[r8];

    r3 = r8 + 1;
 if nz jump calcBankCoefs.jump_entry;





    r2 = r2 - 1;
    r3 = m[r7 + $user_eq.DEFINITION_TABLE_MAX_NUM_BANKS];
    r1 = M[$M.set_codec_rate.current_codec_sampling_rate];
    null = r1 - 48000;
    if z r2 = r2 + r3;
    r3 = m[r7 + $user_eq.DEFINITION_TABLE_MAX_NUM_BANDS];
    r3 = r3 * 6 (int);
    r3 = r3 + 3;
    r3 = r3 * r2 (int);
    r0 = r0 + r3;



    pushm <r0,r7>;
    r7 = m[r7 + $user_eq.DEFINITION_TABLE_LEFT_DM_PTR];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r0;
    call $audio_proc.hq_peq.initialize;

    popm <r0,r7>;
    r7 = m[r7 + $user_eq.DEFINITION_TABLE_RIGHT_DM_PTR];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r0;
    call $audio_proc.hq_peq.initialize;

    jump $pop_rLink_and_rts;



eqInitialize:







    push rLink;



    r0 = m[r7 + $user_eq.DEFINITION_TABLE_COEFS_A_PTR];
    r1 = m[r7 + $user_eq.DEFINITION_TABLE_COEFS_B_PTR];

 r8 = m[r8];
 if nz jump calcBankCoefs.jump_entry;




    r2 = M[$M.set_codec_rate.current_codec_sampling_rate];
    null = r2 - 48000;
    if z r0 = r1;



    pushm <r0,r7>;
    r7 = m[r7 + $user_eq.DEFINITION_TABLE_LEFT_DM_PTR];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r0;
    call $audio_proc.hq_peq.initialize;

    popm <r0,r7>;
    r7 = m[r7 + $user_eq.DEFINITION_TABLE_RIGHT_DM_PTR];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r0;
    call $audio_proc.hq_peq.initialize;

    jump $pop_rLink_and_rts;



calcBankCoefs.call_entry:
    push rLink;
calcBankCoefs.jump_entry:
.linefile 134 "user_eq.asm"
    r2 = m[r7 + $user_eq.DEFINITION_TABLE_LEFT_DM_PTR];
    r2 = m[r2 + $audio_proc.peq.PARAM_PTR_FIELD];
    null = r2 - r0;
    if eq r0 = r1;





    pushm <r0,r7>;




    i0 = r8;
    i1 = r0;

    null = r8;
    if nz jump calcBankCoefs.NotNullBank;

        r0 = 0;
        m[i1,1] = r0;
        r0 = 0x000001;
        m[i1,1] = r0;
        r0 = 0x400000;
        m[i1,1] = r0;
        jump calcBankCoefs.switchToNewCoefs;

    calcBankCoefs.NotNullBank:


    r0 = m[i0,1];
    m[i1,1] = r0;
    push r0;


    call calcPreGain.call_entry;


    r0 = i1;
    r1 = m[r7 + $user_eq.DEFINITION_TABLE_MAX_NUM_BANDS];
    r1 = r1 * 5 (int);
    r0 = r0 + r1;
    i2 = r0;

    calcBandLoop:
        pop r0;
        r0 = r0 - 1;
        if neg jump calcBankCoefs.switchToNewCoefs;
        push r0;

        pushm <i0,i1,i2>;
        call coefCalcBiquadBand.call_entry;
        popm <r0,r1,r2>;
        r0 = r0 + 4;
        i0 = r0;
        r1 = r1 + 5;
        i1 = r1;
        r2 = r2 + 1;
        i2 = r2;

        jump calcBandLoop;

    calcBankCoefs.switchToNewCoefs:


    popm <r0,r7>;

    pushm <r0,r7>;
    r7 = m[r7 + $user_eq.DEFINITION_TABLE_LEFT_DM_PTR];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r0;
    call $audio_proc.hq_peq.initialize;

    popm <r0,r7>;
    r7 = m[r7 + $user_eq.DEFINITION_TABLE_RIGHT_DM_PTR];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r0;
    call $audio_proc.hq_peq.initialize;

    jump $pop_rLink_and_rts;



calcBandCoefs:
.linefile 227 "user_eq.asm"
    push rLink;

    r4 = r0;
    r0 = r0 and 0x00fff0;
    call calcParamAddrOffset;
    r8 = r0 + r3;





    r6 = m[r7 + $user_eq.DEFINITION_TABLE_LEFT_DM_PTR];
    r6 = m[r6 + $audio_proc.peq.PARAM_PTR_FIELD];
    null = r6 - r1;
    if eq jump calcBandCoefsB;


    r3 = r2;
    r2 = r1;
    jump calcBandCoefsAorB;

    calcBandCoefsB:
    r3 = r1;


    calcBandCoefsAorB:





    i0 = r3;
    i1 = r2;


    r10 = m[r7 + $user_eq.DEFINITION_TABLE_MAX_NUM_BANDS];
    r10 = r10 * 6 (int);
    r10 = r10 + 3;


    do copyCurrentCoefsLoop;
        r0 = m[i0,1];
        m[i1,1] = r0;
    copyCurrentCoefsLoop:

    i0 = r8;


    r0 = r4;
    call calcCoefAddrOffset;
    r8 = r0 + r2;
    i1 = r8;
    r8 = r1 + r2;
    i2 = r8;






    pushm <r2,r7>;


    r0 = r4;
    call coefCalc;


    popm <r2,r7>;
    pushm <r2,r7>;
    r7 = m[r7 + $user_eq.DEFINITION_TABLE_LEFT_DM_PTR];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r2;
    call $audio_proc.hq_peq.initialize;

    popm <r2,r7>;
    r7 = m[r7 + $user_eq.DEFINITION_TABLE_RIGHT_DM_PTR];
    m[r7 + $audio_proc.peq.PARAM_PTR_FIELD] = r2;
    call $audio_proc.hq_peq.initialize;

    jump $pop_rLink_and_rts;



calcParamAddrOffset:
.linefile 319 "user_eq.asm"
    pushm <r1,r2,r3>;

    r1 = r0 and 0x000f00;
    r1 = r1 ashift -8;
    r2 = r0 and 0x0000f0;
    r2 = r2 ashift -4;
    r3 = r0 and 0x00000f;


    r0 = r3;
    null = r1 - 0;
    if eq jump completedParamAddrCalculation;


    r1 = r1 - 1;
    r0 = m[r7 + $user_eq.DEFINITION_TABLE_MAX_NUM_BANDS];
    r0 = r0 * 4 (int);
    r0 = r0 + 2;
    r1 = r1 * r0 (int);
    r0 = r1 + r3;
    r0 = r0 + 1;
    null = r2 - 0;
    if eq jump completedParamAddrCalculation;


    r2 = r2 - 1;
    r2 = r2 * 4 (int);
    r0 = r0 + r2;
    r0 = r0 + 2;

    completedParamAddrCalculation:

    popm <r1,r2,r3>;

    rts;



calcCoefAddrOffset:
.linefile 368 "user_eq.asm"
    pushm <r2,r3>;


    r2 = r0 and 0x0000f0;
    r2 = r2 ashift -4;
    r3 = r0 and 0x00000f;


    r0 = r3;
    null = r2 - 0;
    if eq jump completedCoefAddrCalculation;


    r2 = r2 - 1;
    r0 = m[r7 + $user_eq.DEFINITION_TABLE_MAX_NUM_BANDS];
    r0 = r0 * 5 (int);
    r0 = r0 + 3;
    r1 = r2 + r0;
    r0 = r2 * 5 (int);
    r0 = r0 + 3;

    completedCoefAddrCalculation:

    popm <r2,r3>;

    rts;



coefCalc:
.linefile 408 "user_eq.asm"
    push rLink;


    r2 = r0 and 0x0000f0;
    r2 = r2 ashift -4;
    if nz jump coefCalcBiquadBand.jump_entry;



    r0 = r0 and 0x00000f;
    null = r0 - $user_eq.num_bands;
    if eq jump calcNumBands.jump_entry;

    r2 = m[i0,1];
    null = r0 - $user_eq.pre_gain;
    if eq jump calcPreGain.jump_entry;

    pop rLink;
    rts;



coefCalcBiquadBand.call_entry:
    push rLink;
coefCalcBiquadBand.jump_entry:
.linefile 442 "user_eq.asm"
    r0 = m[i0,1];

    null = r0 - $user_eq.filter_type.bypass;
    if eq jump calcBypass.jump_entry;



    r7 = $kal_filter_coef_lib.calc_low_pass_1st;
    null = r0 - $user_eq.filter_type.lp_1;
    if eq jump calcXP1.jump_entry;

    r7 = $kal_filter_coef_lib.calc_high_pass_1st;
    null = r0 - $user_eq.filter_type.hp_1;
    if eq jump calcXP1.jump_entry;

    r7 = $kal_filter_coef_lib.calc_all_pass_1st;
    null = r0 - $user_eq.filter_type.ap_1;
    if eq jump calcXP1.jump_entry;



    r7 = $kal_filter_coef_lib.calc_low_pass_2nd;
    null = r0 - $user_eq.filter_type.lp_2;
    if eq jump calcXP2.jump_entry;

    r7 = $kal_filter_coef_lib.calc_high_pass_2nd;
    null = r0 - $user_eq.filter_type.hp_2;
    if eq jump calcXP2.jump_entry;

    r7 = $kal_filter_coef_lib.calc_all_pass_2nd;
    null = r0 - $user_eq.filter_type.ap_2;
    if eq jump calcXP2.jump_entry;



    r7 = $kal_filter_coef_lib.calc_low_shelf_1st;
    null = r0 - $user_eq.filter_type.ls_1;
    if eq jump calcShelf1.jump_entry;

    r7 = $kal_filter_coef_lib.calc_high_shelf_1st;
    null = r0 - $user_eq.filter_type.hs_1;
    if eq jump calcShelf1.jump_entry;

    r7 = $kal_filter_coef_lib.calc_tilt_1st;
    null = r0 - $user_eq.filter_type.tlt_1;
    if eq jump calcShelf1.jump_entry;



    r7 = $kal_filter_coef_lib.calc_low_shelf_2nd;
    null = r0 - $user_eq.filter_type.ls_2;
    if eq jump calcShelf2.jump_entry;

    r7 = $kal_filter_coef_lib.calc_high_shelf_2nd;
    null = r0 - $user_eq.filter_type.hs_2;
    if eq jump calcShelf2.jump_entry;

    r7 = $kal_filter_coef_lib.calc_tilt_2nd;
    null = r0 - $user_eq.filter_type.tlt_2;
    if eq jump calcShelf2.jump_entry;



    null = r0 - $user_eq.filter_type.peq;
    if eq jump calcPEQ.jump_entry;

    coefCalcInvalid:





    pop rLink;
    rts;



calcNumBands.call_entry:

    push rLink;

calcNumBands.jump_entry:

    r0 = m[i0,1];
    m[i1,1] = r0;

    pop rLink;
    rts;



calcPreGain.call_entry:

    push rLink;

calcPreGain.jump_entry:


    r0 = $user_eq.gain_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];
    r0 = r0 lshift 8;
    r0 = r0 ashift -8;

    r1 = $user_eq.gain_lo_gain_limit;
    r0 = max r1;
    r1 = $user_eq.gain_hi_gain_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;

    call $kal_filter_coef_lib.__db2lin.call_entry;



    r0 = r0 and 0x0000ff;
    r0 = r0 - 127;
    r1 = r1 lshift -1;

    m[i1,1] = r0;
    m[i1,1] = r1;

    pop rLink;
    rts;



calcBypass.jump_entry:



    sp = sp + 6;

    call $kal_filter_coef_lib.calc_bypass;

    jump pop_biquad_coefs_and_rts;



calcXP1.jump_entry:



    sp = sp + 6;

    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r5 = 48000;
    r4 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r4 = r5;
 r5 = $user_eq.hi_nyquist_freq_limit;
 r4 = r4 * r5;
    r4 = r4 * 3 (int);
 null = r0 - r4;
 if gt jump substituteBypassFilter.jump_entry;
    r1 = $user_eq.xp_1_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.xp_1_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call r7;

    jump pop_biquad_coefs_and_rts;



calcXP2.jump_entry:



    sp = sp + 6;


    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r5 = 48000;
    r4 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r4 = r5;
 r5 = $user_eq.hi_nyquist_freq_limit;
 r4 = r4 * r5;
    r4 = r4 * 3 (int);
 null = r0 - r4;
 if gt jump substituteBypassFilter.jump_entry;
    r1 = $user_eq.xp_2_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.xp_2_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;

    r0 = m[i0,1];


    r0 = m[i0,1];

    r1 = $user_eq.xp_2_lo_q_limit;
    r0 = max r1;
    r1 = $user_eq.xp_2_hi_q_limit;
    r0 = min r1;
    r1 = $user_eq.q_param_scale;
    call $kal_float_lib.q_to_float;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call r7;

    jump pop_biquad_coefs_and_rts;



calcShelf1.jump_entry:



    sp = sp + 6;


    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r5 = 48000;
    r4 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r4 = r5;
 r5 = $user_eq.hi_nyquist_freq_limit;
 r4 = r4 * r5;
    r4 = r4 * 3 (int);
 null = r0 - r4;
 if gt jump substituteBypassFilter.jump_entry;
    r1 = $user_eq.shelf_1_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_1_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = $user_eq.gain_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];
    r0 = r0 lshift 8;
    r0 = r0 ashift -8;

    r1 = $user_eq.shelf_1_lo_gain_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_1_hi_gain_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call r7;

    jump pop_biquad_coefs_and_rts;



calcShelf2.jump_entry:



    sp = sp + 6;


    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r5 = 48000;
    r4 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r4 = r5;
 r5 = $user_eq.hi_nyquist_freq_limit;
 r4 = r4 * r5;
    r4 = r4 * 3 (int);
 null = r0 - r4;
 if gt jump substituteBypassFilter.jump_entry;
    r1 = $user_eq.shelf_2_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_2_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = $user_eq.gain_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];
    r0 = r0 lshift 8;
    r0 = r0 ashift -8;

    r1 = $user_eq.shelf_2_lo_gain_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_2_hi_gain_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = m[i0,1];

    r1 = $user_eq.shelf_2_lo_q_limit;
    r0 = max r1;
    r1 = $user_eq.shelf_2_hi_q_limit;
    r0 = min r1;
    r1 = $user_eq.q_param_scale;
    call $kal_float_lib.q_to_float;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call r7;

    jump pop_biquad_coefs_and_rts;



calcPEQ.jump_entry:



    sp = sp + 6;


    r0 = $user_eq.freq_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];

    r5 = 48000;
    r4 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r4 = r5;
 r5 = $user_eq.hi_nyquist_freq_limit;
 r4 = r4 * r5;
    r4 = r4 * 3 (int);
 null = r0 - r4;
 if gt jump substituteBypassFilter.jump_entry;
    r1 = $user_eq.peq_lo_freq_limit;
    r0 = max r1;
    r1 = $user_eq.peq_hi_freq_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = $user_eq.gain_param_scale;
    call $kal_float_lib.int_to_float;
    r2 = r0;
    r3 = r1;
    r0 = m[i0,1];
    r0 = r0 lshift 8;
    r0 = r0 ashift -8;

    r1 = $user_eq.peq_lo_gain_limit;
    r0 = max r1;
    r1 = $user_eq.peq_hi_gain_limit;
    r0 = min r1;
    call $kal_float_lib.int_to_float;
    call $kal_float_lib.div;
    pushm <r0,r1>;


    r0 = m[i0,1];

    r1 = $user_eq.peq_lo_q_limit;
    r0 = max r1;
    r1 = $user_eq.peq_hi_q_limit;
    r0 = min r1;
    r1 = $user_eq.q_param_scale;
    call $kal_float_lib.q_to_float;
    pushm <r0,r1>;

    r1 = 48000;
    r0 = m[$M.set_codec_rate.current_codec_sampling_rate];
    if z r0 = r1;
    call $kal_float_lib.int_to_float;
    pushm <r0,r1>;

    call $kal_filter_coef_lib.calc_peq;

    jump pop_biquad_coefs_and_rts;



substituteBypassFilter.jump_entry:


    call $kal_filter_coef_lib.calc_bypass;

    jump pop_biquad_coefs_and_rts;



pop_biquad_coefs_and_rts:


    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i1,1] = r0;
    pop r0;
    m[i2,1] = r0;

    pop rLink;
    rts;




.endmodule;




.module $M.a2dp_low_latency_msg.SetUserEqParamMsg;
.linefile 925 "user_eq.asm"
    .datasegment dm ;
    .codesegment pm ;

func:

    push rLink ;

    r0 = r1;
    r7 = &$M.system_config.data.UserEqDefnTable;
    call $user_eq.calcParamAddrOffset;
    r0 = r0 + ($M.CVC.data.CurParams + $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ_NUM_BANKS);

    r2 = r2 and 0x00ffff;
    m[r0] = r2;


    null = r3 - 0;
    if eq jump $pop_rLink_and_rts ;

    r0 = r1;
    r1 = &$M.system_config.data.UserEqCoefsA;
    r2 = &$M.system_config.data.UserEqCoefsB;
    r3 = ($M.CVC.data.CurParams + $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ_NUM_BANKS);
    call $user_eq.calcBandCoefs;

    jump $pop_rLink_and_rts ;

.endmodule ;



.module $M.a2dp_low_latency_msg.GetUserEqParamMsg;
.linefile 974 "user_eq.asm"
    .datasegment dm ;
    .codesegment pm ;

func:

    push rLink ;

    r3 = r1;

    r0 = r1;
    r7 = &$M.system_config.data.UserEqDefnTable;
    call $user_eq.calcParamAddrOffset;
    r0 = r0 + ($M.CVC.data.CurParams + $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ_NUM_BANKS);

    r4 = m[r0];
    r5 = 0;
    r6 = 0;
    r2 = $user_eq.GAIAMSG.GET_USER_PARAM_RESP;
    call $message.send_short;

    jump $pop_rLink_and_rts ;

.endmodule ;



.module $M.a2dp_low_latency_msg.SetUserEqGroupParamMsg;
.linefile 1014 "user_eq.asm"
    .datasegment dm ;
    .codesegment pm ;

func:

    push rLink ;

    i0 = r3;
    r1 = m[i0,1];
    r7 = &$M.system_config.data.UserEqDefnTable;
    r10 = r1;
    do SetParamsLoop;
        r0 = m[i0,1];
        call $user_eq.calcParamAddrOffset;
        r0 = r0 + ($M.CVC.data.CurParams + $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ_NUM_BANKS);
        r1 = m[i0,1];
        r1 = r1 and 0x00ffff;
        m[r0] = r1;
    SetParamsLoop:



    jump $pop_rLink_and_rts ;

.endmodule ;



.module $M.a2dp_low_latency_msg.GetUserEqGroupParamMsg;
.linefile 1058 "user_eq.asm"
    .datasegment dm ;
    .codesegment pm ;

func:

    push rLink ;

    i0 = r3;
    r1 = m[i0,1];
    r7 = &$M.system_config.data.UserEqDefnTable;
    r10 = r1;
    do GetParamsLoop;
        r0 = m[i0,1];
        call $user_eq.calcParamAddrOffset;
        r0 = r0 + ($M.CVC.data.CurParams + $M.A2DP_LOW_LATENCY_2MIC.PARAMETERS.OFFSET_USER_EQ_NUM_BANKS);
        r0 = m[r0];
        m[i0,1] = r0;
    GetParamsLoop:

    r5 = r3;
    r4 = r2;
    r3 = $user_eq.GAIAMSG.GET_USER_GROUP_PARAM_RESP;
    call $message.send_long;

    jump $pop_rLink_and_rts ;

.endmodule ;
