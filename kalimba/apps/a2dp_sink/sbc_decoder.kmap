
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF00041                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        1920005D                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0940FE18                 r2 = Null + M[0xfffe18];
0x00001D        D1549464                 r3 = M[r2 + -27548];
0x00001E        01E00080                 rFlags = Null + 128;
0x00001F        E420002F                 r0 = Null + 1;
0x000020        09009684                 Null = Null + M[$interrupt.block_count];
0x000021        00200001                 if NE r0 = Null + Null;
0x000022        1920FE12                 M[0xfffe12] = r0 + Null;
0x000023        E005000F                 call r3;
0x000024        01E00000                 rFlags = Null + 0;
0x000025        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000026        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000027        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000028        1940FE44                 M[0xfffe44] = r2 + Null;
0x000029        85334000                 r1 = r1 OR 0x4000;
0x00002A        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002B        09306685                 r1 = Null + M[$interrupt.total_time];
0x00002C        2933005D                 r1 = r1 - M[$interrupt.start_time];
0x00002D        0933FE71                 r1 = r1 + M[0xfffe71];
0x00002E        19306685                 M[$interrupt.total_time] = r1 + Null;
0x00002F        F104000C                 popm <r0, r1>;
0x000030        1930FE93                 M[0xfffe93] = r1 + Null;
0x000031        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000032        F104001C                 popm <r0, r1, r2>;
0x000033        DC0E000F                 rti;

 <$flash.init_pm>
0x000034        09209380                 r0 = Null + M[$flash.code.address];
0x000035        1920FE83                 M[0xfffe83] = r0 + Null;
0x000036        FD000004 85200000        r0 = Null OR 0x40000;
0x000038        1920FE84                 M[0xfffe84] = r0 + Null;
0x000039        DC0D000F                 rts;

 <$flash.init_dmconst>
0x00003A        09209388                 r0 = Null + M[$flash.data24.address];
0x00003B        1920FE5C                 M[0xfffe5c] = r0 + Null;
0x00003C        01200002                 r0 = Null + 2;
0x00003D        1920FE62                 M[0xfffe62] = r0 + Null;
0x00003E        09209384                 r0 = Null + M[$flash.data16.address];
0x00003F        1920FE5B                 M[0xfffe5b] = r0 + Null;
0x000040        1900FE61                 M[0xfffe61] = Null + Null;
0x000041        DC0D000F                 rts;

 <$pre_main>
0x000042        E1F0FFF2                 call $flash.init_pm;
0x000043        DDF031C2                 jump $main;

 <$cbops.rate_adjustment_and_shift.main>
0x000044        F3D00000                 push rLink;
0x000045        F1F00001                 pushm <FP(=SP)>, SP = SP + 0xf;
0x000046        F1070001                 FP = FP + 1;
0x000047        D14A0000                 r2 = M[r8 + 0];
0x000048        D058004F                 r3 = M[r6 + r2];
0x000049        5040005F                 I4 = Null + r3;
0x00004A        D069004F                 r4 = M[r7 + r2];
0x00004B        50E0006F                 L4 = Null + r4;
0x00004C        D14A0001                 r2 = M[r8 + 1];
0x00004D        D058004F                 r3 = M[r6 + r2];
0x00004E        5050005F                 I5 = Null + r3;
0x00004F        D069004F                 r4 = M[r7 + r2];
0x000050        50F0006F                 L5 = Null + r4;
0x000051        D14A0002                 r2 = M[r8 + 2];
0x000052        F14C0000                 M[FP + 0] = r2;
0x000053        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_right_channel;
0x000054        D058004F                 r3 = M[r6 + r2];
0x000055        F15C0001                 M[FP + 0x1] = r3;
0x000056        D069004F                 r4 = M[r7 + r2];
0x000057        F16C0002                 M[FP + 0x2] = r4;
0x000058        D14A0003                 r2 = M[r8 + 3];
0x000059        D058004F                 r3 = M[r6 + r2];
0x00005A        F15C0004                 M[FP + 0x4] = r3;
0x00005B        D069004F                 r4 = M[r7 + r2];
0x00005C        F16C0005                 M[FP + 0x5] = r4;

 <$M.cbops.rate_adjustment_and_shift.main.no_right_channel>
0x00005D        D19A0004                 r7 = M[r8 + 4];
0x00005E        F19C0007                 M[FP + 0x7] = r7;
0x00005F        D12A0006                 r0 = M[r8 + 6];
0x000060        5000002F                 I0 = Null + r0;
0x000061        0120000C                 r0 = Null + 12;
0x000062        D13A000B                 r1 = M[r8 + 11];
0x000063        00320000                 if EQ r1 = r0 + Null;
0x000064        50C0003F                 L0 = Null + r1;
0x000065        50D0003F                 L1 = Null + r1;
0x000066        D12A0005                 r0 = M[r8 + 5];
0x000067        99330015                 r1 = r1 * 21 (int);
0x000068        8D33007F                 r1 = r1 LSHIFT -1;
0x000069        5032003F                 I3 = r0 + r1;
0x00006A        D12A0008                 r0 = M[r8 + 8];
0x00006B        D062000F                 r4 = M[r0 + Null];
0x00006C        D17A000C                 r5 = M[r8 + 12];
0x00006D        E430002F                 r1 = Null + 1;
0x00006E        2027006F                 r0 = r5 - r4;
0x00006F        20200024                 if NEG r0 = Null - r0;
0x000070        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x000072        21023127                 Null = r0 - 12583;
0x000073        00430004                 if NEG r2 = r1 + Null;
0x000074        21340026                 r1 = r2 - 38;
0x000075        20440035                 if POS r2 = r2 - r1;
0x000076        2037006F                 r1 = r5 - r4;
0x000077        2023004F                 r0 = r1 - r2;
0x000078        20330025                 if POS r1 = r1 - r0;
0x000079        0023004F                 r0 = r1 + r2;
0x00007A        20330024                 if NEG r1 = r1 - r0;
0x00007B        23730000                 r5 = r5 - r1;
0x00007C        D57A000C                 M[r8 + 12] = r5;
0x00007D        01300186                 r1 = Null + 390;
0x00007E        01400197                 r2 = Null + 407;
0x00007F        01500000                 r3 = Null + 0;
0x000080        D12A0009                 r0 = M[r8 + 9];
0x000081        E402003F                 Null = r0 - 1;
0x000082        00530000                 if EQ r3 = r1 + Null;
0x000083        21020002                 Null = r0 - 2;
0x000084        00540000                 if EQ r3 = r2 + Null;
0x000085        4420004F                 r0 = Null + I4;
0x000086        FD0000FF 8122FF80        r0 = r0 AND 0xffff80;
0x000088        FD0000FF 21023780        Null = r0 - -51328;
0x00008A        00500000                 if EQ r3 = Null + Null;
0x00008B        1950968F                 M[$M.cbops.rate_adjustment_and_shift.main.dither_function] = r3 + Null;
0x00008C        F1CC000C                 M[FP + 0xc] = r10;
0x00008D        19C0668F                 M[$M.cbops.rate_adjustment_and_shift.amount_used] = r10 + Null;
0x00008E        D5CA0012                 M[r8 + 18] = r10;
0x00008F        F10C000D                 M[FP + 0xd] = Null;
0x000090        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop>
0x000091        0920968F                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x000092        E11000DC                 if NE call $M.cbops.rate_adjustment_and_shift.main.dither_preset;
0x000093        E1F0002A                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x000094        509000CF                 M1 = Null + r10;
0x000095        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x000096        F138000D                 r1 = M[FP + 0xd];
0x000097        005A003F                 r3 = r8 + r1;
0x000098        4430000F                 r1 = Null + I0;
0x000099        D5350006                 M[r3 + 6] = r1;
0x00009A        0920968F                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x00009B        E11000DC                 if NE call $M.cbops.rate_adjustment_and_shift.main.run_dither_function;
0x00009C        F138000D                 r1 = M[FP + 0xd];
0x00009D        DD100010                 if NE jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x00009E        F1380000                 r1 = M[FP + 0];
0x00009F        DD40000E                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0000A0        D13A0007                 r1 = M[r8 + 7];
0x0000A1        5000003F                 I0 = Null + r1;
0x0000A2        F1380001                 r1 = M[FP + 0x1];
0x0000A3        5040003F                 I4 = Null + r1;
0x0000A4        F1380002                 r1 = M[FP + 0x2];
0x0000A5        50E0003F                 L4 = Null + r1;
0x0000A6        F1380004                 r1 = M[FP + 0x4];
0x0000A7        5050003F                 I5 = Null + r1;
0x0000A8        F1380005                 r1 = M[FP + 0x5];
0x0000A9        50F0003F                 L5 = Null + r1;
0x0000AA        E430002F                 r1 = Null + 1;
0x0000AB        F13C000D                 M[FP + 0xd] = r1;
0x0000AC        DDF0FFE5                 jump $M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.main.finished>
0x0000AD        D56A000D                 M[r8 + 13] = r4;
0x0000AE        6420009F                 r0 = Null - M1;
0x0000AF        D52A000E                 M[r8 + 14] = r0;
0x0000B0        51F00000                 L5 = Null + 0;
0x0000B1        51E00000                 L4 = Null + 0;
0x0000B2        51C00000                 L0 = Null + 0;
0x0000B3        51D00000                 L1 = Null + 0;
0x0000B4        4420007F                 r0 = Null + I7;
0x0000B5        1920668C                 M[$cbops.amount_written] = r0 + Null;
0x0000B6        0940968B                 r2 = Null + M[$cbops.amount_to_use];
0x0000B7        D13AFFFE                 r1 = M[r8 + -2];
0x0000B8        E403002F                 Null = r1 + 1;
0x0000B9        00420001                 if NE r2 = r0 + Null;
0x0000BA        1940968B                 M[$cbops.amount_to_use] = r2 + Null;
0x0000BB        F1F64000                 SP = SP - 0xf, popm <FP>;
0x0000BC        DDF013B6                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.main.sra_resample>
0x0000BD        D17A000C                 r5 = M[r8 + 12];
0x0000BE        F1670008                 r4 = FP + 8;
0x0000BF        5020006F                 I2 = Null + r4;
0x0000C0        D16A000D                 r4 = M[r8 + 13];
0x0000C1        01800015                 r6 = Null + 21;
0x0000C2        70A0008F                 M2 = Null - r6;
0x0000C3        5080008F                 M0 = Null + r6;
0x0000C4        CC16008F                 rMAC = r4 * r6 (SS);
0x0000C5        F1C8000C                 r10 = M[FP + 0xc];
0x0000C6        51700000                 I7 = Null + 0;
0x0000C7        D12A000E                 r0 = M[r8 + 14];
0x0000C8        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.start_gen;
0x0000C9        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0000CA        67CBB100                 r10 = r10 - M3, M[I0,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.start_gen>
0x0000CB        690C0024                 Null = L0 - 36;
0x0000CC        DD00003F                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop;
0x0000CD        690C0001                 Null = L0 - 1;
0x0000CE        DD000096                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_interp_only_loop;
0x0000CF        E5F00039                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x0000D0        8D510018                 r3 = rMAC LSHIFT 24;
0x0000D1        8D55007F                 r3 = r3 LSHIFT -1;
0x0000D2        8D410000                 r2 = rMAC LSHIFT 0;
0x0000D3        5863004F                 I6 = I3 + r2;
0x0000D4        6524FFEA                 r0 = -22 - r2;
0x0000D5        7092004F                 M1 = r0 - r2;
0x0000D6        5810000F                 I1 = I0 + Null;
0x0000D7        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000D8        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000D9        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DA        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DB        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DC        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000DD        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000DE        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000DF        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E0        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E1        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E2        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E3        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x0000E4        79990002                 M1 = M1 - 2;
0x0000E5        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x0000E6        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load;
0x0000E7        71980001                 M1 = r6 - 1;
0x0000E8        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load>
0x0000E9        5863004F                 I6 = I3 + r2;
0x0000EA        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EB        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EC        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000ED        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EE        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EF        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000F0        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F1        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F3        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F5        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F6        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];

 <$M.cbops.rate_adjustment_and_shift.main.continue_resample_proc>
0x0000F7        CF150051                 rMAC = rMAC * r3 (SS), r3 = M[I4,1];
0x0000F8        FD00007F BD13FFFF        rMAC = rMAC - r1 * 0.99999988079071045 (SS);
0x0000FA        00312B0F                 r1 = rMAC + Null, r0 = M[I2,M3];
0x0000FB        93320000                 r1 = r1 ASHIFT r0;

 <$M.cbops.rate_adjustment_and_shift.main.update_ratio>
0x0000FC        226700B7                 r4 = r4 - r5, M[I5,M3] = r1;
0x0000FD        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;
0x0000FE        FD000080 01660000        r4 = r4 + -8388608;
0x000100        0007000F                 Null = r5 + Null;
0x000101        DD400004                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.is_neg_rate;

 <$M.cbops.rate_adjustment_and_shift.main.is_pos_rate>
0x000102        03005353                 Null = Null + Null, r3 = M[I0,-1], r3 = M[I4,-1];
0x000103        47CB5000                 r10 = r10 + M3, r3 = M[I0,0];
0x000104        DDF00003                 jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;

 <$M.cbops.rate_adjustment_and_shift.main.is_neg_rate>
0x000105        66CBD353                 r10 = r10 - M3, M[I0,M3] = r3, r3 = M[I4,M3];
0x000106        DDD00003                 if LE jump $M.cbops.rate_adjustment_and_shift.main.end_rts;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_copy>
0x000107        CC16D38F                 rMAC = r4 * r6 (SS), M[I0,M3] = r3;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_loop>
0x000108        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.end_rts>
0x000109        66CBD300                 r10 = r10 - M3, M[I0,M3] = r3;
0x00010A        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop>
0x00010B        E5F0FFFD                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x00010C        8D510018                 r3 = rMAC LSHIFT 24;
0x00010D        8D55007F                 r3 = r3 LSHIFT -1;
0x00010E        8D410000                 r2 = rMAC LSHIFT 0;
0x00010F        5863004F                 I6 = I3 + r2;
0x000110        6524FFEA                 r0 = -22 - r2;
0x000111        7092004F                 M1 = r0 - r2;
0x000112        5810000F                 I1 = I0 + Null;
0x000113        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x000114        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000115        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000116        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000117        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000118        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000119        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011A        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011E        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011F        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000120        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000121        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000122        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000123        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000124        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000125        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000126        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000127        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000128        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000129        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012E        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012F        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000130        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000131        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000132        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000133        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000134        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000135        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000136        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000137        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x000138        79990002                 M1 = M1 - 2;
0x000139        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x00013A        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd;
0x00013B        71980001                 M1 = r6 - 1;
0x00013C        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd>
0x00013D        5863004F                 I6 = I3 + r2;
0x00013E        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x00013F        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000140        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000141        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000142        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000143        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000144        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000145        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000146        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000147        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000148        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000149        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014A        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014B        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014C        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014D        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014E        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014F        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000150        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000151        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000152        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000153        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000154        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000155        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000156        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000157        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000158        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000159        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015A        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015B        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015C        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015D        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015E        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015F        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000160        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000161        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000162        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];
0x000163        DDF0FF94                 jump $M.cbops.rate_adjustment_and_shift.main.continue_resample_proc;

 <$M.cbops.rate_adjustment_and_shift.main.run_interp_only_loop>
0x000164        F1880007                 r6 = M[FP + 0x7];
0x000165        E5F0FFA3                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x000166        5E7B0053                 I7 = I7 + M3, r3 = M[I4,M3];
0x000167        CF563000                 rMAC = r3 * r4 (SS), r1 = M[I0,0];
0x000168        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x000169        FD00007F AD15FFFF        rMAC = rMAC + r3 * 0.99999988079071045 (SS);
0x00016B        0031000F                 r1 = rMAC + Null;
0x00016C        93380000                 r1 = r1 ASHIFT r6;
0x00016D        DDF0FF8F                 jump $M.cbops.rate_adjustment_and_shift.main.update_ratio;

 <$M.cbops.rate_adjustment_and_shift.main.dither_preset>
0x00016E        4420005F                 r0 = Null + I5;
0x00016F        F12C0009                 M[FP + 0x9] = r0;
0x000170        442000FF                 r0 = Null + L5;
0x000171        F12C000A                 M[FP + 0xa] = r0;
0x000172        51F00000                 L5 = Null + 0;
0x000173        FD0000FF 51503780        I5 = Null + -51328;
0x000175        F10C0007                 M[FP + 0x7] = Null;
0x000176        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_dither_function>
0x000177        09406690                 r2 = Null + M[$M.cbops.rate_adjustment_and_shift.main.rand_num];
0x000178        FD0000FF 51203780        I2 = Null + -51328;
0x00017A        44C0007F                 r10 = Null + I7;
0x00017B        F1380009                 r1 = M[FP + 0x9];
0x00017C        5050003F                 I5 = Null + r1;
0x00017D        F138000A                 r1 = M[FP + 0xa];
0x00017E        50F0003F                 L5 = Null + r1;
0x00017F        D19A0004                 r7 = M[r8 + 4];
0x000180        FD00007F 0170FFFF        r5 = Null + 8388607;
0x000182        6589FFE8                 r6 = -24 - r7;
0x000183        9087008F                 r6 = r5 ASHIFT r6;
0x000184        51A00011                 M2 = Null + 17;
0x000185        DC02000F                 jump r0;

 <$sra.tpdf_dither_func>
0x000186        01503555                 r3 = Null + 13653;
0x000187        FD0000FF 516036FB        I6 = Null + -51461;
0x000189        03001900                 Null = Null + Null, rMAC = M[I2,1];
0x00018A        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x00018B        E5F00009                 do $M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop;
0x00018C        9B450000                 r2 = r2 * r3 (int);
0x00018D        474A0000                 r2 = r2 + M2;
0x00018E        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x00018F        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x000190        9B450098                 r2 = r2 * r3 (int), M[I6,0] = rMAC;
0x000191        474A0038                 r2 = r2 + M2, r1 = M[I6,0];
0x000192        93391900                 r1 = r1 ASHIFT r7, rMAC = M[I2,1];
0x000193        AF4800B5                 rMAC = rMAC + r2 * r6 (SS), M[I5,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop>
0x000194        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x000195        19406690                 M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x000196        DC0D000F                 rts;

 <$sra.noiseshaped_dither_func>
0x000197        F3600000                 push r4;
0x000198        F168000D                 r4 = M[FP + 0xd];
0x000199        002A006F                 r0 = r8 + r4;
0x00019A        FD0000FF 19803702        M[0xff3702] = r6 + Null;
0x00019C        D1220010                 r0 = M[r0 + 16];
0x00019D        511201B8                 I1 = r0 + 440;
0x00019E        013201C0                 r1 = r0 + 448;
0x00019F        0006000F                 Null = r4 + Null;
0x0001A0        50100031                 if NE I1 = Null + r1;
0x0001A1        51D00005                 L1 = Null + 5;
0x0001A2        FD0000FF 516036FC        I6 = Null + -51460;
0x0001A4        5180FFFA                 M0 = Null + -6;
0x0001A5        01603555                 r4 = Null + 13653;
0x0001A6        FD0000FF 198036FB        M[0xff36fb] = r6 + Null;
0x0001A8        95886000                 r6 = r6 * 0.75 (frac);
0x0001A9        E450003F                 r3 = Null - 1;
0x0001AA        2020009F                 r0 = Null - r7;
0x0001AB        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0001AC        E5F00011                 do $M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop;
0x0001AD        9B461929                 r2 = r2 * r4 (int), rMAC = M[I2,1], r0 = M[I6,1];
0x0001AE        474AB700                 r2 = r2 + M2, M[I1,-1] = r1;
0x0001AF        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B0        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B1        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B2        BF323429                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I6,1];
0x0001B3        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x0001B4        AF480098                 rMAC = rMAC + r2 * r6 (SS), M[I6,0] = rMAC;
0x0001B5        9B460029                 r2 = r2 * r4 (int), r0 = M[I6,1];
0x0001B6        474A0000                 r2 = r2 + M2;
0x0001B7        AE480038                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I6,M0];
0x0001B8        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x0001B9        8031005F                 r1 = rMAC AND r3;
0x0001BA        90E3009F                 rMAC = r1 ASHIFT r7;
0x0001BB        23320095                 r1 = r1 - r0, M[I5,1] = rMAC;
0x0001BC        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop>
0x0001BD        19406690                 M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x0001BE        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x0001BF        F168000D                 r4 = M[FP + 0xd];
0x0001C0        002A006F                 r0 = r8 + r4;
0x0001C1        4430001F                 r1 = Null + I1;
0x0001C2        81330007                 r1 = r1 AND 0x7;
0x0001C3        D5320010                 M[r0 + 16] = r1;
0x0001C4        58DC000F                 L1 = L0 + Null;
0x0001C5        F3640000                 pop r4;
0x0001C6        DC0D000F                 rts;

 <$spkr_ctrl_system.process>
0x0001C7        F3D00000                 push rLink;
0x0001C8        D1290009                 r0 = M[r7 + 9];
0x0001C9        D3200000                 r0 = M[r0 + Null];
0x0001CA        D139000A                 r1 = M[r7 + 10];
0x0001CB        8002003F                 Null = r0 AND r1;
0x0001CC        DD1000EC                 if NE jump $M.spkr_ctrl_system.processing.bypass;
0x0001CD        D1A9000B                 r8 = M[r7 + 11];
0x0001CE        D1290000                 r0 = M[r7 + 0];
0x0001CF        E1F0012F                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001D0        00C5000F                 r10 = r3 + Null;
0x0001D1        D1290008                 r0 = M[r7 + 8];
0x0001D2        5020002F                 I2 = Null + r0;
0x0001D3        D1290006                 r0 = M[r7 + 6];
0x0001D4        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.clearBassBuffer;
0x0001D5        E1F00129                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001D6        5000002F                 I0 = Null + r0;
0x0001D7        50C0003F                 L0 = Null + r1;
0x0001D8        E5F00003                 do $M.spkr_ctrl_system.processing.inputLFEcopyLoop;
0x0001D9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0001DA        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.inputLFEcopyLoop>
0x0001DB        DDF00004                 jump $M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR;

 <$M.spkr_ctrl_system.processing.clearBassBuffer>
0x0001DC        01200000                 r0 = Null + 0;
0x0001DD        E5F00002                 do $M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR;
0x0001DE        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR>
0x0001DF        D1290000                 r0 = M[r7 + 0];
0x0001E0        E1F0011E                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001E1        5000002F                 I0 = Null + r0;
0x0001E2        50C0003F                 L0 = Null + r1;
0x0001E3        00C5000F                 r10 = r3 + Null;
0x0001E4        F3C00000                 push r10;
0x0001E5        D1290001                 r0 = M[r7 + 1];
0x0001E6        E1F00118                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001E7        5040002F                 I4 = Null + r0;
0x0001E8        50E0003F                 L4 = Null + r1;
0x0001E9        D1290008                 r0 = M[r7 + 8];
0x0001EA        5020002F                 I2 = Null + r0;
0x0001EB        F3A00000                 push r8;
0x0001EC        D1AA0006                 r8 = M[r8 + 6];
0x0001ED        D15A000C                 r3 = M[r8 + 12];
0x0001EE        D16A000D                 r4 = M[r8 + 13];
0x0001EF        D17A000E                 r5 = M[r8 + 14];
0x0001F0        F3A40000                 pop r8;
0x0001F1        E5F00007                 do $M.spkr_ctrl_system.processing.createBassLoop;
0x0001F2        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0001F3        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x0001F4        AF262800                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,0];
0x0001F5        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x0001F6        91210002                 r0 = rMAC ASHIFT 2;
0x0001F7        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.createBassLoop>
0x0001F8        F3640000                 pop r4;
0x0001F9        D12A0005                 r0 = M[r8 + 5];
0x0001FA        DD00000A                 if EQ jump $M.spkr_ctrl_system.processing.dontFilterBass;
0x0001FB        F1000600                 pushm <r7, r8>;
0x0001FC        0092000F                 r7 = r0 + Null;
0x0001FD        D1290000                 r0 = M[r7 + 0];
0x0001FE        5000002F                 I0 = Null + r0;
0x0001FF        5040002F                 I4 = Null + r0;
0x000200        51C00000                 L0 = Null + 0;
0x000201        51E00000                 L4 = Null + 0;
0x000202        E1F009DB                 call $audio_proc.hq_peq.process_op;
0x000203        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontFilterBass>
0x000204        D1290002                 r0 = M[r7 + 2];
0x000205        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftPriOutput;
0x000206        D1290000                 r0 = M[r7 + 0];
0x000207        E1F000F7                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000208        5000002F                 I0 = Null + r0;
0x000209        50C0003F                 L0 = Null + r1;
0x00020A        00C5000F                 r10 = r3 + Null;
0x00020B        D1290001                 r0 = M[r7 + 1];
0x00020C        E1F000F2                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00020D        5040002F                 I4 = Null + r0;
0x00020E        50E0003F                 L4 = Null + r1;
0x00020F        D1290008                 r0 = M[r7 + 8];
0x000210        5020002F                 I2 = Null + r0;
0x000211        D1290002                 r0 = M[r7 + 2];
0x000212        005C000F                 r3 = r10 + Null;
0x000213        E1F0125D                 call $frmbuffer.set_frame_size;
0x000214        E1F000EA                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000215        5010002F                 I1 = Null + r0;
0x000216        50D0003F                 L1 = Null + r1;
0x000217        F3A00000                 push r8;
0x000218        D1AA0006                 r8 = M[r8 + 6];
0x000219        D15A0000                 r3 = M[r8 + 0];
0x00021A        D16A0001                 r4 = M[r8 + 1];
0x00021B        D17A0002                 r5 = M[r8 + 2];
0x00021C        F3A40000                 pop r8;
0x00021D        E5F00007                 do $M.spkr_ctrl_system.processing.createLeftPriOutLoop;
0x00021E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00021F        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000220        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000221        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000222        91210002                 r0 = rMAC ASHIFT 2;
0x000223        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createLeftPriOutLoop>
0x000224        D12A0001                 r0 = M[r8 + 1];
0x000225        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftPriOutput;
0x000226        F1000600                 pushm <r7, r8>;
0x000227        0092000F                 r7 = r0 + Null;
0x000228        E1F009A9                 call $audio_proc.hq_peq.process;
0x000229        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateLeftPriOutput>
0x00022A        D1290003                 r0 = M[r7 + 3];
0x00022B        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightPriOutput;
0x00022C        D1290000                 r0 = M[r7 + 0];
0x00022D        E1F000D1                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00022E        5000002F                 I0 = Null + r0;
0x00022F        50C0003F                 L0 = Null + r1;
0x000230        00C5000F                 r10 = r3 + Null;
0x000231        D1290001                 r0 = M[r7 + 1];
0x000232        E1F000CC                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000233        5040002F                 I4 = Null + r0;
0x000234        50E0003F                 L4 = Null + r1;
0x000235        D1290008                 r0 = M[r7 + 8];
0x000236        5020002F                 I2 = Null + r0;
0x000237        D1290003                 r0 = M[r7 + 3];
0x000238        005C000F                 r3 = r10 + Null;
0x000239        E1F01237                 call $frmbuffer.set_frame_size;
0x00023A        E1F000C4                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00023B        5010002F                 I1 = Null + r0;
0x00023C        50D0003F                 L1 = Null + r1;
0x00023D        F3A00000                 push r8;
0x00023E        D1AA0006                 r8 = M[r8 + 6];
0x00023F        D15A0003                 r3 = M[r8 + 3];
0x000240        D16A0004                 r4 = M[r8 + 4];
0x000241        D17A0005                 r5 = M[r8 + 5];
0x000242        F3A40000                 pop r8;
0x000243        E5F00007                 do $M.spkr_ctrl_system.processing.createRightPriOutLoop;
0x000244        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000245        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000246        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000247        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000248        91210002                 r0 = rMAC ASHIFT 2;
0x000249        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createRightPriOutLoop>
0x00024A        D12A0002                 r0 = M[r8 + 2];
0x00024B        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightPriOutput;
0x00024C        F1000600                 pushm <r7, r8>;
0x00024D        0092000F                 r7 = r0 + Null;
0x00024E        E1F00983                 call $audio_proc.hq_peq.process;
0x00024F        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateRightPriOutput>
0x000250        D1290004                 r0 = M[r7 + 4];
0x000251        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftSecOutput;
0x000252        D1290000                 r0 = M[r7 + 0];
0x000253        E1F000AB                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000254        5000002F                 I0 = Null + r0;
0x000255        50C0003F                 L0 = Null + r1;
0x000256        00C5000F                 r10 = r3 + Null;
0x000257        D1290001                 r0 = M[r7 + 1];
0x000258        E1F000A6                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000259        5040002F                 I4 = Null + r0;
0x00025A        50E0003F                 L4 = Null + r1;
0x00025B        D1290008                 r0 = M[r7 + 8];
0x00025C        5020002F                 I2 = Null + r0;
0x00025D        D1290004                 r0 = M[r7 + 4];
0x00025E        005C000F                 r3 = r10 + Null;
0x00025F        E1F01211                 call $frmbuffer.set_frame_size;
0x000260        E1F0009E                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000261        5010002F                 I1 = Null + r0;
0x000262        50D0003F                 L1 = Null + r1;
0x000263        F3A00000                 push r8;
0x000264        D1AA0006                 r8 = M[r8 + 6];
0x000265        D15A0006                 r3 = M[r8 + 6];
0x000266        D16A0007                 r4 = M[r8 + 7];
0x000267        D17A0008                 r5 = M[r8 + 8];
0x000268        F3A40000                 pop r8;
0x000269        E5F00007                 do $M.spkr_ctrl_system.processing.createLeftSecOutLoop;
0x00026A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00026B        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x00026C        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x00026D        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x00026E        91210002                 r0 = rMAC ASHIFT 2;
0x00026F        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createLeftSecOutLoop>
0x000270        D12A0003                 r0 = M[r8 + 3];
0x000271        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftSecOutput;
0x000272        F1000600                 pushm <r7, r8>;
0x000273        0092000F                 r7 = r0 + Null;
0x000274        E1F0095D                 call $audio_proc.hq_peq.process;
0x000275        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateLeftSecOutput>
0x000276        D1290005                 r0 = M[r7 + 5];
0x000277        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightSecOutput;
0x000278        D1290000                 r0 = M[r7 + 0];
0x000279        E1F00085                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00027A        5000002F                 I0 = Null + r0;
0x00027B        50C0003F                 L0 = Null + r1;
0x00027C        00C5000F                 r10 = r3 + Null;
0x00027D        D1290001                 r0 = M[r7 + 1];
0x00027E        E1F00080                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00027F        5040002F                 I4 = Null + r0;
0x000280        50E0003F                 L4 = Null + r1;
0x000281        D1290008                 r0 = M[r7 + 8];
0x000282        5020002F                 I2 = Null + r0;
0x000283        D1290005                 r0 = M[r7 + 5];
0x000284        005C000F                 r3 = r10 + Null;
0x000285        E1F011EB                 call $frmbuffer.set_frame_size;
0x000286        E1F00078                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000287        5010002F                 I1 = Null + r0;
0x000288        50D0003F                 L1 = Null + r1;
0x000289        F3A00000                 push r8;
0x00028A        D1AA0006                 r8 = M[r8 + 6];
0x00028B        D15A0009                 r3 = M[r8 + 9];
0x00028C        D16A000A                 r4 = M[r8 + 10];
0x00028D        D17A000B                 r5 = M[r8 + 11];
0x00028E        F3A40000                 pop r8;
0x00028F        E5F00007                 do $M.spkr_ctrl_system.processing.createRightSecOutLoop;
0x000290        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000291        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000292        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000293        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000294        91210002                 r0 = rMAC ASHIFT 2;
0x000295        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createRightSecOutLoop>
0x000296        D12A0004                 r0 = M[r8 + 4];
0x000297        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightSecOutput;
0x000298        F1000600                 pushm <r7, r8>;
0x000299        0092000F                 r7 = r0 + Null;
0x00029A        E1F00937                 call $audio_proc.hq_peq.process;
0x00029B        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateRightSecOutput>
0x00029C        D1290007                 r0 = M[r7 + 7];
0x00029D        DD000015                 if EQ jump $M.spkr_ctrl_system.processing.createSubOutLoop;
0x00029E        D1290000                 r0 = M[r7 + 0];
0x00029F        E1F0005F                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002A0        00C5000F                 r10 = r3 + Null;
0x0002A1        D1290008                 r0 = M[r7 + 8];
0x0002A2        5020002F                 I2 = Null + r0;
0x0002A3        D1290007                 r0 = M[r7 + 7];
0x0002A4        005C000F                 r3 = r10 + Null;
0x0002A5        E1F011CB                 call $frmbuffer.set_frame_size;
0x0002A6        E1F00058                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002A7        5010002F                 I1 = Null + r0;
0x0002A8        50D0003F                 L1 = Null + r1;
0x0002A9        F3A00000                 push r8;
0x0002AA        D1AA0006                 r8 = M[r8 + 6];
0x0002AB        D15A000F                 r3 = M[r8 + 15];
0x0002AC        F3A40000                 pop r8;
0x0002AD        E5F00005                 do $M.spkr_ctrl_system.processing.createSubOutLoop;
0x0002AE        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0002AF        CC12005F                 rMAC = r0 * r3 (SS);
0x0002B0        91210002                 r0 = rMAC ASHIFT 2;
0x0002B1        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createSubOutLoop>
0x0002B2        51C00000                 L0 = Null + 0;
0x0002B3        51D00000                 L1 = Null + 0;
0x0002B4        51E00000                 L4 = Null + 0;
0x0002B5        51F00000                 L5 = Null + 0;
0x0002B6        F3D40000                 pop rLink;
0x0002B7        DC0D000F                 rts;

 <$M.spkr_ctrl_system.processing.bypass>
0x0002B8        D1290000                 r0 = M[r7 + 0];
0x0002B9        E1F00045                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002BA        5000002F                 I0 = Null + r0;
0x0002BB        50C0003F                 L0 = Null + r1;
0x0002BC        00C5000F                 r10 = r3 + Null;
0x0002BD        D1290001                 r0 = M[r7 + 1];
0x0002BE        E1F00040                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002BF        5040002F                 I4 = Null + r0;
0x0002C0        50E0003F                 L4 = Null + r1;
0x0002C1        D1290002                 r0 = M[r7 + 2];
0x0002C2        005C000F                 r3 = r10 + Null;
0x0002C3        E1F011AD                 call $frmbuffer.set_frame_size;
0x0002C4        E1F0003A                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002C5        5010002F                 I1 = Null + r0;
0x0002C6        50D0003F                 L1 = Null + r1;
0x0002C7        D1290003                 r0 = M[r7 + 3];
0x0002C8        005C000F                 r3 = r10 + Null;
0x0002C9        E1F011A7                 call $frmbuffer.set_frame_size;
0x0002CA        E1F00034                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002CB        5050002F                 I5 = Null + r0;
0x0002CC        50F0003F                 L5 = Null + r1;
0x0002CD        F3C00000                 push r10;
0x0002CE        E5F00003                 do $M.spkr_ctrl_system.processing.copyLRinToLRoutLoop;
0x0002CF        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0002D0        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.spkr_ctrl_system.processing.copyLRinToLRoutLoop>
0x0002D1        F3C40000                 pop r10;
0x0002D2        D1290007                 r0 = M[r7 + 7];
0x0002D3        DD000013                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;
0x0002D4        005C000F                 r3 = r10 + Null;
0x0002D5        E1F0119B                 call $frmbuffer.set_frame_size;
0x0002D6        E1F00028                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002D7        00C5000F                 r10 = r3 + Null;
0x0002D8        5010002F                 I1 = Null + r0;
0x0002D9        50D0003F                 L1 = Null + r1;
0x0002DA        D1290006                 r0 = M[r7 + 6];
0x0002DB        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearSubOutput;
0x0002DC        E1F00022                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002DD        5000002F                 I0 = Null + r0;
0x0002DE        50C0003F                 L0 = Null + r1;
0x0002DF        E5F00003                 do $M.spkr_ctrl_system.processing.bypassLFEcopyLoop;
0x0002E0        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0002E1        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassLFEcopyLoop>
0x0002E2        DDF00004                 jump $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;

 <$M.spkr_ctrl_system.processing.bypassClearSubOutput>
0x0002E3        01200000                 r0 = Null + 0;
0x0002E4        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;
0x0002E5        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearSubOutputLoop>
0x0002E6        D1290004                 r0 = M[r7 + 4];
0x0002E7        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop;
0x0002E8        E1F00016                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002E9        00C5000F                 r10 = r3 + Null;
0x0002EA        5010002F                 I1 = Null + r0;
0x0002EB        50D0003F                 L1 = Null + r1;
0x0002EC        01200000                 r0 = Null + 0;
0x0002ED        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop;
0x0002EE        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop>
0x0002EF        D1290005                 r0 = M[r7 + 5];
0x0002F0        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop;
0x0002F1        E1F0000D                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002F2        00C5000F                 r10 = r3 + Null;
0x0002F3        5010002F                 I1 = Null + r0;
0x0002F4        50D0003F                 L1 = Null + r1;
0x0002F5        01200000                 r0 = Null + 0;
0x0002F6        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop;
0x0002F7        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop>
0x0002F8        51C00000                 L0 = Null + 0;
0x0002F9        51D00000                 L1 = Null + 0;
0x0002FA        51E00000                 L4 = Null + 0;
0x0002FB        51F00000                 L5 = Null + 0;
0x0002FC        F3D40000                 pop rLink;
0x0002FD        DC0D000F                 rts;

 <$M.spkr_ctrl_system.processing.get_ptrs>
0x0002FE        F3D00000                 push rLink;
0x0002FF        E1F01145                 call $frmbuffer.get_buffer;
0x000300        F3D40000                 pop rLink;
0x000301        DC0D000F                 rts;

 <$cbops.auto_upsample_and_mix.main>
0x000302        F3D00000                 push rLink;
0x000303        FD000000 0150BB80        r3 = Null + 48000;
0x000305        01601F40                 r4 = Null + 8000;
0x000306        D13A0006                 r1 = M[r8 + 6];
0x000307        D0330001                 if NE r1 = M[r1 + Null];
0x000308        00360000                 if EQ r1 = r4 + Null;
0x000309        D14A0004                 r2 = M[r8 + 4];
0x00030A        D0440001                 if NE r2 = M[r2 + Null];
0x00030B        00450000                 if EQ r2 = r3 + Null;
0x00030C        D12A000B                 r0 = M[r8 + 11];
0x00030D        2002003F                 Null = r0 - r1;
0x00030E        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_set_up;
0x00030F        D12A000A                 r0 = M[r8 + 10];
0x000310        2002004F                 Null = r0 - r2;
0x000311        DD00001E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_up_done;

 <$M.cbops.auto_upsample_and_mix.main.do_set_up>
0x000312        D53A000B                 M[r8 + 11] = r1;
0x000313        D54A000A                 M[r8 + 10] = r2;
0x000314        D50A000C                 M[r8 + 12] = Null;
0x000315        FD00007F 0120FFFF        r0 = Null + 8388607;
0x000317        D52A0009                 M[r8 + 9] = r0;
0x000318        E460002F                 r4 = Null + 1;
0x000319        FD000073 95233333        r0 = r1 * 0.89999997615814209 (frac);
0x00031B        2004002F                 Null = r2 - r0;
0x00031C        DD400012                 if NEG jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x00031D        01600002                 r4 = Null + 2;
0x00031E        E450002F                 r3 = Null + 1;
0x00031F        2003004F                 Null = r1 - r2;
0x000320        DD00000E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x000321        00500004                 if NEG r3 = Null + Null;
0x000322        2033004C                 if GT r1 = r1 - r2;
0x000323        D55A000C                 M[r8 + 12] = r3;
0x000324        0013000F                 rMAC = r1 + Null;
0x000325        91340001                 r1 = r2 ASHIFT 1;
0x000326        D9030000                 Div = rMAC / r1;
0x000327        D9200001                 r0 = DivResult;
0x000328        D9300002                 r1 = DivRemainder;
0x000329        E450002F                 r3 = Null + 1;
0x00032A        2003004F                 Null = r1 - r2;
0x00032B        00220055                 if POS r0 = r0 + r3;
0x00032C        D52A0009                 M[r8 + 9] = r0;
0x00032D        01600000                 r4 = Null + 0;

 <$M.cbops.auto_upsample_and_mix.main.set_opmode>
0x00032E        D56A0011                 M[r8 + 17] = r4;

 <$M.cbops.auto_upsample_and_mix.main.set_up_done>
0x00032F        D12A0002                 r0 = M[r8 + 2];
0x000330        E1F010E0                 call $cbuffer.calc_amount_data;
0x000331        D13A0009                 r1 = M[r8 + 9];
0x000332        D15A000C                 r3 = M[r8 + 12];
0x000333        9B5C0000                 r3 = r3 * r10 (int);
0x000334        973C0000                 r1 = r1 * r10 (frac);
0x000335        E433002F                 r1 = r1 + 1;
0x000336        03350000                 r1 = r1 + r3;
0x000337        D14A0010                 r2 = M[r8 + 16];
0x000338        E444002F                 r2 = r2 + 1;
0x000339        D16A000F                 r4 = M[r8 + 15];
0x00033A        DD000004                 if EQ jump $M.cbops.auto_upsample_and_mix.main.no_tone;
0x00033B        0002000F                 Null = r0 + Null;
0x00033C        00400001                 if NE r2 = Null + Null;
0x00033D        DDF00003                 jump $M.cbops.auto_upsample_and_mix.main.set_new_state;

 <$M.cbops.auto_upsample_and_mix.main.no_tone>
0x00033E        2002003F                 Null = r0 - r1;
0x00033F        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.set_new_state>
0x000340        0026000F                 r0 = r4 + Null;
0x000341        E450002F                 r3 = Null + 1;
0x000342        21040003                 Null = r2 - 3;
0x000343        88660055                 if POS r4 = r4 XOR r3;
0x000344        FD00007F 0130FFFF        r1 = Null + 8388607;
0x000346        D15A000E                 r3 = M[r8 + 14];
0x000347        2006002F                 Null = r4 - r0;
0x000348        00530001                 if NE r3 = r1 + Null;
0x000349        D54A0010                 M[r8 + 16] = r2;
0x00034A        D55A000E                 M[r8 + 14] = r3;
0x00034B        D56A000F                 M[r8 + 15] = r4;
0x00034C        8406005F                 Null = r4 OR r3;
0x00034D        DD001125                 if EQ jump $pop_rLink_and_rts;
0x00034E        D12A0002                 r0 = M[r8 + 2];
0x00034F        E1F010E0                 call $cbuffer.get_read_address_and_size;
0x000350        5000002F                 I0 = Null + r0;
0x000351        50C0003F                 L0 = Null + r1;
0x000352        51D0000C                 L1 = Null + 12;
0x000353        D12A0005                 r0 = M[r8 + 5];
0x000354        5010002F                 I1 = Null + r0;
0x000355        D12A0000                 r0 = M[r8 + 0];
0x000356        D038002F                 r1 = M[r6 + r0];
0x000357        5040003F                 I4 = Null + r1;
0x000358        D039002F                 r1 = M[r7 + r0];
0x000359        50E0003F                 L4 = Null + r1;
0x00035A        51506691                 I5 = Null + 26257;
0x00035B        51F00001                 L5 = Null + 1;
0x00035C        D12A0001                 r0 = M[r8 + 1];
0x00035D        DD400005                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_right_channel;
0x00035E        D038002F                 r1 = M[r6 + r0];
0x00035F        5050003F                 I5 = Null + r1;
0x000360        D039002F                 r1 = M[r7 + r0];
0x000361        50F0003F                 L5 = Null + r1;

 <$M.cbops.auto_upsample_and_mix.main.no_right_channel>
0x000362        D16A0008                 r4 = M[r8 + 8];
0x000363        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000365        D14A000E                 r2 = M[r8 + 14];
0x000366        DD000017                 if EQ jump $M.cbops.auto_upsample_and_mix.main.do_resample_mix;
0x000367        D10A000F                 Null = M[r8 + 15];
0x000368        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_soft_move;
0x000369        FD00007F 0160FFFF        r4 = Null + 8388607;
0x00036B        D15A0008                 r3 = M[r8 + 8];

 <$M.cbops.auto_upsample_and_mix.main.do_soft_move>
0x00036C        23560000                 r3 = r3 - r4;
0x00036D        FD00007F 0180FFFF        r6 = Null + 8388607;
0x00036F        FD000002 0170AAAB        r5 = Null + 174763;
0x000371        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.soft_move_loop;
0x000372        CF450020                 rMAC = r2 * r3 (SS), r0 = M[I4,0];
0x000373        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x000374        97210034                 r0 = r0 * rMAC (frac), r1 = M[I5,0];
0x000375        973100A1                 r1 = r1 * rMAC (frac), M[I4,1] = r0;
0x000376        234700B5                 r2 = r2 - r5, M[I5,1] = r1;
0x000377        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.soft_move_loop>
0x000378        D54A000E                 M[r8 + 14] = r2;
0x000379        DDF010F9                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.end_soft_move>
0x00037A        01400000                 r2 = Null + 0;
0x00037B        D54A000E                 M[r8 + 14] = r2;
0x00037C        DDF010F6                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.do_resample_mix>
0x00037D        D12A0011                 r0 = M[r8 + 17];
0x00037E        21020000                 Null = r0 - 0;
0x00037F        DD00001F                 if EQ jump $M.cbops.auto_upsample_and_mix.main.resampling_op;
0x000380        21020002                 Null = r0 - 2;
0x000381        DD000003                 if EQ jump $M.cbops.auto_upsample_and_mix.main.justmix_op;

 <$M.cbops.auto_upsample_and_mix.main.ignore_op>
0x000382        009C000F                 r7 = r10 + Null;
0x000383        DDF0006D                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.justmix_op>
0x000384        009C000F                 r7 = r10 + Null;
0x000385        D12A0002                 r0 = M[r8 + 2];
0x000386        E1F0108A                 call $cbuffer.calc_amount_data;
0x000387        E4C2005F                 r10 = MIN r0;
0x000388        204900CF                 r2 = r7 - r10;
0x000389        D16A0007                 r4 = M[r8 + 7];
0x00038A        D17A0008                 r5 = M[r8 + 8];
0x00038B        009C000F                 r7 = r10 + Null;
0x00038C        03002000                 Null = Null + Null, r0 = M[I0,0];
0x00038D        FD00007F 0180FFFF        r6 = Null + 8388607;
0x00038F        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.just_mix_loop;
0x000390        9726A550                 r0 = r0 * r4 (frac), M[I1,1] = r0, r3 = M[I4,0];
0x000391        CF750034                 rMAC = r5 * r3 (SS), r1 = M[I5,0];
0x000392        AF285100                 rMAC = rMAC + r0 * r6 (SS), r3 = M[I0,1];
0x000393        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x000394        AF282000                 rMAC = rMAC + r0 * r6 (SS), r0 = M[I0,0];
0x000395        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_loop>
0x000396        00C4000F                 r10 = r2 + Null;
0x000397        01200000                 r0 = Null + 0;
0x000398        E5F00005                 do $M.cbops.auto_upsample_and_mix.main.just_mix_zero_loop;
0x000399        0300A550                 Null = Null + Null, M[I1,1] = r0, r3 = M[I4,0];
0x00039A        CF755134                 rMAC = r5 * r3 (SS), r3 = M[I0,1], r1 = M[I5,0];
0x00039B        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x00039C        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_zero_loop>
0x00039D        DDF00053                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.resampling_op>
0x00039E        D17A0003                 r5 = M[r8 + 3];
0x00039F        5137007E                 I3 = r5 + 126;
0x0003A0        D17A0009                 r5 = M[r8 + 9];
0x0003A1        D16A000D                 r4 = M[r8 + 13];
0x0003A2        51B00001                 M3 = Null + 1;
0x0003A3        01800015                 r6 = Null + 21;
0x0003A4        70A0008F                 M2 = Null - r6;
0x0003A5        5080008F                 M0 = Null + r6;
0x0003A6        01900000                 r7 = Null + 0;
0x0003A7        D10A000C                 Null = M[r8 + 12];
0x0003A8        DD000006                 if EQ jump $M.cbops.auto_upsample_and_mix.main.upsampling;

 <$M.cbops.auto_upsample_and_mix.main.downsampling>
0x0003A9        E5F00044                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;
0x0003AA        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0003AB        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0003AC        02009300                 Null = Null + Null, M[I0,M3] = rMAC;
0x0003AD        DDF00002                 jump $M.cbops.auto_upsample_and_mix.main.start_norm;

 <$M.cbops.auto_upsample_and_mix.main.upsampling>
0x0003AE        E5F0003F                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;

 <$M.cbops.auto_upsample_and_mix.main.start_norm>
0x0003AF        03670000                 r4 = r4 + r5;
0x0003B0        DD400006                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_copy;
0x0003B1        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0003B2        FD000080 21660000        r4 = r4 - -8388608;
0x0003B4        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0003B5        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_copy>
0x0003B6        CC16008F                 rMAC = r4 * r6 (SS);
0x0003B7        8D510018                 r3 = rMAC LSHIFT 24;
0x0003B8        8D55007F                 r3 = r3 LSHIFT -1;
0x0003B9        8D410000                 r2 = rMAC LSHIFT 0;
0x0003BA        5863004F                 I6 = I3 + r2;
0x0003BB        6524FFEA                 r0 = -22 - r2;
0x0003BC        7092004F                 M1 = r0 - r2;
0x0003BD        5871000F                 I7 = I1 + Null;
0x0003BE        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0003BF        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C0        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C1        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C2        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C3        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0003C4        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C5        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C6        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C7        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C8        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003C9        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003CA        BF233000                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I0,0];
0x0003CB        79990002                 M1 = M1 - 2;
0x0003CC        474B0000                 r2 = r2 + M3;
0x0003CD        DD400003                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_load;
0x0003CE        71980001                 M1 = r6 - 1;
0x0003CF        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_load>
0x0003D0        5863004F                 I6 = I3 + r2;
0x0003D1        0041000F                 r2 = rMAC + Null;
0x0003D2        0200273A                 Null = Null + Null, r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D3        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D4        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D5        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D6        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D7        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0003D8        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003D9        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DA        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DB        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DC        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DD        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DE        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0003DF        5817000F                 I1 = I7 + Null;
0x0003E0        CF152B00                 rMAC = rMAC * r3 (SS), r0 = M[I2,-1];
0x0003E1        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x0003E3        D14A0007                 r2 = M[r8 + 7];
0x0003E4        97410050                 r2 = r2 * rMAC (frac), r3 = M[I4,0];
0x0003E5        D12A0008                 r0 = M[r8 + 8];
0x0003E6        CF250034                 rMAC = r0 * r3 (SS), r1 = M[I5,0];
0x0003E7        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0003E9        CF320091                 rMAC = r1 * r0 (SS), M[I4,1] = rMAC;
0x0003EA        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0003EC        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop>
0x0003ED        4420001F                 r0 = Null + I1;
0x0003EE        D52A0005                 M[r8 + 5] = r0;
0x0003EF        D56A000D                 M[r8 + 13] = r4;

 <$M.cbops.auto_upsample_and_mix.main.op_done>
0x0003F0        D12A0002                 r0 = M[r8 + 2];
0x0003F1        E1F0101F                 call $cbuffer.calc_amount_data;
0x0003F2        2039002F                 r1 = r7 - r0;
0x0003F3        20990035                 if POS r7 = r7 - r1;
0x0003F4        D12A0002                 r0 = M[r8 + 2];
0x0003F5        E1F0103A                 call $cbuffer.get_read_address_and_size;
0x0003F6        5000002F                 I0 = Null + r0;
0x0003F7        50C0003F                 L0 = Null + r1;
0x0003F8        5080009F                 M0 = Null + r7;
0x0003F9        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0003FA        4430000F                 r1 = Null + I0;
0x0003FB        D12A0002                 r0 = M[r8 + 2];
0x0003FC        E1F0104D                 call $cbuffer.set_read_address;

 <$M.cbops.auto_upsample_and_mix.main.end>
0x0003FD        51E00000                 L4 = Null + 0;
0x0003FE        51D00000                 L1 = Null + 0;
0x0003FF        51C00000                 L0 = Null + 0;
0x000400        51F00000                 L5 = Null + 0;
0x000401        DDF01071                 jump $pop_rLink_and_rts;

 <$sra_tagtimes>
0x000402        F3D00000                 push rLink;
0x000403        0920006F                 r0 = Null + M[$app_config.io];
0x000404        21020005                 Null = r0 - 5;
0x000405        DD000003                 if EQ jump $M.sra_tagtimes.usb_fix;
0x000406        21020008                 Null = r0 - 8;
0x000407        DD100020                 if NE jump $M.sra_tagtimes.calc_a2dp_fix_rate;

 <$M.sra_tagtimes.usb_fix>
0x000408        09202FBF                 r0 = Null + M[0x2fbf];
0x000409        E1F01007                 call $cbuffer.calc_amount_data;
0x00040A        0062000F                 r4 = r0 + Null;
0x00040B        0074000F                 r5 = r2 + Null;
0x00040C        09302FD8                 r1 = Null + M[0x2fd8];
0x00040D        8D660008                 r4 = r4 LSHIFT 8;
0x00040E        FD000001 CD1647AE        rMAC = r4 * 0.0099999904632568359 (SS);
0x000410        FD00007E AD13B852        rMAC = rMAC + r1 * 0.99000000953674316 (SS);
0x000412        19102FD8                 M[0x2fd8] = rMAC + Null;
0x000413        8D770009                 r5 = r5 LSHIFT 9;
0x000414        D9070000                 Div = rMAC / r5;
0x000415        D9600001                 r4 = DivResult;
0x000416        FD000059 6566999A        r4 = 5872026 - r4;
0x000418        FD000019 2126999A        r0 = r4 - 1677722;
0x00041A        20660025                 if POS r4 = r4 - r0;
0x00041B        FD000019 0126999A        r0 = r4 + 1677722;
0x00041D        20660024                 if NEG r4 = r4 - r0;
0x00041E        FD000000 9526A3D7        r0 = r4 * 0.004999995231628418 (frac);
0x000420        09302FD4                 r1 = Null + M[0x2fd4];
0x000421        2062003F                 r4 = r0 - r1;
0x000422        95660400                 r4 = r4 * 0.03125 (frac);
0x000423        03360000                 r1 = r1 + r4;
0x000424        19302FD4                 M[0x2fd4] = r1 + Null;
0x000425        019020C5                 r7 = Null + 8389;
0x000426        DDF00058                 jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.calc_a2dp_fix_rate>
0x000427        09202FBE                 r0 = Null + M[0x2fbe];
0x000428        E1F00FE8                 call $cbuffer.calc_amount_data;
0x000429        0072000F                 r5 = r0 + Null;

 <$M.sra_tagtimes.skip_port_data>
0x00042A        09202FBF                 r0 = Null + M[0x2fbf];
0x00042B        E1F00FE5                 call $cbuffer.calc_amount_data;
0x00042C        03720000                 r5 = r5 + r0;
0x00042D        09772FD3                 r5 = r5 + M[0x2fd3];
0x00042E        19702FD3                 M[0x2fd3] = r5 + Null;
0x00042F        09602FD2                 r4 = Null + M[0x2fd2];
0x000430        E466002F                 r4 = r4 + 1;
0x000431        19602FD2                 M[0x2fd2] = r4 + Null;
0x000432        09302FBD                 r1 = Null + M[$sra_struct];
0x000433        0920964E                 r0 = Null + M[$tag_averaging_fraction];
0x000434        97320000                 r1 = r1 * r0 (frac);
0x000435        2006003F                 Null = r4 - r1;
0x000436        DD400059                 if NEG jump $M.sra_tagtimes.no_update_on_buf_level;
0x000437        019051EC                 r7 = Null + 20972;
0x000438        09002FD7                 Null = Null + M[0x2fd7];
0x000439        DD000002                 if EQ jump $M.sra_tagtimes.no_long_term;
0x00043A        019020C5                 r7 = Null + 8389;

 <$M.sra_tagtimes.no_long_term>
0x00043B        19002FD2                 M[0x2fd2] = Null + Null;
0x00043C        19002FD3                 M[0x2fd3] = Null + Null;
0x00043D        09802FD4                 r6 = Null + M[0x2fd4];
0x00043E        9128007E                 r0 = r6 ASHIFT -2;
0x00043F        39822FD4                 M[0x2fd4] = r6 - r0;
0x000440        09202FBF                 r0 = Null + M[0x2fbf];
0x000441        D3200000                 r0 = M[r0 + Null];
0x000442        9B260000                 r0 = r0 * r4 (int);
0x000443        91E7007F                 rMAC = r5 ASHIFT -1 (MI);
0x000444        D9020000                 Div = rMAC / r0;
0x000445        D9300001                 r1 = DivResult;
0x000446        09602FD8                 r4 = Null + M[0x2fd8];
0x000447        19302FD8                 M[0x2fd8] = r1 + Null;
0x000448        2063006F                 r4 = r1 - r4;
0x000449        FD00007D 210370A4        Null = r1 - 8220836;
0x00044B        DD400009                 if NEG jump $M.sra_tagtimes.not_full;
0x00044C        21281062                 r0 = r6 - 4194;
0x00044D        09322FC1                 r1 = r0 + M[0x2fc1];
0x00044E        20220034                 if NEG r0 = r0 - r1;
0x00044F        FD000001 0132EB85        r1 = r0 + 125829;
0x000451        20220034                 if NEG r0 = r0 - r1;
0x000452        19202FD4                 M[0x2fd4] = r0 + Null;
0x000453        DDF0002B                 jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.not_full>
0x000454        FD00006C 2123CCCD        r0 = r1 - 7130317;
0x000456        DD400007                 if NEG jump $M.sra_tagtimes.check_for_empty;
0x000457        FD0000FE 9522147B        r0 = r0 * -0.014999985694885254 (frac);
0x000459        FD000001 010647AE        Null = r4 + 83886;
0x00045B        00280004                 if NEG r0 = r6 + Null;
0x00045C        DDF0001B                 jump $M.sra_tagtimes.fix_rate;

 <$M.sra_tagtimes.check_for_empty>
0x00045D        FD00004C 2123CCCD        r0 = r1 - 5033165;
0x00045F        DD50001F                 if POS jump $M.sra_tagtimes.set_final_rate;

 <$M.sra_tagtimes.handle_empty>
0x000460        FD000019 0142999A        r2 = r0 + 1677722;
0x000462        20220044                 if NEG r0 = r0 - r2;
0x000463        FD0000FB 9522851F        r0 = r0 * -0.034999966621398926 (frac);
0x000465        FD000006 21066666        Null = r4 - 419430;
0x000467        00280005                 if POS r0 = r6 + Null;
0x000468        FD000002 01468F5C        r2 = r4 + 167772;
0x00046A        DD50000A                 if POS jump $M.sra_tagtimes.no_extra;
0x00046B        FD000006 01546666        r3 = r2 + 419430;
0x00046D        20440055                 if POS r2 = r2 - r3;
0x00046E        FD0000FF 9544BE77        r2 = r2 * -0.001999974250793457 (frac);
0x000470        03480000                 r2 = r2 + r6;
0x000471        2004002F                 Null = r2 - r0;
0x000472        00240005                 if POS r0 = r2 + Null;
0x000473        03240000                 r0 = r0 + r2;

 <$M.sra_tagtimes.no_extra>
0x000474        FD000019 2103999A        Null = r1 - 1677722;
0x000476        00280004                 if NEG r0 = r6 + Null;

 <$M.sra_tagtimes.fix_rate>
0x000477        0038009F                 r1 = r6 + r7;
0x000478        2002003F                 Null = r0 - r1;
0x000479        00230005                 if POS r0 = r1 + Null;
0x00047A        2038009F                 r1 = r6 - r7;
0x00047B        2002003F                 Null = r0 - r1;
0x00047C        00230004                 if NEG r0 = r1 + Null;
0x00047D        19202FD4                 M[0x2fd4] = r0 + Null;

 <$M.sra_tagtimes.set_final_rate>
0x00047E        09202FD5                 r0 = Null + M[0x2fd5];
0x00047F        09222FD4                 r0 = r0 + M[0x2fd4];
0x000480        29322FC1                 r1 = r0 - M[0x2fc1];
0x000481        20220035                 if POS r0 = r0 - r1;
0x000482        09322FC1                 r1 = r0 + M[0x2fc1];
0x000483        20220034                 if NEG r0 = r0 - r1;
0x000484        FD000001 0132EB85        r1 = r0 + 125829;
0x000486        20220034                 if NEG r0 = r0 - r1;
0x000487        09802FCE                 r6 = Null + M[0x2fce];
0x000488        0038009F                 r1 = r6 + r7;
0x000489        2002003F                 Null = r0 - r1;
0x00048A        00230005                 if POS r0 = r1 + Null;
0x00048B        2038009F                 r1 = r6 - r7;
0x00048C        2002003F                 Null = r0 - r1;
0x00048D        00230004                 if NEG r0 = r1 + Null;
0x00048E        19202FCE                 M[0x2fce] = r0 + Null;

 <$M.sra_tagtimes.no_update_on_buf_level>
0x00048F        09202FBE                 r0 = Null + M[0x2fbe];
0x000490        E1F00F80                 call $cbuffer.calc_amount_data;
0x000491        0052000F                 r3 = r0 + Null;
0x000492        09202FC4                 r0 = Null + M[0x2fc4];
0x000493        E422002F                 r0 = r0 + 1;
0x000494        0005000F                 Null = r3 + Null;
0x000495        00200001                 if NE r0 = Null + Null;
0x000496        19202FC4                 M[0x2fc4] = r0 + Null;
0x000497        21020190                 Null = r0 - 400;
0x000498        DD400003                 if NEG jump $M.sra_tagtimes.no_reset_sra;
0x000499        19002FD4                 M[0x2fd4] = Null + Null;
0x00049A        DDF00022                 jump $reset_sra;

 <$M.sra_tagtimes.no_reset_sra>
0x00049B        09202FC5                 r0 = Null + M[0x2fc5];
0x00049C        0130064A                 r1 = Null + 1610;
0x00049D        E422002F                 r0 = r0 + 1;
0x00049E        2002003F                 Null = r0 - r1;
0x00049F        00230005                 if POS r0 = r1 + Null;
0x0004A0        19202FC5                 M[0x2fc5] = r0 + Null;
0x0004A1        09202FC6                 r0 = Null + M[0x2fc6];
0x0004A2        D1223BFE                 r0 = M[r0 + 15358];
0x0004A3        DC02000F                 jump r0;

 <$M.sra_tagtimes.idle>
0x0004A4        09202FC5                 r0 = Null + M[0x2fc5];
0x0004A5        21020640                 Null = r0 - 1600;
0x0004A6        DD500002                 if POS jump $M.sra_tagtimes.start;
0x0004A7        DDF00014                 jump $M.sra_tagtimes.end;

 <$M.sra_tagtimes.start>
0x0004A8        09202FBF                 r0 = Null + M[0x2fbf];
0x0004A9        E1F00F8B                 call $cbuffer.get_write_address_and_size;
0x0004AA        19202FC7                 M[0x2fc7] = r0 + Null;
0x0004AB        E420002F                 r0 = Null + 1;
0x0004AC        19202FC6                 M[0x2fc6] = r0 + Null;
0x0004AD        19002FC9                 M[0x2fc9] = Null + Null;

 <$M.sra_tagtimes.counting>
0x0004AE        09202FC9                 r0 = Null + M[0x2fc9];
0x0004AF        E422002F                 r0 = r0 + 1;
0x0004B0        19202FC9                 M[0x2fc9] = r0 + Null;
0x0004B1        E422003F                 r0 = r0 - 1;
0x0004B2        29022FBD                 Null = r0 - M[$sra_struct];
0x0004B3        DD400008                 if NEG jump $M.sra_tagtimes.end;
0x0004B4        09202FCA                 r0 = Null + M[0x2fca];
0x0004B5        21020002                 Null = r0 - 2;
0x0004B6        DD100006                 if NE jump $reset_sra;
0x0004B7        09202FBF                 r0 = Null + M[0x2fbf];
0x0004B8        E1F00F7C                 call $cbuffer.get_write_address_and_size;
0x0004B9        19202FC8                 M[0x2fc8] = r0 + Null;
0x0004BA        DDF0FFEA                 jump $M.sra_tagtimes.idle;

 <$M.sra_tagtimes.end>
0x0004BB        DDF00FB7                 jump $pop_rLink_and_rts;

 <$reset_sra>
0x0004BC        19002FC5                 M[0x2fc5] = Null + Null;
0x0004BD        19002FCA                 M[0x2fca] = Null + Null;
0x0004BE        19002FC8                 M[0x2fc8] = Null + Null;
0x0004BF        19002FC7                 M[0x2fc7] = Null + Null;
0x0004C0        19002FC6                 M[0x2fc6] = Null + Null;
0x0004C1        DDF00FB1                 jump $pop_rLink_and_rts;

 <$volume_and_limit.apply_volume>
0x0004C2        F3D00000                 push rLink;
0x0004C3        00A9000F                 r8 = r7 + Null;
0x0004C4        D12A0003                 r0 = M[r8 + 3];
0x0004C5        D3200000                 r0 = M[r0 + Null];
0x0004C6        01100200                 rMAC = Null + 512;
0x0004C7        D9020000                 Div = rMAC / r0;
0x0004C8        D1CA0002                 r10 = M[r8 + 2];
0x0004C9        DDD00FA9                 if LE jump $pop_rLink_and_rts;
0x0004CA        018A000B                 r6 = r8 + 11;
0x0004CB        FD00007F 0140FFFF        r2 = Null + 8388607;
0x0004CD        E5F0000A                 do $M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop;
0x0004CE        D1280000                 r0 = M[r6 + 0];
0x0004CF        D1520002                 r3 = M[r0 + 2];
0x0004D0        2004005F                 Null = r2 - r3;
0x0004D1        00450005                 if POS r2 = r3 + Null;
0x0004D2        D1280001                 r0 = M[r6 + 1];
0x0004D3        D1520002                 r3 = M[r0 + 2];
0x0004D4        2004005F                 Null = r2 - r3;
0x0004D5        00450005                 if POS r2 = r3 + Null;
0x0004D6        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop>
0x0004D7        00C4000F                 r10 = r2 + Null;
0x0004D8        DDD00F9A                 if LE jump $pop_rLink_and_rts;
0x0004D9        0920FE93                 r0 = Null + M[0xfffe93];
0x0004DA        F3200000                 push r0;
0x0004DB        D9200001                 r0 = DivResult;
0x0004DC        CC12004F                 rMAC = r0 * r2 (SS);
0x0004DD        91E10010                 rMAC = rMAC ASHIFT 16 (MI);
0x0004DE        F3C00000                 push r10;
0x0004DF        F3100000                 push rMAC;
0x0004E0        91E1007C                 rMAC = rMAC ASHIFT -4 (MI);
0x0004E1        9D710017                 r5 = rMAC * 23 (int) (sat);
0x0004E2        E420002F                 r0 = Null + 1;
0x0004E3        1920FE93                 M[0xfffe93] = r0 + Null;
0x0004E4        D12A0008                 r0 = M[r8 + 8];
0x0004E5        01320100                 r1 = r0 + 256;
0x0004E6        00300004                 if NEG r1 = Null + Null;
0x0004E7        CC13007F                 rMAC = r1 * r5 (SS);
0x0004E8        9131000F                 r1 = rMAC ASHIFT 15;
0x0004E9        01100100                 rMAC = Null + 256;
0x0004EA        AC17002F                 rMAC = rMAC + r5 * r0 (SS);
0x0004EB        91110008                 rMAC = rMAC ASHIFT 8 (56bit);
0x0004EC        CC11003F                 rMAC = rMAC * r1 (SS);
0x0004ED        91710007                 r5 = rMAC ASHIFT 7;
0x0004EE        D1CA0002                 r10 = M[r8 + 2];
0x0004EF        018A000B                 r6 = r8 + 11;
0x0004F0        51A00034                 M2 = Null + 52;
0x0004F1        D15A0004                 r3 = M[r8 + 4];
0x0004F2        01600000                 r4 = Null + 0;
0x0004F3        E5F00011                 do $M.audio_proc.volume_and_limit.apply_volume.volume_update_loop;
0x0004F4        D1280002                 r0 = M[r6 + 2];
0x0004F5        CC15002F                 rMAC = r3 * r0 (SS);
0x0004F6        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x0004F7        D1380003                 r1 = M[r6 + 3];
0x0004F8        2021003F                 r0 = rMAC - r1;
0x0004F9        DD000009                 if EQ jump $M.audio_proc.volume_and_limit.apply_volume.next_ch_vol;
0x0004FA        20200024                 if NEG r0 = Null - r0;
0x0004FB        9443007F                 r2 = r1 * r5 (frac);
0x0004FC        474A0000                 r2 = r2 + M2;
0x0004FD        E442005F                 r2 = MIN r0;
0x0004FE        2001003F                 Null = rMAC - r1;
0x0004FF        20400044                 if NEG r2 = Null - r2;
0x000500        03340000                 r1 = r1 + r2;
0x000501        D5380003                 M[r6 + 3] = r1;

 <$M.audio_proc.volume_and_limit.apply_volume.next_ch_vol>
0x000502        E463006F                 r4 = MAX r1;
0x000503        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_update_loop>
0x000504        1900FE93                 M[0xfffe93] = Null + Null;
0x000505        01500000                 r3 = Null + 0;
0x000506        D12A0000                 r0 = M[r8 + 0];
0x000507        D13A0001                 r1 = M[r8 + 1];
0x000508        8002003F                 Null = r0 AND r1;
0x000509        DD10002A                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x00050A        FD000008 21060000        Null = r4 - 524288;
0x00050C        DD400027                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x00050D        018A000B                 r6 = r8 + 11;
0x00050E        D12A0002                 r0 = M[r8 + 2];
0x00050F        5090002F                 M1 = Null + r0;
0x000510        01600000                 r4 = Null + 0;
0x000511        51800001                 M0 = Null + 1;

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop>
0x000512        D1380003                 r1 = M[r6 + 3];
0x000513        FD000008 21030000        Null = r1 - 524288;
0x000515        DD400010                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.get_next_channel;
0x000516        F1C8FFFE                 r10 = M[SP + -0x2];
0x000517        D1280000                 r0 = M[r6 + 0];
0x000518        E1F00F2C                 call $frmbuffer.get_buffer;
0x000519        5000002F                 I0 = Null + r0;
0x00051A        50C0003F                 L0 = Null + r1;
0x00051B        E4CC003F                 r10 = r10 - 1;
0x00051C        0070400F                 r5 = Null + Null, r2 = M[I0,M0];
0x00051D        E5F00003                 do $M.audio_proc.volume_and_limit.apply_volume.channel_search_loop;
0x00051E        E444004F                 r2 = ABS r2;
0x00051F        E474406F                 r5 = MAX r2, r2 = M[I0,M0];

 <$M.audio_proc.volume_and_limit.apply_volume.channel_search_loop>
0x000520        E444004F                 r2 = ABS r2;
0x000521        E474006F                 r5 = MAX r2;
0x000522        D1380003                 r1 = M[r6 + 3];
0x000523        97730000                 r5 = r5 * r1 (frac);
0x000524        E467006F                 r4 = MAX r5;

 <$M.audio_proc.volume_and_limit.apply_volume.get_next_channel>
0x000525        01880005                 r6 = r6 + 5;
0x000526        79990001                 M1 = M1 - 1;
0x000527        DD10FFEB                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop;
0x000528        51C00000                 L0 = Null + 0;
0x000529        01500000                 r3 = Null + 0;
0x00052A        D14A0006                 r2 = M[r8 + 6];
0x00052B        2006004F                 Null = r4 - r2;
0x00052C        DD400007                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x00052D        0016000F                 rMAC = r4 + Null;
0x00052E        E1F00DD9                 call $math.log2_table;
0x00052F        D15A0005                 r3 = M[r8 + 5];
0x000530        D13A0007                 r1 = M[r8 + 7];
0x000531        2025002F                 r0 = r3 - r0;
0x000532        9452003F                 r3 = r0 * r1 (frac);

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done>
0x000533        F128FFFF                 r0 = M[SP + -0x1];
0x000534        FD0000EF 952263EF        r0 = r0 * -0.12976276874542236 (frac);
0x000536        E1F00E35                 call $math.pow2_table;
0x000537        FD00007F 6562FFFF        r4 = 8388607 - r0;
0x000539        9432002F                 r1 = r0 * r0 (frac);
0x00053A        97330000                 r1 = r1 * r1 (frac);
0x00053B        9432003F                 r1 = r0 * r1 (frac);
0x00053C        FD00007F 6543FFFF        r2 = 8388607 - r1;
0x00053E        D12A0009                 r0 = M[r8 + 9];
0x00053F        2075002F                 r5 = r3 - r0;
0x000540        00460005                 if POS r2 = r4 + Null;
0x000541        97740000                 r5 = r5 * r2 (frac);
0x000542        03270000                 r0 = r0 + r5;
0x000543        00200005                 if POS r0 = Null + Null;
0x000544        2042005F                 r2 = r0 - r3;
0x000545        20400044                 if NEG r2 = Null - r2;
0x000546        21040054                 Null = r2 - 84;
0x000547        00250004                 if NEG r0 = r3 + Null;
0x000548        D52A0009                 M[r8 + 9] = r0;
0x000549        E1F00E22                 call $math.pow2_table;
0x00054A        D16A000A                 r4 = M[r8 + 10];
0x00054B        D52A000A                 M[r8 + 10] = r0;
0x00054C        018A000B                 r6 = r8 + 11;
0x00054D        D12A0002                 r0 = M[r8 + 2];
0x00054E        5090002F                 M1 = Null + r0;
0x00054F        E420002F                 r0 = Null + 1;
0x000550        1920FE93                 M[0xfffe93] = r0 + Null;

 <$M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop>
0x000551        D1280000                 r0 = M[r6 + 0];
0x000552        E1F00EF2                 call $frmbuffer.get_buffer;
0x000553        5000002F                 I0 = Null + r0;
0x000554        50C0003F                 L0 = Null + r1;
0x000555        D1280001                 r0 = M[r6 + 1];
0x000556        E1F00EEE                 call $frmbuffer.get_buffer;
0x000557        5040002F                 I4 = Null + r0;
0x000558        50E0003F                 L4 = Null + r1;
0x000559        D1380003                 r1 = M[r6 + 3];
0x00055A        D12A000A                 r0 = M[r8 + 10];
0x00055B        9443002F                 r2 = r1 * r0 (frac);
0x00055C        D1380004                 r1 = M[r6 + 4];
0x00055D        23430000                 r2 = r2 - r1;
0x00055E        91E40080                 rMAC = r2 ASHIFT 0 (LO);
0x00055F        F1C8FFFE                 r10 = M[SP + -0x2];
0x000560        D90C0000                 Div = rMAC / r10;
0x000561        E4CC003F                 r10 = r10 - 1;
0x000562        01500004                 r3 = Null + 4;
0x000563        D9700001                 r5 = DivResult;
0x000564        03374100                 r1 = r1 + r5, r2 = M[I0,1];
0x000565        CC14003F                 rMAC = r2 * r1 (SS);
0x000566        E5F00004                 do $M.audio_proc.volume_and_limit.apply_volume.volume_loop;
0x000567        93154100                 rMAC = rMAC ASHIFT r3 (56bit), r2 = M[I0,1];
0x000568        03370000                 r1 = r1 + r5;
0x000569        CF430091                 rMAC = r2 * r1 (SS), M[I4,1] = rMAC;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_loop>
0x00056A        93150000                 rMAC = rMAC ASHIFT r3 (56bit);
0x00056B        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x00056C        D5380004                 M[r6 + 4] = r1;
0x00056D        01880005                 r6 = r6 + 5;
0x00056E        79990001                 M1 = M1 - 1;
0x00056F        DD10FFE2                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop;
0x000570        51C00000                 L0 = Null + 0;
0x000571        51E00000                 L4 = Null + 0;
0x000572        F3240000                 pop r0;
0x000573        F3240000                 pop r0;
0x000574        F3240000                 pop r0;
0x000575        1920FE93                 M[0xfffe93] = r0 + Null;
0x000576        DDF00EFC                 jump $pop_rLink_and_rts;

 <$latency.calc_encoded_latency>
0x000577        F3D00000                 push rLink;
0x000578        D1290001                 r0 = M[r7 + 1];
0x000579        DD000EF9                 if EQ jump $pop_rLink_and_rts;
0x00057A        E1F00EAE                 call $block_interrupts;
0x00057B        D1290001                 r0 = M[r7 + 1];
0x00057C        E1F00E84                 call $cbuffer.calc_amount_space;
0x00057D        21020002                 Null = r0 - 2;
0x00057E        DD50000C                 if POS jump $M.latency_measure.calc_encoded_latency.buffer_full_check_done;
0x00057F        D1290001                 r0 = M[r7 + 1];
0x000580        E1F00EB4                 call $cbuffer.get_write_address_and_size;
0x000581        50F0003F                 L5 = Null + r1;
0x000582        5050002F                 I5 = Null + r0;
0x000583        5180FFFC                 M0 = Null + -4;
0x000584        02000024                 Null = Null + Null, r0 = M[I5,M0];
0x000585        4430005F                 r1 = Null + I5;
0x000586        D1290001                 r0 = M[r7 + 1];
0x000587        D539000A                 M[r7 + 10] = r1;
0x000588        E1F00EC5                 call $cbuffer.set_write_address;
0x000589        51F00000                 L5 = Null + 0;

 <$M.latency_measure.calc_encoded_latency.buffer_full_check_done>
0x00058A        D1290003                 r0 = M[r7 + 3];
0x00058B        D1490008                 r2 = M[r7 + 8];
0x00058C        D1320002                 r1 = M[r0 + 2];
0x00058D        2043004F                 r2 = r1 - r2;
0x00058E        DD00000C                 if EQ jump $M.latency_measure.calc_encoded_latency.unblock_and_return;
0x00058F        D1290002                 r0 = M[r7 + 2];
0x000590        D1520001                 r3 = M[r0 + 1];
0x000591        D1290007                 r0 = M[r7 + 7];
0x000592        2002005F                 Null = r0 - r3;
0x000593        DD000007                 if EQ jump $M.latency_measure.calc_encoded_latency.unblock_and_return;
0x000594        D1290002                 r0 = M[r7 + 2];
0x000595        D1820002                 r6 = M[r0 + 2];
0x000596        D1290001                 r0 = M[r7 + 1];
0x000597        E1F00E79                 call $cbuffer.calc_amount_data;
0x000598        91C2007F                 r10 = r0 ASHIFT -1;
0x000599        DD100003                 if NE jump $M.latency_measure.calc_encoded_latency.process_info;

 <$M.latency_measure.calc_encoded_latency.unblock_and_return>
0x00059A        E1F00E7E                 call $interrupt.unblock;
0x00059B        DDF0006F                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.process_info>
0x00059C        E1F00E7C                 call $interrupt.unblock;
0x00059D        D1290001                 r0 = M[r7 + 1];
0x00059E        E1F00E91                 call $cbuffer.get_read_address_and_size;
0x00059F        5050002F                 I5 = Null + r0;
0x0005A0        50F0003F                 L5 = Null + r1;
0x0005A1        508C00CF                 M0 = r10 + r10;
0x0005A2        79880002                 M0 = M0 - 2;
0x0005A3        02000024                 Null = Null + Null, r0 = M[I5,M0];
0x0005A4        4440005F                 r2 = Null + I5;
0x0005A5        D169000A                 r4 = M[r7 + 10];
0x0005A6        D549000A                 M[r7 + 10] = r2;
0x0005A7        23460000                 r2 = r2 - r4;
0x0005A8        03000025                 Null = Null + Null, r0 = M[I5,1];
0x0005A9        5090002F                 M1 = Null + r0;
0x0005AA        D1290002                 r0 = M[r7 + 2];
0x0005AB        D1520000                 r3 = M[r0 + 0];
0x0005AC        50B0005F                 M3 = Null + r3;
0x0005AD        51800000                 M0 = Null + 0;
0x0005AE        D1220001                 r0 = M[r0 + 1];
0x0005AF        D1390007                 r1 = M[r7 + 7];
0x0005B0        0004000F                 Null = r2 + Null;
0x0005B1        DD00000F                 if EQ jump $M.latency_measure.calc_encoded_latency.skip_end;
0x0005B2        0048000F                 r2 = r6 + Null;
0x0005B3        E1F0005E                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x0005B4        0005000F                 Null = r3 + Null;
0x0005B5        DD00000B                 if EQ jump $M.latency_measure.calc_encoded_latency.skip_end;
0x0005B6        E5F00007                 do $M.latency_measure.calc_encoded_latency.skip_loop;
0x0005B7        03000067                 Null = Null + Null, r4 = M[I5,-1];
0x0005B8        03000047                 Null = Null + Null, r2 = M[I5,-1];
0x0005B9        E1F00058                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x0005BA        0005000F                 Null = r3 + Null;
0x0005BB        DD000004                 if EQ jump $M.latency_measure.calc_encoded_latency.skip_done;
0x0005BC        03000000                 Null = Null + Null;

 <$M.latency_measure.calc_encoded_latency.skip_loop>
0x0005BD        51F00000                 L5 = Null + 0;
0x0005BE        DDF0004C                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.skip_done>
0x0005BF        03000046                 Null = Null + Null, r2 = M[I5,2];

 <$M.latency_measure.calc_encoded_latency.skip_end>
0x0005C0        E5F0000C                 do $M.latency_measure.calc_encoded_latency.search_loop;
0x0005C1        03000067                 Null = Null + Null, r4 = M[I5,-1];
0x0005C2        03000047                 Null = Null + Null, r2 = M[I5,-1];
0x0005C3        E1F0004E                 call $M.latency_measure.calc_encoded_latency.is_address_within_range;
0x0005C4        0005000F                 Null = r3 + Null;
0x0005C5        DD10000D                 if NE jump $M.latency_measure.calc_encoded_latency.entry_found;
0x0005C6        78A9004F                 M2 = M1 - r2;
0x0005C7        5CAA00B4                 if NEG M2 = M2 + M3;
0x0005C8        5090004F                 M1 = Null + r2;
0x0005C9        5F8A0000                 M0 = M0 + M2;
0x0005CA        6C0800BF                 Null = M0 - M3;
0x0005CB        DD500003                 if POS jump $M.latency_measure.calc_encoded_latency.clean_buf;

 <$M.latency_measure.calc_encoded_latency.search_loop>
0x0005CC        51F00000                 L5 = Null + 0;
0x0005CD        DDF0003D                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.clean_buf>
0x0005CE        51F00000                 L5 = Null + 0;
0x0005CF        D1290001                 r0 = M[r7 + 1];
0x0005D0        E1F00CCB                 call $cbuffer.empty_buffer;
0x0005D1        DDF00039                 jump $M.latency_measure.calc_encoded_latency.end;

 <$M.latency_measure.calc_encoded_latency.entry_found>
0x0005D2        51900003                 M1 = Null + 3;
0x0005D3        02000025                 Null = Null + Null, r0 = M[I5,M1];
0x0005D4        4430005F                 r1 = Null + I5;
0x0005D5        D1290001                 r0 = M[r7 + 1];
0x0005D6        E1F00E73                 call $cbuffer.set_read_address;
0x0005D7        51F00000                 L5 = Null + 0;
0x0005D8        E1F00E50                 call $block_interrupts;
0x0005D9        F3600000                 push r4;
0x0005DA        F3900000                 push r7;
0x0005DB        D1990000                 r7 = M[r7 + 0];
0x0005DC        E1F00859                 call $latency.calc_pcm_latency;
0x0005DD        F3940000                 pop r7;
0x0005DE        F3640000                 pop r4;
0x0005DF        0950FE71                 r3 = Null + M[0xfffe71];
0x0005E0        2065006F                 r4 = r3 - r4;
0x0005E1        DD400028                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0005E2        03680000                 r4 = r4 + r6;
0x0005E3        D1290003                 r0 = M[r7 + 3];
0x0005E4        E1F00E50                 call $cbuffer.get_write_address_and_size;
0x0005E5        D1490008                 r2 = M[r7 + 8];
0x0005E6        23240000                 r0 = r0 - r2;
0x0005E7        00220034                 if NEG r0 = r0 + r1;
0x0005E8        D1390004                 r1 = M[r7 + 4];
0x0005E9        D3300000                 r1 = M[r1 + Null];
0x0005EA        D1490005                 r2 = M[r7 + 5];
0x0005EB        DD000004                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0005EC        D3400000                 r2 = M[r2 + Null];
0x0005ED        DD000002                 if EQ jump $M.latency_measure.calc_encoded_latency.no_warp;
0x0005EE        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_encoded_latency.no_warp>
0x0005EF        9453004F                 r3 = r1 * r2 (frac);
0x0005F0        9445004F                 r2 = r3 * r2 (frac);
0x0005F1        0053005F                 r3 = r1 + r3;
0x0005F2        0035004F                 r1 = r3 + r2;
0x0005F3        CC12003F                 rMAC = r0 * r1 (SS);
0x0005F4        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x0005F5        8D310000                 r1 = rMAC LSHIFT 0;
0x0005F6        23630000                 r4 = r4 - r1;
0x0005F7        DD400012                 if NEG jump $M.latency_measure.calc_encoded_latency.end_calc;
0x0005F8        D1C90006                 r10 = M[r7 + 6];
0x0005F9        DD00000F                 if EQ jump $M.latency_measure.calc_encoded_latency.min_done;
0x0005FA        212C0004                 r0 = r10 - 4;
0x0005FB        20CC0025                 if POS r10 = r10 - r0;
0x0005FC        E4CC003F                 r10 = r10 - 1;
0x0005FD        5159000B                 I5 = r7 + 11;
0x0005FE        03000035                 Null = Null + Null, r1 = M[I5,1];
0x0005FF        E5F00005                 do $M.latency_measure.calc_encoded_latency.loop_min;
0x000600        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x000601        2002003F                 Null = r0 - r1;
0x000602        00320004                 if NEG r1 = r0 + Null;
0x000603        030000A6                 Null = Null + Null, M[I5,2] = r0;

 <$M.latency_measure.calc_encoded_latency.loop_min>
0x000604        03000027                 Null = Null + Null, r0 = M[I5,-1];
0x000605        030000E4                 Null = Null + Null, M[I5,0] = r4;
0x000606        2006003F                 Null = r4 - r1;
0x000607        00630005                 if POS r4 = r1 + Null;

 <$M.latency_measure.calc_encoded_latency.min_done>
0x000608        D5690009                 M[r7 + 9] = r4;

 <$M.latency_measure.calc_encoded_latency.end_calc>
0x000609        E1F00E0F                 call $interrupt.unblock;

 <$M.latency_measure.calc_encoded_latency.end>
0x00060A        D1290002                 r0 = M[r7 + 2];
0x00060B        D1220001                 r0 = M[r0 + 1];
0x00060C        D5290007                 M[r7 + 7] = r0;
0x00060D        D1290003                 r0 = M[r7 + 3];
0x00060E        D1220002                 r0 = M[r0 + 2];
0x00060F        D5290008                 M[r7 + 8] = r0;
0x000610        DDF00E62                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_encoded_latency.is_address_within_range>
0x000611        E450002F                 r3 = Null + 1;
0x000612        2002003F                 Null = r0 - r1;
0x000613        DD400006                 if NEG jump $M.latency_measure.calc_encoded_latency.neg_part;

 <$M.latency_measure.calc_encoded_latency.pos_part>
0x000614        2004002F                 Null = r2 - r0;
0x000615        00500005                 if POS r3 = Null + Null;
0x000616        2004003F                 Null = r2 - r1;
0x000617        00500004                 if NEG r3 = Null + Null;
0x000618        DC0D000F                 rts;

 <$M.latency_measure.calc_encoded_latency.neg_part>
0x000619        2004003F                 Null = r2 - r1;
0x00061A        DC0D0005                 if POS rts;
0x00061B        2004002F                 Null = r2 - r0;
0x00061C        00500005                 if POS r3 = Null + Null;
0x00061D        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.Limited_Process>
0x00061E        F3D00000                 push rLink;
0x00061F        F3700000                 push r5;
0x000620        D12A0000                 r0 = M[r8 + 0];
0x000621        E1F00DEF                 call $cbuffer.calc_amount_data;
0x000622        0072000F                 r5 = r0 + Null;
0x000623        D12A0001                 r0 = M[r8 + 1];
0x000624        E1F00DDC                 call $cbuffer.calc_amount_space;
0x000625        0092000F                 r7 = r0 + Null;
0x000626        D12A0002                 r0 = M[r8 + 2];
0x000627        E402002F                 Null = r0 + 1;
0x000628        DD000009                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.no_right_channel_l;
0x000629        D12A0002                 r0 = M[r8 + 2];
0x00062A        E1F00DE6                 call $cbuffer.calc_amount_data;
0x00062B        2007002F                 Null = r5 - r0;
0x00062C        00720005                 if POS r5 = r0 + Null;
0x00062D        D12A0003                 r0 = M[r8 + 3];
0x00062E        E1F00DD2                 call $cbuffer.calc_amount_space;
0x00062F        2009002F                 Null = r7 - r0;
0x000630        00920005                 if POS r7 = r0 + Null;

 <$M.cbops.rate_adjustment_and_shift.Process.no_right_channel_l>
0x000631        2007009F                 Null = r5 - r7;
0x000632        00790005                 if POS r5 = r7 + Null;
0x000633        E1F00074                 call $M.cbops.rate_adjustment_and_shift.Process.amount_to_use;
0x000634        F3640000                 pop r4;
0x000635        23760000                 r5 = r5 - r4;
0x000636        00760005                 if POS r5 = r4 + Null;
0x000637        DDF00016                 jump $M.cbops.rate_adjustment_and_shift.Process.limited_entry_point;

 <$cbops.rate_adjustment_and_shift.Process>
0x000638        F3D00000                 push rLink;
0x000639        D12A0000                 r0 = M[r8 + 0];
0x00063A        E1F00DD6                 call $cbuffer.calc_amount_data;
0x00063B        0072000F                 r5 = r0 + Null;
0x00063C        D12A0001                 r0 = M[r8 + 1];
0x00063D        E1F00DC3                 call $cbuffer.calc_amount_space;
0x00063E        0092000F                 r7 = r0 + Null;
0x00063F        D12A0002                 r0 = M[r8 + 2];
0x000640        E402002F                 Null = r0 + 1;
0x000641        DD000009                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.no_right_channel;
0x000642        D12A0002                 r0 = M[r8 + 2];
0x000643        E1F00DCD                 call $cbuffer.calc_amount_data;
0x000644        2007002F                 Null = r5 - r0;
0x000645        00720005                 if POS r5 = r0 + Null;
0x000646        D12A0003                 r0 = M[r8 + 3];
0x000647        E1F00DB9                 call $cbuffer.calc_amount_space;
0x000648        2009002F                 Null = r7 - r0;
0x000649        00920005                 if POS r7 = r0 + Null;

 <$M.cbops.rate_adjustment_and_shift.Process.no_right_channel>
0x00064A        2007009F                 Null = r5 - r7;
0x00064B        00790005                 if POS r5 = r7 + Null;
0x00064C        E1F0005B                 call $M.cbops.rate_adjustment_and_shift.Process.amount_to_use;

 <$M.cbops.rate_adjustment_and_shift.Process.limited_entry_point>
0x00064D        00C7000F                 r10 = r5 + Null;
0x00064E        DDD00E24                 if LE jump $pop_rLink_and_rts;
0x00064F        F1F00001                 pushm <FP(=SP)>, SP = SP + 0xf;
0x000650        F1070001                 FP = FP + 1;
0x000651        502000AF                 I2 = Null + r8;
0x000652        E1F0005D                 call $M.cbops.rate_adjustment_and_shift.Process.get_buffer_info;
0x000653        D19A0004                 r7 = M[r8 + 4];
0x000654        F19C0007                 M[FP + 0x7] = r7;
0x000655        D12A0006                 r0 = M[r8 + 6];
0x000656        5000002F                 I0 = Null + r0;
0x000657        0120000C                 r0 = Null + 12;
0x000658        D13A000B                 r1 = M[r8 + 11];
0x000659        00320000                 if EQ r1 = r0 + Null;
0x00065A        50C0003F                 L0 = Null + r1;
0x00065B        50D0003F                 L1 = Null + r1;
0x00065C        D12A0005                 r0 = M[r8 + 5];
0x00065D        99330015                 r1 = r1 * 21 (int);
0x00065E        8D33007F                 r1 = r1 LSHIFT -1;
0x00065F        5032003F                 I3 = r0 + r1;
0x000660        D12A0008                 r0 = M[r8 + 8];
0x000661        D062000F                 r4 = M[r0 + Null];
0x000662        D17A000C                 r5 = M[r8 + 12];
0x000663        E430002F                 r1 = Null + 1;
0x000664        2027006F                 r0 = r5 - r4;
0x000665        20200024                 if NEG r0 = Null - r0;
0x000666        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x000668        21023127                 Null = r0 - 12583;
0x000669        00430004                 if NEG r2 = r1 + Null;
0x00066A        21340026                 r1 = r2 - 38;
0x00066B        20440035                 if POS r2 = r2 - r1;
0x00066C        0930FE71                 r1 = Null + M[0xfffe71];
0x00066D        D12A0012                 r0 = M[r8 + 18];
0x00066E        2053002F                 r3 = r1 - r0;
0x00066F        20500054                 if NEG r3 = Null - r3;
0x000670        FD000000 2105C350        Null = r3 - 50000;
0x000672        DD500008                 if POS jump $M.cbops.rate_adjustment_and_shift.Process.update_last_time;
0x000673        215502EE                 r3 = r3 - 750;
0x000674        FD000000 955515D8        r3 = r3 * 0.00066661834716796875 (frac);
0x000676        00500004                 if NEG r3 = Null + Null;
0x000677        9B450000                 r2 = r2 * r3 (int);
0x000678        995505DC                 r3 = r3 * 1500 (int);
0x000679        0032005F                 r1 = r0 + r3;

 <$M.cbops.rate_adjustment_and_shift.Process.update_last_time>
0x00067A        D53A0012                 M[r8 + 18] = r1;
0x00067B        2037006F                 r1 = r5 - r4;
0x00067C        2023004F                 r0 = r1 - r2;
0x00067D        20330025                 if POS r1 = r1 - r0;
0x00067E        0023004F                 r0 = r1 + r2;
0x00067F        20330024                 if NEG r1 = r1 - r0;
0x000680        23730000                 r5 = r5 - r1;
0x000681        D57A000C                 M[r8 + 12] = r5;
0x000682        F1CC000C                 M[FP + 0xc] = r10;
0x000683        F10C000D                 M[FP + 0xd] = Null;
0x000684        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.Process.sra_gen_main_loop>
0x000685        E1F0FA38                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x000686        509000CF                 M1 = Null + r10;
0x000687        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x000688        02000021                 Null = Null + Null, r0 = M[I4,M1];
0x000689        F138000D                 r1 = M[FP + 0xd];
0x00068A        005A003F                 r3 = r8 + r1;
0x00068B        4430000F                 r1 = Null + I0;
0x00068C        D5350006                 M[r3 + 6] = r1;
0x00068D        F158000D                 r3 = M[FP + 0xd];
0x00068E        03550000                 r3 = r3 + r3;
0x00068F        01550000                 r3 = r3 + 0;
0x000690        502A005F                 I2 = r8 + r3;
0x000691        E1F00028                 call $M.cbops.rate_adjustment_and_shift.Process.set_buffer_info;
0x000692        F108000D                 Null = M[FP + 0xd];
0x000693        DD10000B                 if NE jump $M.cbops.rate_adjustment_and_shift.Process.finished;
0x000694        D12A0002                 r0 = M[r8 + 2];
0x000695        E402002F                 Null = r0 + 1;
0x000696        DD000008                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.finished;
0x000697        512A0002                 I2 = r8 + 2;
0x000698        E1F00017                 call $M.cbops.rate_adjustment_and_shift.Process.get_buffer_info;
0x000699        D13A0007                 r1 = M[r8 + 7];
0x00069A        5000003F                 I0 = Null + r1;
0x00069B        E430002F                 r1 = Null + 1;
0x00069C        F13C000D                 M[FP + 0xd] = r1;
0x00069D        DDF0FFE8                 jump $M.cbops.rate_adjustment_and_shift.Process.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.Process.finished>
0x00069E        D56A000D                 M[r8 + 13] = r4;
0x00069F        6420009F                 r0 = Null - M1;
0x0006A0        D52A000E                 M[r8 + 14] = r0;
0x0006A1        51F00000                 L5 = Null + 0;
0x0006A2        51E00000                 L4 = Null + 0;
0x0006A3        51C00000                 L0 = Null + 0;
0x0006A4        51D00000                 L1 = Null + 0;
0x0006A5        F1F64000                 SP = SP - 0xf, popm <FP>;
0x0006A6        DDF00DCC                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.Process.amount_to_use>
0x0006A7        D12A000C                 r0 = M[r8 + 12];
0x0006A8        9462009F                 r4 = r0 * r7 (frac);
0x0006A9        2069006F                 r4 = r7 - r4;
0x0006AA        21660002                 r4 = r4 - 2;
0x0006AB        00600004                 if NEG r4 = Null + Null;
0x0006AC        2006007F                 Null = r4 - r5;
0x0006AD        00760004                 if NEG r5 = r4 + Null;
0x0006AE        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.Process.get_buffer_info>
0x0006AF        F3D00000                 push rLink;
0x0006B0        51800001                 M0 = Null + 1;
0x0006B1        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x0006B2        E1F00D7D                 call $cbuffer.get_read_address_and_size;
0x0006B3        5040002F                 I4 = Null + r0;
0x0006B4        50E0283F                 L4 = Null + r1, r0 = M[I2,M0];
0x0006B5        E1F00D7F                 call $cbuffer.get_write_address_and_size;
0x0006B6        5050002F                 I5 = Null + r0;
0x0006B7        50F0003F                 L5 = Null + r1;
0x0006B8        DDF00DBA                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.Process.set_buffer_info>
0x0006B9        F3D00000                 push rLink;
0x0006BA        51800001                 M0 = Null + 1;
0x0006BB        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x0006BC        4430004F                 r1 = Null + I4;
0x0006BD        E1F00D8C                 call $cbuffer.set_read_address;
0x0006BE        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x0006BF        4430005F                 r1 = Null + I5;
0x0006C0        E1F00D8D                 call $cbuffer.set_write_address;
0x0006C1        DDF00DB1                 jump $pop_rLink_and_rts;

 <$sra_calcrate>
0x0006C2        F3D00000                 push rLink;
0x0006C3        0920006F                 r0 = Null + M[$app_config.io];
0x0006C4        21020005                 Null = r0 - 5;
0x0006C5        DD000005                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0006C6        21020008                 Null = r0 - 8;
0x0006C7        DD000003                 if EQ jump $M.sra_calcrate.skip_a2dp_sra_reset;
0x0006C8        09200390                 r0 = Null + M[0x390];
0x0006C9        DD00FDF3                 if EQ jump $reset_sra;

 <$M.sra_calcrate.skip_a2dp_sra_reset>
0x0006CA        09202FCA                 r0 = Null + M[0x2fca];
0x0006CB        D12201A5                 r0 = M[r0 + 421];
0x0006CC        DC02000F                 jump r0;

 <$M.sra_calcrate.idle>
0x0006CD        09202FC7                 r0 = Null + M[0x2fc7];
0x0006CE        DD000081                 if EQ jump $M.sra_calcrate.end;
0x0006CF        E420002F                 r0 = Null + 1;
0x0006D0        19202FCA                 M[0x2fca] = r0 + Null;

 <$M.sra_calcrate.start>
0x0006D1        09202FBF                 r0 = Null + M[0x2fbf];
0x0006D2        E1F00D5D                 call $cbuffer.get_read_address_and_size;
0x0006D3        09302FCB                 r1 = Null + M[0x2fcb];
0x0006D4        09402FC7                 r2 = Null + M[0x2fc7];
0x0006D5        E1F00081                 call $M.sra_calcrate.is_it_within_range;
0x0006D6        0005000F                 Null = r3 + Null;
0x0006D7        DD000078                 if EQ jump $M.sra_calcrate.end;
0x0006D8        19002FC7                 M[0x2fc7] = Null + Null;
0x0006D9        19002FCD                 M[0x2fcd] = Null + Null;
0x0006DA        01200002                 r0 = Null + 2;
0x0006DB        19202FCA                 M[0x2fca] = r0 + Null;
0x0006DC        DDF00073                 jump $M.sra_calcrate.end;

 <$M.sra_calcrate.addup>
0x0006DD        09202FC0                 r0 = Null + M[0x2fc0];
0x0006DE        E1F00D56                 call $cbuffer.get_write_address_and_size;
0x0006DF        29422FCC                 r2 = r0 - M[0x2fcc];
0x0006E0        00440034                 if NEG r2 = r2 + r1;
0x0006E1        09342FCD                 r1 = r2 + M[0x2fcd];
0x0006E2        19302FCD                 M[0x2fcd] = r1 + Null;
0x0006E3        09402FC8                 r2 = Null + M[0x2fc8];
0x0006E4        DD00006B                 if EQ jump $M.sra_calcrate.end;
0x0006E5        09202FBF                 r0 = Null + M[0x2fbf];
0x0006E6        E1F00D49                 call $cbuffer.get_read_address_and_size;
0x0006E7        09302FCB                 r1 = Null + M[0x2fcb];
0x0006E8        09402FC8                 r2 = Null + M[0x2fc8];
0x0006E9        E1F0006D                 call $M.sra_calcrate.is_it_within_range;
0x0006EA        0005000F                 Null = r3 + Null;
0x0006EB        DD000064                 if EQ jump $M.sra_calcrate.end;
0x0006EC        19002FC8                 M[0x2fc8] = Null + Null;
0x0006ED        01200000                 r0 = Null + 0;
0x0006EE        19202FCA                 M[0x2fca] = r0 + Null;
0x0006EF        09402FC2                 r2 = Null + M[0x2fc2];
0x0006F0        E450002F                 r3 = Null + 1;
0x0006F1        29342FCD                 r1 = r2 - M[0x2fcd];
0x0006F2        20500054                 if NEG r3 = Null - r3;
0x0006F3        9B350000                 r1 = r1 * r3 (int);
0x0006F4        09902FC1                 r7 = Null + M[0x2fc1];
0x0006F5        99990006                 r7 = r7 * 6 (int);
0x0006F6        97490000                 r2 = r2 * r7 (frac);
0x0006F7        2043004F                 r2 = r1 - r2;
0x0006F8        DD50FFD5                 if POS jump $M.sra_calcrate.idle;
0x0006F9        9B350000                 r1 = r1 * r3 (int);
0x0006FA        09202FD0                 r0 = Null + M[0x2fd0];
0x0006FB        D5322FDD                 M[r0 + 12253] = r1;
0x0006FC        E422002F                 r0 = r0 + 1;
0x0006FD        8122001F                 r0 = r0 AND 0x1f;
0x0006FE        19202FD0                 M[0x2fd0] = r0 + Null;
0x0006FF        DD100003                 if NE jump $M.sra_calcrate.init_phase_passed;
0x000700        E440002F                 r2 = Null + 1;
0x000701        19402FD1                 M[0x2fd1] = r2 + Null;

 <$M.sra_calcrate.init_phase_passed>
0x000702        01300020                 r1 = Null + 32;
0x000703        09002FD1                 Null = Null + M[0x2fd1];
0x000704        00230001                 if NE r0 = r1 + Null;
0x000705        09002FD7                 Null = Null + M[0x2fd7];
0x000706        DD000003                 if EQ jump $M.sra_calcrate.calc_final_rate;
0x000707        81020001                 Null = r0 AND 0x1;
0x000708        DD10FFC5                 if NE jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.calc_final_rate>
0x000709        E4C2003F                 r10 = r0 - 1;
0x00070A        FD00007F 0150FFFF        r3 = Null + 8388607;
0x00070C        51002FDD                 I0 = Null + 12253;
0x00070D        23334100                 r1 = r1 - r1, r2 = M[I0,1];
0x00070E        E5F00002                 do $M.sra_calcrate.acc_loop;
0x00070F        03344100                 r1 = r1 + r2, r2 = M[I0,1];

 <$M.sra_calcrate.acc_loop>
0x000710        03340000                 r1 = r1 + r2;
0x000711        20500054                 if NEG r3 = Null - r3;
0x000712        97350000                 r1 = r1 * r3 (frac);
0x000713        01100000                 rMAC = Null + 0;
0x000714        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x000715        D9020000                 Div = rMAC / r0;
0x000716        D9300001                 r1 = DivResult;
0x000717        91E3007F                 rMAC = r1 ASHIFT -1 (MI);
0x000718        09402FC2                 r2 = Null + M[0x2fc2];
0x000719        D9040000                 Div = rMAC / r2;
0x00071A        D9300001                 r1 = DivResult;
0x00071B        29432FC1                 r2 = r1 - M[0x2fc1];
0x00071C        20330045                 if POS r1 = r1 - r2;
0x00071D        97350000                 r1 = r1 * r3 (frac);
0x00071E        19302FD5                 M[0x2fd5] = r1 + Null;
0x00071F        8D82007F                 r6 = r0 LSHIFT -1;
0x000720        81920001                 r7 = r0 AND 0x1;
0x000721        21080006                 Null = r6 - 6;
0x000722        DD40FFAB                 if NEG jump $M.sra_calcrate.idle;
0x000723        09602FD0                 r4 = Null + M[0x2fd0];
0x000724        29022FD0                 Null = r0 - M[0x2fd0];
0x000725        00600000                 if EQ r4 = Null + Null;
0x000726        03690000                 r4 = r4 + r7;
0x000727        00C8000F                 r10 = r6 + Null;
0x000728        01300000                 r1 = Null + 0;
0x000729        E5F00005                 do $M.sra_calcrate.read_first_half_ents;
0x00072A        D1562FDD                 r3 = M[r4 + 12253];
0x00072B        03350000                 r1 = r1 + r3;
0x00072C        E466002F                 r4 = r4 + 1;
0x00072D        8166001F                 r4 = r4 AND 0x1f;

 <$M.sra_calcrate.read_first_half_ents>
0x00072E        00C8000F                 r10 = r6 + Null;
0x00072F        01400000                 r2 = Null + 0;
0x000730        E5F00005                 do $M.sra_calcrate.read_second_half_ents;
0x000731        D1562FDD                 r3 = M[r4 + 12253];
0x000732        03450000                 r2 = r2 + r3;
0x000733        E466002F                 r4 = r4 + 1;
0x000734        8166001F                 r4 = r4 AND 0x1f;

 <$M.sra_calcrate.read_second_half_ents>
0x000735        2053004F                 r3 = r1 - r2;
0x000736        20500054                 if NEG r3 = Null - r3;
0x000737        91E5007F                 rMAC = r3 ASHIFT -1 (MI);
0x000738        09202FC2                 r0 = Null + M[0x2fc2];
0x000739        D9020000                 Div = rMAC / r0;
0x00073A        D9300001                 r1 = DivResult;
0x00073B        99481A37                 r2 = r6 * 6711 (int);
0x00073C        2003004F                 Null = r1 - r2;
0x00073D        DD50FF90                 if POS jump $M.sra_calcrate.idle;
0x00073E        E420002F                 r0 = Null + 1;
0x00073F        19202FD7                 M[0x2fd7] = r0 + Null;
0x000740        09202FD5                 r0 = Null + M[0x2fd5];
0x000741        29322FD6                 r1 = r0 - M[0x2fd6];
0x000742        20300034                 if NEG r1 = Null - r1;
0x000743        2103068E                 Null = r1 - 1678;
0x000744        DD40FF89                 if NEG jump $M.sra_calcrate.idle;
0x000745        19202FD6                 M[0x2fd6] = r0 + Null;
0x000746        9122007A                 r0 = r0 ASHIFT -6;
0x000747        91220001                 r0 = r0 ASHIFT 1;
0x000748        85520001                 r3 = r0 OR 0x1;
0x000749        01600000                 r4 = Null + 0;
0x00074A        01700000                 r5 = Null + 0;
0x00074B        01800000                 r6 = Null + 0;
0x00074C        01407070                 r2 = Null + 28784;
0x00074D        E1F00B5E                 call $message.send_short;
0x00074E        DDF0FF7F                 jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.end>
0x00074F        09202FBF                 r0 = Null + M[0x2fbf];
0x000750        E1F00CDF                 call $cbuffer.get_read_address_and_size;
0x000751        19202FCB                 M[0x2fcb] = r0 + Null;
0x000752        09202FC0                 r0 = Null + M[0x2fc0];
0x000753        E1F00CE1                 call $cbuffer.get_write_address_and_size;
0x000754        19202FCC                 M[0x2fcc] = r0 + Null;

 <$M.sra_calcrate.exit>
0x000755        DDF00D1D                 jump $pop_rLink_and_rts;

 <$M.sra_calcrate.is_it_within_range>
0x000756        E450002F                 r3 = Null + 1;
0x000757        2002003F                 Null = r0 - r1;
0x000758        DD400006                 if NEG jump $M.sra_calcrate.neg_part;

 <$M.sra_calcrate.pos_part>
0x000759        2004002F                 Null = r2 - r0;
0x00075A        00500005                 if POS r3 = Null + Null;
0x00075B        2004003F                 Null = r2 - r1;
0x00075C        00500004                 if NEG r3 = Null + Null;
0x00075D        DC0D000F                 rts;

 <$M.sra_calcrate.neg_part>
0x00075E        2004003F                 Null = r2 - r1;
0x00075F        DC0D0005                 if POS rts;
0x000760        2004002F                 Null = r2 - r0;
0x000761        00500005                 if POS r3 = Null + Null;
0x000762        DC0D000F                 rts;

 <$frame_sync.usb_in_stereo_audio_copy>
0x000763        F3D00000                 push rLink;
0x000764        D50A0009                 M[r8 + 9] = Null;

 <$frame_sync.usb_in_stereo_audio_copy_retry>
0x000765        D12A0000                 r0 = M[r8 + 0];
0x000766        8182000F                 r6 = r0 AND 0xf;
0x000767        0068000F                 r4 = r6 + Null;
0x000768        01400062                 r2 = Null + 98;
0x000769        01500005                 r3 = Null + 5;
0x00076A        65080007                 Null = 7 - r6;
0x00076B        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.lower_port;
0x00076C        0068004F                 r4 = r6 + r2;
0x00076D        03850000                 r6 = r6 + r3;

 <$M.frame_sync.usb_in_stereo_audio_copy.lower_port>
0x00076E        5148FE2B                 I4 = r6 + -469;
0x00076F        D13A0007                 r1 = M[r8 + 7];
0x000770        D12365EF                 r0 = M[r1 + 26095];
0x000771        DC02000F                 jump r0;

 <$M.frame_sync.usb_in_stereo_audio_copy.idle>
0x000772        D50A0008                 M[r8 + 8] = Null;
0x000773        E420002F                 r0 = Null + 1;
0x000774        D13A0006                 r1 = M[r8 + 6];
0x000775        00230001                 if NE r0 = r1 + Null;
0x000776        D52A0006                 M[r8 + 6] = r0;
0x000777        D506FE7B                 M[r4 + -389] = Null;
0x000778        D12A0000                 r0 = M[r8 + 0];
0x000779        E1F00C97                 call $cbuffer.calc_amount_data;
0x00077A        00C3000F                 r10 = r1 + Null;
0x00077B        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.empty_loop;
0x00077C        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.empty_loop>
0x00077D        0900FE33                 Null = Null + M[0xfffe33];
0x00077E        D12A0000                 r0 = M[r8 + 0];
0x00077F        E1F00C91                 call $cbuffer.calc_amount_data;
0x000780        0003000F                 Null = r1 + Null;
0x000781        DD10004E                 if NE jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x000782        E420002F                 r0 = Null + 1;
0x000783        D52A0007                 M[r8 + 7] = r0;
0x000784        DDF0004B                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.syncing_a>
0x000785        D12A0000                 r0 = M[r8 + 0];
0x000786        E1F00C8A                 call $cbuffer.calc_amount_data;
0x000787        D12A0003                 r0 = M[r8 + 3];
0x000788        21C20004                 r10 = r0 - 4;
0x000789        E422002F                 r0 = r0 + 1;
0x00078A        2003002F                 Null = r1 - r0;
0x00078B        DD400044                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x00078C        D13A0005                 r1 = M[r8 + 5];
0x00078D        E433002F                 r1 = r1 + 1;
0x00078E        8133007F                 r1 = r1 AND 0x7f;
0x00078F        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000790        D14A0007                 r2 = M[r8 + 7];
0x000791        01500002                 r3 = Null + 2;
0x000792        D55A0007                 M[r8 + 7] = r3;
0x000793        E404003F                 Null = r2 - 1;
0x000794        DD000014                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x000795        2003002F                 Null = r1 - r0;
0x000796        DD000012                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.skip_and_update;
0x000797        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000798        03000020                 Null = Null + Null, r0 = M[I4,0];
0x000799        03000020                 Null = Null + Null, r0 = M[I4,0];
0x00079A        03000020                 Null = Null + Null, r0 = M[I4,0];
0x00079B        2003002F                 Null = r1 - r0;
0x00079C        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.large_packet;
0x00079D        01200000                 r0 = Null + 0;
0x00079E        D52A0007                 M[r8 + 7] = r0;
0x00079F        DDF00030                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.large_packet>
0x0007A0        D13A0006                 r1 = M[r8 + 6];
0x0007A1        21330002                 r1 = r1 - 2;
0x0007A2        DD500003                 if POS jump $M.frame_sync.usb_in_stereo_audio_copy.skip_all_large;
0x0007A3        01300000                 r1 = Null + 0;
0x0007A4        01CC0004                 r10 = r10 + 4;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_all_large>
0x0007A5        D53A0008                 M[r8 + 8] = r1;
0x0007A6        01300003                 r1 = Null + 3;
0x0007A7        D53A0007                 M[r8 + 7] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_and_update>
0x0007A8        D52A0005                 M[r8 + 5] = r0;
0x0007A9        E5F00002                 do $M.frame_sync.usb_in_stereo_audio_copy.skip_loop;
0x0007AA        03000020                 Null = Null + Null, r0 = M[I4,0];

 <$M.frame_sync.usb_in_stereo_audio_copy.skip_loop>
0x0007AB        D12A0000                 r0 = M[r8 + 0];
0x0007AC        4430004F                 r1 = Null + I4;
0x0007AD        E1F00C9C                 call $cbuffer.set_read_address;
0x0007AE        DDF00021                 jump $M.frame_sync.usb_in_stereo_audio_copy.exit;

 <$M.frame_sync.usb_in_stereo_audio_copy.synced>
0x0007AF        D12A0001                 r0 = M[r8 + 1];
0x0007B0        E1F00C50                 call $cbuffer.calc_amount_space;
0x0007B1        0052000F                 r3 = r0 + Null;
0x0007B2        D12A0002                 r0 = M[r8 + 2];
0x0007B3        E1F00C4D                 call $cbuffer.calc_amount_space;
0x0007B4        2005002F                 Null = r3 - r0;
0x0007B5        00520005                 if POS r3 = r0 + Null;
0x0007B6        D19A0003                 r7 = M[r8 + 3];
0x0007B7        9199007E                 r7 = r7 ASHIFT -2;
0x0007B8        2005009F                 Null = r3 - r7;
0x0007B9        DD400016                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x0007BA        0900FE33                 Null = Null + M[0xfffe33];
0x0007BB        D12A0000                 r0 = M[r8 + 0];
0x0007BC        E1F00C54                 call $cbuffer.calc_amount_data;
0x0007BD        01C0FFFC                 r10 = Null + -4;
0x0007BE        D15A0008                 r3 = M[r8 + 8];
0x0007BF        20CC00C0                 if EQ r10 = r10 - r10;
0x0007C0        D12A0003                 r0 = M[r8 + 3];
0x0007C1        032C0000                 r0 = r0 + r10;
0x0007C2        8DC2007E                 r10 = r0 LSHIFT -2;
0x0007C3        E422002F                 r0 = r0 + 1;
0x0007C4        2003002F                 Null = r1 - r0;
0x0007C5        DD40000A                 if NEG jump $M.frame_sync.usb_in_stereo_audio_copy.exit;
0x0007C6        D13A0006                 r1 = M[r8 + 6];
0x0007C7        E433003F                 r1 = r1 - 1;
0x0007C8        E425003F                 r0 = r3 - 1;
0x0007C9        00230004                 if NEG r0 = r1 + Null;
0x0007CA        D52A0008                 M[r8 + 8] = r0;
0x0007CB        E1F00007                 call $M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper;
0x0007CC        E420002F                 r0 = Null + 1;
0x0007CD        D52A0009                 M[r8 + 9] = r0;
0x0007CE        DDF0FF97                 jump $frame_sync.usb_in_stereo_audio_copy_retry;

 <$M.frame_sync.usb_in_stereo_audio_copy.exit>
0x0007CF        51C00000                 L0 = Null + 0;
0x0007D0        51F00000                 L5 = Null + 0;
0x0007D1        DDF00CA1                 jump $pop_rLink_and_rts;

 <$M.frame_sync.usb_in_stereo_audio_copy.usb_in_stereo_copy_helper>
0x0007D2        F3D00000                 push rLink;
0x0007D3        D13A0005                 r1 = M[r8 + 5];
0x0007D4        E433002F                 r1 = r1 + 1;
0x0007D5        8133007F                 r1 = r1 AND 0x7f;
0x0007D6        D506FE7B                 M[r4 + -389] = Null;
0x0007D7        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0007D8        D52A0005                 M[r8 + 5] = r0;
0x0007D9        2003002F                 Null = r1 - r0;
0x0007DA        DD000004                 if EQ jump $M.frame_sync.usb_in_stereo_audio_copy.copy_data;
0x0007DB        01200000                 r0 = Null + 0;
0x0007DC        D52A0007                 M[r8 + 7] = r0;
0x0007DD        DDF0001B                 jump $M.frame_sync.usb_in_stereo_audio_copy.lexit;

 <$M.frame_sync.usb_in_stereo_audio_copy.copy_data>
0x0007DE        E420002F                 r0 = Null + 1;
0x0007DF        D526FE7B                 M[r4 + -389] = r0;
0x0007E0        D12A0001                 r0 = M[r8 + 1];
0x0007E1        E1F00C53                 call $cbuffer.get_write_address_and_size;
0x0007E2        5000002F                 I0 = Null + r0;
0x0007E3        50C0003F                 L0 = Null + r1;
0x0007E4        D12A0002                 r0 = M[r8 + 2];
0x0007E5        E1F00C4F                 call $cbuffer.get_write_address_and_size;
0x0007E6        5050002F                 I5 = Null + r0;
0x0007E7        50F0003F                 L5 = Null + r1;
0x0007E8        D15A0004                 r3 = M[r8 + 4];
0x0007E9        E5F00006                 do $M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop;
0x0007EA        03000020                 Null = Null + Null, r0 = M[I4,0];
0x0007EB        93250000                 r0 = r0 ASHIFT r3;
0x0007EC        03000030                 Null = Null + Null, r1 = M[I4,0];
0x0007ED        93350000                 r1 = r1 ASHIFT r3;
0x0007EE        0300A1B5                 Null = Null + Null, M[I0,1] = r0, M[I5,1] = r1;

 <$M.frame_sync.usb_in_stereo_audio_copy.lp_stereo_loop>
0x0007EF        D12A0000                 r0 = M[r8 + 0];
0x0007F0        4430004F                 r1 = Null + I4;
0x0007F1        E1F00C58                 call $cbuffer.set_read_address;
0x0007F2        D12A0001                 r0 = M[r8 + 1];
0x0007F3        4430000F                 r1 = Null + I0;
0x0007F4        E1F00C59                 call $cbuffer.set_write_address;
0x0007F5        D12A0002                 r0 = M[r8 + 2];
0x0007F6        4430005F                 r1 = Null + I5;
0x0007F7        E1F00C56                 call $cbuffer.set_write_address;

 <$M.frame_sync.usb_in_stereo_audio_copy.lexit>
0x0007F8        DDF00C7A                 jump $pop_rLink_and_rts;

 <$audio_proc.delay.process>
0x0007F9        F3D00000                 push rLink;
0x0007FA        D18A0003                 r6 = M[r8 + 3];
0x0007FB        8DE80001                 rMAC = r6 LSHIFT 1 (MI);
0x0007FC        91E10080                 rMAC = rMAC ASHIFT 0 (LO);
0x0007FD        01200003                 r0 = Null + 3;
0x0007FE        D9020000                 Div = rMAC / r0;
0x0007FF        D12A0000                 r0 = M[r8 + 0];
0x000800        E1F00C44                 call $frmbuffer.get_buffer;
0x000801        5040002F                 I4 = Null + r0;
0x000802        50E0003F                 L4 = Null + r1;
0x000803        00C5000F                 r10 = r3 + Null;
0x000804        D12A0001                 r0 = M[r8 + 1];
0x000805        E1F00C6B                 call $frmbuffer.set_frame_size;
0x000806        E1F00C3E                 call $frmbuffer.get_buffer;
0x000807        5050002F                 I5 = Null + r0;
0x000808        50F0003F                 L5 = Null + r1;
0x000809        D12A0003                 r0 = M[r8 + 3];
0x00080A        70A0002F                 M2 = Null - r0;
0x00080B        DD000079                 if EQ jump $M.audio_proc.delay.process.jp_no_delay;
0x00080C        D12A0002                 r0 = M[r8 + 2];
0x00080D        E1F00C27                 call $cbuffer.get_write_address_and_size;
0x00080E        5010002F                 I1 = Null + r0;
0x00080F        50D0003F                 L1 = Null + r1;
0x000810        5000002F                 I0 = Null + r0;
0x000811        50C0003F                 L0 = Null + r1;
0x000812        70A0008F                 M2 = Null - r6;
0x000813        DD000071                 if EQ jump $M.audio_proc.delay.process.jp_no_delay;
0x000814        D10A0004                 Null = M[r8 + 4];
0x000815        DD100006                 if NE jump $M.audio_proc.delay.process.mode_16bit;
0x000816        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x000817        E5F00003                 do $M.audio_proc.delay.process.loop_delay;
0x000818        03003121                 Null = Null + Null, r1 = M[I0,1], r0 = M[I4,1];
0x000819        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_delay>
0x00081A        DDF00062                 jump $M.audio_proc.delay.process.update_delay_buffer;

 <$M.audio_proc.delay.process.mode_16bit>
0x00081B        D16A0005                 r4 = M[r8 + 5];
0x00081C        D9200001                 r0 = DivResult;
0x00081D        D9300002                 r1 = DivRemainder;
0x00081E        0003000F                 Null = r1 + Null;
0x00081F        DD000005                 if EQ jump $M.audio_proc.delay.process.remainder_0;
0x000820        E403003F                 Null = r1 - 1;
0x000821        DD000006                 if EQ jump $M.audio_proc.delay.process.remainder_1;
0x000822        21030002                 Null = r1 - 2;
0x000823        DD000010                 if EQ jump $M.audio_proc.delay.process.remainder_2;

 <$M.audio_proc.delay.process.remainder_0>
0x000824        70A0002F                 M2 = Null - r0;
0x000825        0096000F                 r7 = r4 + Null;
0x000826        DDF00019                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.remainder_1>
0x000827        0006000F                 Null = r4 + Null;
0x000828        DD100005                 if NE jump $M.audio_proc.delay.process.rem1_writepos_not0;
0x000829        E422002F                 r0 = r0 + 1;
0x00082A        70A0002F                 M2 = Null - r0;
0x00082B        01900002                 r7 = Null + 2;
0x00082C        DDF00013                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.rem1_writepos_not0>
0x00082D        70A0002F                 M2 = Null - r0;
0x00082E        E430002F                 r1 = Null + 1;
0x00082F        8D06007F                 Null = r4 LSHIFT -1;
0x000830        00300000                 if EQ r1 = Null + Null;
0x000831        0093000F                 r7 = r1 + Null;
0x000832        DDF0000D                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.remainder_2>
0x000833        8D06007F                 Null = r4 LSHIFT -1;
0x000834        DD000004                 if EQ jump $M.audio_proc.delay.process.rem2_writepos_not2;
0x000835        70A0002F                 M2 = Null - r0;
0x000836        01900000                 r7 = Null + 0;
0x000837        DDF00008                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.rem2_writepos_not2>
0x000838        E422002F                 r0 = r0 + 1;
0x000839        70A0002F                 M2 = Null - r0;
0x00083A        01300002                 r1 = Null + 2;
0x00083B        0006000F                 Null = r4 + Null;
0x00083C        E4300020                 if EQ r1 = Null + 1;
0x00083D        0093000F                 r7 = r1 + Null;
0x00083E        DDF00001                 jump $M.audio_proc.delay.process.done_setting_delay_read;

 <$M.audio_proc.delay.process.done_setting_delay_read>
0x00083F        02003200                 Null = Null + Null, r1 = M[I0,M2];
0x000840        E5F0003B                 do $M.audio_proc.delay.process.loop_delay_16bit;
0x000841        03000021                 Null = Null + Null, r0 = M[I4,1];
0x000842        FD0000FF 8122FF00        r0 = r0 AND 0xffff00;
0x000844        D1399623                 r1 = M[r7 + -27101];
0x000845        DC03000F                 jump r1;

 <$M.audio_proc.delay.process.read_byte_pos_0>
0x000846        03003000                 Null = Null + Null, r1 = M[I0,0];
0x000847        FD0000FF 8173FF00        r5 = r1 AND 0xffff00;
0x000849        030000F5                 Null = Null + Null, M[I5,1] = r5;
0x00084A        01900002                 r7 = Null + 2;
0x00084B        DDF00011                 jump $M.audio_proc.delay.process.do_write;

 <$M.audio_proc.delay.process.read_byte_pos_1>
0x00084C        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00084D        8173FFFF                 r5 = r1 AND 0xffff;
0x00084E        8D770008                 r5 = r5 LSHIFT 8;
0x00084F        030000F5                 Null = Null + Null, M[I5,1] = r5;
0x000850        01900000                 r7 = Null + 0;
0x000851        DDF0000B                 jump $M.audio_proc.delay.process.do_write;

 <$M.audio_proc.delay.process.read_byte_pos_2>
0x000852        03003100                 Null = Null + Null, r1 = M[I0,1];
0x000853        817300FF                 r5 = r1 AND 0xff;
0x000854        8D770010                 r5 = r5 LSHIFT 16;
0x000855        03003000                 Null = Null + Null, r1 = M[I0,0];
0x000856        FD0000FF 81330000        r1 = r1 AND 0xff0000;
0x000858        8D330078                 r1 = r1 LSHIFT -8;
0x000859        87730000                 r5 = r5 OR r1;
0x00085A        030000F5                 Null = Null + Null, M[I5,1] = r5;
0x00085B        E490002F                 r7 = Null + 1;

 <$M.audio_proc.delay.process.do_write>
0x00085C        D1366626                 r1 = M[r4 + 26150];
0x00085D        DC03000F                 jump r1;

 <$M.audio_proc.delay.process.write_byte_pos_0>
0x00085E        03003400                 Null = Null + Null, r1 = M[I1,0];
0x00085F        813300FF                 r1 = r1 AND 0xff;
0x000860        87320000                 r1 = r1 OR r0;
0x000861        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x000862        01600002                 r4 = Null + 2;
0x000863        DDF00017                 jump $M.audio_proc.delay.process.get_next_input_sample;

 <$M.audio_proc.delay.process.write_byte_pos_1>
0x000864        03003400                 Null = Null + Null, r1 = M[I1,0];
0x000865        FD0000FF 81330000        r1 = r1 AND 0xff0000;
0x000867        8D420078                 r2 = r0 LSHIFT -8;
0x000868        87340000                 r1 = r1 OR r2;
0x000869        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x00086A        01600000                 r4 = Null + 0;
0x00086B        DDF0000F                 jump $M.audio_proc.delay.process.get_next_input_sample;

 <$M.audio_proc.delay.process.write_byte_pos_2>
0x00086C        03003400                 Null = Null + Null, r1 = M[I1,0];
0x00086D        FD0000FF 8133FF00        r1 = r1 AND 0xffff00;
0x00086F        8D420070                 r2 = r0 LSHIFT -16;
0x000870        87340000                 r1 = r1 OR r2;
0x000871        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x000872        03003400                 Null = Null + Null, r1 = M[I1,0];
0x000873        8133FFFF                 r1 = r1 AND 0xffff;
0x000874        8D420008                 r2 = r0 LSHIFT 8;
0x000875        FD0000FF 81440000        r2 = r2 AND 0xff0000;
0x000877        87340000                 r1 = r1 OR r2;
0x000878        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x000879        E460002F                 r4 = Null + 1;

 <$M.audio_proc.delay.process.get_next_input_sample>
0x00087A        03000000                 Null = Null + Null;

 <$M.audio_proc.delay.process.loop_delay_16bit>
0x00087B        D56A0005                 M[r8 + 5] = r4;

 <$M.audio_proc.delay.process.update_delay_buffer>
0x00087C        D12A0002                 r0 = M[r8 + 2];
0x00087D        4430001F                 r1 = Null + I1;
0x00087E        E1F00BCF                 call $cbuffer.set_write_address;

 <$M.audio_proc.delay.process.jp_done>
0x00087F        51C00000                 L0 = Null + 0;
0x000880        51D00000                 L1 = Null + 0;
0x000881        51E00000                 L4 = Null + 0;
0x000882        51F00000                 L5 = Null + 0;
0x000883        DDF00BEF                 jump $pop_rLink_and_rts;

 <$M.audio_proc.delay.process.jp_no_delay>
0x000884        E5F00003                 do $M.audio_proc.delay.process.loop_copy;
0x000885        03000031                 Null = Null + Null, r1 = M[I4,1];
0x000886        030000B5                 Null = Null + Null, M[I5,1] = r1;

 <$M.audio_proc.delay.process.loop_copy>
0x000887        DDF0FFF8                 jump $M.audio_proc.delay.process.jp_done;

 <$cbops.fir_resample.main>
0x000888        F3D00000                 push rLink;
0x000889        D12A0000                 r0 = M[r8 + 0];
0x00088A        D038002F                 r1 = M[r6 + r0];
0x00088B        5000003F                 I0 = Null + r1;
0x00088C        D039002F                 r1 = M[r7 + r0];
0x00088D        50C0003F                 L0 = Null + r1;
0x00088E        D12A0001                 r0 = M[r8 + 1];
0x00088F        D038002F                 r1 = M[r6 + r0];
0x000890        5040003F                 I4 = Null + r1;
0x000891        D039002F                 r1 = M[r7 + r0];
0x000892        50E0003F                 L4 = Null + r1;
0x000893        09309691                 r1 = Null + M[$M.cbops.fir_resample.amount_used];
0x000894        00C30001                 if NE r10 = r1 + Null;
0x000895        19C09691                 M[$M.cbops.fir_resample.amount_used] = r10 + Null;
0x000896        D10A000C                 Null = M[r8 + 12];
0x000897        DD10000C                 if NE jump $M.cbops.fir_resample.main.do_resample;
0x000898        D12A0006                 r0 = M[r8 + 6];
0x000899        D13A0007                 r1 = M[r8 + 7];
0x00089A        2002003F                 Null = r0 - r1;
0x00089B        DD100008                 if NE jump $M.cbops.fir_resample.main.do_resample;
0x00089C        009C000F                 r7 = r10 + Null;
0x00089D        E4CC003F                 r10 = r10 - 1;
0x00089E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00089F        E5F00002                 do $M.cbops.fir_resample.main.copy_loop;
0x0008A0        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.fir_resample.main.copy_loop>
0x0008A1        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x0008A2        DDF00051                 jump $M.cbops.fir_resample.main.process_done;

 <$M.cbops.fir_resample.main.do_resample>
0x0008A3        51D0000D                 L1 = Null + 13;
0x0008A4        D12A0005                 r0 = M[r8 + 5];
0x0008A5        5010002F                 I1 = Null + r0;
0x0008A6        D17A0002                 r5 = M[r8 + 2];
0x0008A7        5137007E                 I3 = r5 + 126;
0x0008A8        D17A0009                 r5 = M[r8 + 9];
0x0008A9        D15A0008                 r3 = M[r8 + 8];
0x0008AA        5050005F                 I5 = Null + r3;
0x0008AB        D16A000A                 r4 = M[r8 + 10];
0x0008AC        D12A000B                 r0 = M[r8 + 11];
0x0008AD        5020002F                 I2 = Null + r0;
0x0008AE        51B00001                 M3 = Null + 1;
0x0008AF        01800015                 r6 = Null + 21;
0x0008B0        70A0008F                 M2 = Null - r6;
0x0008B1        5080008F                 M0 = Null + r6;
0x0008B2        01900000                 r7 = Null + 0;
0x0008B3        F3A00000                 push r8;
0x0008B4        E5F00039                 do $M.cbops.fir_resample.main.fractinal_gen_loop;
0x0008B5        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0008B6        7F2BD500                 I2 = I2 - M3, M[I1,1] = r3;
0x0008B7        DD500035                 if POS jump $M.cbops.fir_resample.main.continue_reading;

 <$M.cbops.fir_resample.main.generate_output_loop>
0x0008B8        CC16008F                 rMAC = r4 * r6 (SS);
0x0008B9        8DA10018                 r8 = rMAC LSHIFT 24;
0x0008BA        8DAA007F                 r8 = r8 LSHIFT -1;
0x0008BB        8D410000                 r2 = rMAC LSHIFT 0;
0x0008BC        5863004F                 I6 = I3 + r2;
0x0008BD        6524FFEA                 r0 = -22 - r2;
0x0008BE        7092004F                 M1 = r0 - r2;
0x0008BF        5871000F                 I7 = I1 + Null;
0x0008C0        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C1        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C2        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C3        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C4        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008C5        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0008C6        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008C7        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008C8        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008C9        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008CA        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008CB        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008CC        BC12273F                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3];
0x0008CD        79990002                 M1 = M1 - 2;
0x0008CE        474B0000                 r2 = r2 + M3;
0x0008CF        DD400003                 if NEG jump $M.cbops.fir_resample.main.no_extra_load;
0x0008D0        71980001                 M1 = r6 - 1;
0x0008D1        2040378F                 r2 = Null - r6, r1 = M[I1,M3];

 <$M.cbops.fir_resample.main.no_extra_load>
0x0008D2        5863004F                 I6 = I3 + r2;
0x0008D3        0041000F                 r2 = rMAC + Null;
0x0008D4        469B273A                 r7 = r7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x0008D5        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008D6        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008D7        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008D8        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0008D9        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0008DA        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008DB        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008DC        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008DD        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008DE        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008DF        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0008E0        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0008E1        5817000F                 I1 = I7 + Null;
0x0008E2        CC1100AF                 rMAC = rMAC * r8 (SS);
0x0008E3        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x0008E5        03670091                 r4 = r4 + r5, M[I4,1] = rMAC;
0x0008E6        DD400004                 if NEG jump $M.cbops.fir_resample.main.gen_done;
0x0008E7        59220001                 I2 = I2 + 1;
0x0008E8        FD00007F 2166FFFF        r4 = r4 - 8388607;

 <$M.cbops.fir_resample.main.gen_done>
0x0008EA        5F250000                 I2 = I2 + I5;
0x0008EB        DD40FFCD                 if NEG jump $M.cbops.fir_resample.main.generate_output_loop;

 <$M.cbops.fir_resample.main.continue_reading>
0x0008EC        03000000                 Null = Null + Null;

 <$M.cbops.fir_resample.main.fractinal_gen_loop>
0x0008ED        F3A40000                 pop r8;
0x0008EE        4420001F                 r0 = Null + I1;
0x0008EF        D52A0005                 M[r8 + 5] = r0;
0x0008F0        4420002F                 r0 = Null + I2;
0x0008F1        D52A000B                 M[r8 + 11] = r0;
0x0008F2        D56A000A                 M[r8 + 10] = r4;

 <$M.cbops.fir_resample.main.process_done>
0x0008F3        51E00000                 L4 = Null + 0;
0x0008F4        51D00000                 L1 = Null + 0;
0x0008F5        51C00000                 L0 = Null + 0;
0x0008F6        1990668C                 M[$cbops.amount_written] = r7 + Null;
0x0008F7        09309691                 r1 = Null + M[$M.cbops.fir_resample.amount_used];
0x0008F8        D12AFFFE                 r0 = M[r8 + -2];
0x0008F9        E402002F                 Null = r0 + 1;
0x0008FA        00930000                 if EQ r7 = r1 + Null;
0x0008FB        1990968B                 M[$cbops.amount_to_use] = r7 + Null;
0x0008FC        DDF00B76                 jump $pop_rLink_and_rts;

 <$MeloD_Expansion.process>
0x0008FD        D1290005                 r0 = M[r7 + 5];
0x0008FE        D1890006                 r6 = M[r7 + 6];
0x0008FF        D1A90004                 r8 = M[r7 + 4];
0x000900        D3A00000                 r8 = M[r8 + Null];
0x000901        01703D5D                 r5 = Null + 15709;
0x000902        832A0000                 r0 = r0 AND r8;
0x000903        DD000004                 if EQ jump $M.MeloD_Expansion_process.not_bypassed_in_music_manager;
0x000904        0008000F                 Null = r6 + Null;
0x000905        DD00077F                 if EQ jump $M.audio_proc.stereo_copy.Process.func;
0x000906        2070007F                 r5 = Null - r5;

 <$M.MeloD_Expansion_process.not_bypassed_in_music_manager>
0x000907        F3D00000                 push rLink;
0x000908        0920FE93                 r0 = Null + M[0xfffe93];
0x000909        F3200000                 push r0;
0x00090A        E420002F                 r0 = Null + 1;
0x00090B        1920FE93                 M[0xfffe93] = r0 + Null;
0x00090C        D1290000                 r0 = M[r7 + 0];
0x00090D        E1F00B37                 call $frmbuffer.get_buffer;
0x00090E        5000002F                 I0 = Null + r0;
0x00090F        50C0003F                 L0 = Null + r1;
0x000910        D1290001                 r0 = M[r7 + 1];
0x000911        E1F00B33                 call $frmbuffer.get_buffer;
0x000912        5040002F                 I4 = Null + r0;
0x000913        50E0003F                 L4 = Null + r1;
0x000914        00C5000F                 r10 = r3 + Null;
0x000915        D1290002                 r0 = M[r7 + 2];
0x000916        005C000F                 r3 = r10 + Null;
0x000917        E1F00B59                 call $frmbuffer.set_frame_size;
0x000918        E1F00B2C                 call $frmbuffer.get_buffer;
0x000919        5010002F                 I1 = Null + r0;
0x00091A        50D0003F                 L1 = Null + r1;
0x00091B        D1290003                 r0 = M[r7 + 3];
0x00091C        005C000F                 r3 = r10 + Null;
0x00091D        E1F00B53                 call $frmbuffer.set_frame_size;
0x00091E        E1F00B26                 call $frmbuffer.get_buffer;
0x00091F        5050002F                 I5 = Null + r0;
0x000920        50F0003F                 L5 = Null + r1;
0x000921        51900001                 M1 = Null + 1;
0x000922        51A0FFFE                 M2 = Null + -2;
0x000923        E5F00040                 do $M.MeloD_Expansion_process.widening_process_loop;
0x000924        D1290007                 r0 = M[r7 + 7];
0x000925        5020002F                 I2 = Null + r0;
0x000926        D1290008                 r0 = M[r7 + 8];
0x000927        5060002F                 I6 = Null + r0;
0x000928        03002030                 Null = Null + Null, r0 = M[I0,0], r1 = M[I4,0];
0x000929        9122007F                 r0 = r0 ASHIFT -1;
0x00092A        9133007F                 r1 = r1 ASHIFT -1;
0x00092B        2042003F                 r2 = r0 - r1;
0x00092C        03322859                 r1 = r1 + r0, r0 = M[I2,0], r3 = M[I6,1];
0x00092D        CF25C959                 rMAC = r0 * r3 (SS), M[I2,1] = r2, r3 = M[I6,1];
0x00092E        AF452859                 rMAC = rMAC + r2 * r3 (SS), r0 = M[I2,0], r3 = M[I6,1];
0x00092F        BC12005F                 rMAC = rMAC - r0 * r3 (SS);
0x000930        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x000931        0041000F                 r2 = rMAC + Null;
0x000932        0023C94F                 r0 = r1 + r2, M[I2,M1] = r2;
0x000933        23344959                 r1 = r1 - r2, r2 = M[I2,1], r3 = M[I6,1];
0x000934        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x000935        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x000936        AF264900                 rMAC = rMAC + r0 * r4 (SS), r2 = M[I2,1];
0x000937        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x000938        BF45A900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r0;
0x000939        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x00093A        0021000F                 r0 = rMAC + Null;
0x00093B        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x00093C        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x00093D        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x00093E        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x00093F        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x000940        AF264900                 rMAC = rMAC + r0 * r4 (SS), r2 = M[I2,1];
0x000941        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x000942        BF45A900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r0;
0x000943        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x000944        0021000F                 r0 = rMAC + Null;
0x000945        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x000946        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x000947        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x000948        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x000949        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x00094A        AF364900                 rMAC = rMAC + r1 * r4 (SS), r2 = M[I2,1];
0x00094B        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x00094C        BF45B900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r1;
0x00094D        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x00094E        0031000F                 r1 = rMAC + Null;
0x00094F        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x000950        0300B900                 Null = Null + Null, M[I2,1] = r1;
0x000951        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x000952        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x000953        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x000954        AF364900                 rMAC = rMAC + r1 * r4 (SS), r2 = M[I2,1];
0x000955        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x000956        BF45B900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r1;
0x000957        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x000958        0031000F                 r1 = rMAC + Null;
0x000959        0287C900                 r6 = r6 + r5, M[I2,M1] = r2;
0x00095A        20880074                 if NEG r6 = r6 - r5;
0x00095B        FD00007F 0160FFFF        r4 = Null + 8388607;
0x00095D        2268B900                 r4 = r4 - r6, M[I2,M1] = r1;
0x00095E        CC12418F                 rMAC = r0 * r6 (SS), r2 = M[I0,M1];
0x00095F        AE460051                 rMAC = rMAC + r2 * r4 (SS), r3 = M[I4,M1];
0x000960        CC13958F                 rMAC = r1 * r6 (SS), M[I1,M1] = rMAC;
0x000961        AC15006F                 rMAC = rMAC + r3 * r4 (SS);
0x000962        02000095                 Null = Null + Null, M[I5,M1] = rMAC;

 <$M.MeloD_Expansion_process.widening_process_loop>
0x000963        D5890006                 M[r7 + 6] = r6;
0x000964        50C0000F                 L0 = Null + Null;
0x000965        50E0000F                 L4 = Null + Null;
0x000966        50D0000F                 L1 = Null + Null;
0x000967        50F0000F                 L5 = Null + Null;
0x000968        F3240000                 pop r0;
0x000969        1920FE93                 M[0xfffe93] = r0 + Null;
0x00096A        DDF00B08                 jump $pop_rLink_and_rts;

 <$cmpd100.analysis>
0x00096B        D12A0000                 r0 = M[r8 + 0];
0x00096C        D13A0001                 r1 = M[r8 + 1];
0x00096D        83320000                 r1 = r1 AND r0;
0x00096E        DC0D0001                 if NE rts;
0x00096F        F3D00000                 push rLink;
0x000970        D12A0002                 r0 = M[r8 + 2];
0x000971        E1F00AD3                 call $frmbuffer.get_buffer;
0x000972        5000002F                 I0 = Null + r0;
0x000973        50C0003F                 L0 = Null + r1;
0x000974        D12A0003                 r0 = M[r8 + 3];
0x000975        E1F00ACF                 call $frmbuffer.get_buffer;
0x000976        5040002F                 I4 = Null + r0;
0x000977        50E0003F                 L4 = Null + r1;
0x000978        00C5000F                 r10 = r3 + Null;
0x000979        01400000                 r2 = Null + 0;
0x00097A        E5F0000A                 do $M.cmpd100.analysis.loop_find_peak;
0x00097B        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x00097C        2002000F                 Null = r0 - Null;
0x00097D        20200024                 if NEG r0 = Null - r0;
0x00097E        2003000F                 Null = r1 - Null;
0x00097F        20300034                 if NEG r1 = Null - r1;
0x000980        2002003F                 Null = r0 - r1;
0x000981        00230004                 if NEG r0 = r1 + Null;
0x000982        2004002F                 Null = r2 - r0;
0x000983        00420004                 if NEG r2 = r0 + Null;

 <$M.cmpd100.analysis.loop_find_peak>
0x000984        19406694                 M[$M.cmpd100.analysis.MusicComp_Peak] = r2 + Null;
0x000985        0014000F                 rMAC = r2 + Null;
0x000986        E1F00981                 call $math.log2_table;
0x000987        19209694                 M[$M.cmpd100.analysis.MusicComp_Peak_log] = r0 + Null;
0x000988        D14A001D                 r2 = M[r8 + 29];
0x000989        0042004F                 r2 = r0 + r2;
0x00098A        51C00000                 L0 = Null + 0;
0x00098B        51E00000                 L4 = Null + 0;
0x00098C        513A0008                 I3 = r8 + 8;
0x00098D        514A0012                 I4 = r8 + 18;
0x00098E        51900001                 M1 = Null + 1;
0x00098F        D15A000D                 r3 = M[r8 + 13];
0x000990        D16A000C                 r4 = M[r8 + 12];
0x000991        D17A000B                 r5 = M[r8 + 11];
0x000992        D18A000A                 r6 = M[r8 + 10];
0x000993        2024005F                 r0 = r2 - r3;
0x000994        DD40000D                 if NEG jump $M.cmpd100.analysis.CompressComparison;
0x000995        D13A0011                 r1 = M[r8 + 17];
0x000996        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000997        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x000998        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x000999        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x00099A        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x00099B        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x00099C        510A001B                 I0 = r8 + 27;
0x00099D        19109695                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x00099E        01300005                 r1 = Null + 5;
0x00099F        19306695                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0009A0        DDF0002B                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.CompressComparison>
0x0009A1        2024006F                 r0 = r2 - r4;
0x0009A2        DD40000C                 if NEG jump $M.cmpd100.analysis.LinearComparison;
0x0009A3        D13A0010                 r1 = M[r8 + 16];
0x0009A4        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0009A5        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x0009A6        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0009A7        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0009A8        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0009A9        510A0019                 I0 = r8 + 25;
0x0009AA        19109695                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009AB        01300004                 r1 = Null + 4;
0x0009AC        19306695                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0009AD        DDF0001E                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.LinearComparison>
0x0009AE        2024007F                 r0 = r2 - r5;
0x0009AF        DD40000B                 if NEG jump $M.cmpd100.analysis.ExpandComparison;
0x0009B0        D13A000F                 r1 = M[r8 + 15];
0x0009B1        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0009B2        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0009B3        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0009B4        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0009B5        510A0017                 I0 = r8 + 23;
0x0009B6        19109695                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009B7        01300003                 r1 = Null + 3;
0x0009B8        19306695                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0009B9        DDF00012                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.ExpandComparison>
0x0009BA        2024008F                 r0 = r2 - r6;
0x0009BB        DD40000B                 if NEG jump $M.cmpd100.analysis.gain_one;
0x0009BC        D13A000E                 r1 = M[r8 + 14];
0x0009BD        03006D00                 Null = Null + Null, r4 = M[I3,1];
0x0009BE        CF236F00                 rMAC = r0 * r1 (SS), r4 = M[I3,-1];
0x0009BF        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0009C0        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0009C1        510A0015                 I0 = r8 + 21;
0x0009C2        19109695                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009C3        01300002                 r1 = Null + 2;
0x0009C4        19306695                 M[$M.cmpd100.analysis.region] = r1 + Null;
0x0009C5        DDF00006                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.gain_one>
0x0009C6        510A0017                 I0 = r8 + 23;
0x0009C7        01100000                 rMAC = Null + 0;
0x0009C8        19109695                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0009C9        E430002F                 r1 = Null + 1;
0x0009CA        19306695                 M[$M.cmpd100.analysis.region] = r1 + Null;

 <$M.cmpd100.analysis.done_comparison>
0x0009CB        D16A0007                 r4 = M[r8 + 7];
0x0009CC        5040006F                 I4 = Null + r4;
0x0009CD        03004130                 Null = Null + Null, r2 = M[I0,1], r1 = M[I4,0];
0x0009CE        2021513F                 r0 = rMAC - r1, r3 = M[I0,M1];
0x0009CF        00540004                 if NEG r3 = r2 + Null;
0x0009D0        CF256C00                 rMAC = r0 * r3 (SS), r4 = M[I3,0];
0x0009D1        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x0009D2        03000090                 Null = Null + Null, M[I4,0] = rMAC;
0x0009D3        DDF00A9F                 jump $pop_rLink_and_rts;

 <$cbops.copy>
0x0009D4        F3D00000                 push rLink;
0x0009D5        51900001                 M1 = Null + 1;
0x0009D6        510A0001                 I0 = r8 + 1;
0x0009D7        01807FFF                 r6 = Null + 32767;
0x0009D8        0098210F                 r7 = r6 + Null, r0 = M[I0,M1];
0x0009D9        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x0009DA        511063B7                 I1 = Null + 25527;
0x0009DB        19A0668B                 M[$cbops.struc_ptr] = r8 + Null;
0x0009DC        E5F00005                 do $M.cbops.copy.min_amount_data_loop;
0x0009DD        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x0009DE        E1F00A32                 call $cbuffer.calc_amount_data;
0x0009DF        2002008F                 Null = r0 - r6;
0x0009E0        00822104                 if NEG r6 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_data_loop>
0x0009E1        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x0009E2        E5F00005                 do $M.cbops.copy.min_amount_space_loop;
0x0009E3        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x0009E4        E1F00A1C                 call $cbuffer.calc_amount_space;
0x0009E5        2002009F                 Null = r0 - r7;
0x0009E6        00922104                 if NEG r7 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_space_loop>
0x0009E7        0078000F                 r5 = r6 + Null;
0x0009E8        2007009F                 Null = r5 - r7;
0x0009E9        00790005                 if POS r5 = r7 + Null;
0x0009EA        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.amount_to_use_loop>
0x0009EB        D12A0001                 r0 = M[r8 + 1];
0x0009EC        01AA0002                 r8 = r8 + 2;
0x0009ED        D1220001                 r0 = M[r0 + 1];
0x0009EE        E0020001                 if NE call r0;
0x0009EF        D1AAFFFE                 r8 = M[r8 + -2];
0x0009F0        E40A002F                 Null = r8 + 1;
0x0009F1        DD10FFFA                 if NE jump $M.cbops.copy.amount_to_use_loop;
0x0009F2        21270200                 r0 = r5 - 512;
0x0009F3        20770025                 if POS r5 = r5 - r0;
0x0009F4        09A0668B                 r8 = Null + M[$cbops.struc_ptr];
0x0009F5        1970968B                 M[$cbops.amount_to_use] = r5 + Null;
0x0009F6        DD00003C                 if EQ jump $M.cbops.copy.done;
0x0009F7        1970668C                 M[$cbops.amount_written] = r5 + Null;
0x0009F8        510A0001                 I0 = r8 + 1;
0x0009F9        51409370                 I4 = Null + -27792;
0x0009FA        511063A7                 I1 = Null + 25511;
0x0009FB        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0009FC        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x0009FD        E5F00004                 do $M.cbops.copy.get_read_address_and_size_loop;
0x0009FE        E1F00A31                 call $cbuffer.get_read_address_and_size;
0x0009FF        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000A00        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.cbops.copy.get_read_address_and_size_loop>
0x000A01        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000A02        E5F00004                 do $M.cbops.copy.get_write_address_and_size_loop;
0x000A03        E1F00A31                 call $cbuffer.get_write_address_and_size;
0x000A04        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x000A05        0200B500                 Null = Null + Null, M[I1,M1] = r1;

 <$M.cbops.copy.get_write_address_and_size_loop>
0x000A06        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.operator_functions_loop>
0x000A07        01809370                 r6 = Null + -27792;
0x000A08        019063A7                 r7 = Null + 25511;
0x000A09        09C0968B                 r10 = Null + M[$cbops.amount_to_use];
0x000A0A        D12A0001                 r0 = M[r8 + 1];
0x000A0B        01AA0002                 r8 = r8 + 2;
0x000A0C        D1220002                 r0 = M[r0 + 2];
0x000A0D        E0020001                 if NE call r0;
0x000A0E        D1AAFFFE                 r8 = M[r8 + -2];
0x000A0F        E40A002F                 Null = r8 + 1;
0x000A10        DD10FFF7                 if NE jump $M.cbops.copy.operator_functions_loop;
0x000A11        09A0668B                 r8 = Null + M[$cbops.struc_ptr];
0x000A12        511A0001                 I1 = r8 + 1;
0x000A13        51209370                 I2 = Null + -27792;
0x000A14        513063A7                 I3 = Null + 25511;
0x000A15        51900001                 M1 = Null + 1;
0x000A16        0920968B                 r0 = Null + M[$cbops.amount_to_use];
0x000A17        50A0002F                 M2 = Null + r0;
0x000A18        0920668C                 r0 = Null + M[$cbops.amount_written];
0x000A19        50B0252F                 M3 = Null + r0, r0 = M[I1,M1];
0x000A1A        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_input_pointers_loop>
0x000A1B        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x000A1C        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x000A1D        DD000005                 if EQ jump $M.cbops.copy.input_is_a_port;
0x000A1E        5000003F                 I0 = Null + r1;
0x000A1F        50C0004F                 L0 = Null + r2;
0x000A20        50C0320F                 L0 = Null + Null, r1 = M[I0,M2];
0x000A21        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.input_is_a_port>
0x000A22        E1F00A27                 call $cbuffer.set_read_address;
0x000A23        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000A24        79770001                 I7 = I7 - 1;
0x000A25        DDC0FFF6                 if GT jump $M.cbops.copy.update_input_pointers_loop;
0x000A26        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_output_pointers_loop>
0x000A27        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x000A28        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x000A29        DD000005                 if EQ jump $M.cbops.copy.output_is_a_port;
0x000A2A        5000003F                 I0 = Null + r1;
0x000A2B        50C0004F                 L0 = Null + r2;
0x000A2C        50C0330F                 L0 = Null + Null, r1 = M[I0,M3];
0x000A2D        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.output_is_a_port>
0x000A2E        E1F00A1F                 call $cbuffer.set_write_address;
0x000A2F        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000A30        79770001                 I7 = I7 - 1;
0x000A31        DDC0FFF6                 if GT jump $M.cbops.copy.update_output_pointers_loop;

 <$M.cbops.copy.done>
0x000A32        DDF00A40                 jump $pop_rLink_and_rts;

 <$iir_resamplev2.Limited_Process>
0x000A33        F3D00000                 push rLink;
0x000A34        F3700000                 push r5;
0x000A35        D12A0000                 r0 = M[r8 + 0];
0x000A36        E1F009DA                 call $cbuffer.calc_amount_data;
0x000A37        0082000F                 r6 = r0 + Null;
0x000A38        D12A0001                 r0 = M[r8 + 1];
0x000A39        E1F009C7                 call $cbuffer.calc_amount_space;
0x000A3A        0092000F                 r7 = r0 + Null;
0x000A3B        E1F0059E                 call $iir_resamplev2.amount_to_use;
0x000A3C        F3640000                 pop r4;
0x000A3D        23760000                 r5 = r5 - r4;
0x000A3E        00760005                 if POS r5 = r4 + Null;
0x000A3F        DDF00009                 jump $M.iir_resamplev2.process.limit_entry_point;

 <$iir_resamplev2.Process>
0x000A40        F3D00000                 push rLink;
0x000A41        D12A0000                 r0 = M[r8 + 0];
0x000A42        E1F009CE                 call $cbuffer.calc_amount_data;
0x000A43        0082000F                 r6 = r0 + Null;
0x000A44        D12A0001                 r0 = M[r8 + 1];
0x000A45        E1F009BB                 call $cbuffer.calc_amount_space;
0x000A46        0092000F                 r7 = r0 + Null;
0x000A47        E1F00592                 call $iir_resamplev2.amount_to_use;

 <$M.iir_resamplev2.process.limit_entry_point>
0x000A48        00C7000F                 r10 = r5 + Null;
0x000A49        DDD00A29                 if LE jump $pop_rLink_and_rts;
0x000A4A        51800001                 M0 = Null + 1;
0x000A4B        FD00007F 01B0FFFF        r9 = Null + 8388607;
0x000A4D        500000AF                 I0 = Null + r8;
0x000A4E        F2A02000                 push r8, r0 = M[I0,M0];
0x000A4F        E1F009E0                 call $cbuffer.get_read_address_and_size;
0x000A50        5010002F                 I1 = Null + r0;
0x000A51        50D0203F                 L1 = Null + r1, r0 = M[I0,M0];
0x000A52        E1F009E2                 call $cbuffer.get_write_address_and_size;
0x000A53        50F0503F                 L5 = Null + r1, r3 = M[I0,M0];
0x000A54        5050402F                 I5 = Null + r0, r2 = M[I0,M0];
0x000A55        0005700F                 Null = r3 + Null, r5 = M[I0,M0];
0x000A56        DD000031                 if EQ jump $M.iir_resamplev2.process.jp_passthrough;
0x000A57        016A0010                 r4 = r8 + 16;
0x000A58        F3600000                 push r4;
0x000A59        F3E60000                 pop FP;
0x000A5A        512A000B                 I2 = r8 + 11;
0x000A5B        51350005                 I3 = r3 + 5;
0x000A5C        D1950004                 r7 = M[r3 + 4];
0x000A5D        DD000014                 if EQ jump $M.iir_resamplev2.process.Perform2ndStage;
0x000A5E        D12A0005                 r0 = M[r8 + 5];
0x000A5F        F1000084                 pushm <r0, r5>;
0x000A60        F1018020                 pushm <I5, L5>;
0x000A61        5050002F                 I5 = Null + r0;
0x000A62        50F0000F                 L5 = Null + Null;
0x000A63        0070000F                 r5 = Null + Null;
0x000A64        512A0007                 I2 = r8 + 7;
0x000A65        E009000F                 call r7;
0x000A66        50D0000F                 L1 = Null + Null;
0x000A67        00C96C0F                 r10 = r7 + Null, r4 = M[I3,M0];
0x000A68        4440001F                 r2 = Null + I1;
0x000A69        F1058020                 popm <I5, L5>;
0x000A6A        F1040084                 popm <r0, r5>;
0x000A6B        5010002F                 I1 = Null + r0;
0x000A6C        F3400000                 push r2;
0x000A6D        0040000F                 r2 = Null + Null;
0x000A6E        E006000F                 call r4;
0x000A6F        F3510000                 push I5;
0x000A70        DDF00006                 jump $M.iir_resamplev2.process.jp_done;

 <$M.iir_resamplev2.process.Perform2ndStage>
0x000A71        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000A72        03000000                 Null = Null + Null;
0x000A73        E002000F                 call r0;
0x000A74        F3110000                 push I1;
0x000A75        F3510000                 push I5;

 <$M.iir_resamplev2.process.jp_done>
0x000A76        F3550000                 pop I5;
0x000A77        F3150000                 pop I1;

 <$M.iir_resamplev2.process.jp_done2>
0x000A78        F3A40000                 pop r8;
0x000A79        50D0000F                 L1 = Null + Null;
0x000A7A        50F0000F                 L5 = Null + Null;
0x000A7B        F3000000                 push Null;
0x000A7C        F1AAFFFF                 B0 = M[SP + -0x1];
0x000A7D        F1BAFFFF                 B1 = M[SP + -0x1];
0x000A7E        F1CAFFFF                 B4 = M[SP + -0x1];
0x000A7F        F3D60000                 pop B5;
0x000A80        D12A0001                 r0 = M[r8 + 1];
0x000A81        4430005F                 r1 = Null + I5;
0x000A82        E1F009CB                 call $cbuffer.set_write_address;
0x000A83        D12A0000                 r0 = M[r8 + 0];
0x000A84        4430001F                 r1 = Null + I1;
0x000A85        E1F009C4                 call $cbuffer.set_read_address;
0x000A86        DDF009EC                 jump $pop_rLink_and_rts;

 <$M.iir_resamplev2.process.jp_passthrough>
0x000A87        E5F00005                 do $M.iir_resamplev2.process.lp_copy;
0x000A88        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000A89        93E40000                 rMAC = rMAC ASHIFT r2;
0x000A8A        93E70000                 rMAC = rMAC ASHIFT r5;
0x000A8B        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <$M.iir_resamplev2.process.lp_copy>
0x000A8C        DDF0FFEC                 jump $M.iir_resamplev2.process.jp_done2;

 <$pcm_sync_calc_rate>
0x000A8D        F3D00000                 push rLink;
0x000A8E        E1F0099A                 call $block_interrupts;
0x000A8F        0960FE71                 r4 = Null + M[0xfffe71];
0x000A90        D13A0007                 r1 = M[r8 + 7];
0x000A91        2046003F                 r2 = r4 - r1;
0x000A92        20400044                 if NEG r2 = Null - r2;
0x000A93        D15A0001                 r3 = M[r8 + 1];
0x000A94        2004005F                 Null = r2 - r3;
0x000A95        DD500003                 if POS jump $M.pcm_sync_calcrate.read_latency;
0x000A96        E1F00982                 call $interrupt.unblock;
0x000A97        DDF009DB                 jump $pop_rLink_and_rts;

 <$M.pcm_sync_calcrate.read_latency>
0x000A98        03350000                 r1 = r1 + r3;
0x000A99        2043006F                 r2 = r1 - r4;
0x000A9A        20400044                 if NEG r2 = Null - r2;
0x000A9B        2004005F                 Null = r2 - r3;
0x000A9C        00360005                 if POS r1 = r4 + Null;
0x000A9D        D53A0007                 M[r8 + 7] = r1;
0x000A9E        F3A00000                 push r8;
0x000A9F        D19A0002                 r7 = M[r8 + 2];
0x000AA0        E1F00395                 call $latency.calc_pcm_latency;
0x000AA1        F3A40000                 pop r8;
0x000AA2        F3800000                 push r6;
0x000AA3        01800000                 r6 = Null + 0;
0x000AA4        F3A00000                 push r8;
0x000AA5        D19A0003                 r7 = M[r8 + 3];
0x000AA6        E110038F                 if NE call $latency.calc_pcm_latency;
0x000AA7        F3A40000                 pop r8;
0x000AA8        F3940000                 pop r7;
0x000AA9        2058009F                 r3 = r6 - r7;
0x000AAA        E1F0096E                 call $interrupt.unblock;
0x000AAB        D55A000D                 M[r8 + 13] = r3;
0x000AAC        D12A0006                 r0 = M[r8 + 6];
0x000AAD        23520000                 r3 = r3 - r0;
0x000AAE        01302710                 r1 = Null + 10000;
0x000AAF        E453005F                 r3 = MIN r1;
0x000AB0        0130D8F0                 r1 = Null + -10000;
0x000AB1        E453006F                 r3 = MAX r1;
0x000AB2        E445004F                 r2 = ABS r3;
0x000AB3        9D250190                 r0 = r3 * 400 (int) (sat);
0x000AB4        9122007F                 r0 = r0 ASHIFT -1;
0x000AB5        D10A000B                 Null = M[r8 + 11];
0x000AB6        DD000009                 if EQ jump $M.pcm_sync_calcrate.not_converged;

 <$M.pcm_sync_calcrate.converged>
0x000AB7        210401C2                 Null = r2 - 450;
0x000AB8        DD500007                 if POS jump $M.pcm_sync_calcrate.not_converged;
0x000AB9        99220005                 r0 = r0 * 5 (int);
0x000ABA        9482002F                 r6 = r0 * r0 (frac);
0x000ABB        97280000                 r0 = r0 * r6 (frac);
0x000ABC        E440002F                 r2 = Null + 1;
0x000ABD        D54A000B                 M[r8 + 11] = r2;
0x000ABE        DDF00007                 jump $M.pcm_sync_calcrate.converge_check_done;

 <$M.pcm_sync_calcrate.not_converged>
0x000ABF        21040096                 Null = r2 - 150;
0x000AC0        DD40FFF7                 if NEG jump $M.pcm_sync_calcrate.converged;
0x000AC1        91820018                 r6 = r0 ASHIFT 24;
0x000AC2        97220000                 r0 = r0 * r0 (frac);
0x000AC3        97280000                 r0 = r0 * r6 (frac);
0x000AC4        D50A000B                 M[r8 + 11] = Null;

 <$M.pcm_sync_calcrate.converge_check_done>
0x000AC5        FD000001 213247AE        r1 = r0 - 83886;
0x000AC7        20220035                 if POS r0 = r0 - r1;
0x000AC8        FD000001 013247AE        r1 = r0 + 83886;
0x000ACA        20220034                 if NEG r0 = r0 - r1;
0x000ACB        D52A0009                 M[r8 + 9] = r0;
0x000ACC        01100000                 rMAC = Null + 0;
0x000ACD        D12A0005                 r0 = M[r8 + 5];
0x000ACE        DD000014                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x000ACF        D3200000                 r0 = M[r0 + Null];
0x000AD0        DD000012                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x000AD1        D13A0004                 r1 = M[r8 + 4];
0x000AD2        D3300000                 r1 = M[r1 + Null];
0x000AD3        DD00000F                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x000AD4        2013002F                 rMAC = r1 - r0;
0x000AD5        91E10003                 rMAC = rMAC ASHIFT 3 (MI);
0x000AD6        D9020000                 Div = rMAC / r0;
0x000AD7        D9100001                 rMAC = DivResult;
0x000AD8        D10A000C                 Null = M[r8 + 12];
0x000AD9        DD000008                 if EQ jump $M.pcm_sync_calcrate.update_rate_before_fix;
0x000ADA        E420002F                 r0 = Null + 1;
0x000ADB        D10A000C                 Null = M[r8 + 12];
0x000ADC        D16A000A                 r4 = M[r8 + 10];
0x000ADD        FD000001 CD1147AE        rMAC = rMAC * 0.0099999904632568359 (SS);
0x000ADF        FD00007E AD16B852        rMAC = rMAC + r4 * 0.99000000953674316 (SS);

 <$M.pcm_sync_calcrate.update_rate_before_fix>
0x000AE1        D51A000A                 M[r8 + 10] = rMAC;

 <$M.pcm_sync_calcrate.calc_rate_done>
0x000AE2        95610800                 r4 = rMAC * 0.0625 (frac);
0x000AE3        D15A0009                 r3 = M[r8 + 9];
0x000AE4        03650000                 r4 = r4 + r3;
0x000AE5        D12A0000                 r0 = M[r8 + 0];
0x000AE6        E462005F                 r4 = MIN r0;
0x000AE7        2020002F                 r0 = Null - r0;
0x000AE8        E462006F                 r4 = MAX r0;
0x000AE9        D56A0008                 M[r8 + 8] = r4;
0x000AEA        DDF00988                 jump $pop_rLink_and_rts;

 <$cbops.dither_and_shift.main>
0x000AEB        F3D00000                 push rLink;
0x000AEC        D12A0000                 r0 = M[r8 + 0];
0x000AED        D038002F                 r1 = M[r6 + r0];
0x000AEE        5000003F                 I0 = Null + r1;
0x000AEF        D039002F                 r1 = M[r7 + r0];
0x000AF0        50C0003F                 L0 = Null + r1;
0x000AF1        D12A0001                 r0 = M[r8 + 1];
0x000AF2        D038002F                 r1 = M[r6 + r0];
0x000AF3        5040003F                 I4 = Null + r1;
0x000AF4        D039002F                 r1 = M[r7 + r0];
0x000AF5        50E0003F                 L4 = Null + r1;
0x000AF6        0940968E                 r2 = Null + M[$M.cbops.dither_and_shift.main.rand_num];
0x000AF7        D15A0003                 r3 = M[r8 + 3];
0x000AF8        FD00007F 0170FFFF        r5 = Null + 8388607;
0x000AFA        D1259611                 r0 = M[r3 + -27119];
0x000AFB        D19A0002                 r7 = M[r8 + 2];
0x000AFC        6589FFE8                 r6 = -24 - r7;
0x000AFD        9087008F                 r6 = r5 ASHIFT r6;
0x000AFE        51900011                 M1 = Null + 17;
0x000AFF        01603555                 r4 = Null + 13653;
0x000B00        DC02000F                 jump r0;

 <$M.cbops.dither_and_shift.main.no_dither>
0x000B01        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000B03        9065009F                 r4 = r3 ASHIFT r7;
0x000B04        E4CC003F                 r10 = r10 - 1;
0x000B05        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x000B06        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x000B07        E416005F                 rMAC = MIN r4;
0x000B08        E5F00004                 do $M.cbops.dither_and_shift.main.just_shift_loop;
0x000B09        03001191                 Null = Null + Null, rMAC = M[I0,1], M[I4,1] = rMAC;
0x000B0A        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x000B0B        E416005F                 rMAC = MIN r4;

 <$M.cbops.dither_and_shift.main.just_shift_loop>
0x000B0C        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x000B0D        DDF00030                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.tpdf_dither>
0x000B0E        FD0000FF 515036FB        I5 = Null + -51461;
0x000B10        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x000B11        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000B12        E5F00009                 do $M.cbops.dither_and_shift.main.tpdf_dither_loop;
0x000B13        9B460000                 r2 = r2 * r4 (int);
0x000B14        47490000                 r2 = r2 + M1;
0x000B15        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000B16        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x000B17        9B460094                 r2 = r2 * r4 (int), M[I5,0] = rMAC;
0x000B18        47490034                 r2 = r2 + M1, r1 = M[I5,0];
0x000B19        93391100                 r1 = r1 ASHIFT r7, rMAC = M[I0,1];
0x000B1A        AF4800B1                 rMAC = rMAC + r2 * r6 (SS), M[I4,1] = r1;

 <$M.cbops.dither_and_shift.main.tpdf_dither_loop>
0x000B1B        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x000B1C        DDF00021                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.noiseshaped_dither>
0x000B1D        51D00005                 L1 = Null + 5;
0x000B1E        D12A0004                 r0 = M[r8 + 4];
0x000B1F        5010002F                 I1 = Null + r0;
0x000B20        FD0000FF 515036F5        I5 = Null + -51467;
0x000B22        5180FFFA                 M0 = Null + -6;
0x000B23        FD0000FF 198036FB        M[0xff36fb] = r6 + Null;
0x000B25        95886000                 r6 = r6 * 0.75 (frac);
0x000B26        E450003F                 r3 = Null - 1;
0x000B27        2020009F                 r0 = Null - r7;
0x000B28        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x000B29        E5F00011                 do $M.cbops.dither_and_shift.main.shaped_dither_loop;
0x000B2A        9B461125                 r2 = r2 * r4 (int), rMAC = M[I0,1], r0 = M[I5,1];
0x000B2B        4749B700                 r2 = r2 + M1, M[I1,-1] = r1;
0x000B2C        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B2D        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B2E        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x000B2F        BF323425                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I5,1];
0x000B30        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x000B31        AF480094                 rMAC = rMAC + r2 * r6 (SS), M[I5,0] = rMAC;
0x000B32        9B460025                 r2 = r2 * r4 (int), r0 = M[I5,1];
0x000B33        47490000                 r2 = r2 + M1;
0x000B34        AE480034                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I5,M0];
0x000B35        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x000B36        8031005F                 r1 = rMAC AND r3;
0x000B37        90E3009F                 rMAC = r1 ASHIFT r7;
0x000B38        23320091                 r1 = r1 - r0, M[I4,1] = rMAC;
0x000B39        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.dither_and_shift.main.shaped_dither_loop>
0x000B3A        7FDDB400                 L1 = L1 - L1, M[I1,0] = r1;
0x000B3B        4420001F                 r0 = Null + I1;
0x000B3C        D52A0004                 M[r8 + 4] = r0;

 <$M.cbops.dither_and_shift.main.end>
0x000B3D        51C00000                 L0 = Null + 0;
0x000B3E        51E00000                 L4 = Null + 0;
0x000B3F        1940968E                 M[$M.cbops.dither_and_shift.main.rand_num] = r2 + Null;
0x000B40        DDF00932                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_downsample>
0x000B41        F3D00000                 push rLink;
0x000B42        5F380000                 I3 = I3 + M0;
0x000B43        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000B44        F3E20000                 push FP;
0x000B45        F3A60000                 pop B0;
0x000B46        F107000A                 FP = FP + 10;
0x000B47        F3E20000                 push FP;
0x000B48        F3C60000                 pop B4;
0x000B49        F007003F                 FP = FP + r1;
0x000B4A        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000B4B        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000B4C        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000B4D        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000B4E        5060003F                 I6 = Null + r1;
0x000B4F        F3210000                 push I2;
0x000B50        70A0386F                 M2 = Null - r4, r1 = M[I2,M0];
0x000B51        9946000A                 r2 = r4 * 10 (int);
0x000B52        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000B53        5FB60000                 M3 = M3 + I6;
0x000B54        5EB62800                 M3 = M3 + I6, r0 = M[I2,M0];
0x000B55        5000282F                 I0 = Null + r0, r0 = M[I2,M0];
0x000B56        5040002F                 I4 = Null + r0;
0x000B57        51C0000A                 L0 = Null + 10;
0x000B58        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x000B59        2055005A                 if GE r3 = r3 - r3;
0x000B5A        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x000B5B        004400B4                 if NEG r2 = r2 + r9;
0x000B5C        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x000B5D        4422008C                 if GT r0 = r0 + M0;
0x000B5E        0003000F                 Null = r1 + Null;
0x000B5F        00230001                 if NE r0 = r1 + Null;
0x000B60        23C20000                 r10 = r10 - r0;
0x000B61        DD40001E                 if NEG jump $M.iir_2ndStage_downsample.insufficient_data;

 <$M.iir_2ndStage_downsample.loop>
0x000B62        9434006F                 r1 = r2 * r4 (frac);
0x000B63        5876003F                 I7 = I6 + r1;

 <$M.iir_2ndStage_downsample.read_input>
0x000B64        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000B65        E007000F                 call r5;
0x000B66        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x000B67        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input;
0x000B68        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000B69        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000B6A        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000B6B        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000B6C        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000B6D        7C7B007F                 I7 = M3 - I7;
0x000B6E        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B6F        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B70        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B71        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B72        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B73        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000B74        903100AF                 r1 = rMAC ASHIFT r8;
0x000B75        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000B76        79330003                 I3 = I3 - 3;
0x000B77        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x000B78        2055005A                 if GE r3 = r3 - r3;
0x000B79        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x000B7A        004400B4                 if NEG r2 = r2 + r9;
0x000B7B        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x000B7C        4422008C                 if GT r0 = r0 + M0;
0x000B7D        23C20000                 r10 = r10 - r0;
0x000B7E        DD50FFE4                 if POS jump $M.iir_2ndStage_downsample.loop;

 <$M.iir_2ndStage_downsample.insufficient_data>
0x000B7F        006200CF                 r4 = r0 + r10;
0x000B80        DD000007                 if EQ jump $M.iir_2ndStage_downsample.done;
0x000B81        0026000F                 r0 = r4 + Null;
0x000B82        206000CF                 r4 = Null - r10;

 <$M.iir_2ndStage_downsample.read_input_end>
0x000B83        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000B84        E007000F                 call r5;
0x000B85        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x000B86        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input_end;

 <$M.iir_2ndStage_downsample.done>
0x000B87        5832000F                 I3 = I2 + Null;
0x000B88        F3250000                 pop I2;
0x000B89        50C0E80F                 L0 = Null + Null, M[I2,M0] = r4;
0x000B8A        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000B8B        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000B8C        50E0A80F                 L4 = Null + Null, M[I2,M0] = r0;
0x000B8D        DDF008E5                 jump $pop_rLink_and_rts;

 <$cmpd100.applygain>
0x000B8E        D12A0000                 r0 = M[r8 + 0];
0x000B8F        D13A0001                 r1 = M[r8 + 1];
0x000B90        83320000                 r1 = r1 AND r0;
0x000B91        DC0D0001                 if NE rts;
0x000B92        F3D00000                 push rLink;
0x000B93        D12A0002                 r0 = M[r8 + 2];
0x000B94        E1F008B0                 call $frmbuffer.get_buffer;
0x000B95        5000002F                 I0 = Null + r0;
0x000B96        50C0003F                 L0 = Null + r1;
0x000B97        D12A0003                 r0 = M[r8 + 3];
0x000B98        E1F008AC                 call $frmbuffer.get_buffer;
0x000B99        5040002F                 I4 = Null + r0;
0x000B9A        50E0003F                 L4 = Null + r1;
0x000B9B        00C5000F                 r10 = r3 + Null;
0x000B9C        D12A0004                 r0 = M[r8 + 4];
0x000B9D        E1F008D3                 call $frmbuffer.set_frame_size;
0x000B9E        E1F008A6                 call $frmbuffer.get_buffer;
0x000B9F        5010002F                 I1 = Null + r0;
0x000BA0        50D0003F                 L1 = Null + r1;
0x000BA1        D12A0005                 r0 = M[r8 + 5];
0x000BA2        005C000F                 r3 = r10 + Null;
0x000BA3        E1F008CD                 call $frmbuffer.set_frame_size;
0x000BA4        E1F008A0                 call $frmbuffer.get_buffer;
0x000BA5        5050002F                 I5 = Null + r0;
0x000BA6        50F0003F                 L5 = Null + r1;
0x000BA7        D14A0006                 r2 = M[r8 + 6];
0x000BA8        D15A0007                 r3 = M[r8 + 7];
0x000BA9        D025000F                 r0 = M[r3 + Null];
0x000BAA        91220004                 r0 = r0 ASHIFT 4;
0x000BAB        FD000003 21220000        r0 = r0 - 196608;
0x000BAD        E1F007BE                 call $math.pow2_table;
0x000BAE        19206696                 M[$M.cmpd100.applygain.lin_gain] = r0 + Null;
0x000BAF        09509696                 r3 = Null + M[$M.cmpd100.applygain.old_lin_gain];
0x000BB0        2052005F                 r3 = r0 - r3;
0x000BB1        9155007C                 r3 = r3 ASHIFT -4;
0x000BB2        21CC0010                 r10 = r10 - 16;
0x000BB3        19C06697                 M[$M.cmpd100.applygain.remaninder_samples] = r10 + Null;
0x000BB4        01C00010                 r10 = Null + 16;
0x000BB5        00B5000F                 r9 = r3 + Null;
0x000BB6        E5F0000B                 do $M.cmpd100.applygain.loop_ramped_gain_copy_data;
0x000BB7        09209696                 r0 = Null + M[$M.cmpd100.applygain.old_lin_gain];
0x000BB8        032B0000                 r0 = r0 + r9;
0x000BB9        9462004F                 r4 = r0 * r2 (frac);
0x000BBA        03B50000                 r9 = r9 + r3;
0x000BBB        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000BBC        CC12006F                 rMAC = r0 * r4 (SS);
0x000BBD        91210007                 r0 = rMAC ASHIFT 7;
0x000BBE        9413006F                 rMAC = r1 * r4 (frac);
0x000BBF        91310007                 r1 = rMAC ASHIFT 7;
0x000BC0        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_ramped_gain_copy_data>
0x000BC1        09C06697                 r10 = Null + M[$M.cmpd100.applygain.remaninder_samples];
0x000BC2        09206696                 r0 = Null + M[$M.cmpd100.applygain.lin_gain];
0x000BC3        19209696                 M[$M.cmpd100.applygain.old_lin_gain] = r0 + Null;
0x000BC4        9462004F                 r4 = r0 * r2 (frac);
0x000BC5        E5F00007                 do $M.cmpd100.applygain.loop_copy_data;
0x000BC6        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000BC7        CC12006F                 rMAC = r0 * r4 (SS);
0x000BC8        91210007                 r0 = rMAC ASHIFT 7;
0x000BC9        9413006F                 rMAC = r1 * r4 (frac);
0x000BCA        91310007                 r1 = rMAC ASHIFT 7;
0x000BCB        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_copy_data>
0x000BCC        51C00000                 L0 = Null + 0;
0x000BCD        51D00000                 L1 = Null + 0;
0x000BCE        51E00000                 L4 = Null + 0;
0x000BCF        51F00000                 L5 = Null + 0;
0x000BD0        DDF008A2                 jump $pop_rLink_and_rts;

 <$audio_proc.hq_peq.process>
0x000BD1        F3D00000                 push rLink;
0x000BD2        D1290000                 r0 = M[r7 + 0];
0x000BD3        E1F00871                 call $frmbuffer.get_buffer;
0x000BD4        5040002F                 I4 = Null + r0;
0x000BD5        50E0003F                 L4 = Null + r1;
0x000BD6        0065000F                 r4 = r3 + Null;
0x000BD7        D1290001                 r0 = M[r7 + 1];
0x000BD8        E1F00898                 call $frmbuffer.set_frame_size;
0x000BD9        E1F0086B                 call $frmbuffer.get_buffer;
0x000BDA        5000002F                 I0 = Null + r0;
0x000BDB        50C0003F                 L0 = Null + r1;
0x000BDC        F3D40000                 pop rLink;

 <$audio_proc.hq_peq.process_op>
0x000BDD        51900001                 M1 = Null + 1;
0x000BDE        51390003                 I3 = r7 + 3;
0x000BDF        5180FFFF                 M0 = Null + -1;
0x000BE0        00C02D0F                 r10 = Null + Null, r0 = M[I3,M1];
0x000BE1        54222D9F                 I2 = r0 + M1, r0 = M[I3,M1];
0x000BE2        F3200000                 push r0;
0x000BE3        F3D60000                 pop B5;
0x000BE4        50502D2F                 I5 = Null + r0, r0 = M[I3,M1];
0x000BE5        F3200000                 push r0;
0x000BE6        F3B60000                 pop B1;
0x000BE7        50103D2F                 I1 = Null + r0, r1 = M[I3,M1];
0x000BE8        50A03D3F                 M2 = Null + r1, r1 = M[I3,M1];
0x000BE9        50F03D3F                 L5 = Null + r1, r1 = M[I3,M1];
0x000BEA        50D0393F                 L1 = Null + r1, r1 = M[I2,M1];
0x000BEB        02007900                 Null = Null + Null, r5 = M[I2,M1];
0x000BEC        E483003F                 r6 = r1 - 1;
0x000BED        D1490002                 r2 = M[r7 + 2];
0x000BEE        99440005                 r2 = r2 * 5 (int);
0x000BEF        5B240000                 I2 = I2 + r2;
0x000BF0        5F2A0000                 I2 = I2 + M2;
0x000BF1        74A000AF                 M2 = Null - M2;

 <$M.audio_proc.hq_peq.process.hq_peq_block_loop>
0x000BF2        F3600000                 push r4;
0x000BF3        66CA0021                 r10 = r10 - M2, r0 = M[I4,M1];
0x000BF4        CC122A7F                 rMAC = r0 * r5 (SS), r0 = M[I2,M2];
0x000BF5        9021008F                 r0 = rMAC ASHIFT r6;
0x000BF6        51B00003                 M3 = Null + 3;
0x000BF7        03000045                 Null = Null + Null, r2 = M[I5,1];
0x000BF8        03000035                 Null = Null + Null, r1 = M[I5,1];
0x000BF9        E5F0000C                 do $M.audio_proc.hq_peq.process.hq_biquad_loop;
0x000BFA        23116557                 rMAC = rMAC - rMAC, r4 = M[I1,1], r3 = M[I5,-1];
0x000BFB        8DE50280                 rMAC0 = r3 LSHIFT 0;
0x000BFC        AF4665A7                 rMAC = rMAC + r2 * r4 (SS), r4 = M[I1,1], M[I5,-1] = r0;
0x000BFD        AE3665B7                 rMAC = rMAC + r1 * r4 (SS), r4 = M[I1,M1], M[I5,M3] = r1;
0x000BFE        AF266545                 rMAC = rMAC + r0 * r4 (SS), r4 = M[I1,1], r2 = M[I5,1];
0x000BFF        BF466537                 rMAC = rMAC - r2 * r4 (SS), r4 = M[I1,1], r1 = M[I5,-1];
0x000C00        BF366947                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I2,1], r2 = M[I5,-1];
0x000C01        8D510018                 r3 = rMAC LSHIFT 24;
0x000C02        8DE00280                 rMAC0 = Null LSHIFT 0;
0x000C03        9021006F                 r0 = rMAC ASHIFT r4;
0x000C04        020000D7                 Null = Null + Null, M[I5,M3] = r3;

 <$M.audio_proc.hq_peq.process.hq_biquad_loop>
0x000C05        03000057                 Null = Null + Null, r3 = M[I5,-1];
0x000C06        03000057                 Null = Null + Null, r3 = M[I5,-1];
0x000C07        030000B5                 Null = Null + Null, M[I5,1] = r1;
0x000C08        030000A5                 Null = Null + Null, M[I5,1] = r0;
0x000C09        91220001                 r0 = r0 ASHIFT 1;
0x000C0A        F3640000                 pop r4;
0x000C0B        6669A100                 r4 = r4 - M1, M[I0,M1] = r0;
0x000C0C        DD10FFE6                 if NE jump $M.audio_proc.hq_peq.process.hq_peq_block_loop;
0x000C0D        50C0000F                 L0 = Null + Null;
0x000C0E        50E0000F                 L4 = Null + Null;
0x000C0F        50D0000F                 L1 = Null + Null;
0x000C10        50F0000F                 L5 = Null + Null;
0x000C11        F3000000                 push Null;
0x000C12        F1BAFFFF                 B1 = M[SP + -0x1];
0x000C13        F3D60000                 pop B5;
0x000C14        DC0D000F                 rts;

 <$message.received_service_routine>
0x000C15        F3D00000                 push rLink;
0x000C16        51800000                 M0 = Null + 0;
0x000C17        0920FE1D                 r0 = Null + M[0xfffe1d];
0x000C18        8132FFF0                 r1 = r0 AND 0xfff0;
0x000C19        8903FFF0                 Null = r1 XOR 0xfff0;
0x000C1A        DD10001B                 if NE jump $M.message.received_service_routine.non_long_message;
0x000C1B        81020001                 Null = r0 AND 0x1;
0x000C1C        DD000002                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x000C1D        19009687                 M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x000C1E        09309687                 r1 = Null + M[$message.long_message_size];
0x000C1F        21030052                 Null = r1 - 82;
0x000C20        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x000C21        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x000C22        0940E006                 r2 = Null + M[0xffe006];
0x000C23        D5433F60                 M[r1 + 16224] = r2;
0x000C24        0940E007                 r2 = Null + M[0xffe007];
0x000C25        D5433F61                 M[r1 + 16225] = r2;
0x000C26        0940E008                 r2 = Null + M[0xffe008];
0x000C27        D5433F62                 M[r1 + 16226] = r2;
0x000C28        0940E009                 r2 = Null + M[0xffe009];
0x000C29        D5433F63                 M[r1 + 16227] = r2;
0x000C2A        01330004                 r1 = r1 + 4;
0x000C2B        19309687                 M[$message.long_message_size] = r1 + Null;
0x000C2C        81020002                 Null = r0 AND 0x2;
0x000C2D        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x000C2E        0970E001                 r5 = Null + M[0xffe001];
0x000C2F        E477002F                 r5 = r5 + 1;
0x000C30        1970E001                 M[0xffe001] = r5 + Null;
0x000C31        DDF00841                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x000C32        09203F60                 r0 = Null + M[$message.long_message_data];
0x000C33        8122FFFF                 r0 = r0 AND 0xffff;
0x000C34        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x000C35        01C00032                 r10 = Null + 50;
0x000C36        09309685                 r1 = Null + M[$message.last_addr];
0x000C37        E5F00009                 do $M.message.received_service_routine.loop;
0x000C38        E403002F                 Null = r1 + 1;
0x000C39        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x000C3A        D1430003                 r2 = M[r1 + 3];
0x000C3B        8052004F                 r3 = r0 AND r2;
0x000C3C        D1430001                 r2 = M[r1 + 1];
0x000C3D        2005004F                 Null = r3 - r2;
0x000C3E        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x000C3F        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x000C40        E1F01A19                 call $error;

 <$M.message.received_service_routine.no_handler>
0x000C41        0970E001                 r5 = Null + M[0xffe001];
0x000C42        E477002F                 r5 = r5 + 1;
0x000C43        1970E001                 M[0xffe001] = r5 + Null;
0x000C44        DDF0082E                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x000C45        D1D30002                 rLink = M[r1 + 2];
0x000C46        47080000                 Null = Null + M0;
0x000C47        DD000006                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x000C48        0032000F                 r1 = r0 + Null;
0x000C49        09403F61                 r2 = Null + M[0x3f61];
0x000C4A        01503F62                 r3 = Null + 16226;
0x000C4B        0120FFFE                 r0 = Null + -2;
0x000C4C        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x000C4D        0930E006                 r1 = Null + M[0xffe006];
0x000C4E        0940E007                 r2 = Null + M[0xffe007];
0x000C4F        0950E008                 r3 = Null + M[0xffe008];
0x000C50        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x000C51        0970E001                 r5 = Null + M[0xffe001];
0x000C52        E477002F                 r5 = r5 + 1;
0x000C53        1970E001                 M[0xffe001] = r5 + Null;
0x000C54        E00D000F                 call rLink;
0x000C55        DDF0081D                 jump $pop_rLink_and_rts;

 <$cbops.iir_resamplev2.main>
0x000C56        F3D00000                 push rLink;
0x000C57        F3E20000                 push FP;
0x000C58        51800001                 M0 = Null + 1;
0x000C59        FD00007F 01B0FFFF        r9 = Null + 8388607;
0x000C5B        500000AF                 I0 = Null + r8;
0x000C5C        F2A02000                 push r8, r0 = M[I0,M0];
0x000C5D        D038002F                 r1 = M[r6 + r0];
0x000C5E        5010603F                 I1 = Null + r1, r4 = M[I0,M0];
0x000C5F        D039002F                 r1 = M[r7 + r0];
0x000C60        50D0503F                 L1 = Null + r1, r3 = M[I0,M0];
0x000C61        D038006F                 r1 = M[r6 + r4];
0x000C62        5050403F                 I5 = Null + r1, r2 = M[I0,M0];
0x000C63        D039006F                 r1 = M[r7 + r4];
0x000C64        50F0003F                 L5 = Null + r1;
0x000C65        09309690                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x000C66        00C37001                 if NE r10 = r1 + Null, r5 = M[I0,M0];
0x000C67        19C09690                 M[$M.cbops.iir_resamplev2.amount_used] = r10 + Null;
0x000C68        0005000F                 Null = r3 + Null;
0x000C69        DD000029                 if EQ jump $M.cbops_iir_resamplev2.main.jp_passthrough;
0x000C6A        016A0010                 r4 = r8 + 16;
0x000C6B        F3600000                 push r4;
0x000C6C        F3E60000                 pop FP;
0x000C6D        512A000B                 I2 = r8 + 11;
0x000C6E        51350005                 I3 = r3 + 5;
0x000C6F        D1950004                 r7 = M[r3 + 4];
0x000C70        DD00000F                 if EQ jump $M.cbops_iir_resamplev2.main.Perform2ndStage;
0x000C71        D12A0005                 r0 = M[r8 + 5];
0x000C72        F1000084                 pushm <r0, r5>;
0x000C73        F1018020                 pushm <I5, L5>;
0x000C74        5050002F                 I5 = Null + r0;
0x000C75        50F0000F                 L5 = Null + Null;
0x000C76        0070000F                 r5 = Null + Null;
0x000C77        512A0007                 I2 = r8 + 7;
0x000C78        E009000F                 call r7;
0x000C79        50D0000F                 L1 = Null + Null;
0x000C7A        00C9000F                 r10 = r7 + Null;
0x000C7B        0040000F                 r2 = Null + Null;
0x000C7C        F1058020                 popm <I5, L5>;
0x000C7D        F1040084                 popm <r0, r5>;
0x000C7E        5010002F                 I1 = Null + r0;

 <$M.cbops_iir_resamplev2.main.Perform2ndStage>
0x000C7F        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000C80        03000000                 Null = Null + Null;
0x000C81        E002000F                 call r0;
0x000C82        1990668C                 M[$cbops.amount_written] = r7 + Null;

 <$M.cbops_iir_resamplev2.main.jp_done>
0x000C83        F3A40000                 pop r8;
0x000C84        50D0000F                 L1 = Null + Null;
0x000C85        50F0000F                 L5 = Null + Null;
0x000C86        F3000000                 push Null;
0x000C87        F1AAFFFF                 B0 = M[SP + -0x1];
0x000C88        F1BAFFFF                 B1 = M[SP + -0x1];
0x000C89        F1CAFFFF                 B4 = M[SP + -0x1];
0x000C8A        F3D60000                 pop B5;
0x000C8B        09309690                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x000C8C        D12AFFFE                 r0 = M[r8 + -2];
0x000C8D        E402002F                 Null = r0 + 1;
0x000C8E        00930000                 if EQ r7 = r1 + Null;
0x000C8F        1990968B                 M[$cbops.amount_to_use] = r7 + Null;
0x000C90        F3E60000                 pop FP;
0x000C91        DDF007E1                 jump $pop_rLink_and_rts;

 <$M.cbops_iir_resamplev2.main.jp_passthrough>
0x000C92        009C000F                 r7 = r10 + Null;
0x000C93        E5F00005                 do $M.cbops_iir_resamplev2.main.lp_copy;
0x000C94        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000C95        93E40000                 rMAC = rMAC ASHIFT r2;
0x000C96        93E70000                 rMAC = rMAC ASHIFT r5;
0x000C97        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <$M.cbops_iir_resamplev2.main.lp_copy>
0x000C98        DDF0FFEB                 jump $M.cbops_iir_resamplev2.main.jp_done;

 <$cbuffer.configure_port_message_handler>
0x000C99        F3D00000                 push rLink;
0x000C9A        2103000C                 Null = r1 - 12;
0x000C9B        E150001D                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x000C9C        D553630D                 M[r1 + 25357] = r3;
0x000C9D        D5439298                 M[r1 + -28008] = r2;
0x000C9E        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;
0x000C9F        09209682                 r0 = Null + M[$cbuffer.read_port_disconnect_address];
0x000CA0        E0020001                 if NE call r0;
0x000CA1        DDF007D1                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x000CA2        0023000F                 r0 = r1 + Null;
0x000CA3        D144FFFF                 r2 = M[r2 + -1];
0x000CA4        01300040                 r1 = Null + 64;
0x000CA5        8D440078                 r2 = r2 LSHIFT -8;
0x000CA6        8C43004F                 r2 = r1 LSHIFT r2;
0x000CA7        D54247E0                 M[r0 + 18400] = r2;
0x000CA8        E430002F                 r1 = Null + 1;
0x000CA9        0140000D                 r2 = Null + 13;
0x000CAA        2105F000                 Null = r3 - -4096;
0x000CAB        00340004                 if NEG r1 = r2 + Null;
0x000CAC        F3200000                 push r0;
0x000CAD        F3400000                 push r2;
0x000CAE        01400062                 r2 = Null + 98;
0x000CAF        65020007                 Null = 7 - r0;
0x000CB0        00220044                 if NEG r0 = r0 + r2;
0x000CB1        D532FE7B                 M[r0 + -389] = r1;
0x000CB2        F3440000                 pop r2;
0x000CB3        F3240000                 pop r0;
0x000CB4        0032000F                 r1 = r0 + Null;
0x000CB5        09206682                 r0 = Null + M[$cbuffer.read_port_connect_address];
0x000CB6        E0020001                 if NE call r0;
0x000CB7        DDF007BB                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x000CB8        D553630D                 M[r1 + 25357] = r3;
0x000CB9        D5439298                 M[r1 + -28008] = r2;
0x000CBA        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;
0x000CBB        09209681                 r0 = Null + M[$cbuffer.write_port_disconnect_address];
0x000CBC        E0020001                 if NE call r0;
0x000CBD        DDF007B5                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x000CBE        0023000F                 r0 = r1 + Null;
0x000CBF        D144FFFF                 r2 = M[r2 + -1];
0x000CC0        01300040                 r1 = Null + 64;
0x000CC1        8D440078                 r2 = r2 LSHIFT -8;
0x000CC2        8C43004F                 r2 = r1 LSHIFT r2;
0x000CC3        D54247E0                 M[r0 + 18400] = r2;
0x000CC4        01300009                 r1 = Null + 9;
0x000CC5        01400005                 r2 = Null + 5;
0x000CC6        2105F000                 Null = r3 - -4096;
0x000CC7        00340004                 if NEG r1 = r2 + Null;
0x000CC8        F3200000                 push r0;
0x000CC9        F3400000                 push r2;
0x000CCA        2122000C                 r0 = r0 - 12;
0x000CCB        01400066                 r2 = Null + 102;
0x000CCC        65020007                 Null = 7 - r0;
0x000CCD        00220044                 if NEG r0 = r0 + r2;
0x000CCE        D532FE73                 M[r0 + -397] = r1;
0x000CCF        F3440000                 pop r2;
0x000CD0        F3240000                 pop r0;
0x000CD1        0032000F                 r1 = r0 + Null;
0x000CD2        09206681                 r0 = Null + M[$cbuffer.write_port_connect_address];
0x000CD3        E0020001                 if NE call r0;
0x000CD4        DDF0079E                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_upsample>
0x000CD5        F3D00000                 push rLink;
0x000CD6        5F380000                 I3 = I3 + M0;
0x000CD7        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000CD8        F3E20000                 push FP;
0x000CD9        F3A60000                 pop B0;
0x000CDA        F107000A                 FP = FP + 10;
0x000CDB        F3E20000                 push FP;
0x000CDC        F3C60000                 pop B4;
0x000CDD        F007003F                 FP = FP + r1;
0x000CDE        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000CDF        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000CE0        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000CE1        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000CE2        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000CE3        70A0286F                 M2 = Null - r4, r0 = M[I2,M0];
0x000CE4        9946000A                 r2 = r4 * 10 (int);
0x000CE5        F3210000                 push I2;
0x000CE6        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000CE7        5EB63800                 M3 = M3 + I6, r1 = M[I2,M0];
0x000CE8        5EB64800                 M3 = M3 + I6, r2 = M[I2,M0];
0x000CE9        50002C3F                 I0 = Null + r1, r0 = M[I3,M0];
0x000CEA        50402C4F                 I4 = Null + r2, r0 = M[I3,M0];
0x000CEB        51C0000A                 L0 = Null + 10;
0x000CEC        9845007F                 r2 = r3 * r5 (int);
0x000CED        004400B4                 if NEG r2 = r2 + r9;
0x000CEE        9434006F                 r1 = r2 * r4 (frac);
0x000CEF        E5F0001C                 do $M.iir_2ndStage_upsample.loop;
0x000CF0        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000CF1        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_2ndStage_upsample.loop_rpt>
0x000CF2        5876003F                 I7 = I6 + r1;
0x000CF3        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000CF4        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000CF5        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000CF6        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000CF7        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000CF8        7C7B007F                 I7 = M3 - I7;
0x000CF9        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CFA        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CFB        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CFC        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CFD        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CFE        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000CFF        5823000F                 I2 = I3 + Null;
0x000D00        E002000F                 call r0;
0x000D01        92EA0090                 rMAC = rMAC ASHIFT r8, M[I4,M0] = rMAC;
0x000D02        46980094                 r7 = r7 + M0, M[I5,M0] = rMAC;
0x000D03        2005006F                 Null = r3 - r4;
0x000D04        2055005A                 if GE r3 = r3 - r3;
0x000D05        9845007F                 r2 = r3 * r5 (int);
0x000D06        004400B4                 if NEG r2 = r2 + r9;
0x000D07        9434006F                 r1 = r2 * r4 (frac);
0x000D08        2007004F                 Null = r5 - r2;
0x000D09        DDD0FFE9                 if LE jump $M.iir_2ndStage_upsample.loop_rpt;
0x000D0A        03000000                 Null = Null + Null;

 <$M.iir_2ndStage_upsample.loop>
0x000D0B        5832000F                 I3 = I2 + Null;
0x000D0C        F3250000                 pop I2;
0x000D0D        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000D0E        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000D0F        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000D10        50E0000F                 L4 = Null + Null;
0x000D11        DDF00761                 jump $pop_rLink_and_rts;

 <$spkr_ctrl_system.initialize>
0x000D12        F3D00000                 push rLink;
0x000D13        F3900000                 push r7;
0x000D14        D1490000                 r2 = M[r7 + 0];
0x000D15        D144000B                 r2 = M[r2 + 11];
0x000D16        D1440000                 r2 = M[r2 + 0];
0x000D17        D1A90002                 r8 = M[r7 + 2];
0x000D18        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcPriEqCoefs;
0x000D19        D1990001                 r7 = M[r7 + 1];
0x000D1A        D1290004                 r0 = M[r7 + 4];
0x000D1B        D1390005                 r1 = M[r7 + 5];
0x000D1C        03A40000                 r8 = r8 + r2;
0x000D1D        D3A00000                 r8 = M[r8 + Null];
0x000D1E        E1F02315                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcPriEqCoefs>
0x000D1F        F198FFFF                 r7 = M[SP + -0x1];
0x000D20        D1490000                 r2 = M[r7 + 0];
0x000D21        D144000B                 r2 = M[r2 + 11];
0x000D22        D1440000                 r2 = M[r2 + 0];
0x000D23        D1A90004                 r8 = M[r7 + 4];
0x000D24        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcSecEqCoefs;
0x000D25        D1990003                 r7 = M[r7 + 3];
0x000D26        D1290004                 r0 = M[r7 + 4];
0x000D27        D1390005                 r1 = M[r7 + 5];
0x000D28        03A40000                 r8 = r8 + r2;
0x000D29        D3A00000                 r8 = M[r8 + Null];
0x000D2A        E1F02309                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcSecEqCoefs>
0x000D2B        F198FFFF                 r7 = M[SP + -0x1];
0x000D2C        D1490000                 r2 = M[r7 + 0];
0x000D2D        D144000B                 r2 = M[r2 + 11];
0x000D2E        D1440000                 r2 = M[r2 + 0];
0x000D2F        D1A90006                 r8 = M[r7 + 6];
0x000D30        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcBassEqCoefs;
0x000D31        D1990005                 r7 = M[r7 + 5];
0x000D32        D1290004                 r0 = M[r7 + 4];
0x000D33        D1390005                 r1 = M[r7 + 5];
0x000D34        03A40000                 r8 = r8 + r2;
0x000D35        D3A00000                 r8 = M[r8 + Null];
0x000D36        E1F022FD                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcBassEqCoefs>
0x000D37        F198FFFF                 r7 = M[SP + -0x1];
0x000D38        D1490000                 r2 = M[r7 + 0];
0x000D39        D144000B                 r2 = M[r2 + 11];
0x000D3A        D1340000                 r1 = M[r2 + 0];
0x000D3B        0054003F                 r3 = r2 + r1;
0x000D3C        D1250006                 r0 = M[r3 + 6];
0x000D3D        D5240006                 M[r2 + 6] = r0;
0x000D3E        F3940000                 pop r7;
0x000D3F        F3D40000                 pop rLink;
0x000D40        DC0D000F                 rts;

 <$spkr_ctrl_system.zero_data>
0x000D41        F3D00000                 push rLink;
0x000D42        0009000F                 Null = r7 + Null;
0x000D43        DD000006                 if EQ jump $M.spkr_ctrl_system.initialisation.clear_buffer;
0x000D44        00CA000F                 r10 = r8 + Null;
0x000D45        5000009F                 I0 = Null + r7;
0x000D46        01200000                 r0 = Null + 0;
0x000D47        E5F00002                 do $M.spkr_ctrl_system.initialisation.clear_buffer;
0x000D48        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.spkr_ctrl_system.initialisation.clear_buffer>
0x000D49        F3D40000                 pop rLink;
0x000D4A        DC0D000F                 rts;

 <$M.audio_proc.stream_gain.Process.func>
0x000D4B        F3D00000                 push rLink;
0x000D4C        D1290000                 r0 = M[r7 + 0];
0x000D4D        E1F006F7                 call $frmbuffer.get_buffer;
0x000D4E        5000002F                 I0 = Null + r0;
0x000D4F        50C0003F                 L0 = Null + r1;
0x000D50        00C5000F                 r10 = r3 + Null;
0x000D51        D1290001                 r0 = M[r7 + 1];
0x000D52        E1F0071E                 call $frmbuffer.set_frame_size;
0x000D53        E1F006F1                 call $frmbuffer.get_buffer;
0x000D54        5040002F                 I4 = Null + r0;
0x000D55        50E0003F                 L4 = Null + r1;
0x000D56        F3D40000                 pop rLink;
0x000D57        D1390002                 r1 = M[r7 + 2];
0x000D58        D1490003                 r2 = M[r7 + 3];
0x000D59        D3300000                 r1 = M[r1 + Null];
0x000D5A        D3400000                 r2 = M[r2 + Null];
0x000D5B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000D5C        210A0000                 Null = r8 - 0;
0x000D5D        DD00001D                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;
0x000D5E        D15A0002                 r3 = M[r8 + 2];
0x000D5F        D16A0003                 r4 = M[r8 + 3];
0x000D60        2003005F                 Null = r1 - r3;
0x000D61        DD100003                 if NE jump $M.audio_proc.stream_gain.Process.apply_ramp;
0x000D62        2004006F                 Null = r2 - r4;
0x000D63        DD000017                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;

 <$M.audio_proc.stream_gain.Process.apply_ramp>
0x000D64        D17A0001                 r5 = M[r8 + 1];
0x000D65        E5F00010                 do $M.audio_proc.stream_gain.Process.lp_ramp_copy;
0x000D66        D18A0000                 r6 = M[r8 + 0];
0x000D67        03780000                 r5 = r5 + r6;
0x000D68        FD00007F 2107FFFF        Null = r5 - 8388607;
0x000D6A        DD50000D                 if POS jump $M.audio_proc.stream_gain.Process.complete;
0x000D6B        CC12003F                 rMAC = r0 * r1 (SS);
0x000D6C        9081004F                 r6 = rMAC ASHIFT r2;
0x000D6D        97870000                 r6 = r6 * r5 (frac);
0x000D6E        FD00007F 6597FFFF        r7 = 8388607 - r5;
0x000D70        CC12005F                 rMAC = r0 * r3 (SS);
0x000D71        9021006F                 r0 = rMAC ASHIFT r4;
0x000D72        97290000                 r0 = r0 * r7 (frac);
0x000D73        03280000                 r0 = r0 + r6;
0x000D74        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.audio_proc.stream_gain.Process.lp_ramp_copy>
0x000D75        D57A0001                 M[r8 + 1] = r5;
0x000D76        DDF00008                 jump $M.audio_proc.stream_gain.Process.exit;

 <$M.audio_proc.stream_gain.Process.complete>
0x000D77        D53A0002                 M[r8 + 2] = r1;
0x000D78        D54A0003                 M[r8 + 3] = r2;
0x000D79        D50A0001                 M[r8 + 1] = Null;

 <$M.audio_proc.stream_gain.Process.adjust_gain>
0x000D7A        E5F00004                 do $M.audio_proc.stream_gain.Process.exit;
0x000D7B        CC12003F                 rMAC = r0 * r1 (SS);
0x000D7C        93140000                 rMAC = rMAC ASHIFT r2 (56bit);
0x000D7D        03002191                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = rMAC;

 <$M.audio_proc.stream_gain.Process.exit>
0x000D7E        50C0000F                 L0 = Null + Null;
0x000D7F        50E0000F                 L4 = Null + Null;
0x000D80        DC0D000F                 rts;

 <$apply_hardware_warp_rate>
0x000D81        F3D00000                 push rLink;
0x000D82        0920FE71                 r0 = Null + M[0xfffe71];
0x000D83        09306595                 r1 = Null + M[0x6595];
0x000D84        2042003F                 r2 = r0 - r1;
0x000D85        20400044                 if NEG r2 = Null - r2;
0x000D86        09506592                 r3 = Null + M[$hw_warp_struct];
0x000D87        2004005F                 Null = r2 - r3;
0x000D88        DD4006EA                 if NEG jump $pop_rLink_and_rts;
0x000D89        03350000                 r1 = r1 + r3;
0x000D8A        2043002F                 r2 = r1 - r0;
0x000D8B        20400044                 if NEG r2 = Null - r2;
0x000D8C        210407D0                 Null = r2 - 2000;
0x000D8D        00320005                 if POS r1 = r0 + Null;
0x000D8E        19306595                 M[0x6595] = r1 + Null;
0x000D8F        09606593                 r4 = Null + M[0x6593];
0x000D90        09706596                 r5 = Null + M[0x6596];
0x000D91        D3600000                 r4 = M[r4 + Null];
0x000D92        2027006F                 r0 = r5 - r4;
0x000D93        DD0006DF                 if EQ jump $pop_rLink_and_rts;
0x000D94        20200024                 if NEG r0 = Null - r0;
0x000D95        09306594                 r1 = Null + M[0x6594];
0x000D96        FD000004 CD1531BE        rMAC = r3 * 0.032768011093139648 (SS);
0x000D98        91510008                 r3 = rMAC ASHIFT 8;
0x000D99        9442005F                 r2 = r0 * r3 (frac);
0x000D9A        21023127                 Null = r0 - 12583;
0x000D9B        00430004                 if NEG r2 = r1 + Null;
0x000D9C        99530014                 r3 = r1 * 20 (int);
0x000D9D        2034005F                 r1 = r2 - r3;
0x000D9E        20440035                 if POS r2 = r2 - r1;
0x000D9F        2037006F                 r1 = r5 - r4;
0x000DA0        2023004F                 r0 = r1 - r2;
0x000DA1        20330025                 if POS r1 = r1 - r0;
0x000DA2        0023004F                 r0 = r1 + r2;
0x000DA3        20330024                 if NEG r1 = r1 - r0;
0x000DA4        23730000                 r5 = r5 - r1;
0x000DA5        9167007A                 r4 = r5 ASHIFT -6;
0x000DA6        91760006                 r5 = r4 ASHIFT 6;
0x000DA7        09206596                 r0 = Null + M[0x6596];
0x000DA8        2037002F                 r1 = r5 - r0;
0x000DA9        DD000007                 if EQ jump $M.apply_hardware_warp_rate.end_hw_rate_apply;
0x000DAA        19706596                 M[0x6596] = r5 + Null;
0x000DAB        2060006F                 r4 = Null - r4;
0x000DAC        FD000000 01408004        r2 = Null + 32772;
0x000DAE        01500003                 r3 = Null + 3;
0x000DAF        E1F004FC                 call $message.send_short;

 <$M.apply_hardware_warp_rate.end_hw_rate_apply>
0x000DB0        DDF006C2                 jump $pop_rLink_and_rts;

 <$M.report_latency_to_vm.init>
0x000DB1        F3D00000                 push rLink;
0x000DB2        19006672                 M[$M.configure_latency_reporting.average_latency] = Null + Null;
0x000DB3        19006670                 M[$M.report_latency_to_vm.latency_max_counter] = Null + Null;
0x000DB4        09406671                 r2 = Null + M[$M.configure_latency_reporting.report_period];
0x000DB5        01500DB8                 r3 = Null + 3512;
0x000DB6        E1F006AF                 call $timer.schedule_event_in;
0x000DB7        DDF006BB                 jump $pop_rLink_and_rts;

 <$report_latency_to_vm>
0x000DB8        F3D00000                 push rLink;
0x000DB9        012063C7                 r0 = Null + 25543;
0x000DBA        D1520009                 r3 = M[r0 + 9];
0x000DBB        DD000020                 if EQ jump $M.report_latency_to_vm.do_not_send_msg;
0x000DBC        0930966F                 r1 = Null + M[$M.report_latency_to_vm.latency_max];
0x000DBD        E453006F                 r3 = MAX r1;
0x000DBE        1950966F                 M[$M.report_latency_to_vm.latency_max] = r3 + Null;
0x000DBF        09206670                 r0 = Null + M[$M.report_latency_to_vm.latency_max_counter];
0x000DC0        E422002F                 r0 = r0 + 1;
0x000DC1        21020040                 Null = r0 - 64;
0x000DC2        00200005                 if POS r0 = Null + Null;
0x000DC3        19206670                 M[$M.report_latency_to_vm.latency_max_counter] = r0 + Null;
0x000DC4        DD100017                 if NE jump $M.report_latency_to_vm.do_not_send_msg;
0x000DC5        1900966F                 M[$M.report_latency_to_vm.latency_max] = Null + Null;
0x000DC6        09206672                 r0 = Null + M[$M.configure_latency_reporting.average_latency];
0x000DC7        0025000D                 if LE r0 = r3 + Null;
0x000DC8        09A0666E                 r8 = Null + M[$M.report_latency_to_vm.smoothing_factor_low];
0x000DC9        0990966E                 r7 = Null + M[$M.report_latency_to_vm.smoothing_factor_high];
0x000DCA        2035002F                 r1 = r3 - r0;
0x000DCB        00A90005                 if POS r8 = r7 + Null;
0x000DCC        973A0000                 r1 = r1 * r8 (frac);
0x000DCD        0052003F                 r3 = r0 + r1;
0x000DCE        19506672                 M[$M.configure_latency_reporting.average_latency] = r3 + Null;
0x000DCF        0960666F                 r4 = Null + M[$M.report_latency_to_vm.reported_latency];
0x000DD0        2065006F                 r4 = r3 - r4;
0x000DD1        20600064                 if NEG r4 = Null - r4;
0x000DD2        29069671                 Null = r4 - M[$M.configure_latency_reporting.min_change];
0x000DD3        DD400008                 if NEG jump $M.report_latency_to_vm.do_not_send_msg;
0x000DD4        1950666F                 M[$M.report_latency_to_vm.reported_latency] = r3 + Null;
0x000DD5        FD000001 955547AE        r3 = r3 * 0.0099999904632568359 (frac);
0x000DD7        21257FFF                 r0 = r3 - 32767;
0x000DD8        20550025                 if POS r3 = r3 - r0;
0x000DD9        01401023                 r2 = Null + 4131;
0x000DDA        E1F004D1                 call $message.send_short;

 <$M.report_latency_to_vm.do_not_send_msg>
0x000DDB        013065D3                 r1 = Null + 26067;
0x000DDC        09406671                 r2 = Null + M[$M.configure_latency_reporting.report_period];
0x000DDD        01500DB8                 r3 = Null + 3512;
0x000DDE        E1F00684                 call $timer.schedule_event_in_period;
0x000DDF        DDF00693                 jump $pop_rLink_and_rts;

 <$tone_copy_handler>
0x000DE0        F3D00000                 push rLink;
0x000DE1        0900967F                 Null = Null + M[$stereo_tone];
0x000DE2        DD000006                 if EQ jump $M.tone_copy_handler.mono_tone;
0x000DE3        01A0657D                 r8 = Null + 25981;
0x000DE4        E1F0FBF0                 call $cbops.copy;
0x000DE5        01A094AA                 r8 = Null + -27478;
0x000DE6        E1F0FBEE                 call $cbops.copy;
0x000DE7        DDF00005                 jump $M.tone_copy_handler.resample_done;

 <$M.tone_copy_handler.mono_tone>
0x000DE8        01A09550                 r8 = Null + -27312;
0x000DE9        E1F0FBEB                 call $cbops.copy;
0x000DEA        01A09535                 r8 = Null + -27339;
0x000DEB        E1F0FBE9                 call $cbops.copy;

 <$M.tone_copy_handler.resample_done>
0x000DEC        E1F0025B                 call $detect_end_of_aux_stream;
0x000DED        013095B4                 r1 = Null + -27212;
0x000DEE        09406680                 r2 = Null + M[$tmr_period_tone_copy];
0x000DEF        01500DE0                 r3 = Null + 3552;
0x000DF0        E1F00672                 call $timer.schedule_event_in_period;
0x000DF1        DDF00681                 jump $pop_rLink_and_rts;

 <$tone_copy_extra>
0x000DF2        F3D00000                 push rLink;
0x000DF3        E1F0287D                 call $multi_chan_tones_active;
0x000DF4        0002000F                 Null = r0 + Null;
0x000DF5        DD00067D                 if EQ jump $pop_rLink_and_rts;
0x000DF6        012065FF                 r0 = Null + 26111;
0x000DF7        E1F00619                 call $cbuffer.calc_amount_data;
0x000DF8        0940667F                 r2 = Null + M[$current_tone_sampling_rate];
0x000DF9        09306639                 r1 = Null + M[$tmr_period_audio_copy];
0x000DFA        CC14003F                 rMAC = r2 * r1 (SS);
0x000DFB        9141000D                 r2 = rMAC ASHIFT 13;
0x000DFC        FD000000 95443255        r2 = r2 * 0.0015360116958618164 (frac);
0x000DFE        2002004F                 Null = r0 - r2;
0x000DFF        DD500673                 if POS jump $pop_rLink_and_rts;
0x000E00        01A09550                 r8 = Null + -27312;
0x000E01        0190657D                 r7 = Null + 25981;
0x000E02        0900967F                 Null = Null + M[$stereo_tone];
0x000E03        00A90001                 if NE r8 = r7 + Null;
0x000E04        E1F0FBD0                 call $cbops.copy;
0x000E05        DDF0066D                 jump $pop_rLink_and_rts;

 <$flash.copy_to_dm_24>
0x000E06        F3D00000                 push rLink;
0x000E07        0082000F                 r6 = r0 + Null;
0x000E08        81730001                 r5 = r1 AND 0x1;
0x000E09        9163007F                 r4 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.page_loop>
0x000E0A        0028000F                 r0 = r6 + Null;
0x000E0B        99360003                 r1 = r4 * 3 (int);
0x000E0C        F3300000                 push r1;
0x000E0D        E1F00613                 call $flash.map_page_into_dm;
0x000E0E        5010002F                 I1 = Null + r0;
0x000E0F        00C6000F                 r10 = r4 + Null;
0x000E10        F3240000                 pop r0;
0x000E11        2002003F                 Null = r0 - r1;
0x000E12        DD000005                 if EQ jump $M.flash.copy_to_dm_24.read_values;
0x000E13        99330002                 r1 = r1 * 2 (int);
0x000E14        FD00002A 9533AAAB        r1 = r1 * 0.33333337306976318 (frac);
0x000E16        91C3007F                 r10 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.read_values>
0x000E17        236C0000                 r4 = r4 - r10;
0x000E18        992C0003                 r0 = r10 * 3 (int);
0x000E19        03820000                 r6 = r6 + r0;
0x000E1A        E5F0000B                 do $M.flash.copy_to_dm_24.loop;
0x000E1B        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000E1C        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000E1D        8D220008                 r0 = r0 LSHIFT 8;
0x000E1E        8D530078                 r3 = r1 LSHIFT -8;
0x000E1F        815500FF                 r3 = r3 AND 0xff;
0x000E20        87522500                 r3 = r3 OR r0, r0 = M[I1,1];
0x000E21        8122FFFF                 r0 = r0 AND 0xffff;
0x000E22        8D330010                 r1 = r1 LSHIFT 16;
0x000E23        0323D100                 r0 = r0 + r1, M[I0,1] = r3;
0x000E24        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm_24.loop>
0x000E25        0006000F                 Null = r4 + Null;
0x000E26        DD10FFE4                 if NE jump $M.flash.copy_to_dm_24.page_loop;
0x000E27        0007000F                 Null = r5 + Null;
0x000E28        DD00064A                 if EQ jump $pop_rLink_and_rts;
0x000E29        0028000F                 r0 = r6 + Null;
0x000E2A        01300002                 r1 = Null + 2;
0x000E2B        E1F005F5                 call $flash.map_page_into_dm;
0x000E2C        5010002F                 I1 = Null + r0;
0x000E2D        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000E2E        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000E2F        8D220008                 r0 = r0 LSHIFT 8;
0x000E30        8D330078                 r1 = r1 LSHIFT -8;
0x000E31        813300FF                 r1 = r1 AND 0xff;
0x000E32        8423002F                 r0 = r1 OR r0;
0x000E33        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x000E34        DDF0063E                 jump $pop_rLink_and_rts;

 <$latency.calc_pcm_latency>
0x000E35        F3D00000                 push rLink;
0x000E36        E1F005F2                 call $block_interrupts;
0x000E37        D1A90000                 r8 = M[r7 + 0];
0x000E38        01800000                 r6 = Null + 0;

 <$M.latency_measure.calc_pcm_latency.proc_loop_buffers>
0x000E39        D02A000F                 r0 = M[r8 + Null];
0x000E3A        DD000010                 if EQ jump $M.latency_measure.calc_pcm_latency.done_with_proc_loop;
0x000E3B        D802000F                 Null = SIGNDET r0;
0x000E3C        DD10000A                 if NE jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000E3D        0900FE33                 Null = Null + M[0xfffe33];
0x000E3E        8132001F                 r1 = r0 AND 0x1f;
0x000E3F        2103000C                 Null = r1 - 12;
0x000E40        DD400006                 if NEG jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000E41        E1F005BF                 call $cbuffer.calc_amount_space;
0x000E42        E422002F                 r0 = r0 + 1;
0x000E43        9144007F                 r2 = r2 ASHIFT -1;
0x000E44        2024002F                 r0 = r2 - r0;
0x000E45        DDF00002                 jump $M.latency_measure.calc_pcm_latency.calculate_latency;

 <$M.latency_measure.calc_pcm_latency.is_buf>
0x000E46        E1F005CA                 call $cbuffer.calc_amount_data;

 <$M.latency_measure.calc_pcm_latency.calculate_latency>
0x000E47        E1F0000C                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000E48        01AA0003                 r8 = r8 + 3;
0x000E49        DDF0FFF0                 jump $M.latency_measure.calc_pcm_latency.proc_loop_buffers;

 <$M.latency_measure.calc_pcm_latency.done_with_proc_loop>
0x000E4A        D1A90001                 r8 = M[r7 + 1];
0x000E4B        DD000006                 if EQ jump $M.latency_measure.calc_pcm_latency.done;

 <$M.latency_measure.calc_pcm_latency.proc_loop_samples>
0x000E4C        D02A000F                 r0 = M[r8 + Null];
0x000E4D        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.done;
0x000E4E        E1F00005                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000E4F        01AA0003                 r8 = r8 + 3;
0x000E50        DDF0FFFC                 jump $M.latency_measure.calc_pcm_latency.proc_loop_samples;

 <$M.latency_measure.calc_pcm_latency.done>
0x000E51        E1F005C7                 call $interrupt.unblock;
0x000E52        DDF00620                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_pcm_latency.calc_and_accum_latency>
0x000E53        D13A0001                 r1 = M[r8 + 1];
0x000E54        D3300000                 r1 = M[r1 + Null];
0x000E55        D14A0002                 r2 = M[r8 + 2];
0x000E56        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000E57        D3400000                 r2 = M[r2 + Null];
0x000E58        DD000002                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000E59        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_pcm_latency.no_warp>
0x000E5A        9453004F                 r3 = r1 * r2 (frac);
0x000E5B        9445004F                 r2 = r3 * r2 (frac);
0x000E5C        0053005F                 r3 = r1 + r3;
0x000E5D        0035004F                 r1 = r3 + r2;
0x000E5E        CC12003F                 rMAC = r0 * r1 (SS);
0x000E5F        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x000E60        8D310000                 r1 = rMAC LSHIFT 0;
0x000E61        03830000                 r6 = r6 + r1;
0x000E62        DC0D000F                 rts;

 <$M.mips_profile.mainstart>
0x000E63        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000E64        D52A0001                 M[r8 + 1] = r0;
0x000E65        D50A0005                 M[r8 + 5] = Null;
0x000E66        D12A0000                 r0 = M[r8 + 0];
0x000E67        DD000002                 if EQ jump $M.mips_profile.init;
0x000E68        DC0D000F                 rts;

 <$M.mips_profile.init>
0x000E69        0920FE71                 r0 = Null + M[0xfffe71];
0x000E6A        D52A0009                 M[r8 + 9] = r0;
0x000E6B        E420002F                 r0 = Null + 1;
0x000E6C        D52A0000                 M[r8 + 0] = r0;
0x000E6D        D50A0002                 M[r8 + 2] = Null;
0x000E6E        D50A0004                 M[r8 + 4] = Null;
0x000E6F        DC0D000F                 rts;

 <$M.mips_profile.mainend>
0x000E70        D12A0000                 r0 = M[r8 + 0];
0x000E71        DC0D0000                 if EQ rts;
0x000E72        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000E73        D13A0001                 r1 = M[r8 + 1];
0x000E74        23230000                 r0 = r0 - r1;
0x000E75        D13A0005                 r1 = M[r8 + 5];
0x000E76        23230000                 r0 = r0 - r1;
0x000E77        D13A0002                 r1 = M[r8 + 2];
0x000E78        03230000                 r0 = r0 + r1;
0x000E79        D52A0002                 M[r8 + 2] = r0;
0x000E7A        0920FE71                 r0 = Null + M[0xfffe71];
0x000E7B        D13A0009                 r1 = M[r8 + 9];
0x000E7C        23230000                 r0 = r0 - r1;
0x000E7D        09306648                 r1 = Null + M[$M.mips_profile.evalinterval_us];
0x000E7E        2002003F                 Null = r0 - r1;
0x000E7F        DC0D0004                 if NEG rts;
0x000E80        D12A0002                 r0 = M[r8 + 2];
0x000E81        D52A0006                 M[r8 + 6] = r0;
0x000E82        D13A0004                 r1 = M[r8 + 4];
0x000E83        D53A0007                 M[r8 + 7] = r1;
0x000E84        03230000                 r0 = r0 + r1;
0x000E85        D52A0008                 M[r8 + 8] = r0;
0x000E86        D50A0000                 M[r8 + 0] = Null;
0x000E87        DC0D000F                 rts;

 <$M.mips_profile.intstart>
0x000E88        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000E89        D52A0003                 M[r8 + 3] = r0;
0x000E8A        DC0D000F                 rts;

 <$M.mips_profile.intend>
0x000E8B        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000E8C        D13A0003                 r1 = M[r8 + 3];
0x000E8D        23230000                 r0 = r0 - r1;
0x000E8E        D13A0004                 r1 = M[r8 + 4];
0x000E8F        0032003F                 r1 = r0 + r1;
0x000E90        D53A0004                 M[r8 + 4] = r1;
0x000E91        D13A0005                 r1 = M[r8 + 5];
0x000E92        0032003F                 r1 = r0 + r1;
0x000E93        D53A0005                 M[r8 + 5] = r1;
0x000E94        DC0D000F                 rts;

 <$con_in_copy_handler>
0x000E95        F3D00000                 push rLink;
0x000E96        092095CE                 r0 = Null + M[0xff95ce];
0x000E97        1920666C                 M[$codec_packets_info_last_write_address] = r0 + Null;
0x000E98        E1F0F56A                 call $sra_tagtimes;
0x000E99        0920006F                 r0 = Null + M[$app_config.io];
0x000E9A        21020005                 Null = r0 - 5;
0x000E9B        DD100005                 if NE jump $M.con_in_copy_handler.skip_usb_copy;
0x000E9C        01A003D4                 r8 = Null + 980;
0x000E9D        01900763                 r7 = Null + 1891;
0x000E9E        E1F0128F                 call $run_usb_state_mc;
0x000E9F        DDF00010                 jump $M.con_in_copy_handler.copy_done;

 <$M.con_in_copy_handler.skip_usb_copy>
0x000EA0        21020008                 Null = r0 - 8;
0x000EA1        DD100009                 if NE jump $M.con_in_copy_handler.skip_analogue_copy;
0x000EA2        01A003DE                 r8 = Null + 990;
0x000EA3        0190004A                 r7 = Null + 74;
0x000EA4        FD000080 01200001        r0 = Null + -8388607;
0x000EA6        E1F00599                 call $cbuffer.is_it_enabled;
0x000EA7        00A90000                 if EQ r8 = r7 + Null;
0x000EA8        E1F0FB2C                 call $cbops.copy;
0x000EA9        DDF00006                 jump $M.con_in_copy_handler.copy_done;

 <$M.con_in_copy_handler.skip_analogue_copy>
0x000EAA        01A06583                 r8 = Null + 25987;
0x000EAB        E1F0FB29                 call $cbops.copy;

 <$M.con_in_copy_handler.input_read_done>
0x000EAC        012095CC                 r0 = Null + -27188;
0x000EAD        E1F00563                 call $cbuffer.calc_amount_data;
0x000EAE        1920663B                 M[$debug_codec_in_level] = r0 + Null;

 <$M.con_in_copy_handler.copy_done>
0x000EAF        0920667D                 r0 = Null + M[$chain0_hw_warp_enable];
0x000EB0        0922967D                 r0 = r0 + M[$chain1_hw_warp_enable];
0x000EB1        E110FED0                 if NE call $apply_hardware_warp_rate;
0x000EB2        09009670                 Null = Null + M[$M.configure_latency_reporting.enabled];
0x000EB3        DD000002                 if EQ jump $M.con_in_copy_handler.skip_packet_detection;
0x000EB4        E1F00058                 call $media_packet_boundary_detection;

 <$M.con_in_copy_handler.skip_packet_detection>
0x000EB5        FD0000FF 0130377C        r1 = Null + -51332;
0x000EB7        09409638                 r2 = Null + M[$tmr_period_con_copy];
0x000EB8        01500E95                 r3 = Null + 3733;
0x000EB9        E1F005A9                 call $timer.schedule_event_in_period;
0x000EBA        DDF005B8                 jump $pop_rLink_and_rts;

 <$wall_clock.message_handler>
0x000EBB        F3D00000                 push rLink;
0x000EBC        E455002F                 r3 = r3 + 1;
0x000EBD        01C00007                 r10 = Null + 7;
0x000EBE        0980968A                 r6 = Null + M[$wall_clock.last_addr];
0x000EBF        E5F00014                 do $M.wall_clock.message_handler.loop;
0x000EC0        E408002F                 Null = r6 + 1;
0x000EC1        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x000EC2        D1280001                 r0 = M[r6 + 1];
0x000EC3        D135FFFF                 r1 = M[r3 + -1];
0x000EC4        813300FF                 r1 = r1 AND 0xff;
0x000EC5        2002003F                 Null = r0 - r1;
0x000EC6        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x000EC7        D1280002                 r0 = M[r6 + 2];
0x000EC8        2802005F                 Null = r0 - M[r3];
0x000EC9        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x000ECA        D1280003                 r0 = M[r6 + 3];
0x000ECB        D1350001                 r1 = M[r3 + 1];
0x000ECC        2002003F                 Null = r0 - r1;
0x000ECD        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x000ECE        D1280004                 r0 = M[r6 + 4];
0x000ECF        D1350002                 r1 = M[r3 + 2];
0x000ED0        2002003F                 Null = r0 - r1;
0x000ED1        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x000ED2        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x000ED3        E1F01786                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x000ED4        DC0D000F                 rts;

 <$M.wall_clock.message_handler.found>
0x000ED5        D1350003                 r1 = M[r3 + 3];
0x000ED6        D1450004                 r2 = M[r3 + 4];
0x000ED7        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x000ED8        811100FF                 rMAC = rMAC AND 0xff;
0x000ED9        991104E2                 rMAC = rMAC * 1250 (int);
0x000EDA        8D330010                 r1 = r1 LSHIFT 16;
0x000EDB        8144FFFF                 r2 = r2 AND 0xffff;
0x000EDC        03430000                 r2 = r2 + r1;
0x000EDD        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x000EDF        8D410016                 r2 = rMAC LSHIFT 22;
0x000EE0        D1650006                 r4 = M[r3 + 6];
0x000EE1        D1550005                 r3 = M[r3 + 5];
0x000EE2        8D550010                 r3 = r3 LSHIFT 16;
0x000EE3        8166FFFF                 r4 = r4 AND 0xffff;
0x000EE4        03650000                 r4 = r4 + r3;
0x000EE5        23460000                 r2 = r2 - r4;
0x000EE6        D5480005                 M[r6 + 5] = r2;
0x000EE7        D1280006                 r0 = M[r6 + 6];
0x000EE8        E0020001                 if NE call r0;
0x000EE9        DDF00589                 jump $pop_rLink_and_rts;

 <$audio_out_copy_handler>
0x000EEA        F3D00000                 push rLink;
0x000EEB        0920663F                 r0 = Null + M[$music_example.sync_flag_ptr];
0x000EEC        1820000F                 M[r0] = Null + Null;
0x000EED        E1F00AED                 call $M.Subwoofer.validate_time_to_play;
0x000EEE        FD0000FF 01A07BF5        r8 = Null + -33803;
0x000EF0        E1F01162                 call $calc_actual_port_rate;
0x000EF1        FD0000FF 09207BFD        r0 = Null + M[0xff7bfd];
0x000EF3        E11027D2                 if NE call $apply_sra_resampling_adjustment;
0x000EF4        01A09432                 r8 = Null + -27598;
0x000EF5        09006673                 Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x000EF6        E110115C                 if NE call $calc_actual_port_rate;
0x000EF7        01A09336                 r8 = Null + -27850;
0x000EF8        01906596                 r7 = Null + 26006;
0x000EF9        0900667D                 Null = Null + M[$chain0_hw_warp_enable];
0x000EFA        00A90001                 if NE r8 = r7 + Null;
0x000EFB        19A09636                 M[$latency_calc_current_warp] = r8 + Null;
0x000EFC        E1F0FEF6                 call $tone_copy_extra;
0x000EFD        E1F026DA                 call $multi_chan_clone_tone_cbuffers;
0x000EFE        01A092DA                 r8 = Null + -27942;
0x000EFF        09009672                 Null = Null + M[$M.multi_chan_output.num_chain0_channels];
0x000F00        E1100DE3                 if NE call $cbops.dac_av_copy_m;
0x000F01        01A06469                 r8 = Null + 25705;
0x000F02        09006673                 Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x000F03        E1100DE0                 if NE call $cbops.dac_av_copy_m;
0x000F04        E1F024E5                 call $multi_chan_adjust_tone_cbuffers;
0x000F05        E1F00AE0                 call $M.Subwoofer.compute_time_to_play;
0x000F06        FD0000FF 01304F7C        r1 = Null + -45188;
0x000F08        09406639                 r2 = Null + M[$tmr_period_audio_copy];
0x000F09        01500EEA                 r3 = Null + 3818;
0x000F0A        E1F00558                 call $timer.schedule_event_in_period;
0x000F0B        DDF00567                 jump $pop_rLink_and_rts;

 <$media_packet_boundary_detection>
0x000F0C        F3D00000                 push rLink;
0x000F0D        012065F3                 r0 = Null + 26099;
0x000F0E        E1F00502                 call $cbuffer.calc_amount_data;
0x000F0F        21020030                 Null = r0 - 48;
0x000F10        DD000022                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000F11        012095CC                 r0 = Null + -27188;
0x000F12        E1F004EE                 call $cbuffer.calc_amount_space;
0x000F13        0002000F                 Null = r0 + Null;
0x000F14        DD00001E                 if EQ jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000F15        012095CC                 r0 = Null + -27188;
0x000F16        E1F0051E                 call $cbuffer.get_write_address_and_size;
0x000F17        0960666C                 r4 = Null + M[$codec_packets_info_last_write_address];
0x000F18        23260000                 r0 = r0 - r4;
0x000F19        00220034                 if NEG r0 = r0 + r1;
0x000F1A        21020004                 Null = r0 - 4;
0x000F1B        DD400017                 if NEG jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000F1C        0940FE71                 r2 = Null + M[0xfffe71];
0x000F1D        2954966C                 r3 = r2 - M[$codec_packets_info_last_timer_time];
0x000F1E        20500054                 if NEG r3 = Null - r3;
0x000F1F        1940966C                 M[$codec_packets_info_last_timer_time] = r2 + Null;
0x000F20        2905666D                 Null = r3 - M[$codec_packets_info_timer_gap];
0x000F21        DD900011                 if LS jump $M.media_packet_boundary_detection.done_with_latency_reporting;
0x000F22        012095CC                 r0 = Null + -27188;
0x000F23        E1F00511                 call $cbuffer.get_write_address_and_size;
0x000F24        5000006F                 I0 = Null + r4;
0x000F25        50C0003F                 L0 = Null + r1;
0x000F26        03006100                 Null = Null + Null, r4 = M[I0,1];
0x000F27        4460000F                 r4 = Null + I0;
0x000F28        012065F3                 r0 = Null + 26099;
0x000F29        E1F0050B                 call $cbuffer.get_write_address_and_size;
0x000F2A        5000002F                 I0 = Null + r0;
0x000F2B        50C0003F                 L0 = Null + r1;
0x000F2C        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x000F2D        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x000F2E        51C00000                 L0 = Null + 0;
0x000F2F        012065F3                 r0 = Null + 26099;
0x000F30        4430000F                 r1 = Null + I0;
0x000F31        E1F0051C                 call $cbuffer.set_write_address;

 <$M.media_packet_boundary_detection.done_with_latency_reporting>
0x000F32        DDF00540                 jump $pop_rLink_and_rts;

 <$iir_1stStage_upsample>
0x000F33        59330002                 I3 = I3 + 2;
0x000F34        22996C00                 r7 = r7 - r7, r4 = M[I3,M0];
0x000F35        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000F36        00A33C4F                 r8 = r1 + r2, r1 = M[I3,M0];
0x000F37        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000F38        70A0006F                 M2 = Null - r4;
0x000F39        99460006                 r2 = r4 * 6 (int);
0x000F3A        74B4288F                 M3 = r2 - M0, r0 = M[I2,M0];
0x000F3B        5EB65800                 M3 = M3 + I6, r3 = M[I2,M0];
0x000F3C        5FB62B00                 M3 = M3 + I6, r0 = M[I2,-1];
0x000F3D        5000002F                 I0 = Null + r0;
0x000F3E        51C00006                 L0 = Null + 6;
0x000F3F        F3E20000                 push FP;
0x000F40        F3A60000                 pop B0;
0x000F41        F1070006                 FP = FP + 6;
0x000F42        9845007F                 r2 = r3 * r5 (int);
0x000F43        004400B4                 if NEG r2 = r2 + r9;
0x000F44        9434006F                 r1 = r2 * r4 (frac);
0x000F45        E5F00016                 do $M.iir_1stStage_upsample.loop;
0x000F46        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000F47        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_1stStage_upsample.loop_rpt>
0x000F48        5876003F                 I7 = I6 + r1;
0x000F49        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000F4A        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000F4B        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000F4C        7C7B007F                 I7 = M3 - I7;
0x000F4D        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000F4E        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000F4F        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000F50        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000F51        903100AF                 r1 = rMAC ASHIFT r8;
0x000F52        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000F53        2005006F                 Null = r3 - r4;
0x000F54        2055005A                 if GE r3 = r3 - r3;
0x000F55        9845007F                 r2 = r3 * r5 (int);
0x000F56        004400B4                 if NEG r2 = r2 + r9;
0x000F57        9434006F                 r1 = r2 * r4 (frac);
0x000F58        2007004F                 Null = r5 - r2;
0x000F59        DDD0FFEF                 if LE jump $M.iir_1stStage_upsample.loop_rpt;
0x000F5A        03000000                 Null = Null + Null;

 <$M.iir_1stStage_upsample.loop>
0x000F5B        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000F5C        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000F5D        5F280000                 I2 = I2 + M0;
0x000F5E        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x000F5F        8132001F                 r1 = r0 AND 0x1f;
0x000F60        2133000C                 r1 = r1 - 12;
0x000F61        19409630                 M[$cbuffer.tmp] = r2 + Null;
0x000F62        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x000F64        DD00001C                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x000F65        19509631                 M[0xff9631] = r3 + Null;
0x000F66        01400066                 r2 = Null + 102;
0x000F67        65030007                 Null = 7 - r1;
0x000F68        00330044                 if NEG r1 = r1 + r2;
0x000F69        D153FE73                 r3 = M[r1 + -397];
0x000F6A        FD000030 81420000        r2 = r0 AND 0x300000;
0x000F6C        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x000F6D        8155FFFB                 r3 = r3 AND 0xfffb;
0x000F6E        8D44006B                 r2 = r2 LSHIFT -21;
0x000F6F        8D440002                 r2 = r2 LSHIFT 2;
0x000F70        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x000F71        FD000003 81428000        r2 = r0 AND 0x38000;
0x000F73        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x000F74        8155FFFC                 r3 = r3 AND 0xfffc;
0x000F75        8D440070                 r2 = r2 LSHIFT -16;
0x000F76        8D440000                 r2 = r2 LSHIFT 0;
0x000F77        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x000F78        81426000                 r2 = r0 AND 0x6000;
0x000F79        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x000F7A        8155FFF7                 r3 = r3 AND 0xfff7;
0x000F7B        8D440072                 r2 = r2 LSHIFT -14;
0x000F7C        8D440003                 r2 = r2 LSHIFT 3;
0x000F7D        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x000F7E        D553FE73                 M[r1 + -397] = r3;
0x000F7F        09509631                 r3 = Null + M[0xff9631];

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x000F80        8132001F                 r1 = r0 AND 0x1f;
0x000F81        2133000C                 r1 = r1 - 12;
0x000F82        01400009                 r2 = Null + 9;
0x000F83        65030007                 Null = 7 - r1;
0x000F84        00330044                 if NEG r1 = r1 + r2;
0x000F85        09409630                 r2 = Null + M[$cbuffer.tmp];
0x000F86        0123FE23                 r0 = r1 + -477;
0x000F87        E430002F                 r1 = Null + 1;
0x000F88        DC0D000F                 rts;

 <$message.send_long>
0x000F89        F3D00000                 push rLink;
0x000F8A        E1F0049E                 call $block_interrupts;
0x000F8B        0140FFFE                 r2 = Null + -2;
0x000F8C        01C60005                 r10 = r4 + 5;
0x000F8D        8DCC007E                 r10 = r10 LSHIFT -2;
0x000F8E        09309686                 r1 = Null + M[$message.queue_write_ptr];
0x000F8F        8580FFF1                 r6 = Null OR 0xfff1;
0x000F90        E5F0001B                 do $M.message.send_long.long_message_loop;
0x000F91        01230005                 r0 = r1 + 5;
0x000F92        2102006E                 Null = r0 - 110;
0x000F93        00200000                 if EQ r0 = Null + Null;
0x000F94        29026686                 Null = r0 - M[$message.queue_read_ptr];
0x000F95        DD000018                 if EQ jump $M.message.send_long.all_done;
0x000F96        E40C003F                 Null = r10 - 1;
0x000F97        DD100002                 if NE jump $M.message.send_long.not_last_packet;
0x000F98        85880002                 r6 = r6 OR 0x2;

 <$M.message.send_long.not_last_packet>
0x000F99        D5830F08                 M[r1 + 3848] = r6;
0x000F9A        81080001                 Null = r6 AND 0x1;
0x000F9B        DD000006                 if EQ jump $M.message.send_long.not_first_message;
0x000F9C        E488003F                 r6 = r6 - 1;
0x000F9D        D5530F09                 M[r1 + 3849] = r3;
0x000F9E        D5630F0A                 M[r1 + 3850] = r4;
0x000F9F        21770002                 r5 = r5 - 2;
0x000FA0        DDF00005                 jump $M.message.send_long.last_two_words;

 <$M.message.send_long.not_first_message>
0x000FA1        D047000F                 r2 = M[r5 + Null];
0x000FA2        D5430F09                 M[r1 + 3849] = r2;
0x000FA3        D1470001                 r2 = M[r5 + 1];
0x000FA4        D5430F0A                 M[r1 + 3850] = r2;

 <$M.message.send_long.last_two_words>
0x000FA5        D1470002                 r2 = M[r5 + 2];
0x000FA6        D5430F0B                 M[r1 + 3851] = r2;
0x000FA7        D1470003                 r2 = M[r5 + 3];
0x000FA8        D5430F0C                 M[r1 + 3852] = r2;
0x000FA9        01770004                 r5 = r5 + 4;
0x000FAA        0032000F                 r1 = r0 + Null;

 <$M.message.send_long.long_message_loop>
0x000FAB        19209686                 M[$message.queue_write_ptr] = r0 + Null;
0x000FAC        E1F00079                 call $message.private.try_to_send_message;

 <$M.message.send_long.all_done>
0x000FAD        E1F0046B                 call $interrupt.unblock;
0x000FAE        DDF004C4                 jump $pop_rLink_and_rts;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x000FAF        8132001F                 r1 = r0 AND 0x1f;
0x000FB0        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x000FB2        DD00001F                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x000FB3        19409630                 M[$cbuffer.tmp] = r2 + Null;
0x000FB4        19509631                 M[0xff9631] = r3 + Null;
0x000FB5        01400062                 r2 = Null + 98;
0x000FB6        65030007                 Null = 7 - r1;
0x000FB7        00330044                 if NEG r1 = r1 + r2;
0x000FB8        D153FE7B                 r3 = M[r1 + -389];
0x000FB9        FD000030 81420000        r2 = r0 AND 0x300000;
0x000FBB        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x000FBC        8155FFFB                 r3 = r3 AND 0xfffb;
0x000FBD        8D44006B                 r2 = r2 LSHIFT -21;
0x000FBE        8D440002                 r2 = r2 LSHIFT 2;
0x000FBF        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x000FC0        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x000FC2        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x000FC3        8155FFF7                 r3 = r3 AND 0xfff7;
0x000FC4        8D44006D                 r2 = r2 LSHIFT -19;
0x000FC5        8D440003                 r2 = r2 LSHIFT 3;
0x000FC6        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x000FC7        FD000003 81428000        r2 = r0 AND 0x38000;
0x000FC9        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x000FCA        8155FFFC                 r3 = r3 AND 0xfffc;
0x000FCB        8D440070                 r2 = r2 LSHIFT -16;
0x000FCC        8D440000                 r2 = r2 LSHIFT 0;
0x000FCD        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x000FCE        D553FE7B                 M[r1 + -389] = r3;
0x000FCF        09409630                 r2 = Null + M[$cbuffer.tmp];
0x000FD0        09509631                 r3 = Null + M[0xff9631];

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x000FD1        8122001F                 r0 = r0 AND 0x1f;
0x000FD2        01300005                 r1 = Null + 5;
0x000FD3        65020007                 Null = 7 - r0;
0x000FD4        00220034                 if NEG r0 = r0 + r1;
0x000FD5        0122FE2B                 r0 = r0 + -469;
0x000FD6        E430002F                 r1 = Null + 1;
0x000FD7        DC0D000F                 rts;

 <$cbops.iir_resamplev2.amount_to_use>
0x000FD8        19009690                 M[$M.cbops.iir_resamplev2.amount_used] = Null + Null;

 <$iir_resamplev2.amount_to_use>
0x000FD9        D14A0002                 r2 = M[r8 + 2];
0x000FDA        DC0D0000                 if EQ rts;
0x000FDB        0078000F                 r5 = r6 + Null;
0x000FDC        51800001                 M0 = Null + 1;
0x000FDD        5020004F                 I2 = Null + r2;
0x000FDE        22442800                 r2 = r2 - r2, r0 = M[I2,M0];
0x000FDF        9812389F                 rMAC = r0 * r7 (int), r1 = M[I2,M0];
0x000FE0        AC13009F                 rMAC = rMAC + r1 * r7 (SS);
0x000FE1        67180000                 rMAC = rMAC - M0;
0x000FE2        00100004                 if NEG rMAC = Null + Null;
0x000FE3        2007281F                 Null = r5 - rMAC, r0 = M[I2,M0];
0x000FE4        00710005                 if POS r5 = rMAC + Null;
0x000FE5        D16A0006                 r4 = M[r8 + 6];
0x000FE6        9812386F                 rMAC = r0 * r4 (int), r1 = M[I2,M0];
0x000FE7        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x000FE8        DD000005                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.jp_done;
0x000FE9        67180000                 rMAC = rMAC - M0;
0x000FEA        00100004                 if NEG rMAC = Null + Null;
0x000FEB        2007001F                 Null = r5 - rMAC;
0x000FEC        00710005                 if POS r5 = rMAC + Null;

 <$M.cbops_iir_resamplev2.amount_to_use.jp_done>
0x000FED        D10A000F                 Null = M[r8 + 15];
0x000FEE        DC0D0001                 if NE rts;
0x000FEF        F3D00000                 push rLink;
0x000FF0        D15A0002                 r3 = M[r8 + 2];
0x000FF1        D55A000F                 M[r8 + 15] = r3;
0x000FF2        016A0010                 r4 = r8 + 16;
0x000FF3        512A000B                 I2 = r8 + 11;
0x000FF4        51350005                 I3 = r3 + 5;
0x000FF5        D1050004                 Null = M[r3 + 4];
0x000FF6        DD000003                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage;
0x000FF7        512A0007                 I2 = r8 + 7;
0x000FF8        E1F00221                 call $reset_iir_resampler;

 <$M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage>
0x000FF9        5F380000                 I3 = I3 + M0;
0x000FFA        E1F0021F                 call $reset_iir_resampler;
0x000FFB        50C0000F                 L0 = Null + Null;
0x000FFC        DDF00476                 jump $pop_rLink_and_rts;

 <$cbops.fir_resample.amount_to_use>
0x000FFD        19009691                 M[$M.cbops.fir_resample.amount_used] = Null + Null;
0x000FFE        FD000000 0150BB80        r3 = Null + 48000;
0x001000        01601F40                 r4 = Null + 8000;
0x001001        D13A0003                 r1 = M[r8 + 3];
0x001002        D0330001                 if NE r1 = M[r1 + Null];
0x001003        00360000                 if EQ r1 = r4 + Null;
0x001004        D14A0004                 r2 = M[r8 + 4];
0x001005        D0440001                 if NE r2 = M[r2 + Null];
0x001006        00450000                 if EQ r2 = r3 + Null;
0x001007        D12A0007                 r0 = M[r8 + 7];
0x001008        2002003F                 Null = r0 - r1;
0x001009        DD100004                 if NE jump $M.cbops.fir_resample.amount_to_use.do_set_up;
0x00100A        D12A0006                 r0 = M[r8 + 6];
0x00100B        2002004F                 Null = r0 - r2;
0x00100C        DD000010                 if EQ jump $M.cbops.fir_resample.amount_to_use.set_up_done;

 <$M.cbops.fir_resample.amount_to_use.do_set_up>
0x00100D        D53A0007                 M[r8 + 7] = r1;
0x00100E        D54A0006                 M[r8 + 6] = r2;
0x00100F        01100000                 rMAC = Null + 0;
0x001010        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x001011        D9040000                 Div = rMAC / r2;
0x001012        D9200001                 r0 = DivResult;
0x001013        D52A0008                 M[r8 + 8] = r0;
0x001014        9B240000                 r0 = r0 * r2 (int);
0x001015        8DE40280                 rMAC0 = r2 LSHIFT 0;
0x001016        23320000                 r1 = r1 - r0;
0x001017        8DE30200                 rMAC12 = r1 LSHIFT 0;
0x001018        91440001                 r2 = r2 ASHIFT 1;
0x001019        D9040000                 Div = rMAC / r2;
0x00101A        D9200001                 r0 = DivResult;
0x00101B        D52A0009                 M[r8 + 9] = r0;

 <$M.cbops.fir_resample.amount_to_use.set_up_done>
0x00101C        D16A0009                 r4 = M[r8 + 9];
0x00101D        D15A0008                 r3 = M[r8 + 8];
0x00101E        9B590000                 r3 = r3 * r7 (int);
0x00101F        9439006F                 r1 = r7 * r4 (frac);
0x001020        03350000                 r1 = r1 + r3;
0x001021        21330002                 r1 = r1 - 2;
0x001022        00300004                 if NEG r1 = Null + Null;
0x001023        E473005F                 r5 = MIN r1;
0x001024        DC0D000F                 rts;

 <$message.private.try_to_send_message>
0x001025        F3D00000                 push rLink;
0x001026        E1F00402                 call $block_interrupts;
0x001027        0920E000                 r0 = Null + M[0xffe000];
0x001028        29226687                 r0 = r0 - M[$message.last_seq_sent];
0x001029        8102FFFF                 Null = r0 AND 0xffff;
0x00102A        DD100015                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x00102B        09306686                 r1 = Null + M[$message.queue_read_ptr];
0x00102C        D1230F09                 r0 = M[r1 + 3849];
0x00102D        1920E002                 M[0xffe002] = r0 + Null;
0x00102E        D1230F0A                 r0 = M[r1 + 3850];
0x00102F        1920E003                 M[0xffe003] = r0 + Null;
0x001030        D1230F0B                 r0 = M[r1 + 3851];
0x001031        1920E004                 M[0xffe004] = r0 + Null;
0x001032        D1230F0C                 r0 = M[r1 + 3852];
0x001033        1920E005                 M[0xffe005] = r0 + Null;
0x001034        09206687                 r0 = Null + M[$message.last_seq_sent];
0x001035        E422002F                 r0 = r0 + 1;
0x001036        19206687                 M[$message.last_seq_sent] = r0 + Null;
0x001037        D1230F08                 r0 = M[r1 + 3848];
0x001038        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x001039        01330005                 r1 = r1 + 5;
0x00103A        2103006E                 Null = r1 - 110;
0x00103B        00300000                 if EQ r1 = Null + Null;
0x00103C        19306686                 M[$message.queue_read_ptr] = r1 + Null;
0x00103D        29039686                 Null = r1 - M[$message.queue_write_ptr];
0x00103E        DD000007                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x00103F        094065E2                 r2 = Null + M[0x65e2];
0x001040        E1F00248                 call $timer.cancel_event;
0x001041        013065DF                 r1 = Null + 26079;
0x001042        014003E8                 r2 = Null + 1000;
0x001043        01501025                 r3 = Null + 4133;
0x001044        E1F00421                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x001045        E1F003D3                 call $interrupt.unblock;
0x001046        DDF0042C                 jump $pop_rLink_and_rts;

 <$detect_end_of_aux_stream>
0x001047        F3D00000                 push rLink;
0x001048        09509633                 r3 = Null + M[$aux_input_stream_available];
0x001049        DD000429                 if EQ jump $pop_rLink_and_rts;
0x00104A        012065FF                 r0 = Null + 26111;
0x00104B        E1F003C5                 call $cbuffer.calc_amount_data;
0x00104C        81050002                 Null = r3 AND 0x2;
0x00104D        DD100007                 if NE jump $M.detect_end_of_aux_stream.input_has_received;
0x00104E        0002000F                 Null = r0 + Null;
0x00104F        DD000423                 if EQ jump $pop_rLink_and_rts;
0x001050        85550002                 r3 = r3 OR 0x2;
0x001051        19509633                 M[$aux_input_stream_available] = r3 + Null;
0x001052        19009680                 M[$no_tone_timer] = Null + Null;
0x001053        DDF0041F                 jump $pop_rLink_and_rts;

 <$M.detect_end_of_aux_stream.input_has_received>
0x001054        09309680                 r1 = Null + M[$no_tone_timer];
0x001055        09336680                 r1 = r1 + M[$tmr_period_tone_copy];
0x001056        0002000F                 Null = r0 + Null;
0x001057        00300001                 if NE r1 = Null + Null;
0x001058        19309680                 M[$no_tone_timer] = r1 + Null;
0x001059        21037530                 Null = r1 - 30000;
0x00105A        DD400418                 if NEG jump $pop_rLink_and_rts;
0x00105B        01401080                 r2 = Null + 4224;
0x00105C        01500000                 r3 = Null + 0;
0x00105D        01600000                 r4 = Null + 0;
0x00105E        01700000                 r5 = Null + 0;
0x00105F        01800000                 r6 = Null + 0;
0x001060        E1F0024B                 call $message.send_short;
0x001061        19009633                 M[$aux_input_stream_available] = Null + Null;
0x001062        19009680                 M[$no_tone_timer] = Null + Null;
0x001063        DDF0040F                 jump $pop_rLink_and_rts;

 <$timer.schedule_event_at>
0x001064        F3D00000                 push rLink;
0x001065        E1F003C3                 call $block_interrupts;
0x001066        01C00032                 r10 = Null + 50;
0x001067        0160668A                 r4 = Null + 26250;
0x001068        0920668A                 r0 = Null + M[$timer.last_addr];
0x001069        E5F00008                 do $M.timer.schedule_event_at.loop;
0x00106A        E402002F                 Null = r0 + 1;
0x00106B        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x00106C        D1720001                 r5 = M[r0 + 1];
0x00106D        2004007F                 Null = r2 - r5;
0x00106E        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x00106F        0062000F                 r4 = r0 + Null;
0x001070        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x001071        E1F015E8                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x001072        D5360000                 M[r4 + 0] = r1;
0x001073        D5230000                 M[r1 + 0] = r0;
0x001074        D5430001                 M[r1 + 1] = r2;
0x001075        D5530002                 M[r1 + 2] = r3;
0x001076        09509689                 r3 = Null + M[$timer.id];
0x001077        D5530003                 M[r1 + 3] = r3;
0x001078        E425002F                 r0 = r3 + 1;
0x001079        20200050                 if EQ r0 = Null - r3;
0x00107A        19209689                 M[$timer.id] = r0 + Null;
0x00107B        0900FE1F                 Null = Null + M[0xfffe1f];
0x00107C        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x00107D        2904FE21                 Null = r2 - M[0xfffe21];
0x00107E        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x00107F        1940FE21                 M[0xfffe21] = r2 + Null;
0x001080        E420002F                 r0 = Null + 1;
0x001081        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x001082        E1F00396                 call $interrupt.unblock;
0x001083        DDF003EF                 jump $pop_rLink_and_rts;

 <$M.audio_proc.stereo_copy.Process.func>
0x001084        F3D00000                 push rLink;
0x001085        D1290000                 r0 = M[r7 + 0];
0x001086        E1F003BE                 call $frmbuffer.get_buffer;
0x001087        5000002F                 I0 = Null + r0;
0x001088        50C0003F                 L0 = Null + r1;
0x001089        D1290001                 r0 = M[r7 + 1];
0x00108A        E1F003BA                 call $frmbuffer.get_buffer;
0x00108B        5040002F                 I4 = Null + r0;
0x00108C        50E0003F                 L4 = Null + r1;
0x00108D        00C5000F                 r10 = r3 + Null;
0x00108E        D1290002                 r0 = M[r7 + 2];
0x00108F        E1F003E1                 call $frmbuffer.set_frame_size;
0x001090        E1F003B4                 call $frmbuffer.get_buffer;
0x001091        5010002F                 I1 = Null + r0;
0x001092        50D0003F                 L1 = Null + r1;
0x001093        005C000F                 r3 = r10 + Null;
0x001094        D1290003                 r0 = M[r7 + 3];
0x001095        E1F003DB                 call $frmbuffer.set_frame_size;
0x001096        E1F003AE                 call $frmbuffer.get_buffer;
0x001097        5050002F                 I5 = Null + r0;
0x001098        50F0003F                 L5 = Null + r1;
0x001099        F3D40000                 pop rLink;
0x00109A        E5F00003                 do $M.audio_proc.stereo_copy.Process.loop_copy_data;
0x00109B        03002141                 Null = Null + Null, r0 = M[I0,1], r2 = M[I4,1];
0x00109C        0300A5C5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r2;

 <$M.audio_proc.stereo_copy.Process.loop_copy_data>
0x00109D        50C0000F                 L0 = Null + Null;
0x00109E        50D0000F                 L1 = Null + Null;
0x00109F        50E0000F                 L4 = Null + Null;
0x0010A0        50F0000F                 L5 = Null + Null;
0x0010A1        DC0D000F                 rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x0010A2        8132001F                 r1 = r0 AND 0x1f;
0x0010A3        2133000C                 r1 = r1 - 12;
0x0010A4        D1436319                 r2 = M[r1 + 25369];
0x0010A5        00200000                 if EQ r0 = Null + Null;
0x0010A6        DC0D0000                 if EQ rts;
0x0010A7        19509630                 M[$cbuffer.tmp] = r3 + Null;
0x0010A8        D054000F                 r3 = M[r2 + Null];
0x0010A9        D14392A4                 r2 = M[r1 + -27996];
0x0010AA        D3400000                 r2 = M[r2 + Null];
0x0010AB        23540000                 r3 = r3 - r2;
0x0010AC        D14347EC                 r2 = M[r1 + 18412];
0x0010AD        E434003F                 r1 = r2 - 1;
0x0010AE        8035003F                 r1 = r3 AND r1;
0x0010AF        00340000                 if EQ r1 = r2 + Null;
0x0010B0        E433003F                 r1 = r1 - 1;
0x0010B1        09509630                 r3 = Null + M[$cbuffer.tmp];
0x0010B2        FD000003 81228000        r0 = r0 AND 0x38000;
0x0010B4        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x0010B5        FD000001 21028000        Null = r0 - 98304;
0x0010B7        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x0010B8        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x0010B9        FD000002 21028000        Null = r0 - 163840;
0x0010BB        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x0010BC        9123007E                 r0 = r1 ASHIFT -2;
0x0010BD        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x0010BE        E423003F                 r0 = r1 - 1;
0x0010BF        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x0010C0        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x0010C1        0023000F                 r0 = r1 + Null;
0x0010C2        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x0010C3        9123007F                 r0 = r1 ASHIFT -1;
0x0010C4        DC0D000F                 rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x0010C5        8132001F                 r1 = r0 AND 0x1f;
0x0010C6        D143630D                 r2 = M[r1 + 25357];
0x0010C7        00200000                 if EQ r0 = Null + Null;
0x0010C8        DC0D0000                 if EQ rts;
0x0010C9        D3400000                 r2 = M[r2 + Null];
0x0010CA        19509630                 M[$cbuffer.tmp] = r3 + Null;
0x0010CB        D1539298                 r3 = M[r1 + -28008];
0x0010CC        D3500000                 r3 = M[r3 + Null];
0x0010CD        2054005F                 r3 = r2 - r3;
0x0010CE        D14347E0                 r2 = M[r1 + 18400];
0x0010CF        E434003F                 r1 = r2 - 1;
0x0010D0        8035003F                 r1 = r3 AND r1;
0x0010D1        09509630                 r3 = Null + M[$cbuffer.tmp];
0x0010D2        FD000003 81228000        r0 = r0 AND 0x38000;
0x0010D4        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x0010D5        FD000001 21028000        Null = r0 - 98304;
0x0010D7        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x0010D8        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x0010D9        FD000002 21028000        Null = r0 - 163840;
0x0010DB        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x0010DC        9123007E                 r0 = r1 ASHIFT -2;
0x0010DD        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x0010DE        E423003F                 r0 = r1 - 1;
0x0010DF        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x0010E0        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x0010E1        0023000F                 r0 = r1 + Null;
0x0010E2        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x0010E3        9123007F                 r0 = r1 ASHIFT -1;
0x0010E4        DC0D000F                 rts;

 <$M.audio_proc.stream_mixer.Process.func>
0x0010E5        5020009F                 I2 = Null + r7;
0x0010E6        51900001                 M1 = Null + 1;
0x0010E7        F3D00000                 push rLink;
0x0010E8        02002900                 Null = Null + Null, r0 = M[I2,M1];
0x0010E9        E1F0035B                 call $frmbuffer.get_buffer;
0x0010EA        5000002F                 I0 = Null + r0;
0x0010EB        50C0293F                 L0 = Null + r1, r0 = M[I2,M1];
0x0010EC        E1F00358                 call $frmbuffer.get_buffer;
0x0010ED        5010002F                 I1 = Null + r0;
0x0010EE        50D0003F                 L1 = Null + r1;
0x0010EF        00C5290F                 r10 = r3 + Null, r0 = M[I2,M1];
0x0010F0        E1F00380                 call $frmbuffer.set_frame_size;
0x0010F1        E1F00353                 call $frmbuffer.get_buffer;
0x0010F2        5040292F                 I4 = Null + r0, r0 = M[I2,M1];
0x0010F3        50E0793F                 L4 = Null + r1, r5 = M[I2,M1];
0x0010F4        F3D40000                 pop rLink;
0x0010F5        D062490F                 r4 = M[r0 + Null], r2 = M[I2,M1];
0x0010F6        D2702100                 r5 = M[r5 + Null], r0 = M[I0,M1];
0x0010F7        D084350F                 r6 = M[r2 + Null], r1 = M[I1,M1];
0x0010F8        E5F00005                 do $M.audio_proc.stream_mixer.Process.lp_stream_copy;
0x0010F9        CC12216F                 rMAC = r0 * r4 (SS), r0 = M[I0,M1];
0x0010FA        AC13357F                 rMAC = rMAC + r1 * r5 (SS), r1 = M[I1,M1];
0x0010FB        9041008F                 r2 = rMAC ASHIFT r6;
0x0010FC        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.audio_proc.stream_mixer.Process.lp_stream_copy>
0x0010FD        51C00000                 L0 = Null + 0;
0x0010FE        51D00000                 L1 = Null + 0;
0x0010FF        51E00000                 L4 = Null + 0;
0x001100        DC0D000F                 rts;

 <$cbops.dc_remove.main>
0x001101        D12A0000                 r0 = M[r8 + 0];
0x001102        D038002F                 r1 = M[r6 + r0];
0x001103        5000003F                 I0 = Null + r1;
0x001104        D039002F                 r1 = M[r7 + r0];
0x001105        50C0003F                 L0 = Null + r1;
0x001106        D12A0001                 r0 = M[r8 + 1];
0x001107        D038002F                 r1 = M[r6 + r0];
0x001108        5040003F                 I4 = Null + r1;
0x001109        D039002F                 r1 = M[r7 + r0];
0x00110A        50E0003F                 L4 = Null + r1;
0x00110B        013009D5                 r1 = Null + 2517;
0x00110C        FD000080 01500000        r3 = Null + -8388608;
0x00110E        2045003F                 r2 = r3 - r1;
0x00110F        D16A0002                 r4 = M[r8 + 2];
0x001110        D17A0003                 r5 = M[r8 + 3];
0x001111        C814007F                 rMAC = r2 * r5 (SU);
0x001112        E5F00008                 do $M.cbops.dc_remove.main.loop;
0x001113        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x001114        AF462100                 rMAC = rMAC + r2 * r4 (SS), r0 = M[I0,1];
0x001115        BC12003F                 rMAC = rMAC - r0 * r1 (SS);
0x001116        8D610000                 r4 = rMAC LSHIFT 0;
0x001117        8D710018                 r5 = rMAC LSHIFT 24;
0x001118        BC12005F                 rMAC = rMAC - r0 * r3 (SS);
0x001119        CB470091                 rMAC = r2 * r5 (SU), M[I4,1] = rMAC;

 <$M.cbops.dc_remove.main.loop>
0x00111A        51C00000                 L0 = Null + 0;
0x00111B        51E00000                 L4 = Null + 0;
0x00111C        D56A0002                 M[r8 + 2] = r4;
0x00111D        D57A0003                 M[r8 + 3] = r5;
0x00111E        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3.count>
0x00111F        01300019                 r1 = Null + 25;
0x001120        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3>
0x001121        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x001122        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001123        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001124        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001125        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001126        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001127        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001128        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001129        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x00112A        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x00112B        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x00112C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00112D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00112E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00112F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001130        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001131        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001132        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x001133        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x001134        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001135        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001136        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001137        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001138        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001139        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x00113A        93E30000                 rMAC = rMAC ASHIFT r1;
0x00113B        DC0D000F                 rts;

 <$cbops.deinterleave.main>
0x00113C        D12A0000                 r0 = M[r8 + 0];
0x00113D        D038002F                 r1 = M[r6 + r0];
0x00113E        5000003F                 I0 = Null + r1;
0x00113F        D039002F                 r1 = M[r7 + r0];
0x001140        50C0003F                 L0 = Null + r1;
0x001141        D12A0001                 r0 = M[r8 + 1];
0x001142        D038002F                 r1 = M[r6 + r0];
0x001143        5040003F                 I4 = Null + r1;
0x001144        D039002F                 r1 = M[r7 + r0];
0x001145        50E0003F                 L4 = Null + r1;
0x001146        D12A0002                 r0 = M[r8 + 2];
0x001147        D038002F                 r1 = M[r6 + r0];
0x001148        5050003F                 I5 = Null + r1;
0x001149        D039002F                 r1 = M[r7 + r0];
0x00114A        50F0003F                 L5 = Null + r1;
0x00114B        D14A0003                 r2 = M[r8 + 3];
0x00114C        8DCC007F                 r10 = r10 LSHIFT -1;
0x00114D        19C0668C                 M[$cbops.amount_written] = r10 + Null;
0x00114E        E4CC003F                 r10 = r10 - 1;
0x00114F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001150        E5F00004                 do $M.cbops.deinterleave.main.interleave_loop;
0x001151        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x001152        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x001153        030021B5                 Null = Null + Null, r0 = M[I0,1], M[I5,1] = r1;

 <$M.cbops.deinterleave.main.interleave_loop>
0x001154        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x001155        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x001156        7FEE00B5                 L4 = L4 - L4, M[I5,1] = r1;
0x001157        51F00000                 L5 = Null + 0;
0x001158        DC0D000F                 rts;

 <$set_tone_rate_from_vm>
0x001159        F3D00000                 push rLink;
0x00115A        8133FFFF                 r1 = r1 AND 0xffff;
0x00115B        011007D0                 rMAC = Null + 2000;
0x00115C        FD000000 CD111F40        rMAC = rMAC * 0.00095367431640625 (SS);
0x00115E        D9030000                 Div = rMAC / r1;
0x00115F        1930667F                 M[$current_tone_sampling_rate] = r1 + Null;
0x001160        01200003                 r0 = Null + 3;
0x001161        81040002                 Null = r2 AND 0x2;
0x001162        00200001                 if NE r0 = Null + Null;
0x001163        01220008                 r0 = r0 + 8;
0x001164        1920659B                 M[0x659b] = r0 + Null;
0x001165        19209540                 M[0xff9540] = r0 + Null;
0x001166        D9500001                 r3 = DivResult;
0x001167        81240001                 r0 = r2 AND 0x1;
0x001168        00550050                 if EQ r3 = r3 + r3;
0x001169        19506680                 M[$tmr_period_tone_copy] = r3 + Null;
0x00116A        1920967F                 M[$stereo_tone] = r0 + Null;
0x00116B        E1F02457                 call $multi_chan_config_tone_mixing;
0x00116C        09206601                 r0 = Null + M[0x6601];
0x00116D        19206600                 M[0x6600] = r0 + Null;
0x00116E        09209601                 r0 = Null + M[0xff9601];
0x00116F        19209600                 M[0xff9600] = r0 + Null;
0x001170        E420002F                 r0 = Null + 1;
0x001171        19209633                 M[$aux_input_stream_available] = r0 + Null;
0x001172        DDF00300                 jump $pop_rLink_and_rts;

 <$pskey.result_message_handler>
0x001173        FD000000 21028008        Null = r0 - 32776;
0x001175        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x001176        D035000F                 r1 = M[r3 + Null];
0x001177        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x001178        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x001179        19009688                 M[$pskey.request_in_progress] = Null + Null;
0x00117A        01706689                 r5 = Null + 26249;
0x00117B        09206689                 r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x00117C        D1620001                 r4 = M[r0 + 1];
0x00117D        2003006F                 Null = r1 - r4;
0x00117E        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x00117F        0072000F                 r5 = r0 + Null;
0x001180        D1220000                 r0 = M[r0 + 0];
0x001181        E402002F                 Null = r0 + 1;
0x001182        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x001183        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x001184        F3D00000                 push rLink;
0x001185        D1620000                 r4 = M[r0 + 0];
0x001186        D5670000                 M[r5 + 0] = r4;
0x001187        D1220002                 r0 = M[r0 + 2];
0x001188        E002000F                 call r0;
0x001189        09306689                 r1 = Null + M[$pskey.last_addr];
0x00118A        E403002F                 Null = r1 + 1;
0x00118B        E110001D                 if NE call $pskey.private.send_request;
0x00118C        DDF002E6                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s2.count>
0x00118D        01300017                 r1 = Null + 23;
0x00118E        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s2>
0x00118F        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x001190        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001191        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001192        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001193        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001194        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001195        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001196        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001197        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001198        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001199        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00119A        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x00119B        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x00119C        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x00119D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00119E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00119F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011A0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011A1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011A2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011A3        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011A4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011A5        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x0011A6        93E30000                 rMAC = rMAC ASHIFT r1;
0x0011A7        DC0D000F                 rts;

 <$pskey.private.send_request>
0x0011A8        09009688                 Null = Null + M[$pskey.request_in_progress];
0x0011A9        DC0D0001                 if NE rts;
0x0011AA        F3D00000                 push rLink;
0x0011AB        094065EA                 r2 = Null + M[0x65ea];
0x0011AC        E1F000DC                 call $timer.cancel_event;
0x0011AD        E1F0028C                 call $message.send_queue_space;
0x0011AE        21020005                 Null = r0 - 5;
0x0011AF        DD400008                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x0011B0        09306689                 r1 = Null + M[$pskey.last_addr];
0x0011B1        85408006                 r2 = Null OR 0x8006;
0x0011B2        D1530001                 r3 = M[r1 + 1];
0x0011B3        E1F000F8                 call $message.send_short;
0x0011B4        E420002F                 r0 = Null + 1;
0x0011B5        19209688                 M[$pskey.request_in_progress] = r0 + Null;
0x0011B6        DDF002BC                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x0011B7        013065E7                 r1 = Null + 26087;
0x0011B8        01402710                 r2 = Null + 10000;
0x0011B9        015011A8                 r3 = Null + 4520;
0x0011BA        E1F002AB                 call $timer.schedule_event_in;
0x0011BB        DDF002B7                 jump $pop_rLink_and_rts;

 <$cbops.one_to_two_chan_copy.main>
0x0011BC        F3D00000                 push rLink;
0x0011BD        D12A0000                 r0 = M[r8 + 0];
0x0011BE        D038002F                 r1 = M[r6 + r0];
0x0011BF        5000003F                 I0 = Null + r1;
0x0011C0        D039002F                 r1 = M[r7 + r0];
0x0011C1        50C0003F                 L0 = Null + r1;
0x0011C2        D12A0001                 r0 = M[r8 + 1];
0x0011C3        D038002F                 r1 = M[r6 + r0];
0x0011C4        5040003F                 I4 = Null + r1;
0x0011C5        D039002F                 r1 = M[r7 + r0];
0x0011C6        50E0003F                 L4 = Null + r1;
0x0011C7        D12A0002                 r0 = M[r8 + 2];
0x0011C8        D038002F                 r1 = M[r6 + r0];
0x0011C9        5010003F                 I1 = Null + r1;
0x0011CA        D039002F                 r1 = M[r7 + r0];
0x0011CB        50D0003F                 L1 = Null + r1;
0x0011CC        51900001                 M1 = Null + 1;
0x0011CD        E5F00003                 do $M_cbops.one_to_two_chan_copy.main.read_loop;
0x0011CE        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x0011CF        0200A5A1                 Null = Null + Null, M[I1,M1] = r0, M[I4,M1] = r0;

 <$M_cbops.one_to_two_chan_copy.main.read_loop>
0x0011D0        51C00000                 L0 = Null + 0;
0x0011D1        51E00000                 L4 = Null + 0;
0x0011D2        51D00000                 L1 = Null + 0;
0x0011D3        DDF0029F                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_15_s3.count>
0x0011D4        01300015                 r1 = Null + 21;
0x0011D5        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s3>
0x0011D6        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x0011D7        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011D8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011D9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011DA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011DB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011DC        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011DD        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0011DE        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0011DF        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0011E0        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011E1        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011E2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011E3        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011E4        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0011E5        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0011E6        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0011E7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011E8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011E9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0011EA        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x0011EB        93E30000                 rMAC = rMAC ASHIFT r1;
0x0011EC        DC0D000F                 rts;

 <$frame_sync.update_streams_ind>
0x0011ED        F3D00000                 push rLink;
0x0011EE        51900001                 M1 = Null + 1;
0x0011EF        E1F00239                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x0011F0        D0B9000F                 r9 = M[r7 + Null];
0x0011F1        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x0011F2        D14B0006                 r2 = M[r9 + 6];
0x0011F3        D12B0000                 r0 = M[r9 + 0];
0x0011F4        D1320000                 r1 = M[r0 + 0];
0x0011F5        D16B0003                 r4 = M[r9 + 3];
0x0011F6        50D0003F                 L1 = Null + r1;
0x0011F7        E004000F                 call r2;
0x0011F8        5080006F                 M0 = Null + r4;
0x0011F9        D042000F                 r2 = M[r0 + Null];
0x0011FA        5010004F                 I1 = Null + r2;
0x0011FB        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x0011FC        4440001F                 r2 = Null + I1;
0x0011FD        1824000F                 M[r0] = r2 + Null;
0x0011FE        E499002F                 r7 = r7 + 1;
0x0011FF        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x001200        E1F00218                 call $interrupt.unblock;
0x001201        50D0000F                 L1 = Null + Null;
0x001202        DDF00270                 jump $pop_rLink_and_rts;

 <$timer.service_routine>
0x001203        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x001204        0930668A                 r1 = Null + M[$timer.last_addr];
0x001205        E403002F                 Null = r1 + 1;
0x001206        DD000011                 if EQ jump $M.timer.service_routine.no_more_timers;
0x001207        D1230001                 r0 = M[r1 + 1];
0x001208        2942FE71                 r2 = r0 - M[0xfffe71];
0x001209        21040000                 Null = r2 - 0;
0x00120A        DDC00008                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x00120B        D1D30002                 rLink = M[r1 + 2];
0x00120C        D1230003                 r0 = M[r1 + 3];
0x00120D        D5030003                 M[r1 + 3] = Null;
0x00120E        D1430000                 r2 = M[r1 + 0];
0x00120F        1940668A                 M[$timer.last_addr] = r2 + Null;
0x001210        E00D000F                 call rLink;
0x001211        DDF0FFF3                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x001212        1900FE1F                 M[0xfffe1f] = Null + Null;
0x001213        1920FE21                 M[0xfffe21] = r0 + Null;
0x001214        E450002F                 r3 = Null + 1;
0x001215        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x001216        DDF0025C                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x001217        1900FE1F                 M[0xfffe1f] = Null + Null;
0x001218        DDF0025A                 jump $pop_rLink_and_rts;

 <$reset_iir_resampler>
0x001219        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x00121A        02005C00                 Null = Null + Null, r3 = M[I3,M0];
0x00121B        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x00121C        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x00121D        0200E800                 Null = Null + Null, M[I2,M0] = r4;
0x00121E        5000006F                 I0 = Null + r4;
0x00121F        00C5000F                 r10 = r3 + Null;
0x001220        03650000                 r4 = r4 + r3;
0x001221        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;
0x001222        03620000                 r4 = r4 + r0;
0x001223        E5F00002                 do $M.reset_iir_resampler.clr_fir_loop;
0x001224        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_fir_loop>
0x001225        59330004                 I3 = I3 + 4;
0x001226        00C2000F                 r10 = r0 + Null;
0x001227        DC0D0000                 if EQ rts;
0x001228        59330002                 I3 = I3 + 2;
0x001229        F2D03C00                 push rLink, r1 = M[I3,M0];
0x00122A        21330002                 r1 = r1 - 2;
0x00122B        E003000F                 call r1;
0x00122C        5B330000                 I3 = I3 + r1;
0x00122D        E5F00002                 do $M.reset_iir_resampler.clr_loop;
0x00122E        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_loop>
0x00122F        DDF00243                 jump $pop_rLink_and_rts;

 <$frame_sync.analyze_stream_ind>
0x001230        D5CB0008                 M[r9 + 8] = r10;
0x001231        D14B000A                 r2 = M[r9 + 10];
0x001232        200400CF                 Null = r2 - r10;
0x001233        004C0005                 if POS r2 = r10 + Null;
0x001234        D15B000B                 r3 = M[r9 + 11];
0x001235        200500CF                 Null = r3 - r10;
0x001236        005C0004                 if NEG r3 = r10 + Null;
0x001237        D1CB0007                 r10 = M[r9 + 7];
0x001238        67C90000                 r10 = r10 - M1;
0x001239        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x00123A        D54B000A                 M[r9 + 10] = r2;
0x00123B        D55B000B                 M[r9 + 11] = r3;
0x00123C        D5CB0007                 M[r9 + 7] = r10;
0x00123D        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x00123E        D50B000B                 M[r9 + 11] = Null;
0x00123F        D56B000A                 M[r9 + 10] = r4;
0x001240        D1CB0004                 r10 = M[r9 + 4];
0x001241        23540000                 r3 = r3 - r2;
0x001242        035C0000                 r3 = r3 + r10;
0x001243        00500004                 if NEG r3 = Null + Null;
0x001244        D55B0009                 M[r9 + 9] = r3;
0x001245        01C00078                 r10 = Null + 120;
0x001246        D5CB0007                 M[r9 + 7] = r10;
0x001247        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s2.count>
0x001248        01300013                 r1 = Null + 19;
0x001249        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s2>
0x00124A        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x00124B        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00124C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00124D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00124E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00124F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001250        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001251        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001252        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001253        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x001254        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x001255        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x001256        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001257        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001258        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001259        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00125A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00125B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00125C        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x00125D        93E30000                 rMAC = rMAC ASHIFT r1;
0x00125E        DC0D000F                 rts;

 <$frame_sync.distribute_streams_ind>
0x00125F        F3D00000                 push rLink;
0x001260        E1F001C8                 call $block_interrupts;
0x001261        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x001262        D0B9000F                 r9 = M[r7 + Null];
0x001263        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x001264        D15B0005                 r3 = M[r9 + 5];
0x001265        D12B0000                 r0 = M[r9 + 0];
0x001266        D1320000                 r1 = M[r0 + 0];
0x001267        D1820001                 r6 = M[r0 + 1];
0x001268        D1A20002                 r8 = M[r0 + 2];
0x001269        50D0003F                 L1 = Null + r1;
0x00126A        D16B0003                 r4 = M[r9 + 3];
0x00126B        D56B0002                 M[r9 + 2] = r4;
0x00126C        E005000F                 call r3;
0x00126D        D58B0001                 M[r9 + 1] = r6;
0x00126E        E499002F                 r7 = r7 + 1;
0x00126F        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x001270        E1F001A8                 call $interrupt.unblock;
0x001271        50D0000F                 L1 = Null + Null;
0x001272        DDF00200                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x001273        F3D00000                 push rLink;
0x001274        D1820002                 r6 = M[r0 + 2];
0x001275        D1A20001                 r8 = M[r0 + 1];
0x001276        20C800AF                 r10 = r6 - r8;
0x001277        00CC0034                 if NEG r10 = r10 + r1;
0x001278        E1F0FFB8                 call $frame_sync.analyze_stream_ind;
0x001279        D15B0008                 r3 = M[r9 + 8];
0x00127A        D14B0009                 r2 = M[r9 + 9];
0x00127B        23540000                 r3 = r3 - r2;
0x00127C        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x00127D        D14B0004                 r2 = M[r9 + 4];
0x00127E        9144007F                 r2 = r2 ASHIFT -1;
0x00127F        03540000                 r3 = r3 + r2;
0x001280        2006005F                 Null = r4 - r3;
0x001281        00560004                 if NEG r3 = r4 + Null;
0x001282        D14B000C                 r2 = M[r9 + 12];
0x001283        23450000                 r2 = r2 - r3;
0x001284        D54B000C                 M[r9 + 12] = r2;
0x001285        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x001286        01220002                 r0 = r0 + 2;
0x001287        DDF001EB                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x001288        F3D00000                 push rLink;
0x001289        E1F0019F                 call $block_interrupts;
0x00128A        01C00032                 r10 = Null + 50;
0x00128B        0160668A                 r4 = Null + 26250;
0x00128C        0920668A                 r0 = Null + M[$timer.last_addr];
0x00128D        E5F00008                 do $M.timer.cancel_event.loop;
0x00128E        E402002F                 Null = r0 + 1;
0x00128F        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x001290        D1720003                 r5 = M[r0 + 3];
0x001291        2004007F                 Null = r2 - r5;
0x001292        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x001293        0062000F                 r4 = r0 + Null;
0x001294        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x001295        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x001296        D1320000                 r1 = M[r0 + 0];
0x001297        D5360000                 M[r4 + 0] = r1;
0x001298        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x001299        E1F0017F                 call $interrupt.unblock;
0x00129A        DDF001D8                 jump $pop_rLink_and_rts;

 <$cbuffer.empty_buffer>
0x00129B        F3D00000                 push rLink;
0x00129C        0052000F                 r3 = r0 + Null;
0x00129D        D802000F                 Null = SIGNDET r0;
0x00129E        DD000004                 if EQ jump $M.cbuffer.empty_buffer.its_a_port;
0x00129F        E1F00195                 call $cbuffer.get_write_address_and_size;
0x0012A0        0032000F                 r1 = r0 + Null;
0x0012A1        DDF00007                 jump $M.cbuffer.empty_buffer.empty_port_loop;

 <$M.cbuffer.empty_buffer.its_a_port>
0x0012A2        E1F0016E                 call $cbuffer.calc_amount_data;
0x0012A3        00C2000F                 r10 = r0 + Null;
0x0012A4        0025000F                 r0 = r3 + Null;
0x0012A5        E1F0018A                 call $cbuffer.get_read_address_and_size;
0x0012A6        E5F00002                 do $M.cbuffer.empty_buffer.empty_port_loop;
0x0012A7        D002000F                 Null = M[r0 + Null];

 <$M.cbuffer.empty_buffer.empty_port_loop>
0x0012A8        0025000F                 r0 = r3 + Null;
0x0012A9        E1F001A0                 call $cbuffer.set_read_address;
0x0012AA        DDF001C8                 jump $pop_rLink_and_rts;

 <$message.send_short>
0x0012AB        F3D00000                 push rLink;
0x0012AC        E1F0017C                 call $block_interrupts;
0x0012AD        09309686                 r1 = Null + M[$message.queue_write_ptr];
0x0012AE        01230005                 r0 = r1 + 5;
0x0012AF        2102006E                 Null = r0 - 110;
0x0012B0        00200000                 if EQ r0 = Null + Null;
0x0012B1        29026686                 Null = r0 - M[$message.queue_read_ptr];
0x0012B2        DD000008                 if EQ jump $M.message.send_short.all_done;
0x0012B3        19209686                 M[$message.queue_write_ptr] = r0 + Null;
0x0012B4        D5430F08                 M[r1 + 3848] = r2;
0x0012B5        D5530F09                 M[r1 + 3849] = r3;
0x0012B6        D5630F0A                 M[r1 + 3850] = r4;
0x0012B7        D5730F0B                 M[r1 + 3851] = r5;
0x0012B8        D5830F0C                 M[r1 + 3852] = r6;
0x0012B9        E1F0FD6C                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x0012BA        E1F0015E                 call $interrupt.unblock;
0x0012BB        DDF001B7                 jump $pop_rLink_and_rts;

 <$pskey.read_key>
0x0012BC        F3D00000                 push rLink;
0x0012BD        E1F0016B                 call $block_interrupts;
0x0012BE        D5430001                 M[r1 + 1] = r2;
0x0012BF        D5530002                 M[r1 + 2] = r3;
0x0012C0        E450003F                 r3 = Null - 1;
0x0012C1        D5530000                 M[r1 + 0] = r3;
0x0012C2        01206689                 r0 = Null + 26249;

 <$M.pskey.read_key.find_end_of_list>
0x0012C3        0042000F                 r2 = r0 + Null;
0x0012C4        D1240000                 r0 = M[r2 + 0];
0x0012C5        E402002F                 Null = r0 + 1;
0x0012C6        DD10FFFD                 if NE jump $M.pskey.read_key.find_end_of_list;
0x0012C7        D5340000                 M[r2 + 0] = r1;
0x0012C8        21046689                 Null = r2 - 26249;
0x0012C9        E100FEDF                 if EQ call $pskey.private.send_request;
0x0012CA        E1F0014E                 call $interrupt.unblock;
0x0012CB        DDF001A7                 jump $pop_rLink_and_rts;

 <$cbops.shift.main>
0x0012CC        D12A0000                 r0 = M[r8 + 0];
0x0012CD        D038002F                 r1 = M[r6 + r0];
0x0012CE        5000003F                 I0 = Null + r1;
0x0012CF        D039002F                 r1 = M[r7 + r0];
0x0012D0        50C0003F                 L0 = Null + r1;
0x0012D1        D12A0001                 r0 = M[r8 + 1];
0x0012D2        D038002F                 r1 = M[r6 + r0];
0x0012D3        5040003F                 I4 = Null + r1;
0x0012D4        D039002F                 r1 = M[r7 + r0];
0x0012D5        50E0003F                 L4 = Null + r1;
0x0012D6        D14A0002                 r2 = M[r8 + 2];
0x0012D7        E4CC003F                 r10 = r10 - 1;
0x0012D8        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0012D9        93240000                 r0 = r0 ASHIFT r2;
0x0012DA        E5F00003                 do $M.cbops.shift.main.loop;
0x0012DB        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x0012DC        93240000                 r0 = r0 ASHIFT r2;

 <$M.cbops.shift.main.loop>
0x0012DD        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x0012DE        51E00000                 L4 = Null + 0;
0x0012DF        DC0D000F                 rts;

 <$latency.reset_encoded_latency>
0x0012E0        F3D00000                 push rLink;
0x0012E1        D1290001                 r0 = M[r7 + 1];
0x0012E2        DD00000E                 if EQ jump $M.latency_measure.reset.encoded_reset_done;
0x0012E3        E1F0FFB8                 call $cbuffer.empty_buffer;
0x0012E4        D1290002                 r0 = M[r7 + 2];
0x0012E5        D1220001                 r0 = M[r0 + 1];
0x0012E6        D5290007                 M[r7 + 7] = r0;
0x0012E7        D1290003                 r0 = M[r7 + 3];
0x0012E8        D1220002                 r0 = M[r0 + 2];
0x0012E9        D5290008                 M[r7 + 8] = r0;
0x0012EA        FD00007F 0120FFFF        r0 = Null + 8388607;
0x0012EC        D529000B                 M[r7 + 11] = r0;
0x0012ED        D529000C                 M[r7 + 12] = r0;
0x0012EE        D529000D                 M[r7 + 13] = r0;
0x0012EF        D529000E                 M[r7 + 14] = r0;

 <$M.latency_measure.reset.encoded_reset_done>
0x0012F0        DDF00182                 jump $pop_rLink_and_rts;

 <$cbops.switch_op.helper>
0x0012F1        E440002F                 r2 = Null + 1;
0x0012F2        D12A0000                 r0 = M[r8 + 0];
0x0012F3        D13A0002                 r1 = M[r8 + 2];
0x0012F4        00340000                 if EQ r1 = r2 + Null;
0x0012F5        D3200000                 r0 = M[r0 + Null];
0x0012F6        D14A0003                 r2 = M[r8 + 3];
0x0012F7        88220031                 if NE r0 = r0 XOR r1;
0x0012F8        83230000                 r0 = r0 AND r1;
0x0012F9        DD100009                 if NE jump $M.cbops.switch_op.helper.exit;
0x0012FA        D12A0001                 r0 = M[r8 + 1];
0x0012FB        DD000003                 if EQ jump $M.cbops.switch_op.helper.bypass;
0x0012FC        21AAFFFD                 r8 = r8 - -3;
0x0012FD        DDF00005                 jump $M.cbops.switch_op.helper.exit;

 <$M.cbops.switch_op.helper.bypass>
0x0012FE        D12AFFFE                 r0 = M[r8 + -2];
0x0012FF        E402002F                 Null = r0 + 1;
0x001300        DD000002                 if EQ jump $M.cbops.switch_op.helper.exit;
0x001301        01A20002                 r8 = r0 + 2;

 <$M.cbops.switch_op.helper.exit>
0x001302        DC0D000F                 rts;

 <$math.log2_abs_table>
0x001303        D881000F                 r6 = SIGNDET rMAC;
0x001304        93E80000                 rMAC = rMAC ASHIFT r6;
0x001305        20100014                 if NEG rMAC = Null - rMAC;
0x001306        DDF00003                 jump $M.math.log2_table.continue_jp;

 <$math.log2_table>
0x001307        D881000F                 r6 = SIGNDET rMAC;
0x001308        93E80000                 rMAC = rMAC ASHIFT r6;

 <$M.math.log2_table.continue_jp>
0x001309        E488002F                 r6 = r6 + 1;
0x00130A        91880010                 r6 = r6 ASHIFT 16;
0x00130B        8D310002                 r1 = rMAC LSHIFT 2;
0x00130C        8D33006D                 r1 = r1 LSHIFT -19;
0x00130D        8D210007                 r0 = rMAC LSHIFT 7;
0x00130E        8D22007F                 r0 = r0 LSHIFT -1;
0x00130F        D113033D                 rMAC = M[r1 + 829];
0x001310        D133033E                 r1 = M[r1 + 830];
0x001311        23310000                 r1 = r1 - rMAC;
0x001312        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x001313        2021008F                 r0 = rMAC - r6;
0x001314        DC0D000F                 rts;

 <$math.pow2_taylor>
0x001315        F3010000                 push I0;
0x001316        510003E5                 I0 = Null + 997;
0x001317        91920070                 r7 = r0 ASHIFT -16;
0x001318        8D820008                 r6 = r0 LSHIFT 8;
0x001319        8D88007F                 r6 = r6 LSHIFT -1;
0x00131A        F3913100                 push M1, r1 = M[I0,1];
0x00131B        51900001                 M1 = Null + 1;
0x00131C        46992100                 r7 = r7 + M1, r0 = M[I0,M1];
0x00131D        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x00131E        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x00131F        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x001320        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x001321        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x001322        AC32008F                 r1 = r1 + r0 * r6 (SS);
0x001323        9023009F                 r0 = r1 ASHIFT r7;
0x001324        F3950000                 pop M1;
0x001325        F3050000                 pop I0;
0x001326        DC0D000F                 rts;

 <$M.configure_latency_reporting.func>
0x001327        F3D00000                 push rLink;
0x001328        995503E8                 r3 = r3 * 1000 (int);
0x001329        19509671                 M[$M.configure_latency_reporting.min_change] = r3 + Null;
0x00132A        19309670                 M[$M.configure_latency_reporting.enabled] = r1 + Null;
0x00132B        DD100007                 if NE jump $M.configure_latency_reporting.no_cancel_needed;
0x00132C        E420003F                 r0 = Null - 1;
0x00132D        19206672                 M[$M.configure_latency_reporting.average_latency] = r0 + Null;
0x00132E        013065D3                 r1 = Null + 26067;
0x00132F        D1430003                 r2 = M[r1 + 3];
0x001330        E110FF58                 if NE call $timer.cancel_event;
0x001331        DDF00003                 jump $M.configure_latency_reporting.done;

 <$M.configure_latency_reporting.no_cancel_needed>
0x001332        013065D3                 r1 = Null + 26067;
0x001333        E1F0FA7E                 call $M.report_latency_to_vm.init;

 <$M.configure_latency_reporting.done>
0x001334        DDF0013E                 jump $pop_rLink_and_rts;

 <$flash.copy_to_dm>
0x001335        F3D00000                 push rLink;
0x001336        0062000F                 r4 = r0 + Null;
0x001337        0073000F                 r5 = r1 + Null;

 <$M.flash.copy_to_dm.page_loop>
0x001338        0026000F                 r0 = r4 + Null;
0x001339        0037000F                 r1 = r5 + Null;
0x00133A        E1F000E6                 call $flash.map_page_into_dm;
0x00133B        00C3000F                 r10 = r1 + Null;
0x00133C        5010002F                 I1 = Null + r0;
0x00133D        E5F00003                 do $M.flash.copy_to_dm.loop;
0x00133E        03002500                 Null = Null + Null, r0 = M[I1,1];
0x00133F        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm.loop>
0x001340        03630000                 r4 = r4 + r1;
0x001341        23730000                 r5 = r5 - r1;
0x001342        DD10FFF6                 if NE jump $M.flash.copy_to_dm.page_loop;
0x001343        DDF0012F                 jump $pop_rLink_and_rts;

 <$cbops.copy_op.main>
0x001344        D12A0000                 r0 = M[r8 + 0];
0x001345        D038002F                 r1 = M[r6 + r0];
0x001346        5000003F                 I0 = Null + r1;
0x001347        D039002F                 r1 = M[r7 + r0];
0x001348        50C0003F                 L0 = Null + r1;
0x001349        D12A0001                 r0 = M[r8 + 1];
0x00134A        D038002F                 r1 = M[r6 + r0];
0x00134B        5040003F                 I4 = Null + r1;
0x00134C        D039002F                 r1 = M[r7 + r0];
0x00134D        50E0003F                 L4 = Null + r1;
0x00134E        E4CC003F                 r10 = r10 - 1;
0x00134F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001350        E5F00002                 do $M.cbops.copy_op.main.loop;
0x001351        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.copy_op.main.loop>
0x001352        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x001353        51E00000                 L4 = Null + 0;
0x001354        DC0D000F                 rts;

 <$iir_resamplerv2.iir_9_s2.count>
0x001355        0130000D                 r1 = Null + 13;
0x001356        DC0D000F                 rts;

 <$iir_resamplerv2.iir_9_s2>
0x001357        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x001358        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001359        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00135A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00135B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00135C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x00135D        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x00135E        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x00135F        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x001360        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001361        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001362        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001363        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x001364        93E30000                 rMAC = rMAC ASHIFT r1;
0x001365        DC0D000F                 rts;

 <$math.pow2_sat_table>
0x001366        91820070                 r6 = r0 ASHIFT -16;
0x001367        DD400005                 if NEG jump $M.math.pow2_table.continue_jp;
0x001368        FD00007F 0120FFFE        r0 = Null + 8388606;
0x00136A        DC0D000F                 rts;

 <$math.pow2_table>
0x00136B        91820070                 r6 = r0 ASHIFT -16;

 <$M.math.pow2_table.continue_jp>
0x00136C        8D920008                 r7 = r0 LSHIFT 8;
0x00136D        8D99006D                 r7 = r7 LSHIFT -19;
0x00136E        E488002F                 r6 = r6 + 1;
0x00136F        D139035E                 r1 = M[r7 + 862];
0x001370        D199035F                 r7 = M[r7 + 863];
0x001371        23930000                 r7 = r7 - r1;
0x001372        8D22000D                 r0 = r0 LSHIFT 13;
0x001373        8D22007F                 r0 = r0 LSHIFT -1;
0x001374        AC39002F                 r1 = r1 + r7 * r0 (SS);
0x001375        9023008F                 r0 = r1 ASHIFT r6;
0x001376        DC0D000F                 rts;

 <$M.audio_proc.peak_monitor.Process.func>
0x001377        F3D00000                 push rLink;
0x001378        D1290000                 r0 = M[r7 + 0];
0x001379        E1F000CB                 call $frmbuffer.get_buffer;
0x00137A        5000002F                 I0 = Null + r0;
0x00137B        50C0003F                 L0 = Null + r1;
0x00137C        F3D40000                 pop rLink;
0x00137D        51900001                 M1 = Null + 1;
0x00137E        00C5610F                 r10 = r3 + Null, r4 = M[I0,M1];
0x00137F        D1590001                 r3 = M[r7 + 1];
0x001380        E5F00003                 do $M.audio_proc.peak_monitor.Process.lp_calc_peak;
0x001381        E466004F                 r4 = ABS r4;
0x001382        E456616F                 r3 = MAX r4, r4 = M[I0,M1];

 <$M.audio_proc.peak_monitor.Process.lp_calc_peak>
0x001383        50C0000F                 L0 = Null + Null;
0x001384        D5590001                 M[r7 + 1] = r3;
0x001385        DC0D000F                 rts;

 <$cbuffer.set_write_address.its_a_port>
0x001386        F3D00000                 push rLink;
0x001387        8122001F                 r0 = r0 AND 0x1f;
0x001388        2122000C                 r0 = r0 - 12;
0x001389        0900FE33                 Null = Null + M[0xfffe33];
0x00138A        09006683                 Null = Null + M[$cbuffer.auto_mcu_message];
0x00138B        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x00138C        D1326319                 r1 = M[r0 + 25369];
0x00138D        2103F000                 Null = r1 - -4096;
0x00138E        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x00138F        85408003                 r2 = Null OR 0x8003;
0x001390        ED520001                 r3 = 0x1 ASHIFT r0;
0x001391        E1F0FF1A                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x001392        DDF000E0                 jump $pop_rLink_and_rts;

 <$cbuffer.advance_read_ptr>
0x001393        F3D00000                 push rLink;
0x001394        F3200000                 push r0;
0x001395        E1F0009A                 call $cbuffer.get_read_address_and_size;
0x001396        5000002F                 I0 = Null + r0;
0x001397        50C0003F                 L0 = Null + r1;
0x001398        50B000CF                 M3 = Null + r10;
0x001399        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x00139A        F3240000                 pop r0;
0x00139B        4430000F                 r1 = Null + I0;
0x00139C        E1F000AD                 call $cbuffer.set_read_address;
0x00139D        51C00000                 L0 = Null + 0;
0x00139E        DDF000D4                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_read_insert_ind>
0x00139F        20C000CF                 r10 = Null - r10;
0x0013A0        D14B0004                 r2 = M[r9 + 4];
0x0013A1        9144007F                 r2 = r2 ASHIFT -1;
0x0013A2        03C40000                 r10 = r10 + r2;
0x0013A3        D14B000C                 r2 = M[r9 + 12];
0x0013A4        034C0000                 r2 = r2 + r10;
0x0013A5        D54B000C                 M[r9 + 12] = r2;
0x0013A6        5010008F                 I1 = Null + r6;
0x0013A7        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x0013A8        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x0013A9        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x0013AA        03004500                 Null = Null + Null, r2 = M[I1,1];
0x0013AB        4480001F                 r6 = Null + I1;
0x0013AC        D5820001                 M[r0 + 1] = r6;
0x0013AD        DC0D000F                 rts;

 <$cbuffer.set_read_address.its_a_port>
0x0013AE        F3D00000                 push rLink;
0x0013AF        8122001F                 r0 = r0 AND 0x1f;
0x0013B0        0900FE33                 Null = Null + M[0xfffe33];
0x0013B1        09006683                 Null = Null + M[$cbuffer.auto_mcu_message];
0x0013B2        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x0013B3        D132630D                 r1 = M[r0 + 25357];
0x0013B4        2103F000                 Null = r1 - -4096;
0x0013B5        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x0013B6        85408002                 r2 = Null OR 0x8002;
0x0013B7        ED520001                 r3 = 0x1 ASHIFT r0;
0x0013B8        E1F0FEF3                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x0013B9        DDF000B9                 jump $pop_rLink_and_rts;

 <$frame_sync.update_input_streams_ind>
0x0013BA        D15B0008                 r3 = M[r9 + 8];
0x0013BB        D14B0009                 r2 = M[r9 + 9];
0x0013BC        23540000                 r3 = r3 - r2;
0x0013BD        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x0013BE        D14B0004                 r2 = M[r9 + 4];
0x0013BF        9144007F                 r2 = r2 ASHIFT -1;
0x0013C0        03540000                 r3 = r3 + r2;
0x0013C1        D14B000C                 r2 = M[r9 + 12];
0x0013C2        23450000                 r2 = r2 - r3;
0x0013C3        D54B000C                 M[r9 + 12] = r2;
0x0013C4        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x0013C5        E422002F                 r0 = r0 + 1;
0x0013C6        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.amount_to_use>
0x0013C7        D12A000C                 r0 = M[r8 + 12];
0x0013C8        9462009F                 r4 = r0 * r7 (frac);
0x0013C9        2069006F                 r4 = r7 - r4;
0x0013CA        D10A0009                 Null = M[r8 + 9];
0x0013CB        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit;
0x0013CC        2126005F                 r0 = r4 - 95;
0x0013CD        20660025                 if POS r4 = r4 - r0;

 <$M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit>
0x0013CE        21660002                 r4 = r4 - 2;
0x0013CF        00600004                 if NEG r4 = Null + Null;
0x0013D0        2006007F                 Null = r4 - r5;
0x0013D1        00760004                 if NEG r5 = r4 + Null;
0x0013D2        DC0D000F                 rts;

 <$frame_sync.register_handlers>
0x0013D3        F3D00000                 push rLink;

 <$M.frame_sync.handlers.lp_proc_loop>
0x0013D4        D036000F                 r1 = M[r4 + Null];
0x0013D5        DD00009D                 if EQ jump $pop_rLink_and_rts;
0x0013D6        D1460001                 r2 = M[r4 + 1];
0x0013D7        D1560002                 r3 = M[r4 + 2];
0x0013D8        D1260003                 r0 = M[r4 + 3];
0x0013D9        01660004                 r4 = r4 + 4;
0x0013DA        19609693                 M[$M.frame_sync.handlers.LOOP_COUNT] = r4 + Null;
0x0013DB        E002000F                 call r0;
0x0013DC        09609693                 r4 = Null + M[$M.frame_sync.handlers.LOOP_COUNT];
0x0013DD        DDF0FFF7                 jump $M.frame_sync.handlers.lp_proc_loop;

 <$frame_sync.distribute_output_stream_ind>
0x0013DE        501000AF                 I1 = Null + r8;
0x0013DF        238A0000                 r6 = r6 - r8;
0x0013E0        0088003D                 if LE r6 = r6 + r1;
0x0013E1        67890000                 r6 = r6 - M1;
0x0013E2        70A8006F                 M2 = r6 - r4;
0x0013E3        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x0013E4        444000AF                 r2 = Null + M2;
0x0013E5        D54B000C                 M[r9 + 12] = r2;
0x0013E6        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x0013E7        4480001F                 r6 = Null + I1;
0x0013E8        D5820002                 M[r0 + 2] = r6;
0x0013E9        DC0D000F                 rts;

 <$volume_and_limit.initialize>
0x0013EA        D1C90002                 r10 = M[r7 + 2];
0x0013EB        0189000B                 r6 = r7 + 11;
0x0013EC        D1590004                 r3 = M[r7 + 4];
0x0013ED        E5F00007                 do $M.audio_proc.volume_and_limit.reset.volume_reset_loop;
0x0013EE        D1280002                 r0 = M[r6 + 2];
0x0013EF        CC15002F                 rMAC = r3 * r0 (SS);
0x0013F0        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x0013F1        D5180003                 M[r6 + 3] = rMAC;
0x0013F2        D5180004                 M[r6 + 4] = rMAC;
0x0013F3        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.reset.volume_reset_loop>
0x0013F4        D5090009                 M[r7 + 9] = Null;
0x0013F5        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x0013F6        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x0013F7        D076000F                 r5 = M[r4 + Null];
0x0013F8        DD00007A                 if EQ jump $pop_rLink_and_rts;
0x0013F9        D1960001                 r7 = M[r4 + 1];
0x0013FA        D1A60002                 r8 = M[r4 + 2];
0x0013FB        01660003                 r4 = r4 + 3;
0x0013FC        F3600000                 push r4;
0x0013FD        E007000F                 call r5;
0x0013FE        F3640000                 pop r4;
0x0013FF        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$cbuffer.calc_amount_space>
0x001400        D802000F                 Null = SIGNDET r0;
0x001401        DD00FCA1                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x001402        D1420000                 r2 = M[r0 + 0];
0x001403        D1320002                 r1 = M[r0 + 2];
0x001404        D1220001                 r0 = M[r0 + 1];
0x001405        23230000                 r0 = r0 - r1;
0x001406        0022004D                 if LE r0 = r0 + r2;
0x001407        E422003F                 r0 = r0 - 1;
0x001408        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x001409        F3D00000                 push rLink;
0x00140A        23A80000                 r8 = r8 - r6;
0x00140B        00AA0034                 if NEG r8 = r8 + r1;
0x00140C        20CA006F                 r10 = r8 - r4;
0x00140D        E140FF92                 if NEG call $frame_sync.distribute_read_insert_ind;
0x00140E        E1F0FE22                 call $frame_sync.analyze_stream_ind;
0x00140F        DDF00063                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data>
0x001410        D802000F                 Null = SIGNDET r0;
0x001411        DD00FCB4                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x001412        D1420000                 r2 = M[r0 + 0];
0x001413        D1320002                 r1 = M[r0 + 2];
0x001414        D1220001                 r0 = M[r0 + 1];
0x001415        2023002F                 r0 = r1 - r0;
0x001416        00220044                 if NEG r0 = r0 + r2;
0x001417        DC0D000F                 rts;

 <$interrupt.unblock>
0x001418        09209684                 r0 = Null + M[$interrupt.block_count];
0x001419        E1001240                 if EQ call $error;
0x00141A        E422003F                 r0 = r0 - 1;
0x00141B        19209684                 M[$interrupt.block_count] = r0 + Null;
0x00141C        DC0D0001                 if NE rts;
0x00141D        E420002F                 r0 = Null + 1;
0x00141E        1920FE12                 M[0xfffe12] = r0 + Null;
0x00141F        DC0D000F                 rts;

 <$flash.map_page_into_dm>
0x001420        9152007F                 r3 = r0 ASHIFT -1;
0x001421        1945FE5D                 M[0xfffe5d] = r2 + r3;
0x001422        81520001                 r3 = r0 AND 0x1;
0x001423        65251000                 r0 = 4096 - r3;
0x001424        2023002F                 r0 = r1 - r0;
0x001425        20330025                 if POS r1 = r1 - r0;
0x001426        0125D000                 r0 = r3 + -12288;
0x001427        DC0D000F                 rts;

 <$block_interrupts>
0x001428        09209684                 r0 = Null + M[$interrupt.block_count];
0x001429        E422002F                 r0 = r0 + 1;
0x00142A        19209684                 M[$interrupt.block_count] = r0 + Null;
0x00142B        1900FE12                 M[0xfffe12] = Null + Null;
0x00142C        03000000                 Null = Null + Null;
0x00142D        03000000                 Null = Null + Null;
0x00142E        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size>
0x00142F        D802000F                 Null = SIGNDET r0;
0x001430        DD00FB7F                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x001431        D1320000                 r1 = M[r0 + 0];
0x001432        D1220001                 r0 = M[r0 + 1];
0x001433        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size>
0x001434        D802000F                 Null = SIGNDET r0;
0x001435        DD00FB2A                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x001436        D1320000                 r1 = M[r0 + 0];
0x001437        D1220002                 r0 = M[r0 + 2];
0x001438        DC0D000F                 rts;

 <$message.send_queue_space>
0x001439        09206686                 r0 = Null + M[$message.queue_read_ptr];
0x00143A        29229686                 r0 = r0 - M[$message.queue_write_ptr];
0x00143B        E422003F                 r0 = r0 - 1;
0x00143C        DC0D0005                 if POS rts;
0x00143D        0122006E                 r0 = r0 + 110;
0x00143E        DC0D000F                 rts;

 <$cbuffer.is_it_enabled>
0x00143F        D802000F                 Null = SIGNDET r0;
0x001440        DC0D0001                 if NE rts;
0x001441        8122001F                 r0 = r0 AND 0x1f;
0x001442        D1029298                 Null = M[r0 + -28008];
0x001443        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x001444        D1520002                 r3 = M[r0 + 2];
0x001445        D1420000                 r2 = M[r0 + 0];
0x001446        D1220001                 r0 = M[r0 + 1];
0x001447        D1340000                 r1 = M[r2 + 0];
0x001448        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x001449        D802000F                 Null = SIGNDET r0;
0x00144A        DD00FF64                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x00144B        D5320001                 M[r0 + 1] = r1;
0x00144C        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x00144D        D802000F                 Null = SIGNDET r0;
0x00144E        DD00FF38                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x00144F        D5320002                 M[r0 + 2] = r1;
0x001450        DC0D000F                 rts;

 <$message.send>
0x001451        2104FFFE                 Null = r2 - -2;
0x001452        DD00FB37                 if EQ jump $message.send_long;
0x001453        DDF0FE58                 jump $message.send_short;

 <$cbops.deinterleave.amount_to_use>
0x001454        8D77007F                 r5 = r5 LSHIFT -1;
0x001455        2007009F                 Null = r5 - r7;
0x001456        00790005                 if POS r5 = r7 + Null;
0x001457        8D770001                 r5 = r5 LSHIFT 1;
0x001458        DC0D000F                 rts;

 <$latency.calc_inv_fs>
0x001459        8D220002                 r0 = r0 LSHIFT 2;
0x00145A        01103D09                 rMAC = Null + 15625;
0x00145B        D9020000                 Div = rMAC / r0;
0x00145C        D9200001                 r0 = DivResult;
0x00145D        DC0D000F                 rts;

 <$cbuffer.buffer_configure>
0x00145E        D5320002                 M[r0 + 2] = r1;
0x00145F        D5320001                 M[r0 + 1] = r1;
0x001460        D5420000                 M[r0 + 0] = r2;
0x001461        DC0D000F                 rts;

 <$timer.schedule_event_in_period>
0x001462        D1230001                 r0 = M[r1 + 1];
0x001463        03420000                 r2 = r2 + r0;
0x001464        DDF0FC00                 jump $timer.schedule_event_at;

 <$timer.schedule_event_in>
0x001465        0944FE71                 r2 = r2 + M[0xfffe71];
0x001466        DDF0FBFE                 jump $timer.schedule_event_at;

 <$cbops.switch_op.reset>
0x001467        01500000                 r3 = Null + 0;
0x001468        DDF0FE89                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.amount_to_use>
0x001469        E450002F                 r3 = Null + 1;
0x00146A        DDF0FE87                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.main>
0x00146B        01500002                 r3 = Null + 2;
0x00146C        DDF0FE85                 jump $cbops.switch_op.helper;

 <$cbops.fir_resample.complete>
0x00146D        09609691                 r4 = Null + M[$M.cbops.fir_resample.amount_used];
0x00146E        1960968B                 M[$cbops.amount_to_use] = r4 + Null;
0x00146F        DC0D000F                 rts;

 <$frmbuffer.set_frame_size>
0x001470        D5520002                 M[r0 + 2] = r3;
0x001471        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x001472        F3D40000                 pop rLink;
0x001473        DC0D000F                 rts;

 <$cbops.dc_remove.reset>
0x001474        D50A0002                 M[r8 + 2] = Null;
0x001475        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x001476        DC0D000F                 rts;

 <$kal_filter_coef_lib.__warp>
0x001477        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__warp.jump_entry>
0x001478        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x001479        F3010000                 push I0;
0x00147A        51006402                 I0 = Null + 25602;
0x00147B        E1F00745                 call $kal_float_lib.div;
0x00147C        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00147D        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00147E        E1F00710                 call $kal_float_lib.mul;
0x00147F        0042000F                 r2 = r0 + Null;
0x001480        0053000F                 r3 = r1 + Null;
0x001481        0062000F                 r4 = r0 + Null;
0x001482        0073000F                 r5 = r1 + Null;
0x001483        E1F0070B                 call $kal_float_lib.mul;
0x001484        0082000F                 r6 = r0 + Null;
0x001485        0093000F                 r7 = r1 + Null;
0x001486        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001487        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001488        01C00005                 r10 = Null + 5;
0x001489        E5F00007                 do $kal_filter_coef_lib.__warp.tangent_loop;
0x00148A        0048000F                 r2 = r6 + Null;
0x00148B        0059000F                 r3 = r7 + Null;
0x00148C        E1F00702                 call $kal_float_lib.mul;
0x00148D        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00148E        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00148F        E1F006ED                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__warp.tangent_loop>
0x001490        0046000F                 r2 = r4 + Null;
0x001491        0057000F                 r3 = r5 + Null;
0x001492        E1F006FC                 call $kal_float_lib.mul;
0x001493        F3050000                 pop I0;
0x001494        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x001495        F3D40000                 pop rLink;
0x001496        DC0D000F                 rts;

 <$kal_filter_coef_lib.__db2lin>
0x001497        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__db2lin.jump_entry>
0x001498        F10011F0                 pushm <r2, r3, r4, r5, r6, r10>;
0x001499        F3010000                 push I0;
0x00149A        51009451                 I0 = Null + -27567;
0x00149B        0062000F                 r4 = r0 + Null;
0x00149C        0073000F                 r5 = r1 + Null;
0x00149D        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00149E        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x00149F        E1F00721                 call $kal_float_lib.div;
0x0014A0        0042000F                 r2 = r0 + Null;
0x0014A1        0053000F                 r3 = r1 + Null;
0x0014A2        E1F006CD                 call $kal_float_lib.float_to_int;
0x0014A3        0082000F                 r6 = r0 + Null;
0x0014A4        E1F006C5                 call $kal_float_lib.int_to_float;
0x0014A5        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0014A6        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0014A7        E1F006E7                 call $kal_float_lib.mul;
0x0014A8        0042000F                 r2 = r0 + Null;
0x0014A9        0053000F                 r3 = r1 + Null;
0x0014AA        0026000F                 r0 = r4 + Null;
0x0014AB        0037000F                 r1 = r5 + Null;
0x0014AC        E1F006D9                 call $kal_float_lib.sub;
0x0014AD        0062000F                 r4 = r0 + Null;
0x0014AE        0073000F                 r5 = r1 + Null;
0x0014AF        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0014B0        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0014B1        01C00003                 r10 = Null + 3;
0x0014B2        E5F00007                 do $kal_filter_coef_lib.__db2lin.power_series_loop;
0x0014B3        0046000F                 r2 = r4 + Null;
0x0014B4        0057000F                 r3 = r5 + Null;
0x0014B5        E1F006D9                 call $kal_float_lib.mul;
0x0014B6        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0014B7        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0014B8        E1F006C4                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__db2lin.power_series_loop>
0x0014B9        03280000                 r0 = r0 + r6;
0x0014BA        F3050000                 pop I0;
0x0014BB        F10411F0                 popm <r2, r3, r4, r5, r6, r10>;
0x0014BC        F3D40000                 pop rLink;
0x0014BD        DC0D000F                 rts;

 <$kal_filter_coef_lib.__scale_coefficients>
0x0014BE        F1002001                 pushm <FP(=SP), rLink>;
0x0014BF        012000FF                 r0 = Null + 255;
0x0014C0        F1387FF6                 r1 = M[FP + -0xa];
0x0014C1        83320000                 r1 = r1 AND r0;
0x0014C2        F1487FF8                 r2 = M[FP + -0x8];
0x0014C3        83420000                 r2 = r2 AND r0;
0x0014C4        E434006F                 r1 = MAX r2;
0x0014C5        F1487FFA                 r2 = M[FP + -0x6];
0x0014C6        83420000                 r2 = r2 AND r0;
0x0014C7        E434006F                 r1 = MAX r2;
0x0014C8        F1487FFC                 r2 = M[FP + -0x4];
0x0014C9        83420000                 r2 = r2 AND r0;
0x0014CA        E434006F                 r1 = MAX r2;
0x0014CB        F1487FFE                 r2 = M[FP + -0x2];
0x0014CC        83420000                 r2 = r2 AND r0;
0x0014CD        E434006F                 r1 = MAX r2;
0x0014CE        2143007F                 r2 = r1 - 127;
0x0014CF        F1287FF6                 r0 = M[FP + -0xa];
0x0014D0        F1387FF7                 r1 = M[FP + -0x9];
0x0014D1        23240000                 r0 = r0 - r2;
0x0014D2        E1F006A2                 call $kal_float_lib.float_to_frac;
0x0014D3        F12C7FF0                 M[FP + -0x10] = r0;
0x0014D4        F1287FF8                 r0 = M[FP + -0x8];
0x0014D5        F1387FF9                 r1 = M[FP + -0x7];
0x0014D6        23240000                 r0 = r0 - r2;
0x0014D7        E1F0069D                 call $kal_float_lib.float_to_frac;
0x0014D8        F12C7FF1                 M[FP + -0xf] = r0;
0x0014D9        F1287FFA                 r0 = M[FP + -0x6];
0x0014DA        F1387FFB                 r1 = M[FP + -0x5];
0x0014DB        23240000                 r0 = r0 - r2;
0x0014DC        E1F00698                 call $kal_float_lib.float_to_frac;
0x0014DD        F12C7FF2                 M[FP + -0xe] = r0;
0x0014DE        F1287FFC                 r0 = M[FP + -0x4];
0x0014DF        F1387FFD                 r1 = M[FP + -0x3];
0x0014E0        23240000                 r0 = r0 - r2;
0x0014E1        E1F00693                 call $kal_float_lib.float_to_frac;
0x0014E2        F12C7FF3                 M[FP + -0xd] = r0;
0x0014E3        F1287FFE                 r0 = M[FP + -0x2];
0x0014E4        F1387FFF                 r1 = M[FP + -0x1];
0x0014E5        23240000                 r0 = r0 - r2;
0x0014E6        E1F0068E                 call $kal_float_lib.float_to_frac;
0x0014E7        F12C7FF4                 M[FP + -0xc] = r0;
0x0014E8        F14C7FF5                 M[FP + -0xb] = r2;
0x0014E9        F1042001                 popm <FP, rLink>;
0x0014EA        F103FFF6                 SP = SP + -10;
0x0014EB        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_bypass>
0x0014EC        F1002005                 pushm <FP(=SP), r0, rLink>;
0x0014ED        E420002F                 r0 = Null + 1;
0x0014EE        F12C7FFA                 M[FP + -0x6] = r0;
0x0014EF        01200000                 r0 = Null + 0;
0x0014F0        F12C7FFC                 M[FP + -0x4] = r0;
0x0014F1        F12C7FFB                 M[FP + -0x5] = r0;
0x0014F2        F12C7FFF                 M[FP + -0x1] = r0;
0x0014F3        F12C7FFE                 M[FP + -0x2] = r0;
0x0014F4        FD000040 01200000        r0 = Null + 4194304;
0x0014F6        F12C7FFD                 M[FP + -0x3] = r0;
0x0014F7        F1042005                 popm <FP, r0, rLink>;
0x0014F8        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_1st>
0x0014F9        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0014FA        F1287FFC                 r0 = M[FP + -0x4];
0x0014FB        F1387FFD                 r1 = M[FP + -0x3];
0x0014FC        F1487FFE                 r2 = M[FP + -0x2];
0x0014FD        F1587FFF                 r3 = M[FP + -0x1];
0x0014FE        E1F0FF79                 call $kal_filter_coef_lib.__warp;
0x0014FF        0062000F                 r4 = r0 + Null;
0x001500        0073000F                 r5 = r1 + Null;
0x001501        01400080                 r2 = Null + 128;
0x001502        FD000080 01500000        r3 = Null + -8388608;
0x001504        E1F00678                 call $kal_float_lib.add;
0x001505        E1F0069E                 call $kal_float_lib.recip;
0x001506        0082000F                 r6 = r0 + Null;
0x001507        0093000F                 r7 = r1 + Null;
0x001508        0046000F                 r2 = r4 + Null;
0x001509        0057000F                 r3 = r5 + Null;
0x00150A        E1F00684                 call $kal_float_lib.mul;
0x00150B        F1030006                 SP = SP + 6;
0x00150C        F100000C                 pushm <r0, r1>;
0x00150D        F100000C                 pushm <r0, r1>;
0x00150E        01200000                 r0 = Null + 0;
0x00150F        01300000                 r1 = Null + 0;
0x001510        F100000C                 pushm <r0, r1>;
0x001511        0026000F                 r0 = r4 + Null;
0x001512        0037000F                 r1 = r5 + Null;
0x001513        01400080                 r2 = Null + 128;
0x001514        FD000080 01500000        r3 = Null + -8388608;
0x001516        E1F0066F                 call $kal_float_lib.sub;
0x001517        0048000F                 r2 = r6 + Null;
0x001518        0059000F                 r3 = r7 + Null;
0x001519        E1F00675                 call $kal_float_lib.mul;
0x00151A        F100000C                 pushm <r0, r1>;
0x00151B        01200000                 r0 = Null + 0;
0x00151C        01300000                 r1 = Null + 0;
0x00151D        F100000C                 pushm <r0, r1>;
0x00151E        E1F0FFA0                 call $kal_filter_coef_lib.__scale_coefficients;
0x00151F        F3240000                 pop r0;
0x001520        F12C7FF6                 M[FP + -0xa] = r0;
0x001521        F3240000                 pop r0;
0x001522        F12C7FF8                 M[FP + -0x8] = r0;
0x001523        F3240000                 pop r0;
0x001524        F12C7FF7                 M[FP + -0x9] = r0;
0x001525        F3240000                 pop r0;
0x001526        F12C7FFB                 M[FP + -0x5] = r0;
0x001527        F3240000                 pop r0;
0x001528        F12C7FFA                 M[FP + -0x6] = r0;
0x001529        F3240000                 pop r0;
0x00152A        F12C7FF9                 M[FP + -0x7] = r0;
0x00152B        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00152C        F103FFFC                 SP = SP + -4;
0x00152D        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_1st>
0x00152E        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00152F        F1287FFC                 r0 = M[FP + -0x4];
0x001530        F1387FFD                 r1 = M[FP + -0x3];
0x001531        F1487FFE                 r2 = M[FP + -0x2];
0x001532        F1587FFF                 r3 = M[FP + -0x1];
0x001533        E1F0FF44                 call $kal_filter_coef_lib.__warp;
0x001534        0062000F                 r4 = r0 + Null;
0x001535        0073000F                 r5 = r1 + Null;
0x001536        01400080                 r2 = Null + 128;
0x001537        FD000080 01500000        r3 = Null + -8388608;
0x001539        E1F00643                 call $kal_float_lib.add;
0x00153A        E1F00669                 call $kal_float_lib.recip;
0x00153B        0082000F                 r6 = r0 + Null;
0x00153C        0093000F                 r7 = r1 + Null;
0x00153D        F1030006                 SP = SP + 6;
0x00153E        F100000C                 pushm <r0, r1>;
0x00153F        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001541        F100000C                 pushm <r0, r1>;
0x001542        01200000                 r0 = Null + 0;
0x001543        01300000                 r1 = Null + 0;
0x001544        F100000C                 pushm <r0, r1>;
0x001545        0026000F                 r0 = r4 + Null;
0x001546        0037000F                 r1 = r5 + Null;
0x001547        01400080                 r2 = Null + 128;
0x001548        FD000080 01500000        r3 = Null + -8388608;
0x00154A        E1F0063B                 call $kal_float_lib.sub;
0x00154B        0048000F                 r2 = r6 + Null;
0x00154C        0059000F                 r3 = r7 + Null;
0x00154D        E1F00641                 call $kal_float_lib.mul;
0x00154E        F100000C                 pushm <r0, r1>;
0x00154F        01200000                 r0 = Null + 0;
0x001550        01300000                 r1 = Null + 0;
0x001551        F100000C                 pushm <r0, r1>;
0x001552        E1F0FF6C                 call $kal_filter_coef_lib.__scale_coefficients;
0x001553        F3240000                 pop r0;
0x001554        F12C7FF6                 M[FP + -0xa] = r0;
0x001555        F3240000                 pop r0;
0x001556        F12C7FF8                 M[FP + -0x8] = r0;
0x001557        F3240000                 pop r0;
0x001558        F12C7FF7                 M[FP + -0x9] = r0;
0x001559        F3240000                 pop r0;
0x00155A        F12C7FFB                 M[FP + -0x5] = r0;
0x00155B        F3240000                 pop r0;
0x00155C        F12C7FFA                 M[FP + -0x6] = r0;
0x00155D        F3240000                 pop r0;
0x00155E        F12C7FF9                 M[FP + -0x7] = r0;
0x00155F        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001560        F103FFFC                 SP = SP + -4;
0x001561        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_1st>
0x001562        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001563        F1287FFC                 r0 = M[FP + -0x4];
0x001564        F1387FFD                 r1 = M[FP + -0x3];
0x001565        F1487FFE                 r2 = M[FP + -0x2];
0x001566        F1587FFF                 r3 = M[FP + -0x1];
0x001567        E1F0FF10                 call $kal_filter_coef_lib.__warp;
0x001568        0062000F                 r4 = r0 + Null;
0x001569        0073000F                 r5 = r1 + Null;
0x00156A        01400080                 r2 = Null + 128;
0x00156B        FD000080 01500000        r3 = Null + -8388608;
0x00156D        E1F0060F                 call $kal_float_lib.add;
0x00156E        E1F00635                 call $kal_float_lib.recip;
0x00156F        0082000F                 r6 = r0 + Null;
0x001570        0093000F                 r7 = r1 + Null;
0x001571        F1030006                 SP = SP + 6;
0x001572        01200080                 r0 = Null + 128;
0x001573        FD000080 01300000        r1 = Null + -8388608;
0x001575        0046000F                 r2 = r4 + Null;
0x001576        0057000F                 r3 = r5 + Null;
0x001577        E1F0060E                 call $kal_float_lib.sub;
0x001578        0048000F                 r2 = r6 + Null;
0x001579        0059000F                 r3 = r7 + Null;
0x00157A        E1F00614                 call $kal_float_lib.mul;
0x00157B        F100000C                 pushm <r0, r1>;
0x00157C        0042000F                 r2 = r0 + Null;
0x00157D        0053000F                 r3 = r1 + Null;
0x00157E        01200080                 r0 = Null + 128;
0x00157F        FD000080 01300000        r1 = Null + -8388608;
0x001581        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001583        F100000C                 pushm <r0, r1>;
0x001584        01200000                 r0 = Null + 0;
0x001585        01300000                 r1 = Null + 0;
0x001586        F100000C                 pushm <r0, r1>;
0x001587        0024000F                 r0 = r2 + Null;
0x001588        0035000F                 r1 = r3 + Null;
0x001589        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00158B        F100000C                 pushm <r0, r1>;
0x00158C        01200000                 r0 = Null + 0;
0x00158D        01300000                 r1 = Null + 0;
0x00158E        F100000C                 pushm <r0, r1>;
0x00158F        E1F0FF2F                 call $kal_filter_coef_lib.__scale_coefficients;
0x001590        F3240000                 pop r0;
0x001591        F12C7FF6                 M[FP + -0xa] = r0;
0x001592        F3240000                 pop r0;
0x001593        F12C7FF8                 M[FP + -0x8] = r0;
0x001594        F3240000                 pop r0;
0x001595        F12C7FF7                 M[FP + -0x9] = r0;
0x001596        F3240000                 pop r0;
0x001597        F12C7FFB                 M[FP + -0x5] = r0;
0x001598        F3240000                 pop r0;
0x001599        F12C7FFA                 M[FP + -0x6] = r0;
0x00159A        F3240000                 pop r0;
0x00159B        F12C7FF9                 M[FP + -0x7] = r0;
0x00159C        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00159D        F103FFFC                 SP = SP + -4;
0x00159E        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_1st>
0x00159F        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0015A0        F1030004                 SP = SP + 4;
0x0015A1        F1287FF8                 r0 = M[FP + -0x8];
0x0015A2        F1387FF9                 r1 = M[FP + -0x7];
0x0015A3        F1487FFE                 r2 = M[FP + -0x2];
0x0015A4        F1587FFF                 r3 = M[FP + -0x1];
0x0015A5        E1F0FED2                 call $kal_filter_coef_lib.__warp;
0x0015A6        0062000F                 r4 = r0 + Null;
0x0015A7        0073000F                 r5 = r1 + Null;
0x0015A8        F1287FFC                 r0 = M[FP + -0x4];
0x0015A9        F1387FFD                 r1 = M[FP + -0x3];
0x0015AA        E1F0FEED                 call $kal_filter_coef_lib.__db2lin;
0x0015AB        F12C000C                 M[FP + 0xc] = r0;
0x0015AC        F13C000D                 M[FP + 0xd] = r1;
0x0015AD        F1287FFA                 r0 = M[FP + -0x6];
0x0015AE        F1387FFB                 r1 = M[FP + -0x5];
0x0015AF        E422003F                 r0 = r0 - 1;
0x0015B0        E1F0FEE7                 call $kal_filter_coef_lib.__db2lin;
0x0015B1        0042000F                 r2 = r0 + Null;
0x0015B2        0053000F                 r3 = r1 + Null;
0x0015B3        0026000F                 r0 = r4 + Null;
0x0015B4        0037000F                 r1 = r5 + Null;
0x0015B5        E1F0060B                 call $kal_float_lib.div;
0x0015B6        0082000F                 r6 = r0 + Null;
0x0015B7        0093000F                 r7 = r1 + Null;
0x0015B8        0026000F                 r0 = r4 + Null;
0x0015B9        0037000F                 r1 = r5 + Null;
0x0015BA        E1F005D4                 call $kal_float_lib.mul;
0x0015BB        0062000F                 r4 = r0 + Null;
0x0015BC        0073000F                 r5 = r1 + Null;
0x0015BD        0028000F                 r0 = r6 + Null;
0x0015BE        0039000F                 r1 = r7 + Null;
0x0015BF        01400080                 r2 = Null + 128;
0x0015C0        FD000080 01500000        r3 = Null + -8388608;
0x0015C2        E1F005BA                 call $kal_float_lib.add;
0x0015C3        E1F005E0                 call $kal_float_lib.recip;
0x0015C4        F12C000A                 M[FP + 0xa] = r0;
0x0015C5        F13C000B                 M[FP + 0xb] = r1;
0x0015C6        F1030006                 SP = SP + 6;
0x0015C7        0026000F                 r0 = r4 + Null;
0x0015C8        0037000F                 r1 = r5 + Null;
0x0015C9        01400080                 r2 = Null + 128;
0x0015CA        FD000080 01500000        r3 = Null + -8388608;
0x0015CC        E1F005B0                 call $kal_float_lib.add;
0x0015CD        F148000A                 r2 = M[FP + 0xa];
0x0015CE        F158000B                 r3 = M[FP + 0xb];
0x0015CF        E1F005BF                 call $kal_float_lib.mul;
0x0015D0        F148000C                 r2 = M[FP + 0xc];
0x0015D1        F158000D                 r3 = M[FP + 0xd];
0x0015D2        E1F005BC                 call $kal_float_lib.mul;
0x0015D3        F100000C                 pushm <r0, r1>;
0x0015D4        0026000F                 r0 = r4 + Null;
0x0015D5        0037000F                 r1 = r5 + Null;
0x0015D6        01400080                 r2 = Null + 128;
0x0015D7        FD000080 01500000        r3 = Null + -8388608;
0x0015D9        E1F005AC                 call $kal_float_lib.sub;
0x0015DA        F148000A                 r2 = M[FP + 0xa];
0x0015DB        F158000B                 r3 = M[FP + 0xb];
0x0015DC        E1F005B2                 call $kal_float_lib.mul;
0x0015DD        F148000C                 r2 = M[FP + 0xc];
0x0015DE        F158000D                 r3 = M[FP + 0xd];
0x0015DF        E1F005AF                 call $kal_float_lib.mul;
0x0015E0        F100000C                 pushm <r0, r1>;
0x0015E1        01200000                 r0 = Null + 0;
0x0015E2        01300000                 r1 = Null + 0;
0x0015E3        F100000C                 pushm <r0, r1>;
0x0015E4        0028000F                 r0 = r6 + Null;
0x0015E5        0039000F                 r1 = r7 + Null;
0x0015E6        01400080                 r2 = Null + 128;
0x0015E7        FD000080 01500000        r3 = Null + -8388608;
0x0015E9        E1F0059C                 call $kal_float_lib.sub;
0x0015EA        F148000A                 r2 = M[FP + 0xa];
0x0015EB        F158000B                 r3 = M[FP + 0xb];
0x0015EC        E1F005A2                 call $kal_float_lib.mul;
0x0015ED        F100000C                 pushm <r0, r1>;
0x0015EE        01200000                 r0 = Null + 0;
0x0015EF        01300000                 r1 = Null + 0;
0x0015F0        F100000C                 pushm <r0, r1>;
0x0015F1        E1F0FECD                 call $kal_filter_coef_lib.__scale_coefficients;
0x0015F2        F3240000                 pop r0;
0x0015F3        F12C7FF7                 M[FP + -0x9] = r0;
0x0015F4        F3240000                 pop r0;
0x0015F5        F12C7FF6                 M[FP + -0xa] = r0;
0x0015F6        F3240000                 pop r0;
0x0015F7        F12C7FF5                 M[FP + -0xb] = r0;
0x0015F8        F3240000                 pop r0;
0x0015F9        F12C7FF4                 M[FP + -0xc] = r0;
0x0015FA        F3240000                 pop r0;
0x0015FB        F12C7FF3                 M[FP + -0xd] = r0;
0x0015FC        F3240000                 pop r0;
0x0015FD        F12C7FF2                 M[FP + -0xe] = r0;
0x0015FE        F103FFFC                 SP = SP + -4;
0x0015FF        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001600        F103FFF8                 SP = SP + -8;
0x001601        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_1st>
0x001602        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001603        F1030006                 SP = SP + 6;
0x001604        F1287FFA                 r0 = M[FP + -0x6];
0x001605        F1387FFB                 r1 = M[FP + -0x5];
0x001606        F100000C                 pushm <r0, r1>;
0x001607        F1287FFC                 r0 = M[FP + -0x4];
0x001608        F1387FFD                 r1 = M[FP + -0x3];
0x001609        F100000C                 pushm <r0, r1>;
0x00160A        01200000                 r0 = Null + 0;
0x00160B        01300000                 r1 = Null + 0;
0x00160C        F100000C                 pushm <r0, r1>;
0x00160D        F1287FFE                 r0 = M[FP + -0x2];
0x00160E        F1387FFF                 r1 = M[FP + -0x1];
0x00160F        F100000C                 pushm <r0, r1>;
0x001610        E1F0FF8F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001611        F3240000                 pop r0;
0x001612        F12C7FF4                 M[FP + -0xc] = r0;
0x001613        F3240000                 pop r0;
0x001614        F12C7FF6                 M[FP + -0xa] = r0;
0x001615        F3240000                 pop r0;
0x001616        F12C7FF5                 M[FP + -0xb] = r0;
0x001617        F3240000                 pop r0;
0x001618        F12C7FF9                 M[FP + -0x7] = r0;
0x001619        F3240000                 pop r0;
0x00161A        F12C7FF8                 M[FP + -0x8] = r0;
0x00161B        F3240000                 pop r0;
0x00161C        F12C7FF7                 M[FP + -0x9] = r0;
0x00161D        F104200D                 popm <FP, r0, r1, rLink>;
0x00161E        F103FFFA                 SP = SP + -6;
0x00161F        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_1st>
0x001620        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001621        F1030006                 SP = SP + 6;
0x001622        F1287FFA                 r0 = M[FP + -0x6];
0x001623        F1387FFB                 r1 = M[FP + -0x5];
0x001624        F100000C                 pushm <r0, r1>;
0x001625        F1287FFC                 r0 = M[FP + -0x4];
0x001626        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001628        F1387FFD                 r1 = M[FP + -0x3];
0x001629        F100000C                 pushm <r0, r1>;
0x00162A        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00162C        F100000C                 pushm <r0, r1>;
0x00162D        F1287FFE                 r0 = M[FP + -0x2];
0x00162E        F1387FFF                 r1 = M[FP + -0x1];
0x00162F        F100000C                 pushm <r0, r1>;
0x001630        E1F0FF6F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001631        F3240000                 pop r0;
0x001632        F12C7FF4                 M[FP + -0xc] = r0;
0x001633        F3240000                 pop r0;
0x001634        F12C7FF6                 M[FP + -0xa] = r0;
0x001635        F3240000                 pop r0;
0x001636        F12C7FF5                 M[FP + -0xb] = r0;
0x001637        F3240000                 pop r0;
0x001638        F12C7FF9                 M[FP + -0x7] = r0;
0x001639        F3240000                 pop r0;
0x00163A        F12C7FF8                 M[FP + -0x8] = r0;
0x00163B        F3240000                 pop r0;
0x00163C        F12C7FF7                 M[FP + -0x9] = r0;
0x00163D        F104200D                 popm <FP, r0, r1, rLink>;
0x00163E        F103FFFA                 SP = SP + -6;
0x00163F        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_1st>
0x001640        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001641        F1030006                 SP = SP + 6;
0x001642        F1287FFA                 r0 = M[FP + -0x6];
0x001643        F1387FFB                 r1 = M[FP + -0x5];
0x001644        F100000C                 pushm <r0, r1>;
0x001645        F1287FFC                 r0 = M[FP + -0x4];
0x001646        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001648        F1387FFD                 r1 = M[FP + -0x3];
0x001649        F100000C                 pushm <r0, r1>;
0x00164A        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00164C        E422003F                 r0 = r0 - 1;
0x00164D        F100000C                 pushm <r0, r1>;
0x00164E        F1287FFE                 r0 = M[FP + -0x2];
0x00164F        F1387FFF                 r1 = M[FP + -0x1];
0x001650        F100000C                 pushm <r0, r1>;
0x001651        E1F0FF4E                 call $kal_filter_coef_lib.calc_shelf_1st;
0x001652        F3240000                 pop r0;
0x001653        F12C7FF4                 M[FP + -0xc] = r0;
0x001654        F3240000                 pop r0;
0x001655        F12C7FF6                 M[FP + -0xa] = r0;
0x001656        F3240000                 pop r0;
0x001657        F12C7FF5                 M[FP + -0xb] = r0;
0x001658        F3240000                 pop r0;
0x001659        F12C7FF9                 M[FP + -0x7] = r0;
0x00165A        F3240000                 pop r0;
0x00165B        F12C7FF8                 M[FP + -0x8] = r0;
0x00165C        F3240000                 pop r0;
0x00165D        F12C7FF7                 M[FP + -0x9] = r0;
0x00165E        F104200D                 popm <FP, r0, r1, rLink>;
0x00165F        F103FFFA                 SP = SP + -6;
0x001660        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_2nd>
0x001661        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001662        F1030002                 SP = SP + 2;
0x001663        F1287FFA                 r0 = M[FP + -0x6];
0x001664        F1387FFB                 r1 = M[FP + -0x5];
0x001665        F1487FFE                 r2 = M[FP + -0x2];
0x001666        F1587FFF                 r3 = M[FP + -0x1];
0x001667        E1F0FE10                 call $kal_filter_coef_lib.__warp;
0x001668        0042000F                 r2 = r0 + Null;
0x001669        0053000F                 r3 = r1 + Null;
0x00166A        E1F00524                 call $kal_float_lib.mul;
0x00166B        0082000F                 r6 = r0 + Null;
0x00166C        0093000F                 r7 = r1 + Null;
0x00166D        0024000F                 r0 = r2 + Null;
0x00166E        0035000F                 r1 = r3 + Null;
0x00166F        F1487FFC                 r2 = M[FP + -0x4];
0x001670        F1587FFD                 r3 = M[FP + -0x3];
0x001671        E1F0054F                 call $kal_float_lib.div;
0x001672        0062000F                 r4 = r0 + Null;
0x001673        0073000F                 r5 = r1 + Null;
0x001674        0048000F                 r2 = r6 + Null;
0x001675        0059000F                 r3 = r7 + Null;
0x001676        E1F00506                 call $kal_float_lib.add;
0x001677        01400080                 r2 = Null + 128;
0x001678        FD000080 01500000        r3 = Null + -8388608;
0x00167A        E1F00502                 call $kal_float_lib.add;
0x00167B        E1F00528                 call $kal_float_lib.recip;
0x00167C        F12C000A                 M[FP + 0xa] = r0;
0x00167D        F13C000B                 M[FP + 0xb] = r1;
0x00167E        F1030006                 SP = SP + 6;
0x00167F        0028000F                 r0 = r6 + Null;
0x001680        0039000F                 r1 = r7 + Null;
0x001681        F148000A                 r2 = M[FP + 0xa];
0x001682        F158000B                 r3 = M[FP + 0xb];
0x001683        E1F0050B                 call $kal_float_lib.mul;
0x001684        F100000C                 pushm <r0, r1>;
0x001685        E422002F                 r0 = r0 + 1;
0x001686        F100000C                 pushm <r0, r1>;
0x001687        E422003F                 r0 = r0 - 1;
0x001688        F100000C                 pushm <r0, r1>;
0x001689        0028000F                 r0 = r6 + Null;
0x00168A        0039000F                 r1 = r7 + Null;
0x00168B        01400081                 r2 = Null + 129;
0x00168C        FD000080 01500000        r3 = Null + -8388608;
0x00168E        E1F00500                 call $kal_float_lib.mul;
0x00168F        E1F004F6                 call $kal_float_lib.sub;
0x001690        F148000A                 r2 = M[FP + 0xa];
0x001691        F158000B                 r3 = M[FP + 0xb];
0x001692        E1F004FC                 call $kal_float_lib.mul;
0x001693        F100000C                 pushm <r0, r1>;
0x001694        0028000F                 r0 = r6 + Null;
0x001695        0039000F                 r1 = r7 + Null;
0x001696        0046000F                 r2 = r4 + Null;
0x001697        0057000F                 r3 = r5 + Null;
0x001698        E1F004ED                 call $kal_float_lib.sub;
0x001699        01400080                 r2 = Null + 128;
0x00169A        FD000080 01500000        r3 = Null + -8388608;
0x00169C        E1F004E0                 call $kal_float_lib.add;
0x00169D        F148000A                 r2 = M[FP + 0xa];
0x00169E        F158000B                 r3 = M[FP + 0xb];
0x00169F        E1F004EF                 call $kal_float_lib.mul;
0x0016A0        F100000C                 pushm <r0, r1>;
0x0016A1        E1F0FE1D                 call $kal_filter_coef_lib.__scale_coefficients;
0x0016A2        F3240000                 pop r0;
0x0016A3        F12C7FF4                 M[FP + -0xc] = r0;
0x0016A4        F3240000                 pop r0;
0x0016A5        F12C7FF6                 M[FP + -0xa] = r0;
0x0016A6        F3240000                 pop r0;
0x0016A7        F12C7FF5                 M[FP + -0xb] = r0;
0x0016A8        F3240000                 pop r0;
0x0016A9        F12C7FF9                 M[FP + -0x7] = r0;
0x0016AA        F3240000                 pop r0;
0x0016AB        F12C7FF8                 M[FP + -0x8] = r0;
0x0016AC        F3240000                 pop r0;
0x0016AD        F12C7FF7                 M[FP + -0x9] = r0;
0x0016AE        F103FFFE                 SP = SP + -2;
0x0016AF        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0016B0        F103FFFA                 SP = SP + -6;
0x0016B1        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_2nd>
0x0016B2        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0016B3        F1030002                 SP = SP + 2;
0x0016B4        F1287FFA                 r0 = M[FP + -0x6];
0x0016B5        F1387FFB                 r1 = M[FP + -0x5];
0x0016B6        F1487FFE                 r2 = M[FP + -0x2];
0x0016B7        F1587FFF                 r3 = M[FP + -0x1];
0x0016B8        E1F0FDBF                 call $kal_filter_coef_lib.__warp;
0x0016B9        0042000F                 r2 = r0 + Null;
0x0016BA        0053000F                 r3 = r1 + Null;
0x0016BB        E1F004D3                 call $kal_float_lib.mul;
0x0016BC        0082000F                 r6 = r0 + Null;
0x0016BD        0093000F                 r7 = r1 + Null;
0x0016BE        0024000F                 r0 = r2 + Null;
0x0016BF        0035000F                 r1 = r3 + Null;
0x0016C0        F1487FFC                 r2 = M[FP + -0x4];
0x0016C1        F1587FFD                 r3 = M[FP + -0x3];
0x0016C2        E1F004FE                 call $kal_float_lib.div;
0x0016C3        0062000F                 r4 = r0 + Null;
0x0016C4        0073000F                 r5 = r1 + Null;
0x0016C5        0048000F                 r2 = r6 + Null;
0x0016C6        0059000F                 r3 = r7 + Null;
0x0016C7        E1F004B5                 call $kal_float_lib.add;
0x0016C8        01400080                 r2 = Null + 128;
0x0016C9        FD000080 01500000        r3 = Null + -8388608;
0x0016CB        E1F004B1                 call $kal_float_lib.add;
0x0016CC        E1F004D7                 call $kal_float_lib.recip;
0x0016CD        F12C000A                 M[FP + 0xa] = r0;
0x0016CE        F13C000B                 M[FP + 0xb] = r1;
0x0016CF        F1030006                 SP = SP + 6;
0x0016D0        F100000C                 pushm <r0, r1>;
0x0016D1        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0016D3        E422002F                 r0 = r0 + 1;
0x0016D4        F100000C                 pushm <r0, r1>;
0x0016D5        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0016D7        E422003F                 r0 = r0 - 1;
0x0016D8        F100000C                 pushm <r0, r1>;
0x0016D9        0028000F                 r0 = r6 + Null;
0x0016DA        0039000F                 r1 = r7 + Null;
0x0016DB        01400081                 r2 = Null + 129;
0x0016DC        FD000080 01500000        r3 = Null + -8388608;
0x0016DE        E1F004B0                 call $kal_float_lib.mul;
0x0016DF        E1F004A6                 call $kal_float_lib.sub;
0x0016E0        F148000A                 r2 = M[FP + 0xa];
0x0016E1        F158000B                 r3 = M[FP + 0xb];
0x0016E2        E1F004AC                 call $kal_float_lib.mul;
0x0016E3        F100000C                 pushm <r0, r1>;
0x0016E4        0028000F                 r0 = r6 + Null;
0x0016E5        0039000F                 r1 = r7 + Null;
0x0016E6        0046000F                 r2 = r4 + Null;
0x0016E7        0057000F                 r3 = r5 + Null;
0x0016E8        E1F0049D                 call $kal_float_lib.sub;
0x0016E9        01400080                 r2 = Null + 128;
0x0016EA        FD000080 01500000        r3 = Null + -8388608;
0x0016EC        E1F00490                 call $kal_float_lib.add;
0x0016ED        F148000A                 r2 = M[FP + 0xa];
0x0016EE        F158000B                 r3 = M[FP + 0xb];
0x0016EF        E1F0049F                 call $kal_float_lib.mul;
0x0016F0        F100000C                 pushm <r0, r1>;
0x0016F1        E1F0FDCD                 call $kal_filter_coef_lib.__scale_coefficients;
0x0016F2        F3240000                 pop r0;
0x0016F3        F12C7FF4                 M[FP + -0xc] = r0;
0x0016F4        F3240000                 pop r0;
0x0016F5        F12C7FF6                 M[FP + -0xa] = r0;
0x0016F6        F3240000                 pop r0;
0x0016F7        F12C7FF5                 M[FP + -0xb] = r0;
0x0016F8        F3240000                 pop r0;
0x0016F9        F12C7FF9                 M[FP + -0x7] = r0;
0x0016FA        F3240000                 pop r0;
0x0016FB        F12C7FF8                 M[FP + -0x8] = r0;
0x0016FC        F3240000                 pop r0;
0x0016FD        F12C7FF7                 M[FP + -0x9] = r0;
0x0016FE        F103FFFE                 SP = SP + -2;
0x0016FF        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001700        F103FFFA                 SP = SP + -6;
0x001701        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_2nd>
0x001702        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001703        F1030002                 SP = SP + 2;
0x001704        F1287FFA                 r0 = M[FP + -0x6];
0x001705        F1387FFB                 r1 = M[FP + -0x5];
0x001706        F1487FFE                 r2 = M[FP + -0x2];
0x001707        F1587FFF                 r3 = M[FP + -0x1];
0x001708        E1F0FD6F                 call $kal_filter_coef_lib.__warp;
0x001709        0042000F                 r2 = r0 + Null;
0x00170A        0053000F                 r3 = r1 + Null;
0x00170B        E1F00483                 call $kal_float_lib.mul;
0x00170C        0082000F                 r6 = r0 + Null;
0x00170D        0093000F                 r7 = r1 + Null;
0x00170E        0024000F                 r0 = r2 + Null;
0x00170F        0035000F                 r1 = r3 + Null;
0x001710        F1487FFC                 r2 = M[FP + -0x4];
0x001711        F1587FFD                 r3 = M[FP + -0x3];
0x001712        E1F004AE                 call $kal_float_lib.div;
0x001713        0062000F                 r4 = r0 + Null;
0x001714        0073000F                 r5 = r1 + Null;
0x001715        0048000F                 r2 = r6 + Null;
0x001716        0059000F                 r3 = r7 + Null;
0x001717        E1F00465                 call $kal_float_lib.add;
0x001718        01400080                 r2 = Null + 128;
0x001719        FD000080 01500000        r3 = Null + -8388608;
0x00171B        E1F00461                 call $kal_float_lib.add;
0x00171C        E1F00487                 call $kal_float_lib.recip;
0x00171D        F12C000A                 M[FP + 0xa] = r0;
0x00171E        F13C000B                 M[FP + 0xb] = r1;
0x00171F        F1030006                 SP = SP + 6;
0x001720        0028000F                 r0 = r6 + Null;
0x001721        0039000F                 r1 = r7 + Null;
0x001722        0046000F                 r2 = r4 + Null;
0x001723        0057000F                 r3 = r5 + Null;
0x001724        E1F00461                 call $kal_float_lib.sub;
0x001725        01400080                 r2 = Null + 128;
0x001726        FD000080 01500000        r3 = Null + -8388608;
0x001728        E1F00454                 call $kal_float_lib.add;
0x001729        F148000A                 r2 = M[FP + 0xa];
0x00172A        F158000B                 r3 = M[FP + 0xb];
0x00172B        E1F00463                 call $kal_float_lib.mul;
0x00172C        F100000C                 pushm <r0, r1>;
0x00172D        0062000F                 r4 = r0 + Null;
0x00172E        0073000F                 r5 = r1 + Null;
0x00172F        0028000F                 r0 = r6 + Null;
0x001730        0039000F                 r1 = r7 + Null;
0x001731        01400081                 r2 = Null + 129;
0x001732        FD000080 01500000        r3 = Null + -8388608;
0x001734        E1F0045A                 call $kal_float_lib.mul;
0x001735        E1F00450                 call $kal_float_lib.sub;
0x001736        F148000A                 r2 = M[FP + 0xa];
0x001737        F158000B                 r3 = M[FP + 0xb];
0x001738        E1F00456                 call $kal_float_lib.mul;
0x001739        F100000C                 pushm <r0, r1>;
0x00173A        0082000F                 r6 = r0 + Null;
0x00173B        0093000F                 r7 = r1 + Null;
0x00173C        01200080                 r0 = Null + 128;
0x00173D        FD000080 01300000        r1 = Null + -8388608;
0x00173F        F100000C                 pushm <r0, r1>;
0x001740        F1000300                 pushm <r6, r7>;
0x001741        F10000C0                 pushm <r4, r5>;
0x001742        E1F0FD7C                 call $kal_filter_coef_lib.__scale_coefficients;
0x001743        F3240000                 pop r0;
0x001744        F12C7FF4                 M[FP + -0xc] = r0;
0x001745        F3240000                 pop r0;
0x001746        F12C7FF6                 M[FP + -0xa] = r0;
0x001747        F3240000                 pop r0;
0x001748        F12C7FF5                 M[FP + -0xb] = r0;
0x001749        F3240000                 pop r0;
0x00174A        F12C7FF9                 M[FP + -0x7] = r0;
0x00174B        F3240000                 pop r0;
0x00174C        F12C7FF8                 M[FP + -0x8] = r0;
0x00174D        F3240000                 pop r0;
0x00174E        F12C7FF7                 M[FP + -0x9] = r0;
0x00174F        F103FFFE                 SP = SP + -2;
0x001750        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001751        F103FFFA                 SP = SP + -6;
0x001752        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_2nd>
0x001753        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001754        F1030008                 SP = SP + 8;
0x001755        F1287FF6                 r0 = M[FP + -0xa];
0x001756        F1387FF7                 r1 = M[FP + -0x9];
0x001757        F1487FFE                 r2 = M[FP + -0x2];
0x001758        F1587FFF                 r3 = M[FP + -0x1];
0x001759        E1F0FD1E                 call $kal_filter_coef_lib.__warp;
0x00175A        0062000F                 r4 = r0 + Null;
0x00175B        0073000F                 r5 = r1 + Null;
0x00175C        F1287FFC                 r0 = M[FP + -0x4];
0x00175D        F1387FFD                 r1 = M[FP + -0x3];
0x00175E        E1F0FD39                 call $kal_filter_coef_lib.__db2lin;
0x00175F        F12C000C                 M[FP + 0xc] = r0;
0x001760        F13C000D                 M[FP + 0xd] = r1;
0x001761        F1287FF8                 r0 = M[FP + -0x8];
0x001762        F1387FF9                 r1 = M[FP + -0x7];
0x001763        21220002                 r0 = r0 - 2;
0x001764        E1F0FD33                 call $kal_filter_coef_lib.__db2lin;
0x001765        0042000F                 r2 = r0 + Null;
0x001766        0053000F                 r3 = r1 + Null;
0x001767        0026000F                 r0 = r4 + Null;
0x001768        0037000F                 r1 = r5 + Null;
0x001769        E1F00457                 call $kal_float_lib.div;
0x00176A        0082000F                 r6 = r0 + Null;
0x00176B        0093000F                 r7 = r1 + Null;
0x00176C        0026000F                 r0 = r4 + Null;
0x00176D        0037000F                 r1 = r5 + Null;
0x00176E        E1F00420                 call $kal_float_lib.mul;
0x00176F        0062000F                 r4 = r0 + Null;
0x001770        0073000F                 r5 = r1 + Null;
0x001771        F1487FFA                 r2 = M[FP + -0x6];
0x001772        F1587FFB                 r3 = M[FP + -0x5];
0x001773        E1F0044D                 call $kal_float_lib.div;
0x001774        F12C000E                 M[FP + 0xe] = r0;
0x001775        F13C000F                 M[FP + 0xf] = r1;
0x001776        0028000F                 r0 = r6 + Null;
0x001777        0039000F                 r1 = r7 + Null;
0x001778        E1F00448                 call $kal_float_lib.div;
0x001779        F12C0010                 M[FP + 0x10] = r0;
0x00177A        F13C0011                 M[FP + 0x11] = r1;
0x00177B        0028000F                 r0 = r6 + Null;
0x00177C        0039000F                 r1 = r7 + Null;
0x00177D        0048000F                 r2 = r6 + Null;
0x00177E        0059000F                 r3 = r7 + Null;
0x00177F        E1F0040F                 call $kal_float_lib.mul;
0x001780        0082000F                 r6 = r0 + Null;
0x001781        0093000F                 r7 = r1 + Null;
0x001782        F1480010                 r2 = M[FP + 0x10];
0x001783        F1580011                 r3 = M[FP + 0x11];
0x001784        E1F003F8                 call $kal_float_lib.add;
0x001785        01400080                 r2 = Null + 128;
0x001786        FD000080 01500000        r3 = Null + -8388608;
0x001788        E1F003F4                 call $kal_float_lib.add;
0x001789        E1F0041A                 call $kal_float_lib.recip;
0x00178A        F12C000A                 M[FP + 0xa] = r0;
0x00178B        F13C000B                 M[FP + 0xb] = r1;
0x00178C        F1030006                 SP = SP + 6;
0x00178D        0026000F                 r0 = r4 + Null;
0x00178E        0037000F                 r1 = r5 + Null;
0x00178F        0046000F                 r2 = r4 + Null;
0x001790        0057000F                 r3 = r5 + Null;
0x001791        E1F003FD                 call $kal_float_lib.mul;
0x001792        0062000F                 r4 = r0 + Null;
0x001793        0073000F                 r5 = r1 + Null;
0x001794        F148000E                 r2 = M[FP + 0xe];
0x001795        F158000F                 r3 = M[FP + 0xf];
0x001796        E1F003E6                 call $kal_float_lib.add;
0x001797        01400080                 r2 = Null + 128;
0x001798        FD000080 01500000        r3 = Null + -8388608;
0x00179A        E1F003E2                 call $kal_float_lib.add;
0x00179B        F148000A                 r2 = M[FP + 0xa];
0x00179C        F158000B                 r3 = M[FP + 0xb];
0x00179D        E1F003F1                 call $kal_float_lib.mul;
0x00179E        F148000C                 r2 = M[FP + 0xc];
0x00179F        F158000D                 r3 = M[FP + 0xd];
0x0017A0        E1F003EE                 call $kal_float_lib.mul;
0x0017A1        F100000C                 pushm <r0, r1>;
0x0017A2        0026000F                 r0 = r4 + Null;
0x0017A3        0037000F                 r1 = r5 + Null;
0x0017A4        01400081                 r2 = Null + 129;
0x0017A5        FD000080 01500000        r3 = Null + -8388608;
0x0017A7        E1F003E7                 call $kal_float_lib.mul;
0x0017A8        E1F003DD                 call $kal_float_lib.sub;
0x0017A9        F148000A                 r2 = M[FP + 0xa];
0x0017AA        F158000B                 r3 = M[FP + 0xb];
0x0017AB        E1F003E3                 call $kal_float_lib.mul;
0x0017AC        F148000C                 r2 = M[FP + 0xc];
0x0017AD        F158000D                 r3 = M[FP + 0xd];
0x0017AE        E1F003E0                 call $kal_float_lib.mul;
0x0017AF        F100000C                 pushm <r0, r1>;
0x0017B0        0026000F                 r0 = r4 + Null;
0x0017B1        0037000F                 r1 = r5 + Null;
0x0017B2        F148000E                 r2 = M[FP + 0xe];
0x0017B3        F158000F                 r3 = M[FP + 0xf];
0x0017B4        E1F003D1                 call $kal_float_lib.sub;
0x0017B5        01400080                 r2 = Null + 128;
0x0017B6        FD000080 01500000        r3 = Null + -8388608;
0x0017B8        E1F003C4                 call $kal_float_lib.add;
0x0017B9        F148000A                 r2 = M[FP + 0xa];
0x0017BA        F158000B                 r3 = M[FP + 0xb];
0x0017BB        E1F003D3                 call $kal_float_lib.mul;
0x0017BC        F148000C                 r2 = M[FP + 0xc];
0x0017BD        F158000D                 r3 = M[FP + 0xd];
0x0017BE        E1F003D0                 call $kal_float_lib.mul;
0x0017BF        F100000C                 pushm <r0, r1>;
0x0017C0        0028000F                 r0 = r6 + Null;
0x0017C1        0039000F                 r1 = r7 + Null;
0x0017C2        01400081                 r2 = Null + 129;
0x0017C3        FD000080 01500000        r3 = Null + -8388608;
0x0017C5        E1F003C9                 call $kal_float_lib.mul;
0x0017C6        E1F003BF                 call $kal_float_lib.sub;
0x0017C7        F148000A                 r2 = M[FP + 0xa];
0x0017C8        F158000B                 r3 = M[FP + 0xb];
0x0017C9        E1F003C5                 call $kal_float_lib.mul;
0x0017CA        F100000C                 pushm <r0, r1>;
0x0017CB        0028000F                 r0 = r6 + Null;
0x0017CC        0039000F                 r1 = r7 + Null;
0x0017CD        F1480010                 r2 = M[FP + 0x10];
0x0017CE        F1580011                 r3 = M[FP + 0x11];
0x0017CF        E1F003B6                 call $kal_float_lib.sub;
0x0017D0        01400080                 r2 = Null + 128;
0x0017D1        FD000080 01500000        r3 = Null + -8388608;
0x0017D3        E1F003A9                 call $kal_float_lib.add;
0x0017D4        F148000A                 r2 = M[FP + 0xa];
0x0017D5        F158000B                 r3 = M[FP + 0xb];
0x0017D6        E1F003B8                 call $kal_float_lib.mul;
0x0017D7        F100000C                 pushm <r0, r1>;
0x0017D8        E1F0FCE6                 call $kal_filter_coef_lib.__scale_coefficients;
0x0017D9        F3240000                 pop r0;
0x0017DA        F12C7FF5                 M[FP + -0xb] = r0;
0x0017DB        F3240000                 pop r0;
0x0017DC        F12C7FF4                 M[FP + -0xc] = r0;
0x0017DD        F3240000                 pop r0;
0x0017DE        F12C7FF3                 M[FP + -0xd] = r0;
0x0017DF        F3240000                 pop r0;
0x0017E0        F12C7FF2                 M[FP + -0xe] = r0;
0x0017E1        F3240000                 pop r0;
0x0017E2        F12C7FF1                 M[FP + -0xf] = r0;
0x0017E3        F3240000                 pop r0;
0x0017E4        F12C7FF0                 M[FP + -0x10] = r0;
0x0017E5        F103FFF8                 SP = SP + -8;
0x0017E6        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0017E7        F103FFF6                 SP = SP + -10;
0x0017E8        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_2nd>
0x0017E9        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0017EA        F1030006                 SP = SP + 6;
0x0017EB        F1287FF8                 r0 = M[FP + -0x8];
0x0017EC        F1387FF9                 r1 = M[FP + -0x7];
0x0017ED        F100000C                 pushm <r0, r1>;
0x0017EE        F1287FFA                 r0 = M[FP + -0x6];
0x0017EF        F1387FFB                 r1 = M[FP + -0x5];
0x0017F0        F100000C                 pushm <r0, r1>;
0x0017F1        F1287FFC                 r0 = M[FP + -0x4];
0x0017F2        F1387FFD                 r1 = M[FP + -0x3];
0x0017F3        F100000C                 pushm <r0, r1>;
0x0017F4        01200000                 r0 = Null + 0;
0x0017F5        01300000                 r1 = Null + 0;
0x0017F6        F100000C                 pushm <r0, r1>;
0x0017F7        F1287FFE                 r0 = M[FP + -0x2];
0x0017F8        F1387FFF                 r1 = M[FP + -0x1];
0x0017F9        F100000C                 pushm <r0, r1>;
0x0017FA        E1F0FF59                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x0017FB        F3240000                 pop r0;
0x0017FC        F12C7FF2                 M[FP + -0xe] = r0;
0x0017FD        F3240000                 pop r0;
0x0017FE        F12C7FF4                 M[FP + -0xc] = r0;
0x0017FF        F3240000                 pop r0;
0x001800        F12C7FF3                 M[FP + -0xd] = r0;
0x001801        F3240000                 pop r0;
0x001802        F12C7FF7                 M[FP + -0x9] = r0;
0x001803        F3240000                 pop r0;
0x001804        F12C7FF6                 M[FP + -0xa] = r0;
0x001805        F3240000                 pop r0;
0x001806        F12C7FF5                 M[FP + -0xb] = r0;
0x001807        F104200D                 popm <FP, r0, r1, rLink>;
0x001808        F103FFF8                 SP = SP + -8;
0x001809        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_2nd>
0x00180A        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x00180B        F1030006                 SP = SP + 6;
0x00180C        F1287FF8                 r0 = M[FP + -0x8];
0x00180D        F1387FF9                 r1 = M[FP + -0x7];
0x00180E        F100000C                 pushm <r0, r1>;
0x00180F        F1287FFA                 r0 = M[FP + -0x6];
0x001810        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001812        F1387FFB                 r1 = M[FP + -0x5];
0x001813        F100000C                 pushm <r0, r1>;
0x001814        F1287FFC                 r0 = M[FP + -0x4];
0x001815        F1387FFD                 r1 = M[FP + -0x3];
0x001816        F100000C                 pushm <r0, r1>;
0x001817        F1287FFA                 r0 = M[FP + -0x6];
0x001818        F1387FFB                 r1 = M[FP + -0x5];
0x001819        F100000C                 pushm <r0, r1>;
0x00181A        F1287FFE                 r0 = M[FP + -0x2];
0x00181B        F1387FFF                 r1 = M[FP + -0x1];
0x00181C        F100000C                 pushm <r0, r1>;
0x00181D        E1F0FF36                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x00181E        F3240000                 pop r0;
0x00181F        F12C7FF2                 M[FP + -0xe] = r0;
0x001820        F3240000                 pop r0;
0x001821        F12C7FF4                 M[FP + -0xc] = r0;
0x001822        F3240000                 pop r0;
0x001823        F12C7FF3                 M[FP + -0xd] = r0;
0x001824        F3240000                 pop r0;
0x001825        F12C7FF7                 M[FP + -0x9] = r0;
0x001826        F3240000                 pop r0;
0x001827        F12C7FF6                 M[FP + -0xa] = r0;
0x001828        F3240000                 pop r0;
0x001829        F12C7FF5                 M[FP + -0xb] = r0;
0x00182A        F104200D                 popm <FP, r0, r1, rLink>;
0x00182B        F103FFF8                 SP = SP + -8;
0x00182C        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_2nd>
0x00182D        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x00182E        F1030006                 SP = SP + 6;
0x00182F        F1287FF8                 r0 = M[FP + -0x8];
0x001830        F1387FF9                 r1 = M[FP + -0x7];
0x001831        F100000C                 pushm <r0, r1>;
0x001832        F1287FFA                 r0 = M[FP + -0x6];
0x001833        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001835        F1387FFB                 r1 = M[FP + -0x5];
0x001836        F100000C                 pushm <r0, r1>;
0x001837        F1287FFC                 r0 = M[FP + -0x4];
0x001838        F1387FFD                 r1 = M[FP + -0x3];
0x001839        F100000C                 pushm <r0, r1>;
0x00183A        F1287FFA                 r0 = M[FP + -0x6];
0x00183B        E422003F                 r0 = r0 - 1;
0x00183C        F1387FFB                 r1 = M[FP + -0x5];
0x00183D        F100000C                 pushm <r0, r1>;
0x00183E        F1287FFE                 r0 = M[FP + -0x2];
0x00183F        F1387FFF                 r1 = M[FP + -0x1];
0x001840        F100000C                 pushm <r0, r1>;
0x001841        E1F0FF12                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001842        F3240000                 pop r0;
0x001843        F12C7FF2                 M[FP + -0xe] = r0;
0x001844        F3240000                 pop r0;
0x001845        F12C7FF4                 M[FP + -0xc] = r0;
0x001846        F3240000                 pop r0;
0x001847        F12C7FF3                 M[FP + -0xd] = r0;
0x001848        F3240000                 pop r0;
0x001849        F12C7FF7                 M[FP + -0x9] = r0;
0x00184A        F3240000                 pop r0;
0x00184B        F12C7FF6                 M[FP + -0xa] = r0;
0x00184C        F3240000                 pop r0;
0x00184D        F12C7FF5                 M[FP + -0xb] = r0;
0x00184E        F104200D                 popm <FP, r0, r1, rLink>;
0x00184F        F103FFF8                 SP = SP + -8;
0x001850        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_peq>
0x001851        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001852        F1030004                 SP = SP + 4;
0x001853        F1287FFC                 r0 = M[FP + -0x4];
0x001854        E422002F                 r0 = r0 + 1;
0x001855        F1387FFD                 r1 = M[FP + -0x3];
0x001856        E1F0034D                 call $kal_float_lib.recip;
0x001857        FD000080 85220000        r0 = r0 OR 0x800000;
0x001859        0042000F                 r2 = r0 + Null;
0x00185A        0053000F                 r3 = r1 + Null;
0x00185B        0062000F                 r4 = r0 + Null;
0x00185C        0073000F                 r5 = r1 + Null;
0x00185D        E1F00331                 call $kal_float_lib.mul;
0x00185E        01400080                 r2 = Null + 128;
0x00185F        FD000080 01500000        r3 = Null + -8388608;
0x001861        E1F0031B                 call $kal_float_lib.add;
0x001862        E1F0036A                 call $kal_float_lib.rsqrt;
0x001863        E1F00340                 call $kal_float_lib.recip;
0x001864        0046000F                 r2 = r4 + Null;
0x001865        0057000F                 r3 = r5 + Null;
0x001866        E1F00316                 call $kal_float_lib.add;
0x001867        F1487FF8                 r2 = M[FP + -0x8];
0x001868        F1587FF9                 r3 = M[FP + -0x7];
0x001869        E1F00325                 call $kal_float_lib.mul;
0x00186A        F1487FFE                 r2 = M[FP + -0x2];
0x00186B        F1587FFF                 r3 = M[FP + -0x1];
0x00186C        E1F0FC0B                 call $kal_filter_coef_lib.__warp;
0x00186D        0062000F                 r4 = r0 + Null;
0x00186E        0073000F                 r5 = r1 + Null;
0x00186F        F1287FF8                 r0 = M[FP + -0x8];
0x001870        F1387FF9                 r1 = M[FP + -0x7];
0x001871        E1F0FC06                 call $kal_filter_coef_lib.__warp;
0x001872        F12C000A                 M[FP + 0xa] = r0;
0x001873        F13C000B                 M[FP + 0xb] = r1;
0x001874        0042000F                 r2 = r0 + Null;
0x001875        0053000F                 r3 = r1 + Null;
0x001876        E1F00318                 call $kal_float_lib.mul;
0x001877        F1000030                 pushm <r2, r3>;
0x001878        F100000C                 pushm <r0, r1>;
0x001879        0026000F                 r0 = r4 + Null;
0x00187A        0037000F                 r1 = r5 + Null;
0x00187B        0046000F                 r2 = r4 + Null;
0x00187C        0057000F                 r3 = r5 + Null;
0x00187D        E1F00311                 call $kal_float_lib.mul;
0x00187E        F1040030                 popm <r2, r3>;
0x00187F        E1F00306                 call $kal_float_lib.sub;
0x001880        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001882        E1F00321                 call $kal_float_lib.recip;
0x001883        F1040030                 popm <r2, r3>;
0x001884        E1F0030A                 call $kal_float_lib.mul;
0x001885        0046000F                 r2 = r4 + Null;
0x001886        0057000F                 r3 = r5 + Null;
0x001887        E1F00307                 call $kal_float_lib.mul;
0x001888        0062000F                 r4 = r0 + Null;
0x001889        0073000F                 r5 = r1 + Null;
0x00188A        F1287FFA                 r0 = M[FP + -0x6];
0x00188B        F1387FFB                 r1 = M[FP + -0x5];
0x00188C        0140007F                 r2 = Null + 127;
0x00188D        FD000080 01500000        r3 = Null + -8388608;
0x00188F        E1F002FF                 call $kal_float_lib.mul;
0x001890        E1F0FC07                 call $kal_filter_coef_lib.__db2lin;
0x001891        0042000F                 r2 = r0 + Null;
0x001892        0053000F                 r3 = r1 + Null;
0x001893        0026000F                 r0 = r4 + Null;
0x001894        0037000F                 r1 = r5 + Null;
0x001895        E1F002F9                 call $kal_float_lib.mul;
0x001896        0082000F                 r6 = r0 + Null;
0x001897        0093000F                 r7 = r1 + Null;
0x001898        0026000F                 r0 = r4 + Null;
0x001899        0037000F                 r1 = r5 + Null;
0x00189A        E1F00326                 call $kal_float_lib.div;
0x00189B        0042000F                 r2 = r0 + Null;
0x00189C        0053000F                 r3 = r1 + Null;
0x00189D        F128000A                 r0 = M[FP + 0xa];
0x00189E        F138000B                 r1 = M[FP + 0xb];
0x00189F        E1F00321                 call $kal_float_lib.div;
0x0018A0        0062000F                 r4 = r0 + Null;
0x0018A1        0073000F                 r5 = r1 + Null;
0x0018A2        F128000A                 r0 = M[FP + 0xa];
0x0018A3        F138000B                 r1 = M[FP + 0xb];
0x0018A4        0048000F                 r2 = r6 + Null;
0x0018A5        0059000F                 r3 = r7 + Null;
0x0018A6        E1F0031A                 call $kal_float_lib.div;
0x0018A7        0082000F                 r6 = r0 + Null;
0x0018A8        0093000F                 r7 = r1 + Null;
0x0018A9        F128000A                 r0 = M[FP + 0xa];
0x0018AA        F138000B                 r1 = M[FP + 0xb];
0x0018AB        0042000F                 r2 = r0 + Null;
0x0018AC        0053000F                 r3 = r1 + Null;
0x0018AD        E1F002E1                 call $kal_float_lib.mul;
0x0018AE        F12C000A                 M[FP + 0xa] = r0;
0x0018AF        F13C000B                 M[FP + 0xb] = r1;
0x0018B0        0048000F                 r2 = r6 + Null;
0x0018B1        0059000F                 r3 = r7 + Null;
0x0018B2        E1F002CA                 call $kal_float_lib.add;
0x0018B3        01400080                 r2 = Null + 128;
0x0018B4        FD000080 01500000        r3 = Null + -8388608;
0x0018B6        E1F002C6                 call $kal_float_lib.add;
0x0018B7        E1F002EC                 call $kal_float_lib.recip;
0x0018B8        F12C000C                 M[FP + 0xc] = r0;
0x0018B9        F13C000D                 M[FP + 0xd] = r1;
0x0018BA        F1030006                 SP = SP + 6;
0x0018BB        F128000A                 r0 = M[FP + 0xa];
0x0018BC        F138000B                 r1 = M[FP + 0xb];
0x0018BD        0046000F                 r2 = r4 + Null;
0x0018BE        0057000F                 r3 = r5 + Null;
0x0018BF        E1F002BD                 call $kal_float_lib.add;
0x0018C0        01400080                 r2 = Null + 128;
0x0018C1        FD000080 01500000        r3 = Null + -8388608;
0x0018C3        E1F002B9                 call $kal_float_lib.add;
0x0018C4        F148000C                 r2 = M[FP + 0xc];
0x0018C5        F158000D                 r3 = M[FP + 0xd];
0x0018C6        E1F002C8                 call $kal_float_lib.mul;
0x0018C7        F100000C                 pushm <r0, r1>;
0x0018C8        F128000A                 r0 = M[FP + 0xa];
0x0018C9        F138000B                 r1 = M[FP + 0xb];
0x0018CA        01400081                 r2 = Null + 129;
0x0018CB        FD000080 01500000        r3 = Null + -8388608;
0x0018CD        E1F002C1                 call $kal_float_lib.mul;
0x0018CE        E1F002B7                 call $kal_float_lib.sub;
0x0018CF        F148000C                 r2 = M[FP + 0xc];
0x0018D0        F158000D                 r3 = M[FP + 0xd];
0x0018D1        E1F002BD                 call $kal_float_lib.mul;
0x0018D2        F100000C                 pushm <r0, r1>;
0x0018D3        F128000A                 r0 = M[FP + 0xa];
0x0018D4        F138000B                 r1 = M[FP + 0xb];
0x0018D5        0046000F                 r2 = r4 + Null;
0x0018D6        0057000F                 r3 = r5 + Null;
0x0018D7        E1F002AE                 call $kal_float_lib.sub;
0x0018D8        01400080                 r2 = Null + 128;
0x0018D9        FD000080 01500000        r3 = Null + -8388608;
0x0018DB        E1F002A1                 call $kal_float_lib.add;
0x0018DC        F148000C                 r2 = M[FP + 0xc];
0x0018DD        F158000D                 r3 = M[FP + 0xd];
0x0018DE        E1F002B0                 call $kal_float_lib.mul;
0x0018DF        F100000C                 pushm <r0, r1>;
0x0018E0        F128000A                 r0 = M[FP + 0xa];
0x0018E1        F138000B                 r1 = M[FP + 0xb];
0x0018E2        01400081                 r2 = Null + 129;
0x0018E3        FD000080 01500000        r3 = Null + -8388608;
0x0018E5        E1F002A9                 call $kal_float_lib.mul;
0x0018E6        E1F0029F                 call $kal_float_lib.sub;
0x0018E7        F148000C                 r2 = M[FP + 0xc];
0x0018E8        F158000D                 r3 = M[FP + 0xd];
0x0018E9        E1F002A5                 call $kal_float_lib.mul;
0x0018EA        F100000C                 pushm <r0, r1>;
0x0018EB        F128000A                 r0 = M[FP + 0xa];
0x0018EC        F138000B                 r1 = M[FP + 0xb];
0x0018ED        0048000F                 r2 = r6 + Null;
0x0018EE        0059000F                 r3 = r7 + Null;
0x0018EF        E1F00296                 call $kal_float_lib.sub;
0x0018F0        01400080                 r2 = Null + 128;
0x0018F1        FD000080 01500000        r3 = Null + -8388608;
0x0018F3        E1F00289                 call $kal_float_lib.add;
0x0018F4        F148000C                 r2 = M[FP + 0xc];
0x0018F5        F158000D                 r3 = M[FP + 0xd];
0x0018F6        E1F00298                 call $kal_float_lib.mul;
0x0018F7        F100000C                 pushm <r0, r1>;
0x0018F8        E1F0FBC6                 call $kal_filter_coef_lib.__scale_coefficients;
0x0018F9        F3240000                 pop r0;
0x0018FA        F12C7FF2                 M[FP + -0xe] = r0;
0x0018FB        F3240000                 pop r0;
0x0018FC        F12C7FF4                 M[FP + -0xc] = r0;
0x0018FD        F3240000                 pop r0;
0x0018FE        F12C7FF3                 M[FP + -0xd] = r0;
0x0018FF        F3240000                 pop r0;
0x001900        F12C7FF7                 M[FP + -0x9] = r0;
0x001901        F3240000                 pop r0;
0x001902        F12C7FF6                 M[FP + -0xa] = r0;
0x001903        F3240000                 pop r0;
0x001904        F12C7FF5                 M[FP + -0xb] = r0;
0x001905        F103FFFC                 SP = SP + -4;
0x001906        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001907        F103FFF8                 SP = SP + -8;
0x001908        DC0D000F                 rts;

 <$M.Subwoofer.l2cap_handler>
0x001909        F3D00000                 push rLink;
0x00190A        E1F007E1                 call $downsample_sub_to_1k2;
0x00190B        E1F0054E                 call $create_sub_packet;
0x00190C        E1F0FB1C                 call $block_interrupts;
0x00190D        01A09546                 r8 = Null + -27322;
0x00190E        E1F0F0C6                 call $cbops.copy;
0x00190F        E1F0FB09                 call $interrupt.unblock;
0x001910        DDF0FB62                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_post_process>
0x001911        F3D00000                 push rLink;
0x001912        E1F007D9                 call $downsample_sub_to_1k2;
0x001913        0140000A                 r2 = Null + 10;
0x001914        0930665D                 r1 = Null + M[$sco_param_tesco];
0x001915        21030006                 Null = r1 - 6;
0x001916        DD100003                 if NE jump $M.Subwoofer.do_not_send_duplicates;
0x001917        E430002F                 r1 = Null + 1;
0x001918        19306664                 M[$queue_another_bass_packet] = r1 + Null;

 <$M.Subwoofer.do_not_send_duplicates>
0x001919        013095AC                 r1 = Null + -27220;
0x00191A        D1530003                 r3 = M[r1 + 3];
0x00191B        DD100004                 if NE jump $M.Subwoofer.bass_packet_already_scheduled;
0x00191C        01501921                 r3 = Null + 6433;
0x00191D        E1F0FB48                 call $timer.schedule_event_in;
0x00191E        DDF00001                 jump $M.Subwoofer.bass_packet_already_scheduled;

 <$M.Subwoofer.bass_packet_already_scheduled>
0x00191F        19506661                 M[$bass_timer_id] = r3 + Null;
0x001920        DDF0FB52                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.send_bass_packet>
0x001921        F3D00000                 push rLink;
0x001922        E1F00537                 call $create_sub_packet;
0x001923        0920965A                 r0 = Null + M[$sub_link_port];
0x001924        E1F0FADC                 call $cbuffer.calc_amount_space;
0x001925        09609664                 r4 = Null + M[$min_port_space];
0x001926        2002006F                 Null = r0 - r4;
0x001927        00620004                 if NEG r4 = r0 + Null;
0x001928        19609664                 M[$min_port_space] = r4 + Null;
0x001929        01A06588                 r8 = Null + 25992;
0x00192A        E1F0F0AA                 call $cbops.copy;
0x00192B        0930FE71                 r1 = Null + M[0xfffe71];
0x00192C        09409669                 r2 = Null + M[$esco_write_deadline];
0x00192D        2053004F                 r3 = r1 - r2;
0x00192E        DD400009                 if NEG jump $M.Subwoofer.early;
0x00192F        09606665                 r4 = Null + M[$late_write_counter];
0x001930        E466002F                 r4 = r4 + 1;
0x001931        19606665                 M[$late_write_counter] = r4 + Null;
0x001932        09609665                 r4 = Null + M[$max_late_write];
0x001933        2005006F                 Null = r3 - r4;
0x001934        00650005                 if POS r4 = r3 + Null;
0x001935        19609665                 M[$max_late_write] = r4 + Null;
0x001936        DDF0000C                 jump $M.Subwoofer.done_logging_debug_data;

 <$M.Subwoofer.early>
0x001937        09606666                 r4 = Null + M[$early_write_counter];
0x001938        E466002F                 r4 = r4 + 1;
0x001939        19606666                 M[$early_write_counter] = r4 + Null;
0x00193A        09609666                 r4 = Null + M[$min_early_write];
0x00193B        2005006F                 Null = r3 - r4;
0x00193C        00650005                 if POS r4 = r3 + Null;
0x00193D        19609666                 M[$min_early_write] = r4 + Null;
0x00193E        09606667                 r4 = Null + M[$max_early_write];
0x00193F        2005006F                 Null = r3 - r4;
0x001940        00650004                 if NEG r4 = r3 + Null;
0x001941        19606667                 M[$max_early_write] = r4 + Null;

 <$M.Subwoofer.done_logging_debug_data>
0x001942        0960665D                 r4 = Null + M[$sco_param_tesco];
0x001943        99660271                 r4 = r4 * 625 (int);
0x001944        03460000                 r2 = r2 + r4;
0x001945        19409669                 M[$esco_write_deadline] = r2 + Null;
0x001946        09006664                 Null = Null + M[$queue_another_bass_packet];
0x001947        DD000007                 if EQ jump $M.Subwoofer.done_sending_bass_packets;
0x001948        19006664                 M[$queue_another_bass_packet] = Null + Null;
0x001949        01400EA6                 r2 = Null + 3750;
0x00194A        013095AC                 r1 = Null + -27220;
0x00194B        01501921                 r3 = Null + 6433;
0x00194C        E1F0FB16                 call $timer.schedule_event_in_period;
0x00194D        19506661                 M[$bass_timer_id] = r3 + Null;

 <$M.Subwoofer.done_sending_bass_packets>
0x00194E        DDF0FB24                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_port_connected>
0x00194F        F3D00000                 push rLink;
0x001950        F3300000                 push r1;
0x001951        E1F00099                 call $M.Subwoofer.subwoofer_init;
0x001952        F3540000                 pop r3;
0x001953        FD000000 01408018        r2 = Null + 32792;
0x001955        E1F0FAFC                 call $message.send;
0x001956        FD000091 0120A00C        r0 = Null + -7233524;
0x001958        1920965A                 M[$sub_link_port] = r0 + Null;
0x001959        E420002F                 r0 = Null + 1;
0x00195A        1920966A                 M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x00195B        01209661                 r0 = Null + -27039;
0x00195C        1920663F                 M[$music_example.sync_flag_ptr] = r0 + Null;
0x00195D        01200168                 r0 = Null + 360;
0x00195E        1920963F                 M[$music_example.frame_processing_size] = r0 + Null;
0x00195F        01206444                 r0 = Null + 25668;
0x001960        1920942D                 M[0xff942d] = r0 + Null;
0x001961        01200002                 r0 = Null + 2;
0x001962        192064A6                 M[$M.system_config.data.spkr_ctrl_coefs] = r0 + Null;
0x001963        01905B34                 r7 = Null + 23348;
0x001964        01A002D0                 r8 = Null + 720;
0x001965        E1F0F3DC                 call $spkr_ctrl_system.zero_data;
0x001966        FD0000FF 019037F9        r7 = Null + -51207;
0x001968        E1F0F3AA                 call $spkr_ctrl_system.initialize;
0x001969        01200080                 r0 = Null + 128;
0x00196A        19209647                 M[$music_example.OTA_IF_Connections] = r0 + Null;
0x00196B        E420002F                 r0 = Null + 1;
0x00196C        19209662                 M[$subwoofer_trim_buffers_flag] = r0 + Null;
0x00196D        DDF0FB05                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.l2cap_port_connected>
0x00196E        F3D00000                 push rLink;
0x00196F        F3300000                 push r1;
0x001970        E1F0007A                 call $M.Subwoofer.subwoofer_init;
0x001971        F3540000                 pop r3;
0x001972        FD000000 01408018        r2 = Null + 32792;
0x001974        E1F0FADD                 call $message.send;
0x001975        01200BCC                 r0 = Null + 3020;
0x001976        1920650E                 M[0x650e] = r0 + Null;
0x001977        192094CC                 M[0xff94cc] = r0 + Null;
0x001978        19206514                 M[0x6514] = r0 + Null;
0x001979        192094D2                 M[0xff94d2] = r0 + Null;
0x00197A        1920651A                 M[0x651a] = r0 + Null;
0x00197B        192094D8                 M[0xff94d8] = r0 + Null;
0x00197C        192000E4                 M[$M.main.samples_latency_measure] = r0 + Null;
0x00197D        01A0650B                 r8 = Null + 25867;
0x00197E        E1F00CA1                 call $audio_proc.delay.initialize;
0x00197F        01A094C9                 r8 = Null + -27447;
0x001980        E1F00C9F                 call $audio_proc.delay.initialize;
0x001981        01A06511                 r8 = Null + 25873;
0x001982        E1F00C9D                 call $audio_proc.delay.initialize;
0x001983        01A094CF                 r8 = Null + -27441;
0x001984        E1F00C9B                 call $audio_proc.delay.initialize;
0x001985        01A06517                 r8 = Null + 25879;
0x001986        E1F00C99                 call $audio_proc.delay.initialize;
0x001987        01A094D5                 r8 = Null + -27435;
0x001988        E1F00C97                 call $audio_proc.delay.initialize;
0x001989        09202BFF                 r0 = Null + M[$current_dac_sampling_rate];
0x00198A        E1F00BF2                 call $calc_us_per_sample_addr;
0x00198B        195095F1                 M[0xff95f1] = r3 + Null;
0x00198C        1950954E                 M[0xff954e] = r3 + Null;
0x00198D        1950954C                 M[0xff954c] = r3 + Null;
0x00198E        FD00009D 0120800D        r0 = Null + -6455283;
0x001990        1920965A                 M[$sub_link_port] = r0 + Null;
0x001991        E420002F                 r0 = Null + 1;
0x001992        1920966A                 M[$M.create_sub_packet.packet_counter] = r0 + Null;
0x001993        01200168                 r0 = Null + 360;
0x001994        91220001                 r0 = r0 ASHIFT 1;
0x001995        1920963F                 M[$music_example.frame_processing_size] = r0 + Null;
0x001996        01206444                 r0 = Null + 25668;
0x001997        1920942D                 M[0xff942d] = r0 + Null;
0x001998        01200002                 r0 = Null + 2;
0x001999        192064A6                 M[$M.system_config.data.spkr_ctrl_coefs] = r0 + Null;
0x00199A        01905B34                 r7 = Null + 23348;
0x00199B        01A002D0                 r8 = Null + 720;
0x00199C        E1F0F3A5                 call $spkr_ctrl_system.zero_data;
0x00199D        FD0000FF 019037F9        r7 = Null + -51207;
0x00199F        E1F0F373                 call $spkr_ctrl_system.initialize;
0x0019A0        01200080                 r0 = Null + 128;
0x0019A1        19209647                 M[$music_example.OTA_IF_Connections] = r0 + Null;
0x0019A2        DDF0FAD0                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.esco_port_disconnected>
0x0019A3        F3D00000                 push rLink;
0x0019A4        E1F007C2                 call $disable_subwoofer;
0x0019A5        DDF0FACD                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.trim_buffers>
0x0019A6        F3D00000                 push rLink;
0x0019A7        0920965A                 r0 = Null + M[$sub_link_port];
0x0019A8        FD000091 2102A00C        Null = r0 - -7233524;
0x0019AA        DD100008                 if NE jump $M.Subwoofer.done_trimming;
0x0019AB        09009662                 Null = Null + M[$subwoofer_trim_buffers_flag];
0x0019AC        DD000006                 if EQ jump $M.Subwoofer.done_trimming;
0x0019AD        19009662                 M[$subwoofer_trim_buffers_flag] = Null + Null;
0x0019AE        E1F0FA7A                 call $block_interrupts;
0x0019AF        E1F01C8F                 call $multi_chan_purge_buffers;
0x0019B0        E1F01C61                 call $purge_input_pcm_cbuffers;
0x0019B1        E1F0FA67                 call $interrupt.unblock;

 <$M.Subwoofer.done_trimming>
0x0019B2        DDF0FAC0                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.sleep>
0x0019B3        F3D00000                 push rLink;
0x0019B4        0920965A                 r0 = Null + M[$sub_link_port];
0x0019B5        FD000091 2102A00C        Null = r0 - -7233524;
0x0019B7        DD100007                 if NE jump $M.Subwoofer.not_esco_sub;
0x0019B8        09209663                 r0 = Null + M[$M.Subwoofer.sco_schedule_to_air_flag];
0x0019B9        E110088B                 if NE call $sco_schedule_to_air;
0x0019BA        092065CE                 r0 = Null + M[0x65ce];
0x0019BB        DD000003                 if EQ jump $M.Subwoofer.not_esco_sub;
0x0019BC        E1F0FFEA                 call $M.Subwoofer.trim_buffers;
0x0019BD        E1F0093D                 call $SystemSleep;

 <$M.Subwoofer.not_esco_sub>
0x0019BE        DDF0FAB4                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.set_frame_size>
0x0019BF        19506413                 M[0x6413] = r3 + Null;
0x0019C0        195093E8                 M[0xff93e8] = r3 + Null;
0x0019C1        19506420                 M[0x6420] = r3 + Null;
0x0019C2        195093F5                 M[0xff93f5] = r3 + Null;
0x0019C3        1950642D                 M[0x642d] = r3 + Null;
0x0019C4        19509402                 M[0xff9402] = r3 + Null;
0x0019C5        1950643A                 M[0x643a] = r3 + Null;
0x0019C6        1950940F                 M[0xff940f] = r3 + Null;
0x0019C7        19506447                 M[0x6447] = r3 + Null;
0x0019C8        DC0D000F                 rts;

 <$M.Subwoofer.transmit_wireless_subwoofer_audio>
0x0019C9        F3D00000                 push rLink;
0x0019CA        0920965A                 r0 = Null + M[$sub_link_port];
0x0019CB        FD000091 2102A00C        Null = r0 - -7233524;
0x0019CD        DD100003                 if NE jump $M.Subwoofer.check_l2cap_sub;
0x0019CE        09006662                 Null = Null + M[$sub_app_esco_func];
0x0019CF        E100FF42                 if EQ call $M.Subwoofer.esco_post_process;

 <$M.Subwoofer.check_l2cap_sub>
0x0019D0        0920965A                 r0 = Null + M[$sub_link_port];
0x0019D1        FD00009D 2102800D        Null = r0 - -6455283;
0x0019D3        DD100006                 if NE jump $M.Subwoofer.done_with_transmission;
0x0019D4        012095FC                 r0 = Null + -27140;
0x0019D5        E1F0FA3B                 call $cbuffer.calc_amount_data;
0x0019D6        210202D0                 Null = r0 - 720;
0x0019D7        DD400002                 if NEG jump $M.Subwoofer.done_with_transmission;
0x0019D8        E1F0FF31                 call $M.Subwoofer.l2cap_handler;

 <$M.Subwoofer.done_with_transmission>
0x0019D9        DDF0FA99                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.validate_time_to_play>
0x0019DA        F3D00000                 push rLink;
0x0019DB        0950665B                 r3 = Null + M[$M.Subwoofer.playback_time];
0x0019DC        DD000007                 if EQ jump $M.Subwoofer.set_flag;
0x0019DD        0050000F                 r3 = Null + Null;
0x0019DE        012095F3                 r0 = Null + -27149;
0x0019DF        E1F0FA31                 call $cbuffer.calc_amount_data;
0x0019E0        0002000F                 Null = r0 + Null;
0x0019E1        DD100002                 if NE jump $M.Subwoofer.set_flag;
0x0019E2        E450002F                 r3 = Null + 1;

 <$M.Subwoofer.set_flag>
0x0019E3        19506663                 M[$M.Subwoofer.recompute_time_to_play_flag] = r3 + Null;
0x0019E4        DDF0FA8E                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.compute_time_to_play>
0x0019E5        F3D00000                 push rLink;
0x0019E6        09006663                 Null = Null + M[$M.Subwoofer.recompute_time_to_play_flag];
0x0019E7        DD000002                 if EQ jump $M.Subwoofer.done_with_compute_time_to_play;
0x0019E8        E1F00006                 call $M.Subwoofer.synchronise;

 <$M.Subwoofer.done_with_compute_time_to_play>
0x0019E9        DDF0FA89                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.subwoofer_init>
0x0019EA        F3D00000                 push rLink;
0x0019EB        013001F4                 r1 = Null + 500;
0x0019EC        E1F009CE                 call $enable_esco_subwoofer;
0x0019ED        DDF0FA85                 jump $pop_rLink_and_rts;

 <$M.Subwoofer.synchronise>
0x0019EE        F3D00000                 push rLink;
0x0019EF        0920965A                 r0 = Null + M[$sub_link_port];
0x0019F0        FD00009D 2102800D        Null = r0 - -6455283;
0x0019F2        DD100005                 if NE jump $M.Subwoofer.done_synchronise;
0x0019F3        019095F0                 r7 = Null + -27152;
0x0019F4        01A0954B                 r8 = Null + -27317;
0x0019F5        E1F007FF                 call $calc_time_to_play;
0x0019F6        1980665B                 M[$M.Subwoofer.playback_time] = r6 + Null;

 <$M.Subwoofer.done_synchronise>
0x0019F7        DDF0FA7B                 jump $pop_rLink_and_rts;

 <$sbc.calc_bit_allocation>
0x0019F8        F3D00000                 push rLink;
0x0019F9        51900001                 M1 = Null + 1;
0x0019FA        D12B001E                 r0 = M[r9 + 30];
0x0019FB        81220002                 r0 = r0 AND 0x2;
0x0019FC        DD10005E                 if NE jump $M.sbc.calc_bit_allocation.stereo_joint;
0x0019FD        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_chan_loop>
0x0019FE        D13B0020                 r1 = M[r9 + 32];
0x0019FF        DD00000C                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness;
0x001A00        D1CB0021                 r10 = M[r9 + 33];
0x001A01        983200CF                 r1 = r0 * r10 (int);
0x001A02        D1CB0018                 r10 = M[r9 + 24];
0x001A03        501300CF                 I1 = r1 + r10;
0x001A04        D1CB001A                 r10 = M[r9 + 26];
0x001A05        502300CF                 I2 = r1 + r10;
0x001A06        D1CB0021                 r10 = M[r9 + 33];
0x001A07        E5F00003                 do $M.sbc.calc_bit_allocation.md_snr_loop;
0x001A08        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001A09        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.md_snr_loop>
0x001A0A        DDF00017                 jump $M.sbc.calc_bit_allocation.md_loudness_loop;

 <$M.sbc.calc_bit_allocation.md_loudness>
0x001A0B        D1CB0021                 r10 = M[r9 + 33];
0x001A0C        983200CF                 r1 = r0 * r10 (int);
0x001A0D        D16B0018                 r4 = M[r9 + 24];
0x001A0E        5013006F                 I1 = r1 + r4;
0x001A0F        D16B001A                 r4 = M[r9 + 26];
0x001A10        5023006F                 I2 = r1 + r4;
0x001A11        E460003F                 r4 = Null - 1;
0x001A12        D13B001C                 r1 = M[r9 + 28];
0x001A13        9B3C0000                 r1 = r1 * r10 (int);
0x001A14        D14B0017                 r2 = M[r9 + 23];
0x001A15        5033004F                 I3 = r1 + r2;
0x001A16        51440010                 I4 = r2 + 16;
0x001A17        210C0008                 Null = r10 - 8;
0x001A18        54330040                 if EQ I3 = r1 + I4;
0x001A19        E5F00008                 do $M.sbc.calc_bit_allocation.md_loudness_loop;
0x001A1A        0140FFFB                 r2 = Null + -5;
0x001A1B        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001A1C        03035D00                 Null = Null + r1, r3 = M[I3,1];
0x001A1D        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness_endif;
0x001A1E        2043005F                 r2 = r1 - r3;
0x001A1F        90440065                 if POS r2 = r2 ASHIFT r4;

 <$M.sbc.calc_bit_allocation.md_loudness_endif>
0x001A20        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.sbc.calc_bit_allocation.md_loudness_loop>
0x001A21        D1CB0021                 r10 = M[r9 + 33];
0x001A22        983200CF                 r1 = r0 * r10 (int);
0x001A23        D14B001A                 r2 = M[r9 + 26];
0x001A24        5023004F                 I2 = r1 + r2;
0x001A25        E1F0009B                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.md_findbitslice_loop1>
0x001A26        D1CB0021                 r10 = M[r9 + 33];
0x001A27        983200CF                 r1 = r0 * r10 (int);
0x001A28        D17B001A                 r5 = M[r9 + 26];
0x001A29        5023007F                 I2 = r1 + r5;
0x001A2A        E1F0009F                 call $M.sbc.calc_bit_allocation.share_code_2;
0x001A2B        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.md_findbitslice_loop1;
0x001A2C        D1CB0021                 r10 = M[r9 + 33];
0x001A2D        983200CF                 r1 = r0 * r10 (int);
0x001A2E        D1CB001B                 r10 = M[r9 + 27];
0x001A2F        501300CF                 I1 = r1 + r10;
0x001A30        D1CB001A                 r10 = M[r9 + 26];
0x001A31        502300CF                 I2 = r1 + r10;
0x001A32        D1CB0021                 r10 = M[r9 + 33];
0x001A33        E1F000A9                 call $M.sbc.calc_bit_allocation.share_code_3;
0x001A34        D1CB0021                 r10 = M[r9 + 33];
0x001A35        983200CF                 r1 = r0 * r10 (int);
0x001A36        D16B001B                 r4 = M[r9 + 27];
0x001A37        5013006F                 I1 = r1 + r4;
0x001A38        D16B001A                 r4 = M[r9 + 26];
0x001A39        5023006F                 I2 = r1 + r4;
0x001A3A        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_loop>
0x001A3B        D13B0022                 r1 = M[r9 + 34];
0x001A3C        2005003F                 Null = r3 - r1;
0x001A3D        DD500005                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_end;
0x001A3E        E1F000AE                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001A3F        E466002F                 r4 = r4 + 1;
0x001A40        200600CF                 Null = r4 - r10;
0x001A41        DD10FFFA                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_end>
0x001A42        983200CF                 r1 = r0 * r10 (int);
0x001A43        D16B001B                 r4 = M[r9 + 27];
0x001A44        5013006F                 I1 = r1 + r4;
0x001A45        D16B001A                 r4 = M[r9 + 26];
0x001A46        5023006F                 I2 = r1 + r4;
0x001A47        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_loop>
0x001A48        D13B0022                 r1 = M[r9 + 34];
0x001A49        2005003F                 Null = r3 - r1;
0x001A4A        DD50000B                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_end;
0x001A4B        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001A4C        03007900                 Null = Null + Null, r5 = M[I2,1];
0x001A4D        21030010                 Null = r1 - 16;
0x001A4E        DD500003                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_endif;
0x001A4F        E433002F                 r1 = r1 + 1;
0x001A50        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_endif>
0x001A51        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001A52        E466002F                 r4 = r4 + 1;
0x001A53        200600CF                 Null = r4 - r10;
0x001A54        DD10FFF4                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_end>
0x001A55        E422002F                 r0 = r0 + 1;
0x001A56        D13B001F                 r1 = M[r9 + 31];
0x001A57        2002003F                 Null = r0 - r1;
0x001A58        DD10FFA6                 if NE jump $M.sbc.calc_bit_allocation.md_chan_loop;
0x001A59        DDF0FA19                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.stereo_joint>
0x001A5A        D13B0020                 r1 = M[r9 + 32];
0x001A5B        DD00000B                 if EQ jump $M.sbc.calc_bit_allocation.sj_loudness;
0x001A5C        D1CB0021                 r10 = M[r9 + 33];
0x001A5D        99CC0002                 r10 = r10 * 2 (int);
0x001A5E        D13B0018                 r1 = M[r9 + 24];
0x001A5F        5010003F                 I1 = Null + r1;
0x001A60        D13B001A                 r1 = M[r9 + 26];
0x001A61        5020003F                 I2 = Null + r1;
0x001A62        E5F00003                 do $M.sbc.calc_bit_allocation.sj_snr_loop2;
0x001A63        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001A64        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.sj_snr_loop2>
0x001A65        DDF0001B                 jump $M.sbc.calc_bit_allocation.sj_maxbitneedindex;

 <$M.sbc.calc_bit_allocation.sj_loudness>
0x001A66        D12B0021                 r0 = M[r9 + 33];
0x001A67        E460003F                 r4 = Null - 1;
0x001A68        D13B0018                 r1 = M[r9 + 24];
0x001A69        5010003F                 I1 = Null + r1;
0x001A6A        D13B001A                 r1 = M[r9 + 26];
0x001A6B        5020003F                 I2 = Null + r1;
0x001A6C        D13B001C                 r1 = M[r9 + 28];
0x001A6D        9B320000                 r1 = r1 * r0 (int);
0x001A6E        D14B0017                 r2 = M[r9 + 23];
0x001A6F        5043004F                 I4 = r1 + r2;
0x001A70        51340010                 I3 = r2 + 16;
0x001A71        21020008                 Null = r0 - 8;
0x001A72        54430030                 if EQ I4 = r1 + I3;
0x001A73        01200002                 r0 = Null + 2;
0x001A74        0170FFF6                 r5 = Null + -10;
0x001A75        0047350F                 r2 = r5 + Null, r1 = M[I1,M1];

 <$M.sbc.calc_bit_allocation.sj_loudness_chan_loop>
0x001A76        D1CB0021                 r10 = M[r9 + 33];
0x001A77        59340001                 I3 = I4 + 1;
0x001A78        03000050                 Null = Null + Null, r3 = M[I4,0];
0x001A79        E5F00005                 do $M.sbc.calc_bit_allocation.sj_loudness_sb_loop;
0x001A7A        0003000F                 Null = r1 + Null;
0x001A7B        20433551                 if NE r2 = r1 - r3, r1 = M[I1,M1];
0x001A7C        90445D65                 if POS r2 = r2 ASHIFT r4, r3 = M[I3,M1];
0x001A7D        0047C90F                 r2 = r5 + Null, M[I2,M1] = r2;

 <$M.sbc.calc_bit_allocation.sj_loudness_sb_loop>
0x001A7E        E422003F                 r0 = r0 - 1;
0x001A7F        DD10FFF7                 if NE jump $M.sbc.calc_bit_allocation.sj_loudness_chan_loop;

 <$M.sbc.calc_bit_allocation.sj_maxbitneedindex>
0x001A80        D1CB0021                 r10 = M[r9 + 33];
0x001A81        99CC0002                 r10 = r10 * 2 (int);
0x001A82        D14B001A                 r2 = M[r9 + 26];
0x001A83        5020004F                 I2 = Null + r2;
0x001A84        E1F0003C                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.sj_findbitslice_loop1>
0x001A85        D1CB0021                 r10 = M[r9 + 33];
0x001A86        99CC0002                 r10 = r10 * 2 (int);
0x001A87        D17B001A                 r5 = M[r9 + 26];
0x001A88        5020007F                 I2 = Null + r5;
0x001A89        E1F00040                 call $M.sbc.calc_bit_allocation.share_code_2;
0x001A8A        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.sj_findbitslice_loop1;
0x001A8B        D1CB001B                 r10 = M[r9 + 27];
0x001A8C        501000CF                 I1 = Null + r10;
0x001A8D        D1CB001A                 r10 = M[r9 + 26];
0x001A8E        502000CF                 I2 = Null + r10;
0x001A8F        D1CB0021                 r10 = M[r9 + 33];
0x001A90        99CC0002                 r10 = r10 * 2 (int);
0x001A91        E1F0004B                 call $M.sbc.calc_bit_allocation.share_code_3;
0x001A92        D1CB0021                 r10 = M[r9 + 33];
0x001A93        01600000                 r4 = Null + 0;
0x001A94        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_loop>
0x001A95        5022006F                 I2 = r0 + r4;
0x001A96        D13B001B                 r1 = M[r9 + 27];
0x001A97        5812003F                 I1 = I2 + r1;
0x001A98        D13B001A                 r1 = M[r9 + 26];
0x001A99        5B230000                 I2 = I2 + r1;
0x001A9A        D13B0022                 r1 = M[r9 + 34];
0x001A9B        2005003F                 Null = r3 - r1;
0x001A9C        DD50000A                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_end;
0x001A9D        E1F0004F                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001A9E        200200CF                 Null = r0 - r10;
0x001A9F        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_chanchange;
0x001AA0        002C000F                 r0 = r10 + Null;
0x001AA1        DDF0FFF4                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_chanchange>
0x001AA2        01200000                 r0 = Null + 0;
0x001AA3        E466002F                 r4 = r4 + 1;
0x001AA4        200600CF                 Null = r4 - r10;
0x001AA5        DD10FFF0                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_end>
0x001AA6        01600000                 r4 = Null + 0;
0x001AA7        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop>
0x001AA8        5022006F                 I2 = r0 + r4;
0x001AA9        D13B001B                 r1 = M[r9 + 27];
0x001AAA        5812003F                 I1 = I2 + r1;
0x001AAB        D13B001A                 r1 = M[r9 + 26];
0x001AAC        5B230000                 I2 = I2 + r1;
0x001AAD        D13B0022                 r1 = M[r9 + 34];
0x001AAE        2005003F                 Null = r3 - r1;
0x001AAF        DD500010                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_end;
0x001AB0        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001AB1        03007800                 Null = Null + Null, r5 = M[I2,0];
0x001AB2        21030010                 Null = r1 - 16;
0x001AB3        DD500003                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif;
0x001AB4        E433002F                 r1 = r1 + 1;
0x001AB5        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif>
0x001AB6        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001AB7        200200CF                 Null = r0 - r10;
0x001AB8        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange;
0x001AB9        002C000F                 r0 = r10 + Null;
0x001ABA        DDF0FFEE                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange>
0x001ABB        01200000                 r0 = Null + 0;
0x001ABC        E466002F                 r4 = r4 + 1;
0x001ABD        200600CF                 Null = r4 - r10;
0x001ABE        DD10FFEA                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_end>
0x001ABF        DDF0F9B3                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.share_code_1>
0x001AC0        01400000                 r2 = Null + 0;
0x001AC1        E5F00004                 do $M.sbc.calc_bit_allocation.maxbitneed_loop;
0x001AC2        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001AC3        2004003F                 Null = r2 - r1;
0x001AC4        00430004                 if NEG r2 = r1 + Null;

 <$M.sbc.calc_bit_allocation.maxbitneed_loop>
0x001AC5        01500000                 r3 = Null + 0;
0x001AC6        01600000                 r4 = Null + 0;
0x001AC7        E444002F                 r2 = r2 + 1;
0x001AC8        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_2>
0x001AC9        E444003F                 r2 = r2 - 1;
0x001ACA        03560000                 r3 = r3 + r4;
0x001ACB        01600000                 r4 = Null + 0;
0x001ACC        E5F0000C                 do $M.sbc.calc_bit_allocation.findbitslice_loop2;
0x001ACD        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001ACE        2073004F                 r5 = r1 - r2;
0x001ACF        21070002                 Null = r5 - 2;
0x001AD0        DD400004                 if NEG jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x001AD1        21070010                 Null = r5 - 16;
0x001AD2        DD500002                 if POS jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x001AD3        E466002F                 r4 = r4 + 1;

 <$M.sbc.calc_bit_allocation.findbitslice_elseif1>
0x001AD4        E407003F                 Null = r5 - 1;
0x001AD5        DD100002                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif1;
0x001AD6        01660002                 r4 = r4 + 2;

 <$M.sbc.calc_bit_allocation.findbitslice_endif1>
0x001AD7        03000000                 Null = Null + Null;

 <$M.sbc.calc_bit_allocation.findbitslice_loop2>
0x001AD8        0075006F                 r5 = r3 + r4;
0x001AD9        D1CB0022                 r10 = M[r9 + 34];
0x001ADA        200700CF                 Null = r5 - r10;
0x001ADB        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_3>
0x001ADC        D13B0022                 r1 = M[r9 + 34];
0x001ADD        2007003F                 Null = r5 - r1;
0x001ADE        DD100003                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif2;
0x001ADF        03560000                 r3 = r3 + r4;
0x001AE0        E444003F                 r2 = r2 - 1;

 <$M.sbc.calc_bit_allocation.findbitslice_endif2>
0x001AE1        E5F0000A                 do $M.sbc.calc_bit_allocation.distbits_loop;
0x001AE2        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001AE3        2073004F                 r5 = r1 - r2;
0x001AE4        01300000                 r1 = Null + 0;
0x001AE5        21070002                 Null = r5 - 2;
0x001AE6        00370005                 if POS r1 = r5 + Null;
0x001AE7        01700010                 r5 = Null + 16;
0x001AE8        21030010                 Null = r1 - 16;
0x001AE9        00370005                 if POS r1 = r5 + Null;
0x001AEA        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbc.calc_bit_allocation.distbits_loop>
0x001AEB        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_4>
0x001AEC        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001AED        03007900                 Null = Null + Null, r5 = M[I2,1];
0x001AEE        21030002                 Null = r1 - 2;
0x001AEF        DD400006                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x001AF0        21030010                 Null = r1 - 16;
0x001AF1        DD500004                 if POS jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x001AF2        E433002F                 r1 = r1 + 1;
0x001AF3        E455002F                 r3 = r3 + 1;
0x001AF4        DDF0000A                 jump $M.sbc.calc_bit_allocation.remainingbits_endif;

 <$M.sbc.calc_bit_allocation.remainingbits_elseif>
0x001AF5        23740000                 r5 = r5 - r2;
0x001AF6        E407003F                 Null = r5 - 1;
0x001AF7        DD100007                 if NE jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001AF8        D17B0022                 r5 = M[r9 + 34];
0x001AF9        23750000                 r5 = r5 - r3;
0x001AFA        21070002                 Null = r5 - 2;
0x001AFB        DD400003                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001AFC        01300002                 r1 = Null + 2;
0x001AFD        01550002                 r3 = r3 + 2;

 <$M.sbc.calc_bit_allocation.remainingbits_endif>
0x001AFE        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001AFF        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.corrupt_frame_error>
0x001B00        E420002F                 r0 = Null + 1;
0x001B01        D52B0036                 M[r9 + 54] = r0;
0x001B02        DDF0F970                 jump $pop_rLink_and_rts;

 <$kal_float_lib.__zero.call_entry>
0x001B03        F3D00000                 push rLink;

 <$kal_float_lib.__zero.jump_entry>
0x001B04        01200000                 r0 = Null + 0;
0x001B05        01300000                 r1 = Null + 0;
0x001B06        F3D40000                 pop rLink;
0x001B07        DC0D000F                 rts;

 <$kal_float_lib.__renorm.call_entry>
0x001B08        F3D00000                 push rLink;

 <$kal_float_lib.__renorm.jump_entry>
0x001B09        0003000F                 Null = r1 + Null;
0x001B0A        DD00FFFA                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001B0B        F3600000                 push r4;
0x001B0C        816200FF                 r4 = r0 AND 0xff;
0x001B0D        FD000080 81220000        r0 = r0 AND 0x800000;
0x001B0F        0003000F                 Null = r1 + Null;
0x001B10        DD400004                 if NEG jump $kal_float_lib.__renorm_rebuild_and_exit;

 <$kal_float_lib.__renorm_loop>
0x001B11        E466003F                 r4 = r4 - 1;
0x001B12        8D330001                 r1 = r1 LSHIFT 1;
0x001B13        DD50FFFE                 if POS jump $kal_float_lib.__renorm_loop;

 <$kal_float_lib.__renorm_rebuild_and_exit>
0x001B14        816600FF                 r4 = r4 AND 0xff;
0x001B15        87260000                 r0 = r0 OR r4;
0x001B16        F3640000                 pop r4;
0x001B17        F3D40000                 pop rLink;
0x001B18        DC0D000F                 rts;

 <$kal_float_lib.__add.jump_entry>
0x001B19        F1000330                 pushm <r2, r3, r6, r7>;
0x001B1A        0003000F                 Null = r1 + Null;
0x001B1B        00240000                 if EQ r0 = r2 + Null;
0x001B1C        0005000F                 Null = r3 + Null;
0x001B1D        00420000                 if EQ r2 = r0 + Null;
0x001B1E        817200FF                 r5 = r0 AND 0xff;
0x001B1F        818400FF                 r6 = r2 AND 0xff;
0x001B20        2097008F                 r7 = r5 - r6;
0x001B21        DD400005                 if NEG jump $kal_float_lib.__add_shift_op1;
0x001B22        2090009F                 r7 = Null - r7;
0x001B23        8F590000                 r3 = r3 LSHIFT r7;
0x001B24        E427002F                 r0 = r5 + 1;
0x001B25        DDF00003                 jump $kal_float_lib.__add_add_and_exit;

 <$kal_float_lib.__add_shift_op1>
0x001B26        8F390000                 r1 = r1 LSHIFT r7;
0x001B27        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__add_add_and_exit>
0x001B28        8D33007F                 r1 = r1 LSHIFT -1;
0x001B29        8D55007F                 r3 = r3 LSHIFT -1;
0x001B2A        03350000                 r1 = r1 + r3;
0x001B2B        87260000                 r0 = r0 OR r4;
0x001B2C        F1040330                 popm <r2, r3, r6, r7>;
0x001B2D        F10400C0                 popm <r4, r5>;
0x001B2E        DDF0FFDB                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub.jump_entry>
0x001B2F        F1000330                 pushm <r2, r3, r6, r7>;
0x001B30        0003000F                 Null = r1 + Null;
0x001B31        00240000                 if EQ r0 = r2 + Null;
0x001B32        0005000F                 Null = r3 + Null;
0x001B33        00420000                 if EQ r2 = r0 + Null;
0x001B34        817200FF                 r5 = r0 AND 0xff;
0x001B35        818400FF                 r6 = r2 AND 0xff;
0x001B36        2097008F                 r7 = r5 - r6;
0x001B37        DD400005                 if NEG jump $kal_float_lib.__sub_shift_op1;
0x001B38        2090009F                 r7 = Null - r7;
0x001B39        8F590000                 r3 = r3 LSHIFT r7;
0x001B3A        E427002F                 r0 = r5 + 1;
0x001B3B        DDF00003                 jump $kal_float_lib.__sub_sub_and_exit;

 <$kal_float_lib.__sub_shift_op1>
0x001B3C        8F390000                 r1 = r1 LSHIFT r7;
0x001B3D        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__sub_sub_and_exit>
0x001B3E        8D33007F                 r1 = r1 LSHIFT -1;
0x001B3F        8D55007F                 r3 = r3 LSHIFT -1;
0x001B40        2003005F                 Null = r1 - r3;
0x001B41        DD400006                 if NEG jump $kal_float_lib.__sub_sub_a_from_b;
0x001B42        23350000                 r1 = r1 - r3;
0x001B43        87260000                 r0 = r0 OR r4;
0x001B44        F1040330                 popm <r2, r3, r6, r7>;
0x001B45        F10400C0                 popm <r4, r5>;
0x001B46        DDF0FFC3                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub_sub_a_from_b>
0x001B47        2035003F                 r1 = r3 - r1;
0x001B48        FD000080 89660000        r4 = r4 XOR 0x800000;
0x001B4A        87260000                 r0 = r0 OR r4;
0x001B4B        F1040330                 popm <r2, r3, r6, r7>;
0x001B4C        F10400C0                 popm <r4, r5>;
0x001B4D        DDF0FFBC                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.q_to_float>
0x001B4E        F3D00000                 push rLink;

 <$kal_float_lib.q_to_float.jump_entry>
0x001B4F        0002000F                 Null = r0 + Null;
0x001B50        DD00FFB4                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001B51        F1000050                 pushm <r2, r4>;
0x001B52        0042000F                 r2 = r0 + Null;
0x001B53        FD000080 81620000        r4 = r0 AND 0x800000;
0x001B55        20400041                 if NE r2 = Null - r2;
0x001B56        0123007F                 r0 = r1 + 127;
0x001B57        87260000                 r0 = r0 OR r4;
0x001B58        0034000F                 r1 = r2 + Null;
0x001B59        F1040050                 popm <r2, r4>;
0x001B5A        DDF0FFAF                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.float_to_q>
0x001B5B        F3D00000                 push rLink;

 <$kal_float_lib.float_to_q.jump_entry>
0x001B5C        F1000060                 pushm <r3, r4>;
0x001B5D        8D33007F                 r1 = r1 LSHIFT -1;
0x001B5E        815200FF                 r3 = r0 AND 0xff;
0x001B5F        E455003F                 r3 = r3 - 1;
0x001B60        FD000080 81620000        r4 = r0 AND 0x800000;
0x001B62        20300031                 if NE r1 = Null - r1;
0x001B63        21550097                 r3 = r3 - 151;
0x001B64        03540000                 r3 = r3 + r2;
0x001B65        9023005F                 r0 = r1 ASHIFT r3;
0x001B66        F1040060                 popm <r3, r4>;
0x001B67        F3D40000                 pop rLink;
0x001B68        DC0D000F                 rts;

 <$kal_float_lib.int_to_float>
0x001B69        F3D00000                 push rLink;
0x001B6A        01300018                 r1 = Null + 24;
0x001B6B        DDF0FFE4                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.frac_to_float>
0x001B6C        F3D00000                 push rLink;
0x001B6D        E430002F                 r1 = Null + 1;
0x001B6E        DDF0FFE1                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.float_to_int>
0x001B6F        F1002010                 pushm <r2, rLink>;
0x001B70        01400002                 r2 = Null + 2;
0x001B71        E1F0FFEA                 call $kal_float_lib.float_to_q;
0x001B72        F1042010                 popm <r2, rLink>;
0x001B73        DC0D000F                 rts;

 <$kal_float_lib.float_to_frac>
0x001B74        F1002010                 pushm <r2, rLink>;
0x001B75        01400019                 r2 = Null + 25;
0x001B76        E1F0FFE5                 call $kal_float_lib.float_to_q;
0x001B77        F1042010                 popm <r2, rLink>;
0x001B78        DC0D000F                 rts;

 <$kal_float_lib.neg>
0x001B79        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001B7B        DC0D000F                 rts;

 <$kal_float_lib.add>
0x001B7C        F3D00000                 push rLink;
0x001B7D        F10000C0                 pushm <r4, r5>;
0x001B7E        FD000080 81620000        r4 = r0 AND 0x800000;
0x001B80        FD000080 81740000        r5 = r2 AND 0x800000;
0x001B82        2006007F                 Null = r4 - r5;
0x001B83        DD00FF96                 if EQ jump $kal_float_lib.__add.jump_entry;
0x001B84        DDF0FFAB                 jump $kal_float_lib.__sub.jump_entry;

 <$kal_float_lib.sub>
0x001B85        F3D00000                 push rLink;
0x001B86        F10000C0                 pushm <r4, r5>;
0x001B87        FD000080 81620000        r4 = r0 AND 0x800000;
0x001B89        FD000080 81740000        r5 = r2 AND 0x800000;
0x001B8B        2006007F                 Null = r4 - r5;
0x001B8C        DD00FFA3                 if EQ jump $kal_float_lib.__sub.jump_entry;
0x001B8D        DDF0FF8C                 jump $kal_float_lib.__add.jump_entry;

 <$kal_float_lib.mul>
0x001B8E        F3D00000                 push rLink;
0x001B8F        0003000F                 Null = r1 + Null;
0x001B90        DD00FF74                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001B91        0005000F                 Null = r3 + Null;
0x001B92        DD00FF72                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001B93        F10000E0                 pushm <r3, r4, r5>;
0x001B94        816200FF                 r4 = r0 AND 0xff;
0x001B95        817400FF                 r5 = r2 AND 0xff;
0x001B96        03670000                 r4 = r4 + r5;
0x001B97        2166007F                 r4 = r4 - 127;
0x001B98        8872004F                 r5 = r0 XOR r2;
0x001B99        FD000080 81770000        r5 = r5 AND 0x800000;
0x001B9B        8426007F                 r0 = r4 OR r5;
0x001B9C        8D33007F                 r1 = r1 LSHIFT -1;
0x001B9D        8D55007F                 r3 = r3 LSHIFT -1;
0x001B9E        CC13005F                 rMAC = r1 * r3 (SS);
0x001B9F        0031000F                 r1 = rMAC + Null;
0x001BA0        8D330001                 r1 = r1 LSHIFT 1;
0x001BA1        F10400E0                 popm <r3, r4, r5>;
0x001BA2        DDF0FF67                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.recip>
0x001BA3        F3D00000                 push rLink;
0x001BA4        F10010F0                 pushm <r2, r3, r4, r5, r10>;
0x001BA5        654200FF                 r2 = 255 - r0;
0x001BA6        91530017                 r3 = r1 ASHIFT 23;
0x001BA7        F100000C                 pushm <r0, r1>;
0x001BA8        01C00006                 r10 = Null + 6;
0x001BA9        E5F00012                 do $kal_float_lib._recip_iteration_loop;
0x001BAA        F104000C                 popm <r0, r1>;
0x001BAB        F100000C                 pushm <r0, r1>;
0x001BAC        E1F0FFE2                 call $kal_float_lib.mul;
0x001BAD        F100003C                 pushm <r0, r1, r2, r3>;
0x001BAE        F10400F0                 popm <r2, r3, r4, r5>;
0x001BAF        01200080                 r0 = Null + 128;
0x001BB0        FD000080 01300000        r1 = Null + -8388608;
0x001BB2        E1F0FFD3                 call $kal_float_lib.sub;
0x001BB3        0046000F                 r2 = r4 + Null;
0x001BB4        0057000F                 r3 = r5 + Null;
0x001BB5        E1F0FFD9                 call $kal_float_lib.mul;
0x001BB6        0046000F                 r2 = r4 + Null;
0x001BB7        0057000F                 r3 = r5 + Null;
0x001BB8        E1F0FFC4                 call $kal_float_lib.add;
0x001BB9        0042000F                 r2 = r0 + Null;
0x001BBA        0053000F                 r3 = r1 + Null;

 <$kal_float_lib._recip_iteration_loop>
0x001BBB        F104000C                 popm <r0, r1>;
0x001BBC        0024000F                 r0 = r2 + Null;
0x001BBD        0035000F                 r1 = r3 + Null;
0x001BBE        F10410F0                 popm <r2, r3, r4, r5, r10>;
0x001BBF        DDF0FF4A                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.div>
0x001BC0        F3D00000                 push rLink;
0x001BC1        F1000030                 pushm <r2, r3>;
0x001BC2        F100000C                 pushm <r0, r1>;
0x001BC3        0024000F                 r0 = r2 + Null;
0x001BC4        0035000F                 r1 = r3 + Null;
0x001BC5        E1F0FFDE                 call $kal_float_lib.recip;
0x001BC6        0042000F                 r2 = r0 + Null;
0x001BC7        0053000F                 r3 = r1 + Null;
0x001BC8        F104000C                 popm <r0, r1>;
0x001BC9        E1F0FFC5                 call $kal_float_lib.mul;
0x001BCA        F1040030                 popm <r2, r3>;
0x001BCB        DDF0FF3E                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.rsqrt>
0x001BCC        F3D00000                 push rLink;
0x001BCD        0002000F                 Null = r0 + Null;
0x001BCE        DD40FF36                 if NEG jump $kal_float_lib.__zero.jump_entry;
0x001BCF        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x001BD0        0062000F                 r4 = r0 + Null;
0x001BD1        0073000F                 r5 = r1 + Null;
0x001BD2        E482003F                 r6 = r0 - 1;
0x001BD3        0093000F                 r7 = r1 + Null;
0x001BD4        E466003F                 r4 = r4 - 1;
0x001BD5        FD00007F 8177FFFF        r5 = r5 AND 0x7fffff;
0x001BD7        8D66000E                 r4 = r4 LSHIFT 14;
0x001BD8        8D770077                 r5 = r5 LSHIFT -9;
0x001BD9        87670000                 r4 = r4 OR r5;
0x001BDA        FD00005F 01703759        r5 = Null + 6240089;
0x001BDC        2067006F                 r4 = r5 - r4;
0x001BDD        8D760008                 r5 = r4 LSHIFT 8;
0x001BDE        FD000080 85770000        r5 = r5 OR 0x800000;
0x001BE0        8D660071                 r4 = r4 LSHIFT -15;
0x001BE1        E466002F                 r4 = r4 + 1;
0x001BE2        01C00003                 r10 = Null + 3;
0x001BE3        E5F00014                 do $kal_float_lib._rsqrt_iteration_loop;
0x001BE4        0026000F                 r0 = r4 + Null;
0x001BE5        0037000F                 r1 = r5 + Null;
0x001BE6        0046000F                 r2 = r4 + Null;
0x001BE7        0057000F                 r3 = r5 + Null;
0x001BE8        E1F0FFA6                 call $kal_float_lib.mul;
0x001BE9        0048000F                 r2 = r6 + Null;
0x001BEA        0059000F                 r3 = r7 + Null;
0x001BEB        E1F0FFA3                 call $kal_float_lib.mul;
0x001BEC        0042000F                 r2 = r0 + Null;
0x001BED        0053000F                 r3 = r1 + Null;
0x001BEE        01200080                 r0 = Null + 128;
0x001BEF        FD0000C0 01300000        r1 = Null + -4194304;
0x001BF1        E1F0FF94                 call $kal_float_lib.sub;
0x001BF2        0046000F                 r2 = r4 + Null;
0x001BF3        0057000F                 r3 = r5 + Null;
0x001BF4        E1F0FF9A                 call $kal_float_lib.mul;
0x001BF5        0062000F                 r4 = r0 + Null;
0x001BF6        0073000F                 r5 = r1 + Null;

 <$kal_float_lib._rsqrt_iteration_loop>
0x001BF7        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x001BF8        DDF0FF11                 jump $kal_float_lib.__renorm.jump_entry;

 <$M.frame_proc_stream_configure.func>
0x001BF9        F3D00000                 push rLink;
0x001BFA        1950665A                 M[$M.frame_proc_stream_configure.if_struc_temp] = r3 + Null;
0x001BFB        D1250000                 r0 = M[r3 + 0];
0x001BFC        0070000F                 r5 = Null + Null;
0x001BFD        01550001                 r3 = r3 + 1;
0x001BFE        D035000F                 r1 = M[r3 + Null];
0x001BFF        83320000                 r1 = r1 AND r0;
0x001C00        01400004                 r2 = Null + 4;
0x001C01        01600004                 r4 = Null + 4;
0x001C02        8004003F                 Null = r2 AND r1;
0x001C03        00600000                 if EQ r4 = Null + Null;
0x001C04        87760000                 r5 = r5 OR r4;
0x001C05        01400001                 r2 = Null + 1;
0x001C06        E460002F                 r4 = Null + 1;
0x001C07        8004003F                 Null = r2 AND r1;
0x001C08        00600000                 if EQ r4 = Null + Null;
0x001C09        87760000                 r5 = r5 OR r4;
0x001C0A        01400040                 r2 = Null + 64;
0x001C0B        01600040                 r4 = Null + 64;
0x001C0C        8004003F                 Null = r2 AND r1;
0x001C0D        00600000                 if EQ r4 = Null + Null;
0x001C0E        87760000                 r5 = r5 OR r4;
0x001C0F        01400008                 r2 = Null + 8;
0x001C10        01600008                 r4 = Null + 8;
0x001C11        8004003F                 Null = r2 AND r1;
0x001C12        00600000                 if EQ r4 = Null + Null;
0x001C13        87760000                 r5 = r5 OR r4;
0x001C14        01400002                 r2 = Null + 2;
0x001C15        01600002                 r4 = Null + 2;
0x001C16        8004003F                 Null = r2 AND r1;
0x001C17        00600000                 if EQ r4 = Null + Null;
0x001C18        87760000                 r5 = r5 OR r4;
0x001C19        19706646                 M[$music_example.DAC_IF_Connections] = r5 + Null;
0x001C1A        0070000F                 r5 = Null + Null;
0x001C1B        D035000F                 r1 = M[r3 + Null];
0x001C1C        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x001C1E        83320000                 r1 = r1 AND r0;
0x001C1F        01400004                 r2 = Null + 4;
0x001C20        01600004                 r4 = Null + 4;
0x001C21        8004003F                 Null = r2 AND r1;
0x001C22        00600000                 if EQ r4 = Null + Null;
0x001C23        87760000                 r5 = r5 OR r4;
0x001C24        01400001                 r2 = Null + 1;
0x001C25        E460002F                 r4 = Null + 1;
0x001C26        8004003F                 Null = r2 AND r1;
0x001C27        00600000                 if EQ r4 = Null + Null;
0x001C28        87760000                 r5 = r5 OR r4;
0x001C29        01400010                 r2 = Null + 16;
0x001C2A        01600010                 r4 = Null + 16;
0x001C2B        8004003F                 Null = r2 AND r1;
0x001C2C        00600000                 if EQ r4 = Null + Null;
0x001C2D        87760000                 r5 = r5 OR r4;
0x001C2E        01400040                 r2 = Null + 64;
0x001C2F        01600040                 r4 = Null + 64;
0x001C30        8004003F                 Null = r2 AND r1;
0x001C31        00600000                 if EQ r4 = Null + Null;
0x001C32        87760000                 r5 = r5 OR r4;
0x001C33        01400008                 r2 = Null + 8;
0x001C34        01600008                 r4 = Null + 8;
0x001C35        8004003F                 Null = r2 AND r1;
0x001C36        00600000                 if EQ r4 = Null + Null;
0x001C37        87760000                 r5 = r5 OR r4;
0x001C38        01400002                 r2 = Null + 2;
0x001C39        01600002                 r4 = Null + 2;
0x001C3A        8004003F                 Null = r2 AND r1;
0x001C3B        00600000                 if EQ r4 = Null + Null;
0x001C3C        87760000                 r5 = r5 OR r4;
0x001C3D        01400020                 r2 = Null + 32;
0x001C3E        01600020                 r4 = Null + 32;
0x001C3F        8004003F                 Null = r2 AND r1;
0x001C40        00600000                 if EQ r4 = Null + Null;
0x001C41        87760000                 r5 = r5 OR r4;
0x001C42        19706647                 M[$music_example.I2S_IF_Connections] = r5 + Null;
0x001C43        0070000F                 r5 = Null + Null;
0x001C44        0950665A                 r3 = Null + M[$M.frame_proc_stream_configure.if_struc_temp];
0x001C45        01550003                 r3 = r3 + 3;
0x001C46        D035000F                 r1 = M[r3 + Null];
0x001C47        83320000                 r1 = r1 AND r0;
0x001C48        01400004                 r2 = Null + 4;
0x001C49        01600004                 r4 = Null + 4;
0x001C4A        8004003F                 Null = r2 AND r1;
0x001C4B        00600000                 if EQ r4 = Null + Null;
0x001C4C        87760000                 r5 = r5 OR r4;
0x001C4D        01400001                 r2 = Null + 1;
0x001C4E        E460002F                 r4 = Null + 1;
0x001C4F        8004003F                 Null = r2 AND r1;
0x001C50        00600000                 if EQ r4 = Null + Null;
0x001C51        87760000                 r5 = r5 OR r4;
0x001C52        01400040                 r2 = Null + 64;
0x001C53        01600040                 r4 = Null + 64;
0x001C54        8004003F                 Null = r2 AND r1;
0x001C55        00600000                 if EQ r4 = Null + Null;
0x001C56        87760000                 r5 = r5 OR r4;
0x001C57        01400008                 r2 = Null + 8;
0x001C58        01600008                 r4 = Null + 8;
0x001C59        8004003F                 Null = r2 AND r1;
0x001C5A        00600000                 if EQ r4 = Null + Null;
0x001C5B        87760000                 r5 = r5 OR r4;
0x001C5C        01400002                 r2 = Null + 2;
0x001C5D        01600002                 r4 = Null + 2;
0x001C5E        8004003F                 Null = r2 AND r1;
0x001C5F        00600000                 if EQ r4 = Null + Null;
0x001C60        87760000                 r5 = r5 OR r4;
0x001C61        19709646                 M[$music_example.SPDIF_IF_Connections] = r5 + Null;
0x001C62        0950665A                 r3 = Null + M[$M.frame_proc_stream_configure.if_struc_temp];
0x001C63        01550001                 r3 = r3 + 1;
0x001C64        D035000F                 r1 = M[r3 + Null];
0x001C65        01400004                 r2 = Null + 4;
0x001C66        85440008                 r2 = r2 OR 0x8;
0x001C67        E460002F                 r4 = Null + 1;
0x001C68        8004003F                 Null = r2 AND r1;
0x001C69        00600000                 if EQ r4 = Null + Null;
0x001C6A        19609659                 M[$DAC_conn_aux] = r4 + Null;
0x001C6B        01400001                 r2 = Null + 1;
0x001C6C        85440002                 r2 = r2 OR 0x2;
0x001C6D        85440040                 r2 = r2 OR 0x40;
0x001C6E        E460002F                 r4 = Null + 1;
0x001C6F        8004003F                 Null = r2 AND r1;
0x001C70        00600000                 if EQ r4 = Null + Null;
0x001C71        19606659                 M[$DAC_conn_main] = r4 + Null;
0x001C72        01400001                 r2 = Null + 1;
0x001C73        8002004F                 Null = r0 AND r2;
0x001C74        DD000004                 if EQ jump $M.frame_proc_stream_configure.no_pri_left;
0x001C75        0130641D                 r1 = Null + 25629;
0x001C76        19309428                 M[0xff9428] = r1 + Null;
0x001C77        DDF00003                 jump $M.frame_proc_stream_configure.check_pri_right;

 <$M.frame_proc_stream_configure.no_pri_left>
0x001C78        19009428                 M[0xff9428] = Null + Null;
0x001C79        19009627                 M[0xff9627] = Null + Null;

 <$M.frame_proc_stream_configure.check_pri_right>
0x001C7A        01400002                 r2 = Null + 2;
0x001C7B        8002004F                 Null = r0 AND r2;
0x001C7C        DD000004                 if EQ jump $M.frame_proc_stream_configure.no_pri_right;
0x001C7D        013093F2                 r1 = Null + -27662;
0x001C7E        19309429                 M[0xff9429] = r1 + Null;
0x001C7F        DDF00003                 jump $M.frame_proc_stream_configure.xover_config;

 <$M.frame_proc_stream_configure.no_pri_right>
0x001C80        19009429                 M[0xff9429] = Null + Null;
0x001C81        1900662A                 M[0x662a] = Null + Null;

 <$M.frame_proc_stream_configure.xover_config>
0x001C82        01400010                 r2 = Null + 16;
0x001C83        8002004F                 Null = r0 AND r2;
0x001C84        DD00000E                 if EQ jump $M.frame_proc_stream_configure.no_sec_left;
0x001C85        0130642A                 r1 = Null + 25642;
0x001C86        1930942A                 M[0xff942a] = r1 + Null;
0x001C87        013064FF                 r1 = Null + 25855;
0x001C88        FD0000FF 193037FC        M[0xff37fc] = r1 + Null;
0x001C8A        FD0000FF 01303706        r1 = Null + -51450;
0x001C8C        FD0000FF 193037FD        M[0xff37fd] = r1 + Null;
0x001C8E        FD0000FF 013035EE        r1 = Null + -51730;
0x001C90        193064A9                 M[0x64a9] = r1 + Null;
0x001C91        DDF00008                 jump $M.frame_proc_stream_configure.check_sec_right;

 <$M.frame_proc_stream_configure.no_sec_left>
0x001C92        1900942A                 M[0xff942a] = Null + Null;
0x001C93        FD0000FF 190037FC        M[0xff37fc] = Null + Null;
0x001C95        FD0000FF 190037FD        M[0xff37fd] = Null + Null;
0x001C97        190064A9                 M[0x64a9] = Null + Null;
0x001C98        1900662C                 M[0x662c] = Null + Null;

 <$M.frame_proc_stream_configure.check_sec_right>
0x001C99        01400020                 r2 = Null + 32;
0x001C9A        8002004F                 Null = r0 AND r2;
0x001C9B        DD00000E                 if EQ jump $M.frame_proc_stream_configure.no_sec_right;
0x001C9C        013093FF                 r1 = Null + -27649;
0x001C9D        1930942B                 M[0xff942b] = r1 + Null;
0x001C9E        013064FF                 r1 = Null + 25855;
0x001C9F        FD0000FF 193037FC        M[0xff37fc] = r1 + Null;
0x001CA1        FD0000FF 01303706        r1 = Null + -51450;
0x001CA3        FD0000FF 193037FD        M[0xff37fd] = r1 + Null;
0x001CA5        FD0000FF 0130360E        r1 = Null + -51698;
0x001CA7        193064AA                 M[0x64aa] = r1 + Null;
0x001CA8        DDF00008                 jump $M.frame_proc_stream_configure.aux_config;

 <$M.frame_proc_stream_configure.no_sec_right>
0x001CA9        1900942B                 M[0xff942b] = Null + Null;
0x001CAA        FD0000FF 190037FC        M[0xff37fc] = Null + Null;
0x001CAC        FD0000FF 190037FD        M[0xff37fd] = Null + Null;
0x001CAE        190064AA                 M[0x64aa] = Null + Null;
0x001CAF        1900962B                 M[0xff962b] = Null + Null;

 <$M.frame_proc_stream_configure.aux_config>
0x001CB0        01400004                 r2 = Null + 4;
0x001CB1        85440008                 r2 = r2 OR 0x8;
0x001CB2        8034002F                 r1 = r2 AND r0;
0x001CB3        DD000015                 if EQ jump $M.frame_proc_stream_configure.no_aux;
0x001CB4        E450002F                 r3 = Null + 1;
0x001CB5        19509655                 M[$M.system_config.data.uses_aux_out] = r3 + Null;
0x001CB6        01600004                 r4 = Null + 4;
0x001CB7        2060006F                 r4 = Null - r4;
0x001CB8        8F460000                 r2 = r2 LSHIFT r4;
0x001CB9        8F360000                 r1 = r1 LSHIFT r4;
0x001CBA        2034003F                 r1 = r2 - r1;
0x001CBB        DD100003                 if NE jump $M.frame_proc_stream_configure.check_left_aux;
0x001CBC        19006656                 M[$M.system_config.data.aux_downmix] = Null + Null;
0x001CBD        DDF0000E                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.check_left_aux>
0x001CBE        E403003F                 Null = r1 - 1;
0x001CBF        DD100005                 if NE jump $M.frame_proc_stream_configure.check_right_aux;
0x001CC0        19506656                 M[$M.system_config.data.aux_downmix] = r3 + Null;
0x001CC1        01306437                 r1 = Null + 25655;
0x001CC2        19306507                 M[0x6507] = r1 + Null;
0x001CC3        DDF00008                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.check_right_aux>
0x001CC4        19506656                 M[$M.system_config.data.aux_downmix] = r3 + Null;
0x001CC5        0130940C                 r1 = Null + -27636;
0x001CC6        19306507                 M[0x6507] = r1 + Null;
0x001CC7        DDF00004                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.no_aux>
0x001CC8        19009655                 M[$M.system_config.data.uses_aux_out] = Null + Null;
0x001CC9        1900662E                 M[0x662e] = Null + Null;
0x001CCA        1900962D                 M[0xff962d] = Null + Null;

 <$M.frame_proc_stream_configure.wired_sub_config>
0x001CCB        01400040                 r2 = Null + 64;
0x001CCC        8004002F                 Null = r2 AND r0;
0x001CCD        DD000011                 if EQ jump $M.frame_proc_stream_configure.no_wired_sub;
0x001CCE        01306444                 r1 = Null + 25668;
0x001CCF        1930942D                 M[0xff942d] = r1 + Null;
0x001CD0        193062C5                 M[$M.system_config.data.wired_sub_channel_vol_struc] = r1 + Null;
0x001CD1        193062C6                 M[0x62c6] = r1 + Null;
0x001CD2        E450002F                 r3 = Null + 1;
0x001CD3        19509656                 M[$M.system_config.data.uses_wired_sub] = r3 + Null;
0x001CD4        01500002                 r3 = Null + 2;
0x001CD5        195064A6                 M[$M.system_config.data.spkr_ctrl_coefs] = r3 + Null;
0x001CD6        1900650E                 M[0x650e] = Null + Null;
0x001CD7        190094CC                 M[0xff94cc] = Null + Null;
0x001CD8        19006514                 M[0x6514] = Null + Null;
0x001CD9        190094D2                 M[0xff94d2] = Null + Null;
0x001CDA        1900651A                 M[0x651a] = Null + Null;
0x001CDB        190094D8                 M[0xff94d8] = Null + Null;
0x001CDC        190000E4                 M[$M.main.samples_latency_measure] = Null + Null;
0x001CDD        DDF00005                 jump $M.frame_proc_stream_configure.done;

 <$M.frame_proc_stream_configure.no_wired_sub>
0x001CDE        190062C5                 M[$M.system_config.data.wired_sub_channel_vol_struc] = Null + Null;
0x001CDF        190062C6                 M[0x62c6] = Null + Null;
0x001CE0        19009656                 M[$M.system_config.data.uses_wired_sub] = Null + Null;
0x001CE1        19009629                 M[0xff9629] = Null + Null;

 <$M.frame_proc_stream_configure.done>
0x001CE2        DDF0F790                 jump $pop_rLink_and_rts;

 <$cbops.dac_av_copy_m>
0x001CE3        E480002F                 r6 = Null + 1;
0x001CE4        DDF00002                 jump $M.cbops.dac_av_copy.func;

 <$cbops.dac_av_copy>
0x001CE5        01800000                 r6 = Null + 0;

 <$M.cbops.dac_av_copy.func>
0x001CE6        F3D00000                 push rLink;
0x001CE7        512A0001                 I2 = r8 + 1;
0x001CE8        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001CE9        03003800                 Null = Null + Null, r1 = M[I2,0];
0x001CEA        1930668D                 M[$M.cbops.av_copy.control_cbuffer] = r1 + Null;
0x001CEB        5B220000                 I2 = I2 + r0;
0x001CEC        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001CED        03003800                 Null = Null + Null, r1 = M[I2,0];
0x001CEE        1930968C                 M[$M.cbops.av_copy.control_port] = r1 + Null;
0x001CEF        017065A6                 r5 = Null + 26022;
0x001CF0        0008000F                 Null = r6 + Null;
0x001CF1        DD000002                 if EQ jump $M.cbops.dac_av_copy.init_done;
0x001CF2        4872002F                 r5 = I2 + r0;

 <$M.cbops.dac_av_copy.init_done>
0x001CF3        1970668E                 M[$M.cbops.dac_av_copy.dac_av_struct] = r5 + Null;
0x001CF4        0920968C                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001CF5        E1F0F74A                 call $cbuffer.is_it_enabled;
0x001CF6        DD000018                 if EQ jump $M.cbops.dac_av_copy.end_of_averaging;
0x001CF7        0920668D                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001CF8        E1F0F718                 call $cbuffer.calc_amount_data;
0x001CF9        1920968D                 M[$M.cbops.dac_av_copy.buffer_level] = r0 + Null;
0x001CFA        0920968C                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001CFB        E1F0F705                 call $cbuffer.calc_amount_space;
0x001CFC        9144007F                 r2 = r2 ASHIFT -1;
0x001CFD        D1370001                 r1 = M[r5 + 1];
0x001CFE        2032003F                 r1 = r0 - r1;
0x001CFF        D5270001                 M[r5 + 1] = r0;
0x001D00        D1270004                 r0 = M[r5 + 4];
0x001D01        03320000                 r1 = r1 + r0;
0x001D02        00330044                 if NEG r1 = r1 + r2;
0x001D03        DD40000B                 if NEG jump $M.cbops.dac_av_copy.end_of_averaging;
0x001D04        91230008                 r0 = r1 ASHIFT 8;
0x001D05        D1370000                 r1 = M[r5 + 0];
0x001D06        00320000                 if EQ r1 = r0 + Null;
0x001D07        FD000006 95226666        r0 = r0 * 0.04999995231628418 (frac);
0x001D09        FD000079 9533999A        r1 = r1 * 0.95000004768371582 (frac);
0x001D0B        03320000                 r1 = r1 + r0;
0x001D0C        D5370000                 M[r5 + 0] = r1;
0x001D0D        DDF00001                 jump $M.cbops.dac_av_copy.end_of_averaging;

 <$M.cbops.dac_av_copy.end_of_averaging>
0x001D0E        1900668C                 M[$cbops.amount_written] = Null + Null;
0x001D0F        E1F0ECC5                 call $cbops.copy;
0x001D10        0970668E                 r5 = Null + M[$M.cbops.dac_av_copy.dac_av_struct];
0x001D11        0920668C                 r0 = Null + M[$cbops.amount_written];
0x001D12        D5270004                 M[r5 + 4] = r0;
0x001D13        0920968C                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001D14        E1F0F6EC                 call $cbuffer.calc_amount_space;
0x001D15        9144007F                 r2 = r2 ASHIFT -1;
0x001D16        2024002F                 r0 = r2 - r0;
0x001D17        D1170000                 rMAC = M[r5 + 0];
0x001D18        91110078                 rMAC = rMAC ASHIFT -8 (56bit);
0x001D19        0900968D                 Null = Null + M[$M.cbops.dac_av_copy.buffer_level];
0x001D1A        DD000005                 if EQ jump $M.cbops.dac_av_copy.zero_input_level;
0x001D1B        2091002F                 r7 = rMAC - r0;
0x001D1C        DDB0000C                 if LT jump $M.cbops.dac_av_copy.No_need_to_insert;
0x001D1D        0091000F                 r7 = rMAC + Null;
0x001D1E        DDF00003                 jump $M.cbops.dac_av_copy.update_silence_buf;

 <$M.cbops.dac_av_copy.zero_input_level>
0x001D1F        6592006E                 r7 = 110 - r0;
0x001D20        DD400008                 if NEG jump $M.cbops.dac_av_copy.No_need_to_insert;

 <$M.cbops.dac_av_copy.update_silence_buf>
0x001D21        E1F00030                 call $M.cbops.dac_av_copy.fill_input_buffers_with_silence;
0x001D22        1900668C                 M[$cbops.amount_written] = Null + Null;
0x001D23        E1F0ECB1                 call $cbops.copy;
0x001D24        0970668E                 r5 = Null + M[$M.cbops.dac_av_copy.dac_av_struct];
0x001D25        D1270004                 r0 = M[r5 + 4];
0x001D26        0922668C                 r0 = r0 + M[$cbops.amount_written];
0x001D27        D5270004                 M[r5 + 4] = r0;

 <$M.cbops.dac_av_copy.No_need_to_insert>
0x001D28        0920668D                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001D29        E1F0F6E7                 call $cbuffer.calc_amount_data;
0x001D2A        0082000F                 r6 = r0 + Null;
0x001D2B        0920668D                 r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001D2C        E1F0F703                 call $cbuffer.get_read_address_and_size;
0x001D2D        0092000F                 r7 = r0 + Null;
0x001D2E        D1570003                 r3 = M[r5 + 3];
0x001D2F        2105000A                 Null = r3 - 10;
0x001D30        DD00000C                 if EQ jump $M.cbops.dac_av_copy.check_read_pointer_only;
0x001D31        01500000                 r3 = Null + 0;
0x001D32        D1470002                 r2 = M[r5 + 2];
0x001D33        2049004F                 r2 = r7 - r2;
0x001D34        DD100006                 if NE jump $M.cbops.dac_av_copy.reset_counter;
0x001D35        8D43007F                 r2 = r1 LSHIFT -1;
0x001D36        2008004F                 Null = r6 - r2;
0x001D37        DD400003                 if NEG jump $M.cbops.dac_av_copy.reset_counter;
0x001D38        D1570003                 r3 = M[r5 + 3];
0x001D39        E455002F                 r3 = r3 + 1;

 <$M.cbops.dac_av_copy.reset_counter>
0x001D3A        D5570003                 M[r5 + 3] = r3;
0x001D3B        DDF00014                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.check_read_pointer_only>
0x001D3C        D1470002                 r2 = M[r5 + 2];
0x001D3D        2049004F                 r2 = r7 - r2;
0x001D3E        DD000003                 if EQ jump $M.cbops.dac_av_copy.remove_samples_from_cbuffer;
0x001D3F        D5070003                 M[r5 + 3] = Null;
0x001D40        DDF0000F                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.remove_samples_from_cbuffer>
0x001D41        D1CA0001                 r10 = M[r8 + 1];
0x001D42        512A0002                 I2 = r8 + 2;
0x001D43        E5F00004                 do $M.cbops.dac_av_copy.find_amount_to_discard_loop;
0x001D44        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001D45        E1F0F6CB                 call $cbuffer.calc_amount_data;
0x001D46        E482005F                 r6 = MIN r0;

 <$M.cbops.dac_av_copy.find_amount_to_discard_loop>
0x001D47        D1BA0001                 r9 = M[r8 + 1];
0x001D48        512A0002                 I2 = r8 + 2;

 <$M.cbops.dac_av_copy.discard_loop>
0x001D49        E4BB003F                 r9 = r9 - 1;
0x001D4A        DD400005                 if NEG jump $M.cbops.dac_av_copy.remove_end;
0x001D4B        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001D4C        00C8000F                 r10 = r6 + Null;
0x001D4D        E1F0F646                 call $cbuffer.advance_read_ptr;
0x001D4E        DDF0FFFB                 jump $M.cbops.dac_av_copy.discard_loop;

 <$M.cbops.dac_av_copy.remove_end>
0x001D4F        D5970002                 M[r5 + 2] = r7;
0x001D50        DDF0F722                 jump $pop_rLink_and_rts;

 <$M.cbops.dac_av_copy.fill_input_buffers_with_silence>
0x001D51        F3D00000                 push rLink;
0x001D52        D1CA0001                 r10 = M[r8 + 1];
0x001D53        512A0002                 I2 = r8 + 2;
0x001D54        E5F00006                 do $M.cbops.dac_av_copy.find_min_space_loop;
0x001D55        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001D56        E1F0F6BA                 call $cbuffer.calc_amount_data;
0x001D57        65220078                 r0 = 120 - r0;
0x001D58        00200004                 if NEG r0 = Null + Null;
0x001D59        E492005F                 r7 = MIN r0;

 <$M.cbops.dac_av_copy.find_min_space_loop>
0x001D5A        0009000F                 Null = r7 + Null;
0x001D5B        DD00F717                 if EQ jump $pop_rLink_and_rts;
0x001D5C        D16A0001                 r4 = M[r8 + 1];
0x001D5D        512A0002                 I2 = r8 + 2;

 <$M.cbops.dac_av_copy.silence_insert_loop>
0x001D5E        03002800                 Null = Null + Null, r0 = M[I2,0];
0x001D5F        E1F0F6D0                 call $cbuffer.get_read_address_and_size;
0x001D60        5000002F                 I0 = Null + r0;
0x001D61        50C0003F                 L0 = Null + r1;
0x001D62        E4C9003F                 r10 = r7 - 1;
0x001D63        03002300                 Null = Null + Null, r0 = M[I0,-1];
0x001D64        01200000                 r0 = Null + 0;
0x001D65        E5F00002                 do $M.cbops.dac_av_copy.insert_silence_loop;
0x001D66        0300A300                 Null = Null + Null, M[I0,-1] = r0;

 <$M.cbops.dac_av_copy.insert_silence_loop>
0x001D67        0300A000                 Null = Null + Null, M[I0,0] = r0;
0x001D68        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001D69        4430000F                 r1 = Null + I0;
0x001D6A        E1F0F6DF                 call $cbuffer.set_read_address;
0x001D6B        E466003F                 r4 = r4 - 1;
0x001D6C        DDC0FFF2                 if GT jump $M.cbops.dac_av_copy.silence_insert_loop;
0x001D6D        51C00000                 L0 = Null + 0;
0x001D6E        DDF0F704                 jump $pop_rLink_and_rts;

 <$sbcdec.frame_decode>
0x001D6F        F3D00000                 push rLink;
0x001D70        1970005E                 M[$sbcdec.codec_struc] = r5 + Null;
0x001D71        D1B70005                 r9 = M[r5 + 5];

 <$M.sbcdec.frame_decode.reattempt_decode>
0x001D72        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x001D73        D1270000                 r0 = M[r5 + 0];
0x001D74        E1F0F6BB                 call $cbuffer.get_read_address_and_size;
0x001D75        5000002F                 I0 = Null + r0;
0x001D76        50C0003F                 L0 = Null + r1;
0x001D77        D1270000                 r0 = M[r5 + 0];
0x001D78        E1F0F698                 call $cbuffer.calc_amount_data;
0x001D79        00C2002F                 r10 = r0 + r0;
0x001D7A        21CC0002                 r10 = r10 - 2;
0x001D7B        DDD0001D                 if LE jump $M.sbcdec.frame_decode.buffer_underflow;
0x001D7C        006C000F                 r4 = r10 + Null;
0x001D7D        E1F00757                 call $sbcdec.find_sync;
0x001D7E        21080063                 Null = r6 - 99;
0x001D7F        DD000019                 if EQ jump $M.sbcdec.frame_decode.buffer_underflow;
0x001D80        236C0000                 r4 = r4 - r10;
0x001D81        D1270003                 r0 = M[r5 + 3];
0x001D82        21020002                 Null = r0 - 2;
0x001D83        DD00000F                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x001D84        D1270001                 r0 = M[r5 + 1];
0x001D85        DD000005                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001D86        E1F0F67A                 call $cbuffer.calc_amount_space;
0x001D87        21020080                 Null = r0 - 128;
0x001D88        DD500002                 if POS jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001D89        DDF00006                 jump $M.sbcdec.frame_decode.not_enough_data_exit;

 <$M.sbcdec.frame_decode.enough_output_space_left>
0x001D8A        D1270002                 r0 = M[r5 + 2];
0x001D8B        DD000007                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x001D8C        E1F0F674                 call $cbuffer.calc_amount_space;
0x001D8D        21020080                 Null = r0 - 128;
0x001D8E        DD500004                 if POS jump $M.sbcdec.frame_decode.enough_output_space_right;

 <$M.sbcdec.frame_decode.not_enough_data_exit>
0x001D8F        01200002                 r0 = Null + 2;
0x001D90        D5270003                 M[r5 + 3] = r0;
0x001D91        DDF00058                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.enough_output_space_right>
0x001D92        D1270000                 r0 = M[r5 + 0];
0x001D93        E1F0F67D                 call $cbuffer.calc_amount_data;
0x001D94        03220000                 r0 = r0 + r0;
0x001D95        23260000                 r0 = r0 - r4;
0x001D96        21020016                 Null = r0 - 22;
0x001D97        DD500008                 if POS jump $M.sbcdec.frame_decode.no_buffer_underflow;

 <$M.sbcdec.frame_decode.buffer_underflow>
0x001D98        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x001D99        E420002F                 r0 = Null + 1;
0x001D9A        D5270003                 M[r5 + 3] = r0;
0x001D9B        D1270000                 r0 = M[r5 + 0];
0x001D9C        4430000F                 r1 = Null + I0;
0x001D9D        E1F0F6AC                 call $cbuffer.set_read_address;
0x001D9E        DDF0004B                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.no_buffer_underflow>
0x001D9F        D52B0037                 M[r9 + 55] = r0;
0x001DA0        E1F00225                 call $sbcdec.read_frame_header;
0x001DA1        D12B0039                 r0 = M[r9 + 57];
0x001DA2        D13B0037                 r1 = M[r9 + 55];
0x001DA3        2002003F                 Null = r0 - r1;
0x001DA4        DDD00004                 if LE jump $M.sbcdec.frame_decode.enough_frame_data;
0x001DA5        5802000F                 I0 = I2 + Null;
0x001DA6        D58B003B                 M[r9 + 59] = r6;
0x001DA7        DDF0FFF1                 jump $M.sbcdec.frame_decode.buffer_underflow;

 <$M.sbcdec.frame_decode.enough_frame_data>
0x001DA8        D10B0036                 Null = M[r9 + 54];
0x001DA9        DD100007                 if NE jump $M.sbcdec.frame_decode.crc_fail_or_corrupt;
0x001DAA        E1F00762                 call $sbcdec.read_scale_factors;
0x001DAB        D12B0023                 r0 = M[r9 + 35];
0x001DAC        D13B0024                 r1 = M[r9 + 36];
0x001DAD        23230000                 r0 = r0 - r1;
0x001DAE        812200FF                 r0 = r0 AND 0xff;
0x001DAF        DD00000B                 if EQ jump $M.sbcdec.frame_decode.crc_correct;

 <$M.sbcdec.frame_decode.crc_fail_or_corrupt>
0x001DB0        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x001DB1        4430000F                 r1 = Null + I0;
0x001DB2        D1270000                 r0 = M[r5 + 0];
0x001DB3        E1F0F696                 call $cbuffer.set_read_address;
0x001DB4        51C00000                 L0 = Null + 0;
0x001DB5        D12B003A                 r0 = M[r9 + 58];
0x001DB6        DD00FFBC                 if EQ jump $M.sbcdec.frame_decode.reattempt_decode;
0x001DB7        01200005                 r0 = Null + 5;
0x001DB8        D5270003                 M[r5 + 3] = r0;
0x001DB9        DDF00030                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.crc_correct>
0x001DBA        E1F0FC3E                 call $sbc.calc_bit_allocation;
0x001DBB        E1F00694                 call $sbcdec.read_audio_samples;
0x001DBC        E1F007BB                 call $sbcdec.byte_align;
0x001DBD        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x001DBE        4430000F                 r1 = Null + I0;
0x001DBF        D1270000                 r0 = M[r5 + 0];
0x001DC0        E1F0F689                 call $cbuffer.set_read_address;
0x001DC1        51C00000                 L0 = Null + 0;
0x001DC2        D1270003                 r0 = M[r5 + 3];
0x001DC3        21020000                 Null = r0 - 0;
0x001DC4        DD10001F                 if NE jump $M.sbcdec.frame_decode.all_done;
0x001DC5        E1F00401                 call $sbcdec.sample_reconstruction;
0x001DC6        D12B001E                 r0 = M[r9 + 30];
0x001DC7        21020003                 Null = r0 - 3;
0x001DC8        E10005C2                 if EQ call $sbcdec.joint_stereo_decode;
0x001DC9        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x001DCA        D1270001                 r0 = M[r5 + 1];
0x001DCB        DD00000B                 if EQ jump $M.sbcdec.frame_decode.no_left_buffer;
0x001DCC        E1F0F668                 call $cbuffer.get_write_address_and_size;
0x001DCD        5010002F                 I1 = Null + r0;
0x001DCE        50D0003F                 L1 = Null + r1;
0x001DCF        01700000                 r5 = Null + 0;
0x001DD0        E1F00148                 call $sbcdec.synthesis_subband_filter;
0x001DD1        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x001DD2        4430001F                 r1 = Null + I1;
0x001DD3        D1270001                 r0 = M[r5 + 1];
0x001DD4        E1F0F679                 call $cbuffer.set_write_address;
0x001DD5        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.no_left_buffer>
0x001DD6        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x001DD7        D1270002                 r0 = M[r5 + 2];
0x001DD8        DD00000B                 if EQ jump $M.sbcdec.frame_decode.all_done;
0x001DD9        E1F0F65B                 call $cbuffer.get_write_address_and_size;
0x001DDA        5010002F                 I1 = Null + r0;
0x001DDB        50D0003F                 L1 = Null + r1;
0x001DDC        E470002F                 r5 = Null + 1;
0x001DDD        E1F0013B                 call $sbcdec.synthesis_subband_filter;
0x001DDE        0970005E                 r5 = Null + M[$sbcdec.codec_struc];
0x001DDF        4430001F                 r1 = Null + I1;
0x001DE0        D1270002                 r0 = M[r5 + 2];
0x001DE1        E1F0F66C                 call $cbuffer.set_write_address;
0x001DE2        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.all_done>
0x001DE3        01200000                 r0 = Null + 0;
0x001DE4        D5270003                 M[r5 + 3] = r0;
0x001DE5        D12B001D                 r0 = M[r9 + 29];
0x001DE6        D13B0021                 r1 = M[r9 + 33];
0x001DE7        9B230000                 r0 = r0 * r1 (int);
0x001DE8        D5270004                 M[r5 + 4] = r0;

 <$M.sbcdec.frame_decode.exit>
0x001DE9        51C00000                 L0 = Null + 0;
0x001DEA        DDF0F688                 jump $pop_rLink_and_rts;

 <$codec.av_decode>
0x001DEB        F3D00000                 push rLink;
0x001DEC        19706692                 M[$M.codec_av_decode.data_ptr] = r5 + Null;
0x001DED        E420002F                 r0 = Null + 1;
0x001DEE        D5270006                 M[r5 + 6] = r0;
0x001DEF        0980FE71                 r6 = Null + M[0xfffe71];
0x001DF0        D1270013                 r0 = M[r5 + 19];
0x001DF1        D5870013                 M[r5 + 19] = r6;
0x001DF2        23820000                 r6 = r6 - r0;
0x001DF3        20800084                 if NEG r6 = Null - r6;
0x001DF4        D1270003                 r0 = M[r5 + 3];
0x001DF5        E1F0F63F                 call $cbuffer.get_write_address_and_size;
0x001DF6        D137000F                 r1 = M[r5 + 15];
0x001DF7        D527000F                 M[r5 + 15] = r0;
0x001DF8        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x001DFA        D1570010                 r3 = M[r5 + 16];
0x001DFB        0045008F                 r2 = r3 + r6;
0x001DFC        00410006                 if V r2 = rMAC + Null;
0x001DFD        2093002F                 r7 = r1 - r0;
0x001DFE        00400001                 if NE r2 = Null + Null;
0x001DFF        D5470010                 M[r5 + 16] = r2;
0x001E00        D107000D                 Null = M[r5 + 13];
0x001E01        DD000007                 if EQ jump $M.codec_av_decode.no_pause_handling;
0x001E02        FD000002 210449F0        Null = r2 - 150000;
0x001E04        DD400004                 if NEG jump $M.codec_av_decode.no_pause_handling;
0x001E05        FD000002 210549F0        Null = r3 - 150000;
0x001E07        DD40003A                 if NEG jump $M.codec_av_decode.cleare_buffers;

 <$M.codec_av_decode.no_pause_handling>
0x001E08        D1070011                 Null = M[r5 + 17];
0x001E09        DD100023                 if NE jump $M.codec_av_decode.decoding_proc;

 <$M.codec_av_decode.process_stalled>
0x001E0A        E420002F                 r0 = Null + 1;
0x001E0B        D1370012                 r1 = M[r5 + 18];
0x001E0C        0004000F                 Null = r2 + Null;
0x001E0D        00320000                 if EQ r1 = r0 + Null;
0x001E0E        D5370012                 M[r5 + 18] = r1;
0x001E0F        DD000013                 if EQ jump $M.codec_av_decode.check_buf_level;
0x001E10        FD000001 21041170        Null = r2 - 70000;
0x001E12        DD400005                 if NEG jump $M.codec_av_decode.check_stall_time;
0x001E13        FD000001 21051170        Null = r3 - 70000;
0x001E15        DD400014                 if NEG jump $M.codec_av_decode.switchto_decode;
0x001E16        DDF0000C                 jump $M.codec_av_decode.check_buf_level;

 <$M.codec_av_decode.check_stall_time>
0x001E17        D1570014                 r3 = M[r5 + 20];
0x001E18        DD100005                 if NE jump $M.codec_av_decode.update_stall_timer;
0x001E19        0009000F                 Null = r7 + Null;
0x001E1A        E4550021                 if NE r3 = r3 + 1;
0x001E1B        D5570014                 M[r5 + 20] = r3;
0x001E1C        DDF00006                 jump $M.codec_av_decode.check_buf_level;

 <$M.codec_av_decode.update_stall_timer>
0x001E1D        0045008F                 r2 = r3 + r6;
0x001E1E        D5470014                 M[r5 + 20] = r2;
0x001E1F        FD000002 210422E0        Null = r2 - 140000;
0x001E21        DD500008                 if POS jump $M.codec_av_decode.switchto_decode;

 <$M.codec_av_decode.check_buf_level>
0x001E22        D1270003                 r0 = M[r5 + 3];
0x001E23        D1620000                 r4 = M[r0 + 0];
0x001E24        E1F0F5EC                 call $cbuffer.calc_amount_data;
0x001E25        D147000B                 r2 = M[r5 + 11];
0x001E26        97460000                 r2 = r2 * r4 (frac);
0x001E27        2002004F                 Null = r0 - r2;
0x001E28        DD400030                 if NEG jump $M.codec_av_decode.end;

 <$M.codec_av_decode.switchto_decode>
0x001E29        D5070012                 M[r5 + 18] = Null;
0x001E2A        E430002F                 r1 = Null + 1;
0x001E2B        D5370011                 M[r5 + 17] = r1;

 <$M.codec_av_decode.decoding_proc>
0x001E2C        D5070014                 M[r5 + 20] = Null;
0x001E2D        01200000                 r0 = Null + 0;
0x001E2E        D5270006                 M[r5 + 6] = r0;
0x001E2F        D1270000                 r0 = M[r5 + 0];
0x001E30        01770003                 r5 = r5 + 3;
0x001E31        E002000F                 call r0;
0x001E32        09706692                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001E33        D1370010                 r1 = M[r5 + 16];
0x001E34        D1270006                 r0 = M[r5 + 6];
0x001E35        21020000                 Null = r0 - 0;
0x001E36        DD100003                 if NE jump $M.codec_av_decode.check_not_enough_input_data;
0x001E37        00300000                 if EQ r1 = Null + Null;
0x001E38        D5370010                 M[r5 + 16] = r1;

 <$M.codec_av_decode.check_not_enough_input_data>
0x001E39        D1270006                 r0 = M[r5 + 6];
0x001E3A        E402003F                 Null = r0 - 1;
0x001E3B        DD10001D                 if NE jump $M.codec_av_decode.end;
0x001E3C        D1370010                 r1 = M[r5 + 16];
0x001E3D        D127000A                 r0 = M[r5 + 10];
0x001E3E        2003002F                 Null = r1 - r0;
0x001E3F        DD500018                 if POS jump $M.codec_av_decode.switchto_stall;
0x001E40        DDF00018                 jump $M.codec_av_decode.end;

 <$M.codec_av_decode.cleare_buffers>
0x001E41        D5070014                 M[r5 + 20] = Null;
0x001E42        E1F0F5E6                 call $block_interrupts;
0x001E43        D1370003                 r1 = M[r5 + 3];
0x001E44        D1230002                 r0 = M[r1 + 2];
0x001E45        D5230001                 M[r1 + 1] = r0;
0x001E46        D527000F                 M[r5 + 15] = r0;
0x001E47        D1370004                 r1 = M[r5 + 4];
0x001E48        D1230001                 r0 = M[r1 + 1];
0x001E49        D5230002                 M[r1 + 2] = r0;
0x001E4A        D1370005                 r1 = M[r5 + 5];
0x001E4B        D1230001                 r0 = M[r1 + 1];
0x001E4C        D5230002                 M[r1 + 2] = r0;
0x001E4D        01770003                 r5 = r5 + 3;
0x001E4E        D127FFFE                 r0 = M[r5 + -2];
0x001E4F        E0020001                 if NE call r0;
0x001E50        09706692                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001E51        D127000E                 r0 = M[r5 + 14];
0x001E52        E0020001                 if NE call r0;
0x001E53        09706692                 r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001E54        E420002F                 r0 = Null + 1;
0x001E55        19209692                 M[$master_reset_needed] = r0 + Null;
0x001E56        E1F0F5C2                 call $interrupt.unblock;

 <$M.codec_av_decode.switchto_stall>
0x001E57        D5070011                 M[r5 + 17] = Null;

 <$M.codec_av_decode.end>
0x001E58        DDF0F61A                 jump $pop_rLink_and_rts;

 <$create_sub_packet>
0x001E59        F3D00000                 push rLink;
0x001E5A        01203FFD                 r0 = Null + 16381;
0x001E5B        E1F0F5B5                 call $cbuffer.calc_amount_data;
0x001E5C        01400009                 r2 = Null + 9;
0x001E5D        20C2004F                 r10 = r0 - r2;
0x001E5E        DD50000D                 if POS jump $M.create_sub_packet.continue;
0x001E5F        20C000CF                 r10 = Null - r10;
0x001E60        01203FFD                 r0 = Null + 16381;
0x001E61        E1F0F5D3                 call $cbuffer.get_write_address_and_size;
0x001E62        5000002F                 I0 = Null + r0;
0x001E63        50C0003F                 L0 = Null + r1;
0x001E64        01200000                 r0 = Null + 0;
0x001E65        E5F00002                 do $M.create_sub_packet.zero_insertion;
0x001E66        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_insertion>
0x001E67        01203FFD                 r0 = Null + 16381;
0x001E68        4430000F                 r1 = Null + I0;
0x001E69        E1F0F5E4                 call $cbuffer.set_write_address;
0x001E6A        51C00000                 L0 = Null + 0;

 <$M.create_sub_packet.continue>
0x001E6B        012095ED                 r0 = Null + -27155;
0x001E6C        E1F0F5C8                 call $cbuffer.get_write_address_and_size;
0x001E6D        5000002F                 I0 = Null + r0;
0x001E6E        50C0003F                 L0 = Null + r1;
0x001E6F        01203FFD                 r0 = Null + 16381;
0x001E70        E1F0F5BF                 call $cbuffer.get_read_address_and_size;
0x001E71        5040002F                 I4 = Null + r0;
0x001E72        50E0003F                 L4 = Null + r1;
0x001E73        09C0965E                 r10 = Null + M[$sco_param_to_air_size];
0x001E74        91CC007F                 r10 = r10 ASHIFT -1;
0x001E75        FD000000 0120F5F5        r0 = Null + 62965;
0x001E77        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x001E78        0960966A                 r4 = Null + M[$M.create_sub_packet.packet_counter];
0x001E79        8126FFFF                 r0 = r4 AND 0xffff;
0x001E7A        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x001E7B        09206669                 r0 = Null + M[$wall_clock_adjustment];
0x001E7C        0922FE71                 r0 = r0 + M[0xfffe71];
0x001E7D        8D420070                 r2 = r0 LSHIFT -16;
0x001E7E        FD0000FF 81760000        r5 = r4 AND 0xff0000;
0x001E80        8D770078                 r5 = r5 LSHIFT -8;
0x001E81        0047004F                 r2 = r5 + r2;
0x001E82        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001E83        8142FFFF                 r2 = r0 AND 0xffff;
0x001E84        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001E85        0930965A                 r1 = Null + M[$sub_link_port];
0x001E86        FD00009D 2103800D        Null = r1 - -6455283;
0x001E88        DD00001E                 if EQ jump $M.create_sub_packet.write_l2cap_sub_data;
0x001E89        01400009                 r2 = Null + 9;
0x001E8A        01540004                 r3 = r2 + 4;
0x001E8B        205C005F                 r3 = r10 - r3;
0x001E8C        00C4000F                 r10 = r2 + Null;
0x001E8D        E5F00004                 do $M.create_sub_packet.copy_esco_sub_data_to_air;
0x001E8E        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001E8F        91220078                 r0 = r0 ASHIFT -8;
0x001E90        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_esco_sub_data_to_air>
0x001E91        00C5000F                 r10 = r3 + Null;
0x001E92        E5F00003                 do $M.create_sub_packet.zero_padding;
0x001E93        01200000                 r0 = Null + 0;
0x001E94        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.zero_padding>
0x001E95        0930665D                 r1 = Null + M[$sco_param_tesco];
0x001E96        21030006                 Null = r1 - 6;
0x001E97        DD100003                 if NE jump $M.create_sub_packet.update_read_addr;
0x001E98        E406003F                 Null = r4 - 1;
0x001E99        DD000004                 if EQ jump $M.create_sub_packet.dont_update_sub_1k2_read_ptrs;

 <$M.create_sub_packet.update_read_addr>
0x001E9A        01203FFD                 r0 = Null + 16381;
0x001E9B        4430004F                 r1 = Null + I4;
0x001E9C        E1F0F5AD                 call $cbuffer.set_read_address;

 <$M.create_sub_packet.dont_update_sub_1k2_read_ptrs>
0x001E9D        0930665D                 r1 = Null + M[$sco_param_tesco];
0x001E9E        21030006                 Null = r1 - 6;
0x001E9F        DD100006                 if NE jump $M.create_sub_packet.do_not_send_duplicates;
0x001EA0        E430002F                 r1 = Null + 1;
0x001EA1        E466002F                 r4 = r4 + 1;
0x001EA2        21060002                 Null = r4 - 2;
0x001EA3        00630001                 if NE r4 = r1 + Null;
0x001EA4        1960966A                 M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.do_not_send_duplicates>
0x001EA5        DDF00016                 jump $M.create_sub_packet.done;

 <$M.create_sub_packet.write_l2cap_sub_data>
0x001EA6        0920665B                 r0 = Null + M[$M.Subwoofer.playback_time];
0x001EA7        8D420070                 r2 = r0 LSHIFT -16;
0x001EA8        0030000F                 r1 = Null + Null;
0x001EA9        8D530070                 r3 = r1 LSHIFT -16;
0x001EAA        8D550008                 r3 = r3 LSHIFT 8;
0x001EAB        0045004F                 r2 = r3 + r2;
0x001EAC        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001EAD        8142FFFF                 r2 = r0 AND 0xffff;
0x001EAE        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001EAF        8143FFFF                 r2 = r1 AND 0xffff;
0x001EB0        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x001EB1        01C00012                 r10 = Null + 18;
0x001EB2        E5F00004                 do $M.create_sub_packet.copy_l2cap_sub_data_to_air;
0x001EB3        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001EB4        91220078                 r0 = r0 ASHIFT -8;
0x001EB5        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.create_sub_packet.copy_l2cap_sub_data_to_air>
0x001EB6        01203FFD                 r0 = Null + 16381;
0x001EB7        4430004F                 r1 = Null + I4;
0x001EB8        E1F0F591                 call $cbuffer.set_read_address;
0x001EB9        E466002F                 r4 = r4 + 1;
0x001EBA        1960966A                 M[$M.create_sub_packet.packet_counter] = r4 + Null;

 <$M.create_sub_packet.done>
0x001EBB        012095ED                 r0 = Null + -27155;
0x001EBC        4430000F                 r1 = Null + I0;
0x001EBD        E1F0F590                 call $cbuffer.set_write_address;
0x001EBE        51C00000                 L0 = Null + 0;
0x001EBF        51E00000                 L4 = Null + 0;
0x001EC0        DDF0F5B2                 jump $pop_rLink_and_rts;

 <$conn_init>
0x001EC1        F3D00000                 push rLink;
0x001EC2        0920006F                 r0 = Null + M[$app_config.io];
0x001EC3        21020005                 Null = r0 - 5;
0x001EC4        DD100018                 if NE jump $M.conn_init.skip_usb_conn_init;
0x001EC5        015005DC                 r3 = Null + 1500;
0x001EC6        01601000                 r4 = Null + 4096;
0x001EC7        E1F00558                 call $conn_init_cbuffers;
0x001EC8        01200EA6                 r0 = Null + 3750;
0x001EC9        19202FBD                 M[$sra_struct] = r0 + Null;
0x001ECA        FD000080 01200000        r0 = Null + -8388608;
0x001ECC        19202FBE                 M[0x2fbe] = r0 + Null;
0x001ECD        012000AD                 r0 = Null + 173;
0x001ECE        19202FBF                 M[0x2fbf] = r0 + Null;
0x001ECF        012095F3                 r0 = Null + -27149;
0x001ED0        19202FC0                 M[0x2fc0] = r0 + Null;
0x001ED1        FD000000 0120A3D7        r0 = Null + 41943;
0x001ED3        19202FC1                 M[0x2fc1] = r0 + Null;
0x001ED4        FD000002 01203280        r0 = Null + 144000;
0x001ED6        19202FC2                 M[0x2fc2] = r0 + Null;
0x001ED7        01200320                 r0 = Null + 800;
0x001ED8        19209638                 M[$tmr_period_con_copy] = r0 + Null;
0x001ED9        510093D8                 I0 = Null + -27688;
0x001EDA        E1F017DC                 call $copy_codec_stats_pointers;
0x001EDB        DDF0003C                 jump $M.conn_init.exit;

 <$M.conn_init.skip_usb_conn_init>
0x001EDC        0150021A                 r3 = Null + 538;
0x001EDD        01601000                 r4 = Null + 4096;
0x001EDE        E1F00541                 call $conn_init_cbuffers;
0x001EDF        21020008                 Null = r0 - 8;
0x001EE0        DD100015                 if NE jump $M.conn_init.skip_analogue_conn_init;
0x001EE1        012007D0                 r0 = Null + 2000;
0x001EE2        19202FBD                 M[$sra_struct] = r0 + Null;
0x001EE3        FD000080 01200000        r0 = Null + -8388608;
0x001EE5        19202FBE                 M[0x2fbe] = r0 + Null;
0x001EE6        012000AD                 r0 = Null + 173;
0x001EE7        19202FBF                 M[0x2fbf] = r0 + Null;
0x001EE8        012095F3                 r0 = Null + -27149;
0x001EE9        19202FC0                 M[0x2fc0] = r0 + Null;
0x001EEA        FD000000 0120A3D7        r0 = Null + 41943;
0x001EEC        19202FC1                 M[0x2fc1] = r0 + Null;
0x001EED        FD000002 01203280        r0 = Null + 144000;
0x001EEF        19202FC2                 M[0x2fc2] = r0 + Null;
0x001EF0        012005DC                 r0 = Null + 1500;
0x001EF1        19209638                 M[$tmr_period_con_copy] = r0 + Null;
0x001EF2        51009419                 I0 = Null + -27623;
0x001EF3        E1F017C3                 call $copy_codec_stats_pointers;
0x001EF4        DDF00023                 jump $M.conn_init.exit;

 <$M.conn_init.skip_analogue_conn_init>
0x001EF5        01200BB8                 r0 = Null + 3000;
0x001EF6        19202FBD                 M[$sra_struct] = r0 + Null;
0x001EF7        FD000080 01200000        r0 = Null + -8388608;
0x001EF9        19202FBE                 M[0x2fbe] = r0 + Null;
0x001EFA        012095CC                 r0 = Null + -27188;
0x001EFB        19202FBF                 M[0x2fbf] = r0 + Null;
0x001EFC        012095F3                 r0 = Null + -27149;
0x001EFD        19202FC0                 M[0x2fc0] = r0 + Null;
0x001EFE        09002BFF                 Null = Null + M[$current_dac_sampling_rate];
0x001EFF        DD100007                 if NE jump $M.conn_init.sra_conf_done;
0x001F00        FD000000 0120A3D7        r0 = Null + 41943;
0x001F02        19202FC1                 M[0x2fc1] = r0 + Null;
0x001F03        FD000002 01203280        r0 = Null + 144000;
0x001F05        19202FC2                 M[0x2fc2] = r0 + Null;

 <$M.conn_init.sra_conf_done>
0x001F06        012003E8                 r0 = Null + 1000;
0x001F07        19209638                 M[$tmr_period_con_copy] = r0 + Null;
0x001F08        0920006F                 r0 = Null + M[$app_config.io];
0x001F09        E402003F                 Null = r0 - 1;
0x001F0A        DD10000C                 if NE jump $M.conn_init.skip_sbc;
0x001F0B        01201D6F                 r0 = Null + 7535;
0x001F0C        1920037F                 M[$decoder_codec_stream_struc] = r0 + Null;
0x001F0D        01202567                 r0 = Null + 9575;
0x001F0E        19200380                 M[0x380] = r0 + Null;
0x001F0F        012024E1                 r0 = Null + 9441;
0x001F10        19200381                 M[0x381] = r0 + Null;
0x001F11        01700382                 r5 = Null + 898;
0x001F12        E1F00358                 call $sbcdec.init_static_decoder;
0x001F13        510093CB                 I0 = Null + -27701;
0x001F14        E1F017A2                 call $copy_codec_stats_pointers;
0x001F15        DDF00002                 jump $M.conn_init.exit;

 <$M.conn_init.skip_sbc>
0x001F16        DDF00743                 jump $error;

 <$M.conn_init.exit>
0x001F17        DDF0F55B                 jump $pop_rLink_and_rts;

 <$sbcdec.synthesis_subband_filter>
0x001F18        F3D00000                 push rLink;
0x001F19        D13B0021                 r1 = M[r9 + 33];
0x001F1A        5080003F                 M0 = Null + r1;
0x001F1B        D14B001F                 r2 = M[r9 + 31];
0x001F1C        9854003F                 r3 = r2 * r1 (int);
0x001F1D        E455003F                 r3 = r3 - 1;
0x001F1E        9823007F                 r0 = r1 * r5 (int);
0x001F1F        E404003F                 Null = r2 - 1;
0x001F20        00200000                 if EQ r0 = Null + Null;
0x001F21        D16B0014                 r4 = M[r9 + 20];
0x001F22        5022006F                 I2 = r0 + r4;
0x001F23        012B003C                 r0 = r9 + 60;
0x001F24        D027002F                 r0 = M[r5 + r0];
0x001F25        5000002F                 I0 = Null + r0;
0x001F26        D16B001D                 r4 = M[r9 + 29];
0x001F27        69080004                 Null = M0 - 4;
0x001F28        DD000020                 if EQ jump $M.sbcdec.synthesis_subband_filter.M_equals_4;
0x001F29        51C000A0                 L0 = Null + 160;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M8>
0x001F2A        D12B0015                 r0 = M[r9 + 21];
0x001F2B        5040002F                 I4 = Null + r0;
0x001F2C        D12B002E                 r0 = M[r9 + 46];
0x001F2D        5050002F                 I5 = Null + r0;
0x001F2E        51900001                 M1 = Null + 1;
0x001F2F        51A0FFF0                 M2 = Null + -16;
0x001F30        51B0FFF9                 M3 = Null + -7;
0x001F31        4CC8008F                 r10 = M0 + M0;
0x001F32        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x001F33        E5F0000A                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M8;
0x001F34        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F35        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F36        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F37        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F38        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F39        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F3A        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x001F3B        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F3C        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M8>
0x001F3D        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001F3E        5B250000                 I2 = I2 + r3;
0x001F3F        51900018                 M1 = Null + 24;
0x001F40        51A0FFB9                 M2 = Null + -71;
0x001F41        51B0FF69                 M3 = Null + -151;
0x001F42        E1F00025                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x001F43        5190FFD0                 M1 = Null + -48;
0x001F44        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x001F45        E466003F                 r4 = r4 - 1;
0x001F46        DD10FFE4                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M8;
0x001F47        DDF0001B                 jump $M.sbcdec.synthesis_subband_filter.all_done;

 <$M.sbcdec.synthesis_subband_filter.M_equals_4>
0x001F48        51C00050                 L0 = Null + 80;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M4>
0x001F49        D12B0016                 r0 = M[r9 + 22];
0x001F4A        5040002F                 I4 = Null + r0;
0x001F4B        D12B002F                 r0 = M[r9 + 47];
0x001F4C        5050002F                 I5 = Null + r0;
0x001F4D        51900001                 M1 = Null + 1;
0x001F4E        51A0FFF8                 M2 = Null + -8;
0x001F4F        51B0FFFD                 M3 = Null + -3;
0x001F50        4CC8008F                 r10 = M0 + M0;
0x001F51        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x001F52        E5F00006                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M4;
0x001F53        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F54        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F55        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x001F56        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001F57        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M4>
0x001F58        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001F59        5B250000                 I2 = I2 + r3;
0x001F5A        5190000C                 M1 = Null + 12;
0x001F5B        51A0FFDD                 M2 = Null + -35;
0x001F5C        51B0FFB5                 M3 = Null + -75;
0x001F5D        E1F0000A                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x001F5E        5190FFE8                 M1 = Null + -24;
0x001F5F        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x001F60        E466003F                 r4 = r4 - 1;
0x001F61        DD10FFE8                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M4;

 <$M.sbcdec.synthesis_subband_filter.all_done>
0x001F62        4420000F                 r0 = Null + I0;
0x001F63        016B003C                 r4 = r9 + 60;
0x001F64        D427006F                 M[r5 + r4] = r0;
0x001F65        51C00000                 L0 = Null + 0;
0x001F66        DDF0F50C                 jump $pop_rLink_and_rts;

 <$M.sbcdec.synthesis_subband_filter.output_code>
0x001F67        44C0008F                 r10 = Null + M0;
0x001F68        02002130                 Null = Null + Null, r0 = M[I0,M1], r1 = M[I4,M0];
0x001F69        E5F0000D                 do $M.sbcdec.synthesis_subband_filter.output_loop;
0x001F6A        CE232030                 rMAC = r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001F6B        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001F6C        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001F6D        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001F6E        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001F6F        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001F70        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001F71        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001F72        AE232332                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M3], r1 = M[I4,M2];
0x001F73        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001F74        9D41FFFC                 r2 = rMAC * -4 (int) (sat);
0x001F75        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcdec.synthesis_subband_filter.output_loop>
0x001F76        DC0D000F                 rts;

 <$wall_clock_message_handler>
0x001F77        F3D00000                 push rLink;
0x001F78        D1250004                 r0 = M[r3 + 4];
0x001F79        1920965B                 M[$wall_clock_msw] = r0 + Null;
0x001F7A        D1250005                 r0 = M[r3 + 5];
0x001F7B        1920665C                 M[$wall_clock_lsw] = r0 + Null;
0x001F7C        D1250006                 r0 = M[r3 + 6];
0x001F7D        D1350007                 r1 = M[r3 + 7];
0x001F7E        8D220010                 r0 = r0 LSHIFT 16;
0x001F7F        8133FFFF                 r1 = r1 AND 0xffff;
0x001F80        03320000                 r1 = r1 + r0;
0x001F81        1930965C                 M[$wall_clock_time] = r1 + Null;
0x001F82        D1350004                 r1 = M[r3 + 4];
0x001F83        1930965B                 M[$wall_clock_msw] = r1 + Null;
0x001F84        D1450005                 r2 = M[r3 + 5];
0x001F85        1940665C                 M[$wall_clock_lsw] = r2 + Null;
0x001F86        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x001F87        811100FF                 rMAC = rMAC AND 0xff;
0x001F88        991104E2                 rMAC = rMAC * 1250 (int);
0x001F89        8D330010                 r1 = r1 LSHIFT 16;
0x001F8A        8144FFFF                 r2 = r2 AND 0xffff;
0x001F8B        03430000                 r2 = r2 + r1;
0x001F8C        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x001F8E        8D410016                 r2 = rMAC LSHIFT 22;
0x001F8F        D1650007                 r4 = M[r3 + 7];
0x001F90        D1550006                 r3 = M[r3 + 6];
0x001F91        8D550010                 r3 = r3 LSHIFT 16;
0x001F92        8166FFFF                 r4 = r4 AND 0xffff;
0x001F93        03650000                 r4 = r4 + r3;
0x001F94        23460000                 r2 = r2 - r4;
0x001F95        19406669                 M[$wall_clock_adjustment] = r2 + Null;
0x001F96        0900665D                 Null = Null + M[$sco_param_tesco];
0x001F97        DD10002D                 if NE jump $M.wall_clock_message_handler.done;
0x001F98        E1F0F490                 call $block_interrupts;
0x001F99        E1F016A5                 call $multi_chan_purge_buffers;
0x001F9A        09203FFF                 r0 = Null + M[0x3fff];
0x001F9B        19203FFE                 M[0x3ffe] = r0 + Null;
0x001F9C        092095EF                 r0 = Null + M[0xff95ef];
0x001F9D        192095EE                 M[0xff95ee] = r0 + Null;
0x001F9E        E1F0F47A                 call $interrupt.unblock;
0x001F9F        0930965A                 r1 = Null + M[$sub_link_port];
0x001FA0        FD00009D 2103800D        Null = r1 - -6455283;
0x001FA2        DD00001E                 if EQ jump $M.wall_clock_message_handler.uses_l2cap;
0x001FA3        FD000000 01408014        r2 = Null + 32788;
0x001FA5        0950965A                 r3 = Null + M[$sub_link_port];
0x001FA6        8155001F                 r3 = r3 AND 0x1f;
0x001FA7        01600000                 r4 = Null + 0;
0x001FA8        01700000                 r5 = Null + 0;
0x001FA9        01800000                 r6 = Null + 0;
0x001FAA        E1F0F4A7                 call $message.send;
0x001FAB        0120028A                 r0 = Null + 650;
0x001FAC        1920650E                 M[0x650e] = r0 + Null;
0x001FAD        192094CC                 M[0xff94cc] = r0 + Null;
0x001FAE        19206514                 M[0x6514] = r0 + Null;
0x001FAF        192094D2                 M[0xff94d2] = r0 + Null;
0x001FB0        1920651A                 M[0x651a] = r0 + Null;
0x001FB1        192094D8                 M[0xff94d8] = r0 + Null;
0x001FB2        192000E4                 M[$M.main.samples_latency_measure] = r0 + Null;
0x001FB3        01A0650B                 r8 = Null + 25867;
0x001FB4        E1F0066B                 call $audio_proc.delay.initialize;
0x001FB5        01A094C9                 r8 = Null + -27447;
0x001FB6        E1F00669                 call $audio_proc.delay.initialize;
0x001FB7        01A06511                 r8 = Null + 25873;
0x001FB8        E1F00667                 call $audio_proc.delay.initialize;
0x001FB9        01A094CF                 r8 = Null + -27441;
0x001FBA        E1F00665                 call $audio_proc.delay.initialize;
0x001FBB        01A06517                 r8 = Null + 25879;
0x001FBC        E1F00663                 call $audio_proc.delay.initialize;
0x001FBD        01A094D5                 r8 = Null + -27435;
0x001FBE        E1F00661                 call $audio_proc.delay.initialize;
0x001FBF        DDF00005                 jump $M.wall_clock_message_handler.done;

 <$M.wall_clock_message_handler.uses_l2cap>
0x001FC0        E420002F                 r0 = Null + 1;
0x001FC1        1920665D                 M[$sco_param_tesco] = r0 + Null;
0x001FC2        01200032                 r0 = Null + 50;
0x001FC3        1920965E                 M[$sco_param_to_air_size] = r0 + Null;

 <$M.wall_clock_message_handler.done>
0x001FC4        DDF0F4AE                 jump $pop_rLink_and_rts;

 <$sbcdec.read_frame_header>
0x001FC5        F3D00000                 push rLink;
0x001FC6        D50B0036                 M[r9 + 54] = Null;
0x001FC7        E1F003A8                 call $sbcdec.get1byte;
0x001FC8        0120000F                 r0 = Null + 15;
0x001FC9        D52B0024                 M[r9 + 36] = r0;
0x001FCA        E1F003A9                 call $sbcdec.get2bits;
0x001FCB        E1F00567                 call $sbc.crc_calc;
0x001FCC        D53B001C                 M[r9 + 28] = r1;
0x001FCD        E1F003A6                 call $sbcdec.get2bits;
0x001FCE        E1F00564                 call $sbc.crc_calc;
0x001FCF        99330004                 r1 = r1 * 4 (int);
0x001FD0        01330004                 r1 = r1 + 4;
0x001FD1        D53B001D                 M[r9 + 29] = r1;
0x001FD2        E1F003A1                 call $sbcdec.get2bits;
0x001FD3        E1F0055F                 call $sbc.crc_calc;
0x001FD4        E420002F                 r0 = Null + 1;
0x001FD5        D53B001E                 M[r9 + 30] = r1;
0x001FD6        00220021                 if NE r0 = r0 + r0;
0x001FD7        D52B001F                 M[r9 + 31] = r0;
0x001FD8        E1F0039D                 call $sbcdec.get1bit;
0x001FD9        E1F00559                 call $sbc.crc_calc;
0x001FDA        D53B0020                 M[r9 + 32] = r1;
0x001FDB        E1F0039A                 call $sbcdec.get1bit;
0x001FDC        E1F00556                 call $sbc.crc_calc;
0x001FDD        99330004                 r1 = r1 * 4 (int);
0x001FDE        01330004                 r1 = r1 + 4;
0x001FDF        D12B0021                 r0 = M[r9 + 33];
0x001FE0        2003002F                 Null = r1 - r0;
0x001FE1        E1100500                 if NE call $sbcdec.silence_decoder;
0x001FE2        D53B0021                 M[r9 + 33] = r1;
0x001FE3        E1F0038C                 call $sbcdec.get1byte;
0x001FE4        E1F0054E                 call $sbc.crc_calc;
0x001FE5        D53B0022                 M[r9 + 34] = r1;
0x001FE6        D14B0021                 r2 = M[r9 + 33];
0x001FE7        99440010                 r2 = r2 * 16 (int);
0x001FE8        D12B001E                 r0 = M[r9 + 30];
0x001FE9        21020002                 Null = r0 - 2;
0x001FEA        00440045                 if POS r2 = r2 + r2;
0x001FEB        212400FA                 r0 = r2 - 250;
0x001FEC        2044002C                 if GT r2 = r2 - r0;
0x001FED        2004003F                 Null = r2 - r1;
0x001FEE        DD400017                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x001FEF        21030002                 Null = r1 - 2;
0x001FF0        DD400015                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x001FF1        E1F0037E                 call $sbcdec.get1byte;
0x001FF2        D53B0023                 M[r9 + 35] = r1;
0x001FF3        D13B001E                 r1 = M[r9 + 30];
0x001FF4        21030003                 Null = r1 - 3;
0x001FF5        DD10000D                 if NE jump $M.sbcdec.read_frame_header.not_jointstereo;
0x001FF6        D1AB0021                 r8 = M[r9 + 33];
0x001FF7        E4AA003F                 r8 = r8 - 1;
0x001FF8        511B0026                 I1 = r9 + 38;

 <$M.sbcdec.read_frame_header.join_loop>
0x001FF9        E1F0037C                 call $sbcdec.get1bit;
0x001FFA        E1F00538                 call $sbc.crc_calc;
0x001FFB        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001FFC        E4AA003F                 r8 = r8 - 1;
0x001FFD        DD10FFFC                 if NE jump $M.sbcdec.read_frame_header.join_loop;
0x001FFE        01200000                 r0 = Null + 0;
0x001FFF        0300A400                 Null = Null + Null, M[I1,0] = r0;
0x002000        E1F00375                 call $sbcdec.get1bit;
0x002001        E1F00531                 call $sbc.crc_calc;

 <$M.sbcdec.read_frame_header.not_jointstereo>
0x002002        E1F00480                 call $sbc.calc_frame_length;
0x002003        D52B0039                 M[r9 + 57] = r0;
0x002004        DDF0F46E                 jump $pop_rLink_and_rts;

 <$M.sbcdec.read_frame_header.corrupt_frame_error>
0x002005        E420002F                 r0 = Null + 1;
0x002006        D52B0036                 M[r9 + 54] = r0;
0x002007        DDF0F46B                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume.update_volumes>
0x002008        F3D00000                 push rLink;
0x002009        5000005F                 I0 = Null + r3;
0x00200A        1950664C                 M[$M.music_example_message.MainVolume.temp_msg_ptr] = r3 + Null;
0x00200B        03006100                 Null = Null + Null, r4 = M[I0,1];
0x00200C        0900964B                 Null = Null + M[$multichannel_vol_msg_echo];
0x00200D        DD000003                 if EQ jump $M.music_example_message.MainVolume.no_system_vol;
0x00200E        8166000F                 r4 = r4 AND 0xf;
0x00200F        19606640                 M[$music_example.SystemVolume] = r4 + Null;

 <$M.music_example_message.MainVolume.no_system_vol>
0x002010        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002011        0002000F                 Null = r0 + Null;
0x002012        00200005                 if POS r0 = Null + Null;
0x002013        19209642                 M[$music_example.Main.MasterVolume] = r0 + Null;
0x002014        E1F00544                 call $M.music_example_message.vmdB2vol;
0x002015        91220002                 r0 = r0 ASHIFT 2;
0x002016        192062AA                 M[0x62aa] = r0 + Null;
0x002017        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002018        0002000F                 Null = r0 + Null;
0x002019        00200005                 if POS r0 = Null + Null;
0x00201A        19206643                 M[$music_example.Main.ToneVolume] = r0 + Null;
0x00201B        E1F0053D                 call $M.music_example_message.vmdB2vol;
0x00201C        91520003                 r3 = r0 ASHIFT 3;
0x00201D        E1F016AB                 call $multi_chan_set_prim_tone_mix_ratio;
0x00201E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00201F        213202D2                 r1 = r0 - 722;
0x002020        20220035                 if POS r0 = r0 - r1;
0x002021        2132FD2E                 r1 = r0 - -722;
0x002022        20220034                 if NEG r0 = r0 - r1;
0x002023        19209643                 M[$music_example.Main.PrimaryLeftTrimVolume] = r0 + Null;
0x002024        E1F00534                 call $M.music_example_message.vmdB2vol;
0x002025        192062B3                 M[0x62b3] = r0 + Null;
0x002026        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002027        213202D2                 r1 = r0 - 722;
0x002028        20220035                 if POS r0 = r0 - r1;
0x002029        2132FD2E                 r1 = r0 - -722;
0x00202A        20220034                 if NEG r0 = r0 - r1;
0x00202B        19206644                 M[$music_example.Main.PrimaryRightTrimVolume] = r0 + Null;
0x00202C        E1F0052C                 call $M.music_example_message.vmdB2vol;
0x00202D        192062B8                 M[0x62b8] = r0 + Null;
0x00202E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00202F        213202D2                 r1 = r0 - 722;
0x002030        20220035                 if POS r0 = r0 - r1;
0x002031        2132FD2E                 r1 = r0 - -722;
0x002032        20220034                 if NEG r0 = r0 - r1;
0x002033        19209644                 M[$music_example.Main.SecondaryLeftTrimVolume] = r0 + Null;
0x002034        E1F00524                 call $M.music_example_message.vmdB2vol;
0x002035        192062BD                 M[0x62bd] = r0 + Null;
0x002036        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002037        213202D2                 r1 = r0 - 722;
0x002038        20220035                 if POS r0 = r0 - r1;
0x002039        2132FD2E                 r1 = r0 - -722;
0x00203A        20220034                 if NEG r0 = r0 - r1;
0x00203B        19206645                 M[$music_example.Main.SecondaryRightTrimVolume] = r0 + Null;
0x00203C        E1F0051C                 call $M.music_example_message.vmdB2vol;
0x00203D        192062C2                 M[0x62c2] = r0 + Null;
0x00203E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00203F        213202D2                 r1 = r0 - 722;
0x002040        20220035                 if POS r0 = r0 - r1;
0x002041        2132FD2E                 r1 = r0 - -722;
0x002042        20220034                 if NEG r0 = r0 - r1;
0x002043        19209645                 M[$music_example.Main.SubTrimVolume] = r0 + Null;
0x002044        E1F00514                 call $M.music_example_message.vmdB2vol;
0x002045        192062C7                 M[0x62c7] = r0 + Null;
0x002046        0900964B                 Null = Null + M[$multichannel_vol_msg_echo];
0x002047        DD000005                 if EQ jump $M.music_example_message.MainVolume.done;
0x002048        0970664C                 r5 = Null + M[$M.music_example_message.MainVolume.temp_msg_ptr];
0x002049        01600008                 r4 = Null + 8;
0x00204A        0150715A                 r3 = Null + 29018;
0x00204B        E1F0EF3E                 call $message.send_long;

 <$M.music_example_message.MainVolume.done>
0x00204C        DDF0F426                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume.func>
0x00204D        F3D00000                 push rLink;
0x00204E        E1F0FFBA                 call $M.music_example_message.MainVolume.update_volumes;

 <$M.music_example_message.MainVolume.volume_msg_done>
0x00204F        DDF0F423                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume.tws_func>
0x002050        F3D00000                 push rLink;
0x002051        E1F0FFB7                 call $M.music_example_message.MainVolume.update_volumes;

 <$calc_actual_port_rate>
0x002052        F3D00000                 push rLink;
0x002053        D11A0001                 rMAC = M[r8 + 1];
0x002054        DD000007                 if EQ jump $M.calc_actual_samples.measure_rate;
0x002055        D3100000                 rMAC = M[rMAC + Null];
0x002056        DD000005                 if EQ jump $M.calc_actual_samples.measure_rate;
0x002057        D50A0004                 M[r8 + 4] = Null;
0x002058        D50A000A                 M[r8 + 10] = Null;
0x002059        91E10004                 rMAC = rMAC ASHIFT 4 (MI);
0x00205A        DDF00043                 jump $M.calc_actual_samples.set_rate;

 <$M.calc_actual_samples.measure_rate>
0x00205B        D12A0004                 r0 = M[r8 + 4];
0x00205C        D12295E1                 r0 = M[r0 + -27167];
0x00205D        DC02000F                 jump r0;

 <$M.calc_actual_samples.reset>
0x00205E        E420002F                 r0 = Null + 1;
0x00205F        D52A0004                 M[r8 + 4] = r0;
0x002060        D50A0005                 M[r8 + 5] = Null;
0x002061        D50A000A                 M[r8 + 10] = Null;
0x002062        0920FE71                 r0 = Null + M[0xfffe71];
0x002063        D52A0007                 M[r8 + 7] = r0;
0x002064        DDF0003D                 jump $M.calc_actual_samples.exit;

 <$M.calc_actual_samples.wait>
0x002065        0920FE71                 r0 = Null + M[0xfffe71];
0x002066        D13A0007                 r1 = M[r8 + 7];
0x002067        2032003F                 r1 = r0 - r1;
0x002068        E433004F                 r1 = ABS r1;
0x002069        FD000001 015086A0        r3 = Null + 100000;
0x00206B        D14A0003                 r2 = M[r8 + 3];
0x00206C        0045000D                 if LE r2 = r3 + Null;
0x00206D        2003004F                 Null = r1 - r2;
0x00206E        DD400033                 if NEG jump $M.calc_actual_samples.exit;
0x00206F        D52A0007                 M[r8 + 7] = r0;
0x002070        01200002                 r0 = Null + 2;
0x002071        D52A0004                 M[r8 + 4] = r0;
0x002072        D50A0005                 M[r8 + 5] = Null;
0x002073        D12A0000                 r0 = M[r8 + 0];
0x002074        8122001F                 r0 = r0 AND 0x1f;
0x002075        D122630D                 r0 = M[r0 + 25357];
0x002076        DD00FFE8                 if EQ jump $M.calc_actual_samples.reset;
0x002077        D3200000                 r0 = M[r0 + Null];
0x002078        D52A0006                 M[r8 + 6] = r0;
0x002079        DDF00028                 jump $M.calc_actual_samples.exit;

 <$M.calc_actual_samples.run>
0x00207A        0950FE71                 r3 = Null + M[0xfffe71];
0x00207B        D12A0000                 r0 = M[r8 + 0];
0x00207C        E1F0F384                 call $cbuffer.calc_amount_space;
0x00207D        D12A0000                 r0 = M[r8 + 0];
0x00207E        8122001F                 r0 = r0 AND 0x1f;
0x00207F        D122630D                 r0 = M[r0 + 25357];
0x002080        DD00FFDE                 if EQ jump $M.calc_actual_samples.reset;
0x002081        D3200000                 r0 = M[r0 + Null];
0x002082        D13A0006                 r1 = M[r8 + 6];
0x002083        2032003F                 r1 = r0 - r1;
0x002084        00330044                 if NEG r1 = r1 + r2;
0x002085        D52A0006                 M[r8 + 6] = r0;
0x002086        8D33007F                 r1 = r1 LSHIFT -1;
0x002087        D12A0005                 r0 = M[r8 + 5];
0x002088        03230000                 r0 = r0 + r1;
0x002089        D52A0005                 M[r8 + 5] = r0;
0x00208A        0035000F                 r1 = r3 + Null;
0x00208B        D14A0007                 r2 = M[r8 + 7];
0x00208C        2053004F                 r3 = r1 - r2;
0x00208D        E455004F                 r3 = ABS r3;
0x00208E        FD00000F 01104240        rMAC = Null + 1000000;
0x002090        D14A0002                 r2 = M[r8 + 2];
0x002091        00410000                 if EQ r2 = rMAC + Null;
0x002092        2005004F                 Null = r3 - r2;
0x002093        DD40000E                 if NEG jump $M.calc_actual_samples.exit;
0x002094        D53A0007                 M[r8 + 7] = r1;
0x002095        D14A000A                 r2 = M[r8 + 10];
0x002096        01100000                 rMAC = Null + 0;
0x002097        8DE40280                 rMAC0 = r2 LSHIFT 0;
0x002098        AD127A12                 rMAC = rMAC + r0 * 0.95367431640625 (SS);
0x002099        D9050000                 Div = rMAC / r3;
0x00209A        D9200002                 r0 = DivRemainder;
0x00209B        D52A000A                 M[r8 + 10] = r0;
0x00209C        D9100001                 rMAC = DivResult;

 <$M.calc_actual_samples.set_rate>
0x00209D        D51A0009                 M[r8 + 9] = rMAC;
0x00209E        9111007C                 rMAC = rMAC ASHIFT -4 (56bit);
0x00209F        D51A0008                 M[r8 + 8] = rMAC;
0x0020A0        D50A0005                 M[r8 + 5] = Null;

 <$M.calc_actual_samples.exit>
0x0020A1        DDF0F3D1                 jump $pop_rLink_and_rts;

 <$Set_Mode>
0x0020A2        F3D00000                 push rLink;
0x0020A3        09509568                 r3 = Null + M[$music_example.CurMode];
0x0020A4        21050000                 Null = r3 - 0;
0x0020A5        DD000005                 if EQ jump $M.set_mode_gains.standby_gains;
0x0020A6        FD00007F 0130FFFF        r1 = Null + 8388607;
0x0020A8        0040000F                 r2 = Null + Null;
0x0020A9        DDF00003                 jump $M.set_mode_gains.continue;

 <$M.set_mode_gains.standby_gains>
0x0020AA        0030000F                 r1 = Null + Null;
0x0020AB        E440002F                 r2 = Null + 1;

 <$M.set_mode_gains.continue>
0x0020AC        0950967E                 r3 = Null + M[$M.multi_chan_port_scan_and_routing_config.fp_config_input];
0x0020AD        D1550000                 r3 = M[r3 + 0];
0x0020AE        01600001                 r4 = Null + 1;
0x0020AF        8005006F                 Null = r3 AND r4;
0x0020B0        DD00000A                 if EQ jump $M.set_mode_gains.no_pri_left;
0x0020B1        0120641D                 r0 = Null + 25629;
0x0020B2        1920958D                 M[0xff958d] = r0 + Null;
0x0020B3        D5390000                 M[r7 + 0] = r1;
0x0020B4        D5490001                 M[r7 + 1] = r2;
0x0020B5        F1000238                 pushm <r1, r2, r3, r7>;
0x0020B6        0190958C                 r7 = Null + -27252;
0x0020B7        01A00000                 r8 = Null + 0;
0x0020B8        E1F0EC93                 call $M.audio_proc.stream_gain.Process.func;
0x0020B9        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_pri_left>
0x0020BA        01600002                 r4 = Null + 2;
0x0020BB        8005006F                 Null = r3 AND r4;
0x0020BC        DD00000A                 if EQ jump $M.set_mode_gains.no_pri_right;
0x0020BD        012093F2                 r0 = Null + -27662;
0x0020BE        192065B4                 M[0x65b4] = r0 + Null;
0x0020BF        D5390002                 M[r7 + 2] = r1;
0x0020C0        D5490003                 M[r7 + 3] = r2;
0x0020C1        F1000238                 pushm <r1, r2, r3, r7>;
0x0020C2        019065B3                 r7 = Null + 26035;
0x0020C3        01A00000                 r8 = Null + 0;
0x0020C4        E1F0EC87                 call $M.audio_proc.stream_gain.Process.func;
0x0020C5        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_pri_right>
0x0020C6        01600040                 r4 = Null + 64;
0x0020C7        8006005F                 Null = r4 AND r3;
0x0020C8        DD00000A                 if EQ jump $M.set_mode_gains.no_wired_sub;
0x0020C9        01206444                 r0 = Null + 25668;
0x0020CA        19209591                 M[0xff9591] = r0 + Null;
0x0020CB        D539000C                 M[r7 + 12] = r1;
0x0020CC        D549000D                 M[r7 + 13] = r2;
0x0020CD        F1000238                 pushm <r1, r2, r3, r7>;
0x0020CE        01909590                 r7 = Null + -27248;
0x0020CF        01A00000                 r8 = Null + 0;
0x0020D0        E1F0EC7B                 call $M.audio_proc.stream_gain.Process.func;
0x0020D1        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_wired_sub>
0x0020D2        01600010                 r4 = Null + 16;
0x0020D3        8005006F                 Null = r3 AND r4;
0x0020D4        DD00000A                 if EQ jump $M.set_mode_gains.no_sec_left;
0x0020D5        0120642A                 r0 = Null + 25642;
0x0020D6        192065B8                 M[0x65b8] = r0 + Null;
0x0020D7        D5390004                 M[r7 + 4] = r1;
0x0020D8        D5490005                 M[r7 + 5] = r2;
0x0020D9        F1000238                 pushm <r1, r2, r3, r7>;
0x0020DA        019065B7                 r7 = Null + 26039;
0x0020DB        01A00000                 r8 = Null + 0;
0x0020DC        E1F0EC6F                 call $M.audio_proc.stream_gain.Process.func;
0x0020DD        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_sec_left>
0x0020DE        01600020                 r4 = Null + 32;
0x0020DF        8005006F                 Null = r3 AND r4;
0x0020E0        DD00000A                 if EQ jump $M.set_mode_gains.no_sec_right;
0x0020E1        012093FF                 r0 = Null + -27649;
0x0020E2        19209595                 M[0xff9595] = r0 + Null;
0x0020E3        D5390006                 M[r7 + 6] = r1;
0x0020E4        D5490007                 M[r7 + 7] = r2;
0x0020E5        F1000238                 pushm <r1, r2, r3, r7>;
0x0020E6        01909594                 r7 = Null + -27244;
0x0020E7        01A00000                 r8 = Null + 0;
0x0020E8        E1F0EC63                 call $M.audio_proc.stream_gain.Process.func;
0x0020E9        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_sec_right>
0x0020EA        DDF0F388                 jump $pop_rLink_and_rts;

 <$downsample_sub_to_1k2>
0x0020EB        F3D00000                 push rLink;
0x0020EC        012095FC                 r0 = Null + -27140;
0x0020ED        E1F0F323                 call $cbuffer.calc_amount_data;
0x0020EE        21020168                 Null = r0 - 360;
0x0020EF        DD40F383                 if NEG jump $pop_rLink_and_rts;
0x0020F0        012095FC                 r0 = Null + -27140;
0x0020F1        E1F0F33E                 call $cbuffer.get_read_address_and_size;
0x0020F2        5000002F                 I0 = Null + r0;
0x0020F3        50C0003F                 L0 = Null + r1;
0x0020F4        01203FFD                 r0 = Null + 16381;
0x0020F5        E1F0F33F                 call $cbuffer.get_write_address_and_size;
0x0020F6        5040002F                 I4 = Null + r0;
0x0020F7        50E0003F                 L4 = Null + r1;
0x0020F8        01200012                 r0 = Null + 18;
0x0020F9        01C00009                 r10 = Null + 9;
0x0020FA        0930965A                 r1 = Null + M[$sub_link_port];
0x0020FB        FD00009D 2103800D        Null = r1 - -6455283;
0x0020FD        00C20000                 if EQ r10 = r0 + Null;
0x0020FE        01300000                 r1 = Null + 0;
0x0020FF        51800028                 M0 = Null + 40;
0x002100        01300000                 r1 = Null + 0;
0x002101        0920965A                 r0 = Null + M[$sub_link_port];
0x002102        FD00009D 2102800D        Null = r0 - -6455283;
0x002104        DD000009                 if EQ jump $M.downsample_sub_to_1k2.downsample;
0x002105        01300000                 r1 = Null + 0;
0x002106        09202BFF                 r0 = Null + M[$current_dac_sampling_rate];
0x002107        FD000000 2102AC44        Null = r0 - 44100;
0x002109        DD100004                 if NE jump $M.downsample_sub_to_1k2.downsample;
0x00210A        51800024                 M0 = Null + 36;
0x00210B        FD000060 01300000        r1 = Null + 6291456;

 <$M.downsample_sub_to_1k2.downsample>
0x00210D        09609668                 r4 = Null + M[$M.downsample_sub_to_1k2.mute_index];
0x00210E        09709667                 r5 = Null + M[$M.downsample_sub_to_1k2.mute_direction];
0x00210F        09406668                 r2 = Null + M[$M.downsample_sub_to_1k2.residual];
0x002110        E5F00012                 do $M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer;
0x002111        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x002112        03670000                 r4 = r4 + r5;
0x002113        00600004                 if NEG r4 = Null + Null;
0x002114        01500007                 r3 = Null + 7;
0x002115        2005006F                 Null = r3 - r4;
0x002116        00650004                 if NEG r4 = r3 + Null;
0x002117        0150946D                 r3 = Null + -27539;
0x002118        0056005F                 r3 = r4 + r3;
0x002119        D3500000                 r3 = M[r3 + Null];
0x00211A        97250000                 r0 = r0 * r3 (frac);
0x00211B        2020002F                 r0 = Null - r0;
0x00211C        03430000                 r2 = r2 + r1;
0x00211D        DD500004                 if POS jump $M.downsample_sub_to_1k2.no_extra_read;
0x00211E        03005100                 Null = Null + Null, r3 = M[I0,1];
0x00211F        FD00007F 8144FFFF        r2 = r2 AND 0x7fffff;

 <$M.downsample_sub_to_1k2.no_extra_read>
0x002121        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.downsample_sub_to_1k2.copy_sub_to_downsampled_buffer>
0x002122        19406668                 M[$M.downsample_sub_to_1k2.residual] = r2 + Null;
0x002123        19609668                 M[$M.downsample_sub_to_1k2.mute_index] = r4 + Null;
0x002124        012095FC                 r0 = Null + -27140;
0x002125        4430000F                 r1 = Null + I0;
0x002126        E1F0F323                 call $cbuffer.set_read_address;
0x002127        51C00000                 L0 = Null + 0;
0x002128        01203FFD                 r0 = Null + 16381;
0x002129        4430004F                 r1 = Null + I4;
0x00212A        E1F0F323                 call $cbuffer.set_write_address;
0x00212B        51E00000                 L4 = Null + 0;
0x00212C        DDF0F346                 jump $pop_rLink_and_rts;

 <$run_usb_state_mc>
0x00212D        F3D00000                 push rLink;
0x00212E        FD000080 01200000        r0 = Null + -8388608;
0x002130        E1F0F2E0                 call $cbuffer.calc_amount_data;
0x002131        09506650                 r3 = Null + M[$usb_state];
0x002132        D13501AD                 r1 = M[r3 + 429];
0x002133        E003000F                 call r1;
0x002134        19506650                 M[$usb_state] = r3 + Null;
0x002135        DDF0F33D                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.paused_fn>
0x002136        F3D00000                 push rLink;
0x002137        09209652                 r0 = Null + M[$debug_usb_pause_count];
0x002138        E422002F                 r0 = r0 + 1;
0x002139        19209652                 M[$debug_usb_pause_count] = r0 + Null;
0x00213A        FD000080 01200000        r0 = Null + -8388608;
0x00213C        E1F0F15F                 call $cbuffer.empty_buffer;
0x00213D        E420002F                 r0 = Null + 1;
0x00213E        19206652                 M[$usb_reset_pending] = r0 + Null;
0x00213F        E450002F                 r3 = Null + 1;
0x002140        E420002F                 r0 = Null + 1;
0x002141        1920963B                 M[$M.jitter_buffering.is_buffering] = r0 + Null;
0x002142        DDF0F330                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.waiting_to_start_fn>
0x002143        F3D00000                 push rLink;
0x002144        0002000F                 Null = r0 + Null;
0x002145        DD000013                 if EQ jump $M.usb_state_mc.still_waiting_to_start;
0x002146        09006652                 Null = Null + M[$usb_reset_pending];
0x002147        DD000007                 if EQ jump $M.usb_state_mc.buffer_reset_done;
0x002148        F3500000                 push r3;
0x002149        FD000080 01200000        r0 = Null + -8388608;
0x00214B        E1F0F150                 call $cbuffer.empty_buffer;
0x00214C        F3540000                 pop r3;
0x00214D        DDF0000B                 jump $M.usb_state_mc.still_waiting_to_start;

 <$M.usb_state_mc.buffer_reset_done>
0x00214E        19009650                 M[$usb_pause_period_count] = Null + Null;
0x00214F        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x002150        09309651                 r1 = Null + M[$usb_pause_silence_insertion_time];
0x002151        9472003F                 r5 = r0 * r1 (frac);
0x002152        016000AD                 r4 = Null + 173;
0x002153        E1F00365                 call $cbuffer_insert_silence;
0x002154        016095CF                 r4 = Null + -27185;
0x002155        E1F00363                 call $cbuffer_insert_silence;
0x002156        E009000F                 call r7;
0x002157        01500002                 r3 = Null + 2;

 <$M.usb_state_mc.still_waiting_to_start>
0x002158        DDF0F31A                 jump $pop_rLink_and_rts;

 <$M.usb_state_mc.running_fn>
0x002159        F3D00000                 push rLink;
0x00215A        01700000                 r5 = Null + 0;
0x00215B        09609650                 r4 = Null + M[$usb_pause_period_count];
0x00215C        E466002F                 r4 = r4 + 1;
0x00215D        0002000F                 Null = r0 + Null;
0x00215E        00600001                 if NE r4 = Null + Null;
0x00215F        19609650                 M[$usb_pause_period_count] = r4 + Null;
0x002160        29066651                 Null = r4 - M[$usb_pause_period_thresh];
0x002161        00570005                 if POS r3 = r5 + Null;
0x002162        F3500000                 push r3;
0x002163        E009000F                 call r7;
0x002164        F3540000                 pop r3;
0x002165        DDF0F30D                 jump $pop_rLink_and_rts;

 <$disable_subwoofer>
0x002166        F3D00000                 push rLink;
0x002167        0920663A                 r0 = Null + M[$sra_rate_addr];
0x002168        19209332                 M[0xff9332] = r0 + Null;
0x002169        09409660                 r2 = Null + M[$sco_timer_id];
0x00216A        E1F0F11E                 call $timer.cancel_event;
0x00216B        0940666A                 r2 = Null + M[$wall_clock_timer_id];
0x00216C        E1F0F11C                 call $timer.cancel_event;
0x00216D        09406661                 r2 = Null + M[$bass_timer_id];
0x00216E        E1F0F11A                 call $timer.cancel_event;
0x00216F        190065CF                 M[$bdaddr_struc] = Null + Null;
0x002170        190065D0                 M[0x65d0] = Null + Null;
0x002171        190065D1                 M[0x65d1] = Null + Null;
0x002172        190065D2                 M[0x65d2] = Null + Null;
0x002173        1900665D                 M[$sco_param_tesco] = Null + Null;
0x002174        1900965A                 M[$sub_link_port] = Null + Null;
0x002175        19006693                 M[$frame_sync.sync_flag] = Null + Null;
0x002176        1900665B                 M[$M.Subwoofer.playback_time] = Null + Null;
0x002177        1900650E                 M[0x650e] = Null + Null;
0x002178        190094CC                 M[0xff94cc] = Null + Null;
0x002179        19006514                 M[0x6514] = Null + Null;
0x00217A        190094D2                 M[0xff94d2] = Null + Null;
0x00217B        1900651A                 M[0x651a] = Null + Null;
0x00217C        190094D8                 M[0xff94d8] = Null + Null;
0x00217D        190000E4                 M[$M.main.samples_latency_measure] = Null + Null;
0x00217E        19009647                 M[$music_example.OTA_IF_Connections] = Null + Null;
0x00217F        E420002F                 r0 = Null + 1;
0x002180        192064A6                 M[$M.system_config.data.spkr_ctrl_coefs] = r0 + Null;
0x002181        1900942D                 M[0xff942d] = Null + Null;
0x002182        01905B34                 r7 = Null + 23348;
0x002183        01A002D0                 r8 = Null + 720;
0x002184        E1F0EBBD                 call $spkr_ctrl_system.zero_data;
0x002185        FD0000FF 019037F9        r7 = Null + -51207;
0x002187        E1F0EB8B                 call $spkr_ctrl_system.initialize;
0x002188        01206693                 r0 = Null + 26259;
0x002189        1920663F                 M[$music_example.sync_flag_ptr] = r0 + Null;
0x00218A        01200168                 r0 = Null + 360;
0x00218B        1920963F                 M[$music_example.frame_processing_size] = r0 + Null;
0x00218C        FD000000 01508019        r3 = Null + 32793;
0x00218E        E1F0046A                 call $message.unregister_handler;
0x00218F        FD000000 01508015        r3 = Null + 32789;
0x002191        E1F00467                 call $message.unregister_handler;
0x002192        FD000000 0150801C        r3 = Null + 32796;
0x002194        E1F00464                 call $message.unregister_handler;

 <$M.subwoofer.done>
0x002195        DDF0F2DD                 jump $pop_rLink_and_rts;

 <$M.music_example_message.AuxVolume.update_volumes>
0x002196        F3D00000                 push rLink;
0x002197        5000005F                 I0 = Null + r3;
0x002198        1950664B                 M[$M.music_example_message.AuxVolume.temp_msg_ptr] = r3 + Null;
0x002199        03006100                 Null = Null + Null, r4 = M[I0,1];
0x00219A        0900964A                 Null = Null + M[$aux_vol_msg_echo];
0x00219B        DD000003                 if EQ jump $M.music_example_message.AuxVolume.no_system_vol;
0x00219C        8166000F                 r4 = r4 AND 0xf;
0x00219D        19606640                 M[$music_example.SystemVolume] = r4 + Null;

 <$M.music_example_message.AuxVolume.no_system_vol>
0x00219E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00219F        0002000F                 Null = r0 + Null;
0x0021A0        00200005                 if POS r0 = Null + Null;
0x0021A1        19209640                 M[$music_example.Aux.MasterVolume] = r0 + Null;
0x0021A2        E1F003B6                 call $M.music_example_message.vmdB2vol;
0x0021A3        91220002                 r0 = r0 ASHIFT 2;
0x0021A4        192092B4                 M[0xff92b4] = r0 + Null;
0x0021A5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0021A6        0002000F                 Null = r0 + Null;
0x0021A7        00200005                 if POS r0 = Null + Null;
0x0021A8        19206641                 M[$music_example.Aux.ToneVolume] = r0 + Null;
0x0021A9        E1F003AF                 call $M.music_example_message.vmdB2vol;
0x0021AA        91520003                 r3 = r0 ASHIFT 3;
0x0021AB        E1F0151F                 call $multi_chan_set_aux_tone_mix_ratio;
0x0021AC        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0021AD        213202D2                 r1 = r0 - 722;
0x0021AE        20220035                 if POS r0 = r0 - r1;
0x0021AF        2132FD2E                 r1 = r0 - -722;
0x0021B0        20220034                 if NEG r0 = r0 - r1;
0x0021B1        19209641                 M[$music_example.Aux.LeftTrimVolume] = r0 + Null;
0x0021B2        E1F003A6                 call $M.music_example_message.vmdB2vol;
0x0021B3        192092BD                 M[0xff92bd] = r0 + Null;
0x0021B4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0021B5        213202D2                 r1 = r0 - 722;
0x0021B6        20220035                 if POS r0 = r0 - r1;
0x0021B7        2132FD2E                 r1 = r0 - -722;
0x0021B8        20220034                 if NEG r0 = r0 - r1;
0x0021B9        19206642                 M[$music_example.Aux.RightTrimVolume] = r0 + Null;
0x0021BA        E1F0039E                 call $M.music_example_message.vmdB2vol;
0x0021BB        192092C2                 M[0xff92c2] = r0 + Null;
0x0021BC        0900964A                 Null = Null + M[$aux_vol_msg_echo];
0x0021BD        DD000005                 if EQ jump $M.music_example_message.AuxVolume.done;
0x0021BE        0970664B                 r5 = Null + M[$M.music_example_message.AuxVolume.temp_msg_ptr];
0x0021BF        01600005                 r4 = Null + 5;
0x0021C0        0150715D                 r3 = Null + 29021;
0x0021C1        E1F0EDC8                 call $message.send_long;

 <$M.music_example_message.AuxVolume.done>
0x0021C2        DDF0F2B0                 jump $pop_rLink_and_rts;

 <$M.music_example_message.AuxVolume.func>
0x0021C3        F3D00000                 push rLink;
0x0021C4        E1F0FFD2                 call $M.music_example_message.AuxVolume.update_volumes;

 <$M.music_example_message.AuxVolume.volume_msg_done>
0x0021C5        DDF0F2AD                 jump $pop_rLink_and_rts;

 <$sbcdec.sample_reconstruction>
0x0021C6        01700080                 r5 = Null + 128;
0x0021C7        D1AB0030                 r8 = M[r9 + 48];
0x0021C8        21AA0002                 r8 = r8 - 2;
0x0021C9        D13B0014                 r1 = M[r9 + 20];
0x0021CA        5000003F                 I0 = Null + r1;
0x0021CB        D13B001B                 r1 = M[r9 + 27];
0x0021CC        5010003F                 I1 = Null + r1;
0x0021CD        D13B0018                 r1 = M[r9 + 24];
0x0021CE        5020003F                 I2 = Null + r1;
0x0021CF        D19B001F                 r7 = M[r9 + 31];
0x0021D0        D13B0021                 r1 = M[r9 + 33];
0x0021D1        9B390000                 r1 = r1 * r7 (int);
0x0021D2        5080003F                 M0 = Null + r1;
0x0021D3        70A0003F                 M2 = Null - r1;
0x0021D4        50B3003F                 M3 = r1 + r1;
0x0021D5        D14B001D                 r2 = M[r9 + 29];
0x0021D6        9843004F                 r2 = r1 * r2 (int);
0x0021D7        7090004F                 M1 = Null - r2;
0x0021D8        59990001                 M1 = M1 + 1;

 <$M.sbcdec.sample_reconstruction.chan_loop>
0x0021D9        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcdec.sample_reconstruction.subband_loop>
0x0021DA        D1CB001D                 r10 = M[r9 + 29];
0x0021DB        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0021DC        03034900                 Null = Null + r1, r2 = M[I2,1];
0x0021DD        DD00000F                 if EQ jump $M.sbcdec.sample_reconstruction.zero_sample;
0x0021DE        E444002F                 r2 = r2 + 1;
0x0021DF        D05A003F                 r3 = M[r8 + r1];
0x0021E0        2034003F                 r1 = r2 - r1;
0x0021E1        9067004F                 r4 = r5 ASHIFT r2;
0x0021E2        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x0021E3        E5F00007                 do $M.sbcdec.sample_reconstruction.block_loop;
0x0021E4        8D220008                 r0 = r0 LSHIFT 8;
0x0021E5        01220080                 r0 = r0 + 128;
0x0021E6        C012005F                 rMAC = r0 * r3 (UU);
0x0021E7        8C21003F                 r0 = rMAC LSHIFT r1;
0x0021E8        2012226F                 rMAC = r0 - r4, r0 = M[I0,M2];
0x0021E9        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.sbcdec.sample_reconstruction.block_loop>
0x0021EA        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x0021EB        DDF00003                 jump $M.sbcdec.sample_reconstruction.done_block_loop;

 <$M.sbcdec.sample_reconstruction.zero_sample>
0x0021EC        E5F00002                 do $M.sbcdec.sample_reconstruction.done_block_loop;
0x0021ED        0200B000                 Null = Null + Null, M[I0,M0] = r1;

 <$M.sbcdec.sample_reconstruction.done_block_loop>
0x0021EE        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x0021EF        E488003F                 r6 = r6 - 1;
0x0021F0        DD10FFEA                 if NE jump $M.sbcdec.sample_reconstruction.subband_loop;
0x0021F1        E499003F                 r7 = r7 - 1;
0x0021F2        DD10FFE7                 if NE jump $M.sbcdec.sample_reconstruction.chan_loop;
0x0021F3        DC0D000F                 rts;

 <$calc_time_to_play>
0x0021F4        F3D00000                 push rLink;
0x0021F5        E1F0F233                 call $block_interrupts;
0x0021F6        01800000                 r6 = Null + 0;

 <$M.calc_time_to_play.proc_loop>
0x0021F7        D029000F                 r0 = M[r7 + Null];
0x0021F8        DD00000A                 if EQ jump $M.calc_time_to_play.calculate_num_samples_in_port;
0x0021F9        E1F0F217                 call $cbuffer.calc_amount_data;
0x0021FA        D1390001                 r1 = M[r7 + 1];
0x0021FB        D3300000                 r1 = M[r1 + Null];
0x0021FC        CC12003F                 rMAC = r0 * r1 (SS);
0x0021FD        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x0021FE        8D310000                 r1 = rMAC LSHIFT 0;
0x0021FF        03830000                 r6 = r6 + r1;
0x002200        01990002                 r7 = r7 + 2;
0x002201        DDF0FFF6                 jump $M.calc_time_to_play.proc_loop;

 <$M.calc_time_to_play.calculate_num_samples_in_port>
0x002202        D12A0000                 r0 = M[r8 + 0];
0x002203        E1F0F1FD                 call $cbuffer.calc_amount_space;
0x002204        E422002F                 r0 = r0 + 1;
0x002205        9144007F                 r2 = r2 ASHIFT -1;
0x002206        2024002F                 r0 = r2 - r0;
0x002207        D13A0001                 r1 = M[r8 + 1];
0x002208        D3300000                 r1 = M[r1 + Null];
0x002209        CC12003F                 rMAC = r0 * r1 (SS);
0x00220A        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x00220B        8D310000                 r1 = rMAC LSHIFT 0;
0x00220C        F3300000                 push r1;
0x00220D        D12A0002                 r0 = M[r8 + 2];
0x00220E        D13A0003                 r1 = M[r8 + 3];
0x00220F        D3300000                 r1 = M[r1 + Null];
0x002210        CC12003F                 rMAC = r0 * r1 (SS);
0x002211        91E10005                 rMAC = rMAC ASHIFT 5 (MI);
0x002212        8D310000                 r1 = rMAC LSHIFT 0;
0x002213        03830000                 r6 = r6 + r1;
0x002214        F3340000                 pop r1;
0x002215        0048003F                 r2 = r6 + r1;
0x002216        09306669                 r1 = Null + M[$wall_clock_adjustment];
0x002217        0933FE71                 r1 = r1 + M[0xfffe71];
0x002218        0083004F                 r6 = r1 + r2;
0x002219        D58A0004                 M[r8 + 4] = r6;

 <$M.calc_time_to_play.done>
0x00221A        E1F0F1FE                 call $interrupt.unblock;
0x00221B        DDF0F257                 jump $pop_rLink_and_rts;

 <$jitter_buffering>
0x00221C        F3D00000                 push rLink;
0x00221D        0900963B                 Null = Null + M[$M.jitter_buffering.is_buffering];
0x00221E        DD000025                 if EQ jump $M.jitter_buffering.done;
0x00221F        0920006F                 r0 = Null + M[$app_config.io];
0x002220        21020005                 Null = r0 - 5;
0x002221        DD100021                 if NE jump $M.jitter_buffering.clear_buffering_flag;
0x002222        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x002223        FD000000 2102BB80        Null = r0 - 48000;
0x002225        DD100003                 if NE jump $M.jitter_buffering.check_fs_44100;
0x002226        01600000                 r4 = Null + 0;
0x002227        DDF00015                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_44100>
0x002228        FD000000 2102AC44        Null = r0 - 44100;
0x00222A        DD100003                 if NE jump $M.jitter_buffering.check_fs_32000;
0x00222B        01600084                 r4 = Null + 132;
0x00222C        DDF00010                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_32000>
0x00222D        21027D00                 Null = r0 - 32000;
0x00222E        DD100003                 if NE jump $M.jitter_buffering.check_fs_22050;
0x00222F        01600000                 r4 = Null + 0;
0x002230        DDF0000C                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_22050>
0x002231        21025622                 Null = r0 - 22050;
0x002232        DD100003                 if NE jump $M.jitter_buffering.check_fs_16000;
0x002233        01600084                 r4 = Null + 132;
0x002234        DDF00008                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_16000>
0x002235        21023E80                 Null = r0 - 16000;
0x002236        DD100003                 if NE jump $M.jitter_buffering.check_fs_8000;
0x002237        01600000                 r4 = Null + 0;
0x002238        DDF00004                 jump $M.jitter_buffering.buffering_state;

 <$M.jitter_buffering.check_fs_8000>
0x002239        21021F40                 Null = r0 - 8000;
0x00223A        DD100008                 if NE jump $M.jitter_buffering.clear_buffering_flag;
0x00223B        01600000                 r4 = Null + 0;

 <$M.jitter_buffering.buffering_state>
0x00223C        0950963F                 r3 = Null + M[$music_example.frame_processing_size];
0x00223D        03560000                 r3 = r3 + r4;
0x00223E        012000AD                 r0 = Null + 173;
0x00223F        E1F0F1D1                 call $cbuffer.calc_amount_data;
0x002240        2002005F                 Null = r0 - r3;
0x002241        DD400002                 if NEG jump $M.jitter_buffering.done;

 <$M.jitter_buffering.clear_buffering_flag>
0x002242        1900963B                 M[$M.jitter_buffering.is_buffering] = Null + Null;

 <$M.jitter_buffering.done>
0x002243        DDF0F22F                 jump $pop_rLink_and_rts;

 <$sco_schedule_to_air>
0x002244        F3D00000                 push rLink;
0x002245        0930965B                 r1 = Null + M[$wall_clock_msw];
0x002246        0940665C                 r2 = Null + M[$wall_clock_lsw];
0x002247        8D330010                 r1 = r1 LSHIFT 16;
0x002248        8144FFFF                 r2 = r2 AND 0xffff;
0x002249        03430000                 r2 = r2 + r1;
0x00224A        0930965B                 r1 = Null + M[$wall_clock_msw];
0x00224B        8D330078                 r1 = r1 LSHIFT -8;
0x00224C        0950965D                 r3 = Null + M[$sco_param_clock_msw];
0x00224D        0960665E                 r4 = Null + M[$sco_param_clock_lsw];

 <$M.sco_schedule_to_air.sco_schedule_next_instant>
0x00224E        2086004F                 r6 = r4 - r2;
0x00224F        2475003F                 r5 = r3 - r1 - Borrow;
0x002250        99780271                 r5 = r6 * 625 (int);
0x002251        9177007F                 r5 = r5 ASHIFT -1;
0x002252        0920965C                 r0 = Null + M[$wall_clock_time];
0x002253        0042007F                 r2 = r0 + r5;
0x002254        2944965F                 r2 = r2 - M[$sco_param_to_air_time];
0x002255        0054000F                 r3 = r2 + Null;
0x002256        2944966B                 r2 = r2 - M[$subwoofer.sco_offset];
0x002257        2904FE71                 Null = r2 - M[0xfffe71];
0x002258        DD500007                 if POS jump $M.sco_schedule_to_air.continue;
0x002259        0930665D                 r1 = Null + M[$sco_param_tesco];
0x00225A        99330271                 r1 = r1 * 625 (int);

 <$M.sco_schedule_to_air.advance>
0x00225B        03430000                 r2 = r2 + r1;
0x00225C        03530000                 r3 = r3 + r1;
0x00225D        2904FE71                 Null = r2 - M[0xfffe71];
0x00225E        DD40FFFD                 if NEG jump $M.sco_schedule_to_air.advance;

 <$M.sco_schedule_to_air.continue>
0x00225F        19509669                 M[$esco_write_deadline] = r3 + Null;
0x002260        F3400000                 push r2;
0x002261        09409660                 r2 = Null + M[$sco_timer_id];
0x002262        E1F0F026                 call $timer.cancel_event;
0x002263        F3440000                 pop r2;
0x002264        013065CB                 r1 = Null + 26059;
0x002265        01502550                 r3 = Null + 9552;
0x002266        E1F0EDFE                 call $timer.schedule_event_at;
0x002267        19509660                 M[$sco_timer_id] = r3 + Null;
0x002268        19009663                 M[$M.Subwoofer.sco_schedule_to_air_flag] = Null + Null;
0x002269        DDF0F209                 jump $pop_rLink_and_rts;

 <$sbcdec.init_static_decoder>
0x00226A        F3D00000                 push rLink;
0x00226B        01B03FB8                 r9 = Null + 16312;
0x00226C        D5B70005                 M[r5 + 5] = r9;
0x00226D        E1F00323                 call $sbc.init_static_common;
0x00226E        FD0000FF 01203487        r0 = Null + -52089;
0x002270        D52B002E                 M[r9 + 46] = r0;
0x002271        FD0000FF 0120362E        r0 = Null + -51666;
0x002273        D52B002F                 M[r9 + 47] = r0;
0x002274        FD0000FF 012036C1        r0 = Null + -51519;
0x002276        D52B0030                 M[r9 + 48] = r0;
0x002277        FD0000FF 012036B0        r0 = Null + -51536;
0x002279        D52B0031                 M[r9 + 49] = r0;
0x00227A        FD0000FF 01203000        r0 = Null + -53248;
0x00227C        D52B0032                 M[r9 + 50] = r0;
0x00227D        FD0000FF 01203100        r0 = Null + -52992;
0x00227F        D52B0033                 M[r9 + 51] = r0;
0x002280        D50B003A                 M[r9 + 58] = Null;
0x002281        01200010                 r0 = Null + 16;
0x002282        D52B003B                 M[r9 + 59] = r0;
0x002283        FD0000FF 01203720        r0 = Null + -51424;
0x002285        D52B003E                 M[r9 + 62] = r0;
0x002286        E1F002E1                 call $sbcdec.reset_decoder;
0x002287        E1F002E6                 call $sbcdec.init_tables;
0x002288        013095C8                 r1 = Null + -27192;
0x002289        01407010                 r2 = Null + 28688;
0x00228A        0150228D                 r3 = Null + 8845;
0x00228B        E1F0033C                 call $message.register_handler;
0x00228C        DDF0F1E6                 jump $pop_rLink_and_rts;

 <$sbcdec.convert_mono_handler>
0x00228D        D53B0034                 M[r9 + 52] = r1;
0x00228E        DC0D000F                 rts;

 <$cbops.signal_detect_op.timer_handler>
0x00228F        F3D00000                 push rLink;
0x002290        D13A0000                 r1 = M[r8 + 0];
0x002291        DD00001C                 if EQ jump $M.signal_detect_op.timer_handler.detectionDisabled;
0x002292        D12A0002                 r0 = M[r8 + 2];
0x002293        2002003F                 Null = r0 - r1;
0x002294        DD50000E                 if POS jump $M.signal_detect_op.timer_handler.levelOverThreshold;
0x002295        D14A0003                 r2 = M[r8 + 3];
0x002296        E444002F                 r2 = r2 + 1;
0x002297        D54A0003                 M[r8 + 3] = r2;
0x002298        D13A0001                 r1 = M[r8 + 1];
0x002299        2004003F                 Null = r2 - r1;
0x00229A        DD400010                 if NEG jump $M.signal_detect_op.timer_handler.exit;
0x00229B        D10A0004                 Null = M[r8 + 4];
0x00229C        DD00000C                 if EQ jump $M.signal_detect_op.timer_handler.resetTimer;
0x00229D        01500000                 r3 = Null + 0;
0x00229E        D55A0004                 M[r8 + 4] = r3;
0x00229F        D14A0005                 r2 = M[r8 + 5];
0x0022A0        E1F0F00B                 call $message.send_short;
0x0022A1        DDF00009                 jump $M.signal_detect_op.timer_handler.exit;

 <$M.signal_detect_op.timer_handler.levelOverThreshold>
0x0022A2        D10A0004                 Null = M[r8 + 4];
0x0022A3        DD100005                 if NE jump $M.signal_detect_op.timer_handler.resetTimer;
0x0022A4        E450002F                 r3 = Null + 1;
0x0022A5        D55A0004                 M[r8 + 4] = r3;
0x0022A6        D14A0005                 r2 = M[r8 + 5];
0x0022A7        E1F0F004                 call $message.send_short;

 <$M.signal_detect_op.timer_handler.resetTimer>
0x0022A8        01400000                 r2 = Null + 0;
0x0022A9        D54A0003                 M[r8 + 3] = r2;

 <$M.signal_detect_op.timer_handler.exit>
0x0022AA        01200000                 r0 = Null + 0;
0x0022AB        D52A0002                 M[r8 + 2] = r0;
0x0022AC        DDF0F1C6                 jump $pop_rLink_and_rts;

 <$M.signal_detect_op.timer_handler.detectionDisabled>
0x0022AD        01200000                 r0 = Null + 0;
0x0022AE        D52A0003                 M[r8 + 3] = r0;
0x0022AF        D52A0002                 M[r8 + 2] = r0;
0x0022B0        E420002F                 r0 = Null + 1;
0x0022B1        D52A0004                 M[r8 + 4] = r0;
0x0022B2        DDF0F1C0                 jump $pop_rLink_and_rts;

 <$cbops.soft_mute.main>
0x0022B3        F3D00000                 push rLink;
0x0022B4        00BC000F                 r9 = r10 + Null;
0x0022B5        D17A0002                 r5 = M[r8 + 2];
0x0022B6        511A0003                 I1 = r8 + 3;
0x0022B7        51D00000                 L1 = Null + 0;
0x0022B8        51900001                 M1 = Null + 1;

 <$M.cbops.soft_mute.channelLoop>
0x0022B9        00CB000F                 r10 = r9 + Null;
0x0022BA        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0022BB        D038002F                 r1 = M[r6 + r0];
0x0022BC        5000003F                 I0 = Null + r1;
0x0022BD        D039002F                 r1 = M[r7 + r0];
0x0022BE        50C0003F                 L0 = Null + r1;
0x0022BF        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0022C0        D038002F                 r1 = M[r6 + r0];
0x0022C1        5040003F                 I4 = Null + r1;
0x0022C2        D039002F                 r1 = M[r7 + r0];
0x0022C3        50E0003F                 L4 = Null + r1;
0x0022C4        D12A0001                 r0 = M[r8 + 1];
0x0022C5        D13A0000                 r1 = M[r8 + 0];
0x0022C6        E5F0000C                 do $M.cbops.soft_mute.sampleLoop;
0x0022C7        02234100                 r0 = r0 + r1, r2 = M[I0,M1];
0x0022C8        00200004                 if NEG r0 = Null + Null;
0x0022C9        0160001F                 r4 = Null + 31;
0x0022CA        2006002F                 Null = r4 - r0;
0x0022CB        00260004                 if NEG r0 = r4 + Null;
0x0022CC        01600760                 r4 = Null + 1888;
0x0022CD        0062006F                 r4 = r0 + r4;
0x0022CE        D3600000                 r4 = M[r4 + Null];
0x0022CF        97460000                 r2 = r2 * r4 (frac);
0x0022D0        2040004F                 r2 = Null - r2;
0x0022D1        020000C1                 Null = Null + Null, M[I4,M1] = r2;

 <$M.cbops.soft_mute.sampleLoop>
0x0022D2        E477003F                 r5 = r5 - 1;
0x0022D3        DD10FFE6                 if NE jump $M.cbops.soft_mute.channelLoop;
0x0022D4        D52A0001                 M[r8 + 1] = r0;
0x0022D5        51C00000                 L0 = Null + 0;
0x0022D6        51E00000                 L4 = Null + 0;
0x0022D7        DDF0F19B                 jump $pop_rLink_and_rts;

 <$sco_params_message_handler>
0x0022D8        F3D00000                 push rLink;
0x0022D9        D1250001                 r0 = M[r3 + 1];
0x0022DA        1920665D                 M[$sco_param_tesco] = r0 + Null;
0x0022DB        D1250003                 r0 = M[r3 + 3];
0x0022DC        1920965E                 M[$sco_param_to_air_size] = r0 + Null;
0x0022DD        D1250004                 r0 = M[r3 + 4];
0x0022DE        1920665F                 M[$sco_param_from_air_size] = r0 + Null;
0x0022DF        D1250005                 r0 = M[r3 + 5];
0x0022E0        D1350006                 r1 = M[r3 + 6];
0x0022E1        8D220010                 r0 = r0 LSHIFT 16;
0x0022E2        8133FFFF                 r1 = r1 AND 0xffff;
0x0022E3        03320000                 r1 = r1 + r0;
0x0022E4        D1250005                 r0 = M[r3 + 5];
0x0022E5        8D220078                 r0 = r0 LSHIFT -8;
0x0022E6        1920965D                 M[$sco_param_clock_msw] = r0 + Null;
0x0022E7        1930665E                 M[$sco_param_clock_lsw] = r1 + Null;
0x0022E8        D1250007                 r0 = M[r3 + 7];
0x0022E9        8D220008                 r0 = r0 LSHIFT 8;
0x0022EA        91220078                 r0 = r0 ASHIFT -8;
0x0022EB        1920965F                 M[$sco_param_to_air_time] = r0 + Null;
0x0022EC        D1250008                 r0 = M[r3 + 8];
0x0022ED        8D220008                 r0 = r0 LSHIFT 8;
0x0022EE        91220078                 r0 = r0 ASHIFT -8;
0x0022EF        19206660                 M[$sco_param_from_air_time] = r0 + Null;
0x0022F0        09409660                 r2 = Null + M[$sco_timer_id];
0x0022F1        E1F0EF97                 call $timer.cancel_event;
0x0022F2        85408017                 r2 = Null OR 0x8017;
0x0022F3        0950965A                 r3 = Null + M[$sub_link_port];
0x0022F4        8155001F                 r3 = r3 AND 0x1f;
0x0022F5        0960965E                 r4 = Null + M[$sco_param_to_air_size];
0x0022F6        E1F0F15B                 call $message.send;
0x0022F7        E420002F                 r0 = Null + 1;
0x0022F8        19209663                 M[$M.Subwoofer.sco_schedule_to_air_flag] = r0 + Null;
0x0022F9        DDF0F179                 jump $pop_rLink_and_rts;

 <$SystemSleep>
0x0022FA        E430002F                 r1 = Null + 1;
0x0022FB        19306693                 M[$frame_sync.sync_flag] = r1 + Null;
0x0022FC        0930FE71                 r1 = Null + M[0xfffe71];
0x0022FD        09606685                 r4 = Null + M[$interrupt.total_time];
0x0022FE        0980FE4D                 r6 = Null + M[0xfffe4d];
0x0022FF        0120003F                 r0 = Null + 63;
0x002300        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.Sleep.jp_wait>
0x002301        09006693                 Null = Null + M[$frame_sync.sync_flag];
0x002302        DD10FFFF                 if NE jump $M.Sleep.jp_wait;
0x002303        1980FE4D                 M[0xfffe4d] = r6 + Null;
0x002304        0950FE71                 r3 = Null + M[0xfffe71];
0x002305        2035003F                 r1 = r3 - r1;
0x002306        29666685                 r4 = r4 - M[$interrupt.total_time];
0x002307        03360000                 r1 = r1 + r4;
0x002308        09209648                 r0 = Null + M[$M.Sleep.TotalTime];
0x002309        03320000                 r1 = r1 + r0;
0x00230A        19309648                 M[$M.Sleep.TotalTime] = r1 + Null;
0x00230B        09206649                 r0 = Null + M[$M.Sleep.LastUpdateTm];
0x00230C        2075002F                 r5 = r3 - r0;
0x00230D        FD00000F 01104240        rMAC = Null + 1000000;
0x00230F        2007001F                 Null = r5 - rMAC;
0x002310        DC0D0004                 if NEG rts;
0x002311        91E1007F                 rMAC = rMAC ASHIFT -1 (MI);
0x002312        D9070000                 Div = rMAC / r5;
0x002313        2017003F                 rMAC = r5 - r1;
0x002314        19506649                 M[$M.Sleep.LastUpdateTm] = r3 + Null;
0x002315        19009648                 M[$M.Sleep.TotalTime] = Null + Null;
0x002316        D9500001                 r3 = DivResult;
0x002317        9415001F                 rMAC = r3 * rMAC (frac);
0x002318        FD000001 01500625        r3 = Null + 67109;
0x00231A        97150000                 rMAC = rMAC * r3 (frac);
0x00231B        19109649                 M[$M.Sleep.Mips] = rMAC + Null;
0x00231C        DC0D000F                 rts;

 <$M.music_example_message.MultiChannelMainMute.func>
0x00231D        F3D00000                 push rLink;
0x00231E        5000005F                 I0 = Null + r3;
0x00231F        0950967B                 r3 = Null + M[$M.multi_chan_output.channels_mute_en];
0x002320        8155000C                 r3 = r3 AND 0xc;
0x002321        E430002F                 r1 = Null + 1;
0x002322        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002323        0002000F                 Null = r0 + Null;
0x002324        84550031                 if NE r3 = r3 OR r1;
0x002325        01300002                 r1 = Null + 2;
0x002326        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002327        0002000F                 Null = r0 + Null;
0x002328        84550031                 if NE r3 = r3 OR r1;
0x002329        01300010                 r1 = Null + 16;
0x00232A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00232B        0002000F                 Null = r0 + Null;
0x00232C        84550031                 if NE r3 = r3 OR r1;
0x00232D        01300020                 r1 = Null + 32;
0x00232E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00232F        0002000F                 Null = r0 + Null;
0x002330        84550031                 if NE r3 = r3 OR r1;
0x002331        01300040                 r1 = Null + 64;
0x002332        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002333        0002000F                 Null = r0 + Null;
0x002334        84550031                 if NE r3 = r3 OR r1;
0x002335        F3500000                 push r3;
0x002336        E1F0111B                 call $multi_chan_soft_mute;
0x002337        F3540000                 pop r3;
0x002338        E420002F                 r0 = Null + 1;
0x002339        E430003F                 r1 = Null - 1;
0x00233A        81050040                 Null = r3 AND 0x40;
0x00233B        00320000                 if EQ r1 = r0 + Null;
0x00233C        19309667                 M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x00233D        DDF0F135                 jump $pop_rLink_and_rts;

 <$sbcdec.private.init_tables>
0x00233E        F3D00000                 push rLink;
0x00233F        0940938C                 r2 = Null + M[$flash.windowed_data16.address];
0x002340        D12B002E                 r0 = M[r9 + 46];
0x002341        5000002F                 I0 = Null + r0;
0x002342        01200000                 r0 = Null + 0;
0x002343        01300080                 r1 = Null + 128;
0x002344        E1F0EAC2                 call $flash.copy_to_dm_24;
0x002345        D12B002F                 r0 = M[r9 + 47];
0x002346        5000002F                 I0 = Null + r0;
0x002347        01200174                 r0 = Null + 372;
0x002348        01300020                 r1 = Null + 32;
0x002349        E1F0EABD                 call $flash.copy_to_dm_24;
0x00234A        D12B0030                 r0 = M[r9 + 48];
0x00234B        5000002F                 I0 = Null + r0;
0x00234C        012001EE                 r0 = Null + 494;
0x00234D        0130000F                 r1 = Null + 15;
0x00234E        E1F0EAB8                 call $flash.copy_to_dm_24;
0x00234F        D12B0031                 r0 = M[r9 + 49];
0x002350        5000002F                 I0 = Null + r0;
0x002351        012001D4                 r0 = Null + 468;
0x002352        01300011                 r1 = Null + 17;
0x002353        E1F0EAB3                 call $flash.copy_to_dm_24;
0x002354        DDF0F11E                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetPlugin.func>
0x002355        0900006F                 Null = Null + M[$app_config.io];
0x002356        DC0D0005                 if POS rts;
0x002357        1930006F                 M[$app_config.io] = r1 + Null;
0x002358        21030005                 Null = r1 - 5;
0x002359        DD100006                 if NE jump $M.music_example_message.SetPlugin.skip_usb;
0x00235A        01200003                 r0 = Null + 3;
0x00235B        19209637                 M[$codec_type] = r0 + Null;
0x00235C        012001D7                 r0 = Null + 471;
0x00235D        19206638                 M[$codec_config] = r0 + Null;
0x00235E        DDF00010                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_usb>
0x00235F        21030008                 Null = r1 - 8;
0x002360        DD100006                 if NE jump $M.music_example_message.SetPlugin.skip_analogue;
0x002361        01200006                 r0 = Null + 6;
0x002362        19209637                 M[$codec_type] = r0 + Null;
0x002363        012001DA                 r0 = Null + 474;
0x002364        19206638                 M[$codec_config] = r0 + Null;
0x002365        DDF00009                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_analogue>
0x002366        21030001                 Null = r1 - 1;
0x002367        DD100006                 if NE jump $M.music_example_message.SetPlugin.skip_sbc;
0x002368        01200000                 r0 = Null + 0;
0x002369        19209637                 M[$codec_type] = r0 + Null;
0x00236A        012001D4                 r0 = Null + 468;
0x00236B        19206638                 M[$codec_config] = r0 + Null;
0x00236C        DDF00002                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_sbc>
0x00236D        DDF002EC                 jump $error;

 <$M.music_example_message.SetPlugin.exit>
0x00236E        DC0D000F                 rts;

 <$sbcdec.get1byte>
0x00236F        01200008                 r0 = Null + 8;
0x002370        DDF00006                 jump $sbcdec.getbits;

 <$sbcdec.get4bits>
0x002371        01200004                 r0 = Null + 4;
0x002372        DDF00004                 jump $sbcdec.getbits;

 <$sbcdec.get2bits>
0x002373        01200002                 r0 = Null + 2;
0x002374        DDF00002                 jump $sbcdec.getbits;

 <$sbcdec.get1bit>
0x002375        E420002F                 r0 = Null + 1;

 <$sbcdec.getbits>
0x002376        D15B0031                 r3 = M[r9 + 49];
0x002377        D3520000                 r3 = M[r3 + r0];
0x002378        D14B003B                 r2 = M[r9 + 59];
0x002379        2042004F                 r2 = r0 - r2;
0x00237A        DDC00007                 if GT jump $M.sbcdec.getbits.anotherword;
0x00237B        03003000                 Null = Null + Null, r1 = M[I0,0];
0x00237C        8F340000                 r1 = r1 LSHIFT r2;
0x00237D        83350000                 r1 = r1 AND r3;
0x00237E        2040004F                 r2 = Null - r2;
0x00237F        D54B003B                 M[r9 + 59] = r2;
0x002380        DC0D000F                 rts;

 <$M.sbcdec.getbits.anotherword>
0x002381        03003100                 Null = Null + Null, r1 = M[I0,1];
0x002382        8F340000                 r1 = r1 LSHIFT r2;
0x002383        83355000                 r1 = r1 AND r3, r3 = M[I0,0];
0x002384        21440010                 r2 = r2 - 16;
0x002385        8F540000                 r3 = r3 LSHIFT r2;
0x002386        03350000                 r1 = r1 + r3;
0x002387        2040004F                 r2 = Null - r2;
0x002388        D54B003B                 M[r9 + 59] = r2;
0x002389        DC0D000F                 rts;

 <$sbcdec.joint_stereo_decode>
0x00238A        D15B0014                 r3 = M[r9 + 20];
0x00238B        5010005F                 I1 = Null + r3;
0x00238C        D1CB0021                 r10 = M[r9 + 33];
0x00238D        D15B001D                 r3 = M[r9 + 29];
0x00238E        508000CF                 M0 = Null + r10;
0x00238F        709000CF                 M1 = Null - r10;
0x002390        59A90001                 M2 = M1 + 1;
0x002391        51B00001                 M3 = Null + 1;
0x002392        FD000080 01600000        r4 = Null + -8388608;

 <$M.sbcdec.joint_stereo_decode.blk_loop>
0x002394        514B0026                 I4 = r9 + 38;
0x002395        E5F0000B                 do $M.sbcdec.joint_stereo_decode.sb_loop;
0x002396        02002443                 Null = Null + Null, r0 = M[I1,M0], r2 = M[I4,M3];
0x002397        0004350F                 Null = r2 + Null, r1 = M[I1,M1];
0x002398        DD000006                 if EQ jump $M.sbcdec.joint_stereo_decode.not_joint;
0x002399        0042003F                 r2 = r0 + r1;
0x00239A        9C440066                 if V r2 = r2 * r4 (int) (sat);
0x00239B        2032003F                 r1 = r0 - r1;
0x00239C        9C330066                 if V r1 = r1 * r4 (int) (sat);
0x00239D        0024000F                 r0 = r2 + Null;

 <$M.sbcdec.joint_stereo_decode.not_joint>
0x00239E        0200A400                 Null = Null + Null, M[I1,M0] = r0;
0x00239F        0200B600                 Null = Null + Null, M[I1,M2] = r1;

 <$M.sbcdec.joint_stereo_decode.sb_loop>
0x0023A0        D1CB0021                 r10 = M[r9 + 33];
0x0023A1        5B1C0000                 I1 = I1 + r10;
0x0023A2        E455003F                 r3 = r3 - 1;
0x0023A3        DD10FFF1                 if NE jump $M.sbcdec.joint_stereo_decode.blk_loop;
0x0023A4        DC0D000F                 rts;

 <$av_insert_silence>
0x0023A5        F3D00000                 push rLink;
0x0023A6        0026000F                 r0 = r4 + Null;
0x0023A7        E1F0F059                 call $cbuffer.calc_amount_space;
0x0023A8        D035000F                 r1 = M[r3 + Null];
0x0023A9        00C3000F                 r10 = r1 + Null;
0x0023AA        200200CF                 Null = r0 - r10;
0x0023AB        00C20004                 if NEG r10 = r0 + Null;
0x0023AC        202300CF                 r0 = r1 - r10;
0x0023AD        1852000F                 M[r3] = r0 + Null;
0x0023AE        0026000F                 r0 = r4 + Null;
0x0023AF        E1F0F085                 call $cbuffer.get_write_address_and_size;
0x0023B0        5000002F                 I0 = Null + r0;
0x0023B1        50C0003F                 L0 = Null + r1;
0x0023B2        01200000                 r0 = Null + 0;
0x0023B3        E5F00002                 do $M.av_insert_silence.audio_fill_loop;
0x0023B4        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.av_insert_silence.audio_fill_loop>
0x0023B5        0026000F                 r0 = r4 + Null;
0x0023B6        4430000F                 r1 = Null + I0;
0x0023B7        E1F0F096                 call $cbuffer.set_write_address;
0x0023B8        51C00000                 L0 = Null + 0;
0x0023B9        DDF0F0B9                 jump $pop_rLink_and_rts;

 <$enable_esco_subwoofer>
0x0023BA        F3D00000                 push rLink;
0x0023BB        1930966B                 M[$subwoofer.sco_offset] = r1 + Null;
0x0023BC        013095A0                 r1 = Null + -27232;
0x0023BD        FD000000 01408019        r2 = Null + 32793;
0x0023BF        015023E4                 r3 = Null + 9188;
0x0023C0        E1F00207                 call $message.register_handler;
0x0023C1        013065C7                 r1 = Null + 26055;
0x0023C2        FD000000 01408015        r2 = Null + 32789;
0x0023C4        015022D8                 r3 = Null + 8920;
0x0023C5        E1F00202                 call $message.register_handler;
0x0023C6        013095A4                 r1 = Null + -27228;
0x0023C7        FD000000 0140801C        r2 = Null + 32796;
0x0023C9        01501F77                 r3 = Null + 8055;
0x0023CA        E1F001FD                 call $message.register_handler;

 <$M.enable_esco_subwoofer.done>
0x0023CB        DDF0F0A7                 jump $pop_rLink_and_rts;

 <$cbops.signal_detect_op.main>
0x0023CC        F3D00000                 push rLink;
0x0023CD        00BC000F                 r9 = r10 + Null;
0x0023CE        D17A0000                 r5 = M[r8 + 0];
0x0023CF        D15A0001                 r3 = M[r8 + 1];
0x0023D0        514A0002                 I4 = r8 + 2;
0x0023D1        51E00000                 L4 = Null + 0;
0x0023D2        D1470002                 r2 = M[r5 + 2];

 <$M.cbops.signal_detect_op.main.channelLoop>
0x0023D3        00CB000F                 r10 = r9 + Null;
0x0023D4        03000021                 Null = Null + Null, r0 = M[I4,1];
0x0023D5        D038002F                 r1 = M[r6 + r0];
0x0023D6        5000003F                 I0 = Null + r1;
0x0023D7        D039002F                 r1 = M[r7 + r0];
0x0023D8        50C0003F                 L0 = Null + r1;
0x0023D9        E5F00006                 do $M.cbops.signal_detect_op.main.sampleLoop;
0x0023DA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0023DB        0002000F                 Null = r0 + Null;
0x0023DC        20200024                 if NEG r0 = Null - r0;
0x0023DD        2004002F                 Null = r2 - r0;
0x0023DE        00420004                 if NEG r2 = r0 + Null;

 <$M.cbops.signal_detect_op.main.sampleLoop>
0x0023DF        E455003F                 r3 = r3 - 1;
0x0023E0        DD10FFF3                 if NE jump $M.cbops.signal_detect_op.main.channelLoop;
0x0023E1        D5470002                 M[r5 + 2] = r2;
0x0023E2        51C00000                 L0 = Null + 0;
0x0023E3        DDF0F08F                 jump $pop_rLink_and_rts;

 <$bdaddr_message_handler>
0x0023E4        F3D00000                 push rLink;
0x0023E5        8D330078                 r1 = r1 LSHIFT -8;
0x0023E6        193065CF                 M[$bdaddr_struc] = r1 + Null;
0x0023E7        194065D0                 M[0x65d0] = r2 + Null;
0x0023E8        195065D1                 M[0x65d1] = r3 + Null;
0x0023E9        196065D2                 M[0x65d2] = r4 + Null;
0x0023EA        8540801B                 r2 = Null OR 0x801b;
0x0023EB        095065CF                 r3 = Null + M[$bdaddr_struc];
0x0023EC        096065D0                 r4 = Null + M[0x65d0];
0x0023ED        097065D1                 r5 = Null + M[0x65d1];
0x0023EE        098065D2                 r6 = Null + M[0x65d2];
0x0023EF        E1F0F062                 call $message.send;
0x0023F0        013095A8                 r1 = Null + -27224;
0x0023F1        FD000001 014086A0        r2 = Null + 100000;
0x0023F3        015024C6                 r3 = Null + 9414;
0x0023F4        E1F0F071                 call $timer.schedule_event_in;
0x0023F5        E430002F                 r1 = Null + 1;
0x0023F6        1930666B                 M[$subwoofer.running] = r1 + Null;
0x0023F7        DDF0F07B                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetConfig.func>
0x0023F8        F3D00000                 push rLink;
0x0023F9        8144FFFF                 r2 = r2 AND 0xffff;
0x0023FA        8D330010                 r1 = r1 LSHIFT 16;
0x0023FB        87340000                 r1 = r1 OR r2;
0x0023FC        8166FFFF                 r4 = r4 AND 0xffff;
0x0023FD        8D550010                 r3 = r3 LSHIFT 16;
0x0023FE        87560000                 r3 = r3 OR r4;
0x0023FF        09204600                 r0 = Null + M[$M.system_config.data.CurParams];
0x002400        83530000                 r3 = r3 AND r1;
0x002401        FD00000F 8933FFFF        r1 = r1 XOR 0xfffff;
0x002403        83230000                 r0 = r0 AND r1;
0x002404        87250000                 r0 = r0 OR r3;
0x002405        19204600                 M[$M.system_config.data.CurParams] = r0 + Null;
0x002406        0140100F                 r2 = Null + 4111;
0x002407        8D520070                 r3 = r0 LSHIFT -16;
0x002408        8162FFFF                 r4 = r0 AND 0xffff;
0x002409        E1F0EEA2                 call $message.send_short;
0x00240A        E430002F                 r1 = Null + 1;
0x00240B        1930963E                 M[$music_example.reinit] = r1 + Null;
0x00240C        DDF0F066                 jump $pop_rLink_and_rts;

 <$sbc.private.init_tables_common>
0x00240D        F3D00000                 push rLink;
0x00240E        0940938C                 r2 = Null + M[$flash.windowed_data16.address];
0x00240F        D12B0015                 r0 = M[r9 + 21];
0x002410        5000002F                 I0 = Null + r0;
0x002411        012000C0                 r0 = Null + 192;
0x002412        01300050                 r1 = Null + 80;
0x002413        E1F0E9F3                 call $flash.copy_to_dm_24;
0x002414        D12B0016                 r0 = M[r9 + 22];
0x002415        5000002F                 I0 = Null + r0;
0x002416        01200138                 r0 = Null + 312;
0x002417        01300028                 r1 = Null + 40;
0x002418        E1F0E9EE                 call $flash.copy_to_dm_24;
0x002419        D12B0017                 r0 = M[r9 + 23];
0x00241A        5000002F                 I0 = Null + r0;
0x00241B        012001A4                 r0 = Null + 420;
0x00241C        01300030                 r1 = Null + 48;
0x00241D        E1F0EF18                 call $flash.copy_to_dm;
0x00241E        DDF0F054                 jump $pop_rLink_and_rts;

 <$conn_init_cbuffers>
0x00241F        F3D00000                 push rLink;
0x002420        F3200000                 push r0;
0x002421        012000AD                 r0 = Null + 173;
0x002422        01304800                 r1 = Null + 18432;
0x002423        0045000F                 r2 = r3 + Null;
0x002424        E1F0F03A                 call $cbuffer.buffer_configure;
0x002425        012095CF                 r0 = Null + -27185;
0x002426        01308000                 r1 = Null + -32768;
0x002427        0045000F                 r2 = r3 + Null;
0x002428        E1F0F036                 call $cbuffer.buffer_configure;
0x002429        012095CC                 r0 = Null + -27188;
0x00242A        01301000                 r1 = Null + 4096;
0x00242B        0046000F                 r2 = r4 + Null;
0x00242C        E1F0F032                 call $cbuffer.buffer_configure;
0x00242D        F3240000                 pop r0;
0x00242E        DDF0F044                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqParamMsg.func>
0x00242F        F3D00000                 push rLink;
0x002430        0023000F                 r0 = r1 + Null;
0x002431        019064F9                 r7 = Null + 25849;
0x002432        E1F00C61                 call $user_eq.calcParamAddrOffset;
0x002433        01224631                 r0 = r0 + 17969;
0x002434        8144FFFF                 r2 = r2 AND 0xffff;
0x002435        1824000F                 M[r0] = r2 + Null;
0x002436        21050000                 Null = r3 - 0;
0x002437        DD00F03B                 if EQ jump $pop_rLink_and_rts;
0x002438        0023000F                 r0 = r1 + Null;
0x002439        013062EC                 r1 = Null + 25324;
0x00243A        FD0000FF 01407FDB        r2 = Null + -32805;
0x00243C        01504631                 r3 = Null + 17969;
0x00243D        E1F00C2C                 call $user_eq.calcBandCoefs;
0x00243E        DDF0F034                 jump $pop_rLink_and_rts;

 <$M.check_aux_out.process>
0x00243F        F3D00000                 push rLink;
0x002440        D009000F                 Null = M[r7 + Null];
0x002441        DD00000D                 if EQ jump $M.check_aux_out.done;
0x002442        D00A000F                 Null = M[r8 + Null];
0x002443        DD000005                 if EQ jump $M.check_aux_out.stereo_copy;
0x002444        01906505                 r7 = Null + 25861;
0x002445        01A00000                 r8 = Null + 0;
0x002446        E1F0EC9F                 call $M.audio_proc.stream_mixer.Process.func;
0x002447        DDF00004                 jump $M.check_aux_out.apply_vol;

 <$M.check_aux_out.stereo_copy>
0x002448        019065BF                 r7 = Null + 26047;
0x002449        01A00000                 r8 = Null + 0;
0x00244A        E1F0EC3A                 call $M.audio_proc.stereo_copy.Process.func;

 <$M.check_aux_out.apply_vol>
0x00244B        019092B0                 r7 = Null + -27984;
0x00244C        01A00000                 r8 = Null + 0;
0x00244D        E1F0E075                 call $volume_and_limit.apply_volume;

 <$M.check_aux_out.done>
0x00244E        DDF0F024                 jump $pop_rLink_and_rts;

 <$sbcdec.read_audio_samples>
0x00244F        F3D00000                 push rLink;
0x002450        D17B0014                 r5 = M[r9 + 20];
0x002451        5010007F                 I1 = Null + r5;
0x002452        D16B001D                 r4 = M[r9 + 29];

 <$M.sbcdec.read_audio_samples.blk_loop>
0x002453        D17B001F                 r5 = M[r9 + 31];
0x002454        D1CB001B                 r10 = M[r9 + 27];
0x002455        502000CF                 I2 = Null + r10;

 <$M.sbcdec.read_audio_samples.ch_loop>
0x002456        D1CB0021                 r10 = M[r9 + 33];
0x002457        E5F00005                 do $M.sbcdec.read_audio_samples.sb_loop;
0x002458        23332900                 r1 = r1 - r1, r0 = M[I2,1];
0x002459        0002000F                 Null = r0 + Null;
0x00245A        E110FF1C                 if NE call $sbcdec.getbits;
0x00245B        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbcdec.read_audio_samples.sb_loop>
0x00245C        E477003F                 r5 = r5 - 1;
0x00245D        DD10FFF9                 if NE jump $M.sbcdec.read_audio_samples.ch_loop;
0x00245E        E466003F                 r4 = r4 - 1;
0x00245F        DD10FFF4                 if NE jump $M.sbcdec.read_audio_samples.blk_loop;
0x002460        DDF0F012                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SoftMute.func>
0x002461        F3D00000                 push rLink;
0x002462        0043000F                 r2 = r1 + Null;
0x002463        81330001                 r1 = r1 AND 0x1;
0x002464        0150007F                 r3 = Null + 127;
0x002465        0003000F                 Null = r1 + Null;
0x002466        00500000                 if EQ r3 = Null + Null;
0x002467        F3400000                 push r2;
0x002468        E1F00FE9                 call $multi_chan_soft_mute;
0x002469        F3440000                 pop r2;
0x00246A        8D34007F                 r1 = r2 LSHIFT -1;
0x00246B        81330001                 r1 = r1 AND 0x1;
0x00246C        E420002F                 r0 = Null + 1;
0x00246D        2030003F                 r1 = Null - r1;
0x00246E        0003000F                 Null = r1 + Null;
0x00246F        00320000                 if EQ r1 = r0 + Null;
0x002470        19309667                 M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x002471        DDF0F001                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqGroupParamMsg.func>
0x002472        F3D00000                 push rLink;
0x002473        5000005F                 I0 = Null + r3;
0x002474        03003100                 Null = Null + Null, r1 = M[I0,1];
0x002475        019064F9                 r7 = Null + 25849;
0x002476        00C3000F                 r10 = r1 + Null;
0x002477        E5F00006                 do $M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop;
0x002478        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002479        E1F00C1A                 call $user_eq.calcParamAddrOffset;
0x00247A        01224631                 r0 = r0 + 17969;
0x00247B        D3200000                 r0 = M[r0 + Null];
0x00247C        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop>
0x00247D        0075000F                 r5 = r3 + Null;
0x00247E        0064000F                 r4 = r2 + Null;
0x00247F        0150329B                 r3 = Null + 12955;
0x002480        E1F0EB09                 call $message.send_long;
0x002481        DDF0EFF1                 jump $pop_rLink_and_rts;

 <$sbc.calc_frame_length>
0x002482        D12B0021                 r0 = M[r9 + 33];
0x002483        D13B001F                 r1 = M[r9 + 31];
0x002484        9862003F                 r4 = r0 * r1 (int);
0x002485        8D66007F                 r4 = r4 LSHIFT -1;
0x002486        01660005                 r4 = r4 + 5;
0x002487        D14B001D                 r2 = M[r9 + 29];
0x002488        D15B0022                 r3 = M[r9 + 34];
0x002489        9854005F                 r3 = r2 * r3 (int);
0x00248A        D14B001E                 r2 = M[r9 + 30];
0x00248B        21440002                 r2 = r2 - 2;
0x00248C        DD400004                 if NEG jump $M.sbc.calc_frame_length.mono_or_dual_chan;

 <$M.sbc.calc_frame_length.stereo_or_jointstereo>
0x00248D        9B420000                 r2 = r2 * r0 (int);
0x00248E        03540000                 r3 = r3 + r2;
0x00248F        DDF00002                 jump $M.sbc.calc_frame_length.finish_frame_length_calc;

 <$M.sbc.calc_frame_length.mono_or_dual_chan>
0x002490        9B530000                 r3 = r3 * r1 (int);

 <$M.sbc.calc_frame_length.finish_frame_length_calc>
0x002491        E455003F                 r3 = r3 - 1;
0x002492        8D55007D                 r3 = r3 LSHIFT -3;
0x002493        0026005F                 r0 = r4 + r3;
0x002494        DC0D000F                 rts;

 <$M.music_example_message.SetOutputDevType.func>
0x002495        5000005F                 I0 = Null + r3;
0x002496        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002497        192064CF                 M[$M.multi_chan_output.wired_out_type_table] = r0 + Null;
0x002498        03002100                 Null = Null + Null, r0 = M[I0,1];
0x002499        192064D0                 M[0x64d0] = r0 + Null;
0x00249A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00249B        192064D3                 M[0x64d3] = r0 + Null;
0x00249C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00249D        192064D4                 M[0x64d4] = r0 + Null;
0x00249E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00249F        192064D5                 M[0x64d5] = r0 + Null;
0x0024A0        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0024A1        192064D1                 M[0x64d1] = r0 + Null;
0x0024A2        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0024A3        192064D2                 M[0x64d2] = r0 + Null;
0x0024A4        E420002F                 r0 = Null + 1;
0x0024A5        1920664E                 M[$SetOutputDevType_message_received] = r0 + Null;
0x0024A6        DC0D000F                 rts;

 <$config_usb>
0x0024A7        01206362                 r0 = Null + 25442;
0x0024A8        5000002F                 I0 = Null + r0;
0x0024A9        51800002                 M0 = Null + 2;
0x0024AA        09209632                 r0 = Null + M[$current_codec_sampling_rate];

 <$M.config_usb.rate_loop>
0x0024AB        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0024AC        0003000F                 Null = r1 + Null;
0x0024AD        DD000005                 if EQ jump $M.config_usb.error;
0x0024AE        2003002F                 Null = r1 - r0;
0x0024AF        DD000004                 if EQ jump $M.config_usb.done;
0x0024B0        02003000                 Null = Null + Null, r1 = M[I0,M0];
0x0024B1        DDF0FFFA                 jump $M.config_usb.rate_loop;

 <$M.config_usb.error>
0x0024B2        51006363                 I0 = Null + 25443;

 <$M.config_usb.done>
0x0024B3        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0024B4        D52A0003                 M[r8 + 3] = r0;
0x0024B5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0024B6        D52A0006                 M[r8 + 6] = r0;
0x0024B7        DC0D000F                 rts;

 <$cbuffer_insert_silence>
0x0024B8        F3D00000                 push rLink;
0x0024B9        0026000F                 r0 = r4 + Null;
0x0024BA        E1F0EF7A                 call $cbuffer.get_write_address_and_size;
0x0024BB        5000002F                 I0 = Null + r0;
0x0024BC        50C0003F                 L0 = Null + r1;
0x0024BD        00C7000F                 r10 = r5 + Null;
0x0024BE        01200000                 r0 = Null + 0;
0x0024BF        E5F00002                 do $M.cbuffer_insert_silence.audio_fill_loop;
0x0024C0        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.cbuffer_insert_silence.audio_fill_loop>
0x0024C1        0026000F                 r0 = r4 + Null;
0x0024C2        4430000F                 r1 = Null + I0;
0x0024C3        E1F0EF8A                 call $cbuffer.set_write_address;
0x0024C4        51C00000                 L0 = Null + 0;
0x0024C5        DDF0EFAD                 jump $pop_rLink_and_rts;

 <$wall_clock_timer_handler>
0x0024C6        F3D00000                 push rLink;
0x0024C7        8540801B                 r2 = Null OR 0x801b;
0x0024C8        095065CF                 r3 = Null + M[$bdaddr_struc];
0x0024C9        096065D0                 r4 = Null + M[0x65d0];
0x0024CA        097065D1                 r5 = Null + M[0x65d1];
0x0024CB        098065D2                 r6 = Null + M[0x65d2];
0x0024CC        E1F0EF85                 call $message.send;
0x0024CD        013095A8                 r1 = Null + -27224;
0x0024CE        FD000001 014086A0        r2 = Null + 100000;
0x0024D0        015024C6                 r3 = Null + 9414;
0x0024D1        E1F0EF91                 call $timer.schedule_event_in_period;
0x0024D2        1950666A                 M[$wall_clock_timer_id] = r3 + Null;
0x0024D3        DDF0EF9F                 jump $pop_rLink_and_rts;

 <$sbcdec.find_sync>
0x0024D4        F3D00000                 push rLink;
0x0024D5        E1F000A2                 call $sbcdec.byte_align;
0x0024D6        E5F00006                 do $M.sbcdec.find_sync.findsyncloop;
0x0024D7        D18B003B                 r6 = M[r9 + 59];
0x0024D8        5820000F                 I2 = I0 + Null;
0x0024D9        E1F0FE96                 call $sbcdec.get1byte;
0x0024DA        2103009C                 Null = r1 - 156;
0x0024DB        DD000003                 if EQ jump $M.sbcdec.find_sync.found_sync;

 <$M.sbcdec.find_sync.findsyncloop>
0x0024DC        01800063                 r6 = Null + 99;
0x0024DD        DDF0EF95                 jump $pop_rLink_and_rts;

 <$M.sbcdec.find_sync.found_sync>
0x0024DE        5802000F                 I0 = I2 + Null;
0x0024DF        D58B003B                 M[r9 + 59] = r6;
0x0024E0        DDF0EF92                 jump $pop_rLink_and_rts;

 <$sbcdec.silence_decoder>
0x0024E1        D12B0032                 r0 = M[r9 + 50];
0x0024E2        D52B003C                 M[r9 + 60] = r0;
0x0024E3        D12B0032                 r0 = M[r9 + 50];
0x0024E4        5010002F                 I1 = Null + r0;
0x0024E5        01C000A0                 r10 = Null + 160;
0x0024E6        01200000                 r0 = Null + 0;
0x0024E7        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop1;
0x0024E8        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop1>
0x0024E9        D12B0033                 r0 = M[r9 + 51];
0x0024EA        D52B003D                 M[r9 + 61] = r0;
0x0024EB        D12B0033                 r0 = M[r9 + 51];
0x0024EC        5010002F                 I1 = Null + r0;
0x0024ED        01C000A0                 r10 = Null + 160;
0x0024EE        01200000                 r0 = Null + 0;
0x0024EF        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop2;
0x0024F0        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop2>
0x0024F1        DC0D000F                 rts;

 <$M.music_example_message.MultiChannelAuxMute.func>
0x0024F2        F3D00000                 push rLink;
0x0024F3        5000005F                 I0 = Null + r3;
0x0024F4        0950967B                 r3 = Null + M[$M.multi_chan_output.channels_mute_en];
0x0024F5        81550073                 r3 = r3 AND 0x73;
0x0024F6        01300004                 r1 = Null + 4;
0x0024F7        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0024F8        0002000F                 Null = r0 + Null;
0x0024F9        84550031                 if NE r3 = r3 OR r1;
0x0024FA        01300008                 r1 = Null + 8;
0x0024FB        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0024FC        0002000F                 Null = r0 + Null;
0x0024FD        84550031                 if NE r3 = r3 OR r1;
0x0024FE        E1F00F53                 call $multi_chan_soft_mute;
0x0024FF        DDF0EF73                 jump $pop_rLink_and_rts;

 <$M.check_wired_subwoofer.process>
0x002500        F3D00000                 push rLink;
0x002501        D009000F                 Null = M[r7 + Null];
0x002502        DD000009                 if EQ jump $M.check_wired_subwoofer.done;
0x002503        FD0000FF 0190369F        r7 = Null + -51553;
0x002505        01A02000                 r8 = Null + 8192;
0x002506        E1F010A2                 call $music_example.peq.process;
0x002507        01A0925C                 r8 = Null + -28068;
0x002508        E1F0E463                 call $cmpd100.analysis;
0x002509        01A0925C                 r8 = Null + -28068;
0x00250A        E1F0E684                 call $cmpd100.applygain;

 <$M.check_wired_subwoofer.done>
0x00250B        DDF0EF67                 jump $pop_rLink_and_rts;

 <$sbcdec.read_scale_factors>
0x00250C        F3D00000                 push rLink;
0x00250D        D18B001F                 r6 = M[r9 + 31];
0x00250E        D19B0021                 r7 = M[r9 + 33];
0x00250F        9B890000                 r6 = r6 * r7 (int);
0x002510        D12B0018                 r0 = M[r9 + 24];
0x002511        5010002F                 I1 = Null + r0;
0x002512        51900001                 M1 = Null + 1;
0x002513        01200004                 r0 = Null + 4;

 <$M.sbcdec.read_scale_factors.loop>
0x002514        E1F0FE62                 call $sbcdec.getbits;
0x002515        E1F0001D                 call $sbc.crc_calc;
0x002516        6689B500                 r6 = r6 - M1, M[I1,M1] = r1;
0x002517        DD10FFFD                 if NE jump $M.sbcdec.read_scale_factors.loop;
0x002518        DDF0EF5A                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqParamMsg.func>
0x002519        F3D00000                 push rLink;
0x00251A        0053000F                 r3 = r1 + Null;
0x00251B        0023000F                 r0 = r1 + Null;
0x00251C        019064F9                 r7 = Null + 25849;
0x00251D        E1F00B76                 call $user_eq.calcParamAddrOffset;
0x00251E        01224631                 r0 = r0 + 17969;
0x00251F        D062000F                 r4 = M[r0 + Null];
0x002520        01700000                 r5 = Null + 0;
0x002521        01800000                 r6 = Null + 0;
0x002522        0140329A                 r2 = Null + 12954;
0x002523        E1F0ED88                 call $message.send_short;
0x002524        DDF0EF4E                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqGroupParamMsg.func>
0x002525        F3D00000                 push rLink;
0x002526        5000005F                 I0 = Null + r3;
0x002527        03003100                 Null = Null + Null, r1 = M[I0,1];
0x002528        019064F9                 r7 = Null + 25849;
0x002529        00C3000F                 r10 = r1 + Null;
0x00252A        E5F00007                 do $M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop;
0x00252B        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00252C        E1F00B67                 call $user_eq.calcParamAddrOffset;
0x00252D        01224631                 r0 = r0 + 17969;
0x00252E        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00252F        8133FFFF                 r1 = r1 AND 0xffff;
0x002530        1823000F                 M[r0] = r1 + Null;

 <$M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop>
0x002531        DDF0EF41                 jump $pop_rLink_and_rts;

 <$sbc.crc_calc>
0x002532        D14B0024                 r2 = M[r9 + 36];
0x002533        0170001D                 r5 = Null + 29;
0x002534        65520008                 r3 = 8 - r0;
0x002535        00C2000F                 r10 = r0 + Null;
0x002536        8C53005F                 r3 = r1 LSHIFT r3;
0x002537        E5F00006                 do $M.sbc.crc_calc.crc_loop;
0x002538        8865004F                 r4 = r3 XOR r2;
0x002539        8D440001                 r2 = r2 LSHIFT 1;
0x00253A        81660080                 r4 = r4 AND 0x80;
0x00253B        88440071                 if NE r2 = r2 XOR r5;
0x00253C        8D550001                 r3 = r3 LSHIFT 1;

 <$M.sbc.crc_calc.crc_loop>
0x00253D        D54B0024                 M[r9 + 36] = r2;
0x00253E        DC0D000F                 rts;

 <$signal_detect_timer_handler>
0x00253F        F3D00000                 push rLink;
0x002540        01A0651D                 r8 = Null + 25885;
0x002541        E1F0FD4E                 call $cbops.signal_detect_op.timer_handler;
0x002542        013000A4                 r1 = Null + 164;
0x002543        FD00000F 01404240        r2 = Null + 1000000;
0x002545        0150253F                 r3 = Null + 9535;
0x002546        E1F0EF1C                 call $timer.schedule_event_in_period;
0x002547        DDF0EF2B                 jump $pop_rLink_and_rts;

 <$av_audio_out_silence_insert>
0x002548        F3D00000                 push rLink;
0x002549        0150663C                 r3 = Null + 26172;
0x00254A        016000AD                 r4 = Null + 173;
0x00254B        E1F0FE5A                 call $av_insert_silence;
0x00254C        0150963C                 r3 = Null + -27076;
0x00254D        016095CF                 r4 = Null + -27185;
0x00254E        E1F0FE57                 call $av_insert_silence;
0x00254F        DDF0EF23                 jump $pop_rLink_and_rts;

 <$sco_timer_handler>
0x002550        F3D00000                 push rLink;
0x002551        01401D4C                 r2 = Null + 7500;
0x002552        013065CB                 r1 = Null + 26059;
0x002553        01502550                 r3 = Null + 9552;
0x002554        E1F0EF0E                 call $timer.schedule_event_in_period;
0x002555        19509660                 M[$sco_timer_id] = r3 + Null;
0x002556        19006693                 M[$frame_sync.sync_flag] = Null + Null;
0x002557        DDF0EF1B                 jump $pop_rLink_and_rts;

 <$M.music_example_message.vmdB2vol>
0x002558        FD000035 0130F5E3        r1 = Null + 3536355;
0x00255A        991200B5                 rMAC = r0 * 181 (int);
0x00255B        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x00255C        FD000004 21210000        r0 = rMAC - 262144;
0x00255E        00200005                 if POS r0 = Null + Null;
0x00255F        DDF0EDB6                 jump $math.pow2_taylor;

 <$usb_cond_buffer_reset>
0x002560        F3D00000                 push rLink;
0x002561        F3200000                 push r0;
0x002562        09006652                 Null = Null + M[$usb_reset_pending];
0x002563        E1100F6A                 if NE call $master_app_reset;
0x002564        19006652                 M[$usb_reset_pending] = Null + Null;
0x002565        F3240000                 pop r0;
0x002566        DDF0EF0C                 jump $pop_rLink_and_rts;

 <$sbcdec.reset_decoder>
0x002567        F3D00000                 push rLink;
0x002568        01200010                 r0 = Null + 16;
0x002569        D1B70005                 r9 = M[r5 + 5];
0x00256A        D52B003B                 M[r9 + 59] = r0;
0x00256B        E1F0FF76                 call $sbcdec.silence_decoder;
0x00256C        DDF0EF06                 jump $pop_rLink_and_rts;

 <$sbcdec.init_tables>
0x00256D        F3D00000                 push rLink;
0x00256E        D1B70005                 r9 = M[r5 + 5];
0x00256F        E1F0FDCF                 call $sbcdec.private.init_tables;
0x002570        E1F0FE9D                 call $sbc.private.init_tables_common;
0x002571        DDF0EF01                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SignalDetect.func>
0x002572        F3D00000                 push rLink;
0x002573        8D330008                 r1 = r1 LSHIFT 8;
0x002574        01A0651D                 r8 = Null + 25885;
0x002575        E1F00012                 call $M.cbops.signal_detect_op.message_handler.func;
0x002576        DDF0EEFC                 jump $pop_rLink_and_rts;

 <$sbcdec.byte_align>
0x002577        F3D00000                 push rLink;
0x002578        D12B003B                 r0 = M[r9 + 59];
0x002579        81220007                 r0 = r0 AND 0x7;
0x00257A        E1F0FDFC                 call $sbcdec.getbits;
0x00257B        DDF0EEF7                 jump $pop_rLink_and_rts;

 <$calc_us_per_sample_addr>
0x00257C        0140007E                 r2 = Null + 126;
0x00257D        0150007F                 r3 = Null + 127;
0x00257E        FD000000 2102BB80        Null = r0 - 48000;
0x002580        00540001                 if NE r3 = r2 + Null;
0x002581        DC0D000F                 rts;

 <$av_audio_out_silence_prime>
0x002582        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x002583        9122007D                 r0 = r0 ASHIFT -3;
0x002584        1920663C                 M[$M.av_audio_out_silence_insert.left_zero_samples] = r0 + Null;
0x002585        1920963C                 M[$M.av_audio_out_silence_insert.right_zero_samples] = r0 + Null;
0x002586        DC0D000F                 rts;

 <$M.cbops.signal_detect_op.message_handler.func>
0x002587        F3D00000                 push rLink;
0x002588        D53A0000                 M[r8 + 0] = r1;
0x002589        D54A0001                 M[r8 + 1] = r2;
0x00258A        DDF0EEE8                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetANCMode.func>
0x00258B        81330003                 r1 = r1 AND 0x3;
0x00258C        19309674                 M[$M.multi_chan_output.chain0_anc_enable] = r1 + Null;
0x00258D        DC0D000F                 rts;

 <$M.music_example_message.SetI2SMode.func>
0x00258E        19306677                 M[$M.multi_chan_output.i2s_slave0] = r1 + Null;
0x00258F        DC0D000F                 rts;

 <$sbc.init_static_common>
0x002590        DC0D000F                 rts;

 <$spi_comm.polled_service_routine>
0x002591        FD000000 0120AAAA        r0 = Null + 43690;
0x002593        29020046                 Null = r0 - M[$M.spi_block.cmd_ready];
0x002594        DC0D0001                 if NE rts;
0x002595        F3D00000                 push rLink;
0x002596        01C00032                 r10 = Null + 50;
0x002597        09309697                 r1 = Null + M[$M.spi_comm.last_addr];
0x002598        09200045                 r0 = Null + M[$M.spi_block.command];
0x002599        FD000000 0190AAAA        r7 = Null + 43690;
0x00259B        E5F00007                 do $M.spi_comm.polled_service_routine.loop;
0x00259C        E403002F                 Null = r1 + 1;
0x00259D        DD00000B                 if EQ jump $M.spi_comm.polled_service_routine.no_handler;
0x00259E        D1430001                 r2 = M[r1 + 1];
0x00259F        2002004F                 Null = r0 - r2;
0x0025A0        DD000003                 if EQ jump $M.spi_comm.polled_service_routine.found;
0x0025A1        D1330000                 r1 = M[r1 + 0];

 <$M.spi_comm.polled_service_routine.loop>
0x0025A2        E1F000B7                 call $error;

 <$M.spi_comm.polled_service_routine.found>
0x0025A3        D1D30002                 rLink = M[r1 + 2];
0x0025A4        01300005                 r1 = Null + 5;
0x0025A5        09400049                 r2 = Null + M[$M.spi_block.cmd_length];
0x0025A6        E00D000F                 call rLink;
0x0025A7        01905555                 r7 = Null + 21845;

 <$M.spi_comm.polled_service_routine.no_handler>
0x0025A8        01205555                 r0 = Null + 21845;
0x0025A9        FD000000 0130AAAA        r1 = Null + 43690;
0x0025AB        19A00049                 M[$M.spi_block.cmd_length] = r8 + Null;
0x0025AC        19900048                 M[$M.spi_block.cmd_status] = r7 + Null;
0x0025AD        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x0025AE        19300047                 M[$M.spi_block.cmd_complete] = r1 + Null;
0x0025AF        DDF0EEC3                 jump $pop_rLink_and_rts;

 <$cmpd100.initialize>
0x0025B0        D12A000A                 r0 = M[r8 + 10];
0x0025B1        D13A000B                 r1 = M[r8 + 11];
0x0025B2        D14A000C                 r2 = M[r8 + 12];
0x0025B3        D15A000E                 r3 = M[r8 + 14];
0x0025B4        D16A000F                 r4 = M[r8 + 15];
0x0025B5        2073002F                 r5 = r1 - r0;
0x0025B6        CC17005F                 rMAC = r5 * r3 (SS);
0x0025B7        D51A0012                 M[r8 + 18] = rMAC;
0x0025B8        2074003F                 r5 = r2 - r1;
0x0025B9        CC17006F                 rMAC = r5 * r4 (SS);
0x0025BA        D51A0013                 M[r8 + 19] = rMAC;
0x0025BB        D15A000D                 r3 = M[r8 + 13];
0x0025BC        D16A0010                 r4 = M[r8 + 16];
0x0025BD        2075004F                 r5 = r3 - r2;
0x0025BE        CC17006F                 rMAC = r5 * r4 (SS);
0x0025BF        D51A0014                 M[r8 + 20] = rMAC;
0x0025C0        01300000                 r1 = Null + 0;
0x0025C1        D16A0007                 r4 = M[r8 + 7];
0x0025C2        1863000F                 M[r4] = r1 + Null;
0x0025C3        DC0D000F                 rts;

 <$message.register_handler_with_mask>
0x0025C4        8966FFFF                 r4 = r4 XOR 0xffff;
0x0025C5        D5630003                 M[r1 + 3] = r4;
0x0025C6        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x0025C7        8520FFFF                 r0 = Null OR 0xffff;
0x0025C8        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x0025C9        F3D00000                 push rLink;
0x0025CA        E1F0EE5E                 call $block_interrupts;
0x0025CB        09209685                 r0 = Null + M[$message.last_addr];
0x0025CC        D5230000                 M[r1 + 0] = r0;
0x0025CD        19309685                 M[$message.last_addr] = r1 + Null;
0x0025CE        D5430001                 M[r1 + 1] = r2;
0x0025CF        D5530002                 M[r1 + 2] = r3;
0x0025D0        E1F0EE48                 call $interrupt.unblock;
0x0025D1        DDF0EEA1                 jump $pop_rLink_and_rts;

 <$message.send_ready_wait_for_go>
0x0025D2        F3D00000                 push rLink;
0x0025D3        013095BC                 r1 = Null + -27204;
0x0025D4        01407000                 r2 = Null + 28672;
0x0025D5        015025D8                 r3 = Null + 9688;
0x0025D6        E1F0FFF1                 call $message.register_handler;
0x0025D7        DDF00004                 jump $M.message.send_ready_wait_for_go.go_from_vm_setup_done;

 <$M.message.send_ready_wait_for_go.go_from_vm_handler>
0x0025D8        E420002F                 r0 = Null + 1;
0x0025D9        19206688                 M[$M.message.send_ready_wait_for_go.go_from_vm] = r0 + Null;
0x0025DA        DC0D000F                 rts;

 <$M.message.send_ready_wait_for_go.go_from_vm_setup_done>
0x0025DB        85408000                 r2 = Null OR 0x8000;
0x0025DC        E1F0ECCF                 call $message.send_short;

 <$M.message.send_ready_wait_for_go.vm_go_wait>
0x0025DD        09006688                 Null = Null + M[$M.message.send_ready_wait_for_go.go_from_vm];
0x0025DE        DD00FFFF                 if EQ jump $M.message.send_ready_wait_for_go.vm_go_wait;
0x0025DF        DDF0EE93                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x0025E0        F3D00000                 push rLink;
0x0025E1        013065E3                 r1 = Null + 26083;
0x0025E2        FD000000 01408007        r2 = Null + 32775;
0x0025E4        01501173                 r3 = Null + 4467;
0x0025E5        E1F0FFE2                 call $message.register_handler;
0x0025E6        013095C0                 r1 = Null + -27200;
0x0025E7        85408008                 r2 = Null OR 0x8008;
0x0025E8        01501173                 r3 = Null + 4467;
0x0025E9        E1F0FFDE                 call $message.register_handler;
0x0025EA        DDF0EE88                 jump $pop_rLink_and_rts;

 <$interrupt.initialise>
0x0025EB        01200015                 r0 = Null + 21;
0x0025EC        1920FE14                 M[0xfffe14] = r0 + Null;
0x0025ED        01200311                 r0 = Null + 785;
0x0025EE        1920FE15                 M[0xfffe15] = r0 + Null;
0x0025EF        E420002F                 r0 = Null + 1;
0x0025F0        1920FE11                 M[0xfffe11] = r0 + Null;
0x0025F1        1920FE12                 M[0xfffe12] = r0 + Null;
0x0025F2        1920FE13                 M[0xfffe13] = r0 + Null;
0x0025F3        1900FE4E                 M[0xfffe4e] = Null + Null;
0x0025F4        85EE0080                 rFlags = rFlags OR 0x80;
0x0025F5        DC0D000F                 rts;
0x0025F6        DDF0DA0A                 jump $reset;
0x0025F7        DDF0DA0B                 jump $interrupt.handler;

 <$message.unregister_handler>
0x0025F8        01C00032                 r10 = Null + 50;
0x0025F9        09309685                 r1 = Null + M[$message.last_addr];
0x0025FA        01409685                 r2 = Null + -27003;
0x0025FB        E5F0000B                 do $M.message.unregister_handler.find_id_loop;
0x0025FC        E403002F                 Null = r1 + 1;
0x0025FD        DD000009                 if EQ jump $M.message.unregister_handler.find_id_loop;
0x0025FE        D1230001                 r0 = M[r1 + 1];
0x0025FF        2002005F                 Null = r0 - r3;
0x002600        DD100004                 if NE jump $M.message.unregister_handler.get_next;
0x002601        D1230000                 r0 = M[r1 + 0];
0x002602        1842000F                 M[r2] = r0 + Null;
0x002603        DC0D000F                 rts;

 <$M.message.unregister_handler.get_next>
0x002604        01430000                 r2 = r1 + 0;
0x002605        D1330000                 r1 = M[r1 + 0];

 <$M.message.unregister_handler.find_id_loop>
0x002606        DC0D000F                 rts;

 <$wall_clock.initialise>
0x002607        F3D00000                 push rLink;
0x002608        013095C4                 r1 = Null + -27196;
0x002609        8540801C                 r2 = Null OR 0x801c;
0x00260A        01500EBB                 r3 = Null + 3771;
0x00260B        E1F0FFBC                 call $message.register_handler;
0x00260C        013065EB                 r1 = Null + 26091;
0x00260D        8540801D                 r2 = Null OR 0x801d;
0x00260E        01501476                 r3 = Null + 5238;
0x00260F        E1F0FFB8                 call $message.register_handler;
0x002610        DDF0EE62                 jump $pop_rLink_and_rts;

 <$audio_proc.hq_peq.initialize>
0x002611        D1A90003                 r8 = M[r7 + 3];
0x002612        D12A0000                 r0 = M[r8 + 0];
0x002613        812200FF                 r0 = r0 AND 0xff;
0x002614        D5290006                 M[r7 + 6] = r0;
0x002615        99C20003                 r10 = r0 * 3 (int);
0x002616        01CC0002                 r10 = r10 + 2;
0x002617        D5C90007                 M[r7 + 7] = r10;
0x002618        01390009                 r1 = r7 + 9;
0x002619        D5390004                 M[r7 + 4] = r1;
0x00261A        99C20005                 r10 = r0 * 5 (int);
0x00261B        D5C90008                 M[r7 + 8] = r10;
0x00261C        012A0003                 r0 = r8 + 3;
0x00261D        D5290005                 M[r7 + 5] = r0;
0x00261E        DC0D000F                 rts;

 <$audio_proc.delay.initialize>
0x00261F        D12A0002                 r0 = M[r8 + 2];
0x002620        F3D00000                 push rLink;
0x002621        E1F0EE0E                 call $cbuffer.get_read_address_and_size;
0x002622        5000002F                 I0 = Null + r0;
0x002623        50C0003F                 L0 = Null + r1;
0x002624        00C3000F                 r10 = r1 + Null;
0x002625        F3D40000                 pop rLink;
0x002626        01200000                 r0 = Null + 0;
0x002627        E5F00002                 do $M.audio_proc.delay.initialize.loop_delay_init;
0x002628        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.audio_proc.delay.initialize.loop_delay_init>
0x002629        51C00000                 L0 = Null + 0;
0x00262A        DC0D000F                 rts;

 <$_stack_initialise>
0x00262B        FD0000FF 01B033D9        r9 = Null + -52263;
0x00262D        19B0FE67                 M[0xfffe67] = r9 + Null;
0x00262E        FD0000FF 01B0331A        r9 = Null + -52454;
0x002630        19B0FE66                 M[0xfffe66] = r9 + Null;
0x002631        19B0FE68                 M[0xfffe68] = r9 + Null;
0x002632        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x002633        E420002F                 r0 = Null + 1;
0x002634        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x002635        DC0D000F                 rts;

 <$audio_proc.peq.zero_delay_data>
0x002636        F3C00000                 push r10;
0x002637        D1C90002                 r10 = M[r7 + 2];
0x002638        E4CC002F                 r10 = r10 + 1;
0x002639        91CC0001                 r10 = r10 ASHIFT 1;
0x00263A        01390009                 r1 = r7 + 9;
0x00263B        5000003F                 I0 = Null + r1;
0x00263C        0030000F                 r1 = Null + Null;
0x00263D        E5F00002                 do $M.audio_proc.peq.zero_delay_data.init_dly_ln_loop;
0x00263E        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.audio_proc.peq.zero_delay_data.init_dly_ln_loop>
0x00263F        F3C40000                 pop r10;
0x002640        DC0D000F                 rts;

 <$audio_proc.hq_peq.zero_delay_data>
0x002641        F3C00000                 push r10;
0x002642        D1C90002                 r10 = M[r7 + 2];
0x002643        99CC0003                 r10 = r10 * 3 (int);
0x002644        01CC0002                 r10 = r10 + 2;
0x002645        01390009                 r1 = r7 + 9;
0x002646        5000003F                 I0 = Null + r1;
0x002647        0030000F                 r1 = Null + Null;
0x002648        E5F00002                 do $M.audio_proc.hq_peq.zero_delay_data.init_dly_ln_loop;
0x002649        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.audio_proc.hq_peq.zero_delay_data.init_dly_ln_loop>
0x00264A        F3C40000                 pop r10;
0x00264B        DC0D000F                 rts;

 <$cbuffer.initialise>
0x00264C        F3D00000                 push rLink;
0x00264D        013095B8                 r1 = Null + -27208;
0x00264E        85408001                 r2 = Null OR 0x8001;
0x00264F        01500C99                 r3 = Null + 3225;
0x002650        E1F0FF77                 call $message.register_handler;
0x002651        DDF0EE21                 jump $pop_rLink_and_rts;

 <$spi_comm.register_handler>
0x002652        F3D00000                 push rLink;
0x002653        09209697                 r0 = Null + M[$M.spi_comm.last_addr];
0x002654        D5230000                 M[r1 + 0] = r0;
0x002655        19309697                 M[$M.spi_comm.last_addr] = r1 + Null;
0x002656        D5430001                 M[r1 + 1] = r2;
0x002657        D5530002                 M[r1 + 2] = r3;
0x002658        DDF0EE1A                 jump $pop_rLink_and_rts;

 <$error>
0x002659        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x00265A        09B09683                 r9 = Null + M[$error.handler];
0x00265B        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x00265C        E400001F                 break;
0x00265D        DDF0FFFF                 jump $M.error.error_loop;

 <$message.initialise>
0x00265E        0920E000                 r0 = Null + M[0xffe000];
0x00265F        19206687                 M[$message.last_seq_sent] = r0 + Null;
0x002660        DC0D000F                 rts;

 <$MeloD_Expansion.initialize>
0x002661        F3D00000                 push rLink;
0x002662        DDF0EE10                 jump $pop_rLink_and_rts;

 <$spi_comm.initialize>
0x002663        01205555                 r0 = Null + 21845;
0x002664        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x002665        DC0D000F                 rts;
------------------------------------------------------------------------
Region: flash.code
------------------------------------------------------------------------

 <$user_eq.userEqInitialize>
0x003000        F3D00000                 push rLink;
0x003001        09404600                 r2 = Null + M[$M.system_config.data.CurParams];
0x003002        81440007                 r2 = r2 AND 0x7;
0x003003        D1390000                 r1 = M[r7 + 0];
0x003004        E443005F                 r2 = MIN r1;
0x003005        D1290004                 r0 = M[r7 + 4];
0x003006        D1390005                 r1 = M[r7 + 5];
0x003007        03A40000                 r8 = r8 + r2;
0x003008        D3A00000                 r8 = M[r8 + Null];
0x003009        E45A002F                 r3 = r8 + 1;
0x00300A        DD10002A                 if NE jump $user_eq.calcBankCoefs.jump_entry;
0x00300B        E444003F                 r2 = r2 - 1;
0x00300C        D1590000                 r3 = M[r7 + 0];
0x00300D        09309632                 r1 = Null + M[$current_codec_sampling_rate];
0x00300E        FD000000 2103BB80        Null = r1 - 48000;
0x003010        00440050                 if EQ r2 = r2 + r3;
0x003011        D1590001                 r3 = M[r7 + 1];
0x003012        99550006                 r3 = r3 * 6 (int);
0x003013        01550003                 r3 = r3 + 3;
0x003014        9B540000                 r3 = r3 * r2 (int);
0x003015        03250000                 r0 = r0 + r3;
0x003016        F1000204                 pushm <r0, r7>;
0x003017        D1990002                 r7 = M[r7 + 2];
0x003018        D5290003                 M[r7 + 3] = r0;
0x003019        E1F0F5F8                 call $audio_proc.hq_peq.initialize;
0x00301A        F1040204                 popm <r0, r7>;
0x00301B        D1990003                 r7 = M[r7 + 3];
0x00301C        DD000003                 if EQ jump $user_eq.userEqInitialize.no2ndChannelEq;
0x00301D        D5290003                 M[r7 + 3] = r0;
0x00301E        E1F0F5F3                 call $audio_proc.hq_peq.initialize;

 <$user_eq.userEqInitialize.no2ndChannelEq>
0x00301F        DDF0E453                 jump $pop_rLink_and_rts;

 <$user_eq.eqInitialize>
0x003020        F3D00000                 push rLink;
0x003021        D1290004                 r0 = M[r7 + 4];
0x003022        D1390005                 r1 = M[r7 + 5];
0x003023        D3A00000                 r8 = M[r8 + Null];
0x003024        DD100010                 if NE jump $user_eq.calcBankCoefs.jump_entry;
0x003025        09409632                 r2 = Null + M[$current_codec_sampling_rate];
0x003026        FD000000 2104BB80        Null = r2 - 48000;
0x003028        00230000                 if EQ r0 = r1 + Null;
0x003029        F1000204                 pushm <r0, r7>;
0x00302A        D1990002                 r7 = M[r7 + 2];
0x00302B        D5290003                 M[r7 + 3] = r0;
0x00302C        E1F0F5E5                 call $audio_proc.hq_peq.initialize;
0x00302D        F1040204                 popm <r0, r7>;
0x00302E        D1990003                 r7 = M[r7 + 3];
0x00302F        DD000003                 if EQ jump $user_eq.eqInitialize.no2ndChannelEq;
0x003030        D5290003                 M[r7 + 3] = r0;
0x003031        E1F0F5E0                 call $audio_proc.hq_peq.initialize;

 <$user_eq.eqInitialize.no2ndChannelEq>
0x003032        DDF0E440                 jump $pop_rLink_and_rts;

 <$user_eq.calcBankCoefs.call_entry>
0x003033        F3D00000                 push rLink;

 <$user_eq.calcBankCoefs.jump_entry>
0x003034        D1490002                 r2 = M[r7 + 2];
0x003035        D1440003                 r2 = M[r2 + 3];
0x003036        2004002F                 Null = r2 - r0;
0x003037        00230000                 if EQ r0 = r1 + Null;
0x003038        F1000204                 pushm <r0, r7>;
0x003039        500000AF                 I0 = Null + r8;
0x00303A        5010002F                 I1 = Null + r0;
0x00303B        51C00000                 L0 = Null + 0;
0x00303C        51D00000                 L1 = Null + 0;
0x00303D        000A000F                 Null = r8 + Null;
0x00303E        DD100009                 if NE jump $user_eq.calcBankCoefs.NotNullBank;
0x00303F        01200000                 r0 = Null + 0;
0x003040        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003041        E420002F                 r0 = Null + 1;
0x003042        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003043        FD000040 01200000        r0 = Null + 4194304;
0x003045        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003046        DDF00018                 jump $user_eq.calcBankCoefs.switchToNewCoefs;

 <$user_eq.calcBankCoefs.NotNullBank>
0x003047        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003048        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003049        F3200000                 push r0;
0x00304A        E1F000AE                 call $user_eq.calcPreGain.call_entry;
0x00304B        4420001F                 r0 = Null + I1;
0x00304C        D1390001                 r1 = M[r7 + 1];
0x00304D        99330005                 r1 = r1 * 5 (int);
0x00304E        03230000                 r0 = r0 + r1;
0x00304F        5020002F                 I2 = Null + r0;

 <$user_eq.calcBandLoop>
0x003050        F3240000                 pop r0;
0x003051        E422003F                 r0 = r0 - 1;
0x003052        DD40000C                 if NEG jump $user_eq.calcBankCoefs.switchToNewCoefs;
0x003053        F3200000                 push r0;
0x003054        F1010007                 pushm <I0, I1, I2>;
0x003055        E1F00072                 call $user_eq.coefCalcBiquadBand.call_entry;
0x003056        F104001C                 popm <r0, r1, r2>;
0x003057        01220004                 r0 = r0 + 4;
0x003058        5000002F                 I0 = Null + r0;
0x003059        01330005                 r1 = r1 + 5;
0x00305A        5010003F                 I1 = Null + r1;
0x00305B        E444002F                 r2 = r2 + 1;
0x00305C        5020004F                 I2 = Null + r2;
0x00305D        DDF0FFF3                 jump $user_eq.calcBandLoop;

 <$user_eq.calcBankCoefs.switchToNewCoefs>
0x00305E        F1040204                 popm <r0, r7>;
0x00305F        F1000204                 pushm <r0, r7>;
0x003060        D1990002                 r7 = M[r7 + 2];
0x003061        D5290003                 M[r7 + 3] = r0;
0x003062        E1F0F5AF                 call $audio_proc.hq_peq.initialize;
0x003063        F1040204                 popm <r0, r7>;
0x003064        D1990003                 r7 = M[r7 + 3];
0x003065        DD000003                 if EQ jump $user_eq.calcBankCoefs.no2ndChannelEq;
0x003066        D5290003                 M[r7 + 3] = r0;
0x003067        E1F0F5AA                 call $audio_proc.hq_peq.initialize;

 <$user_eq.calcBankCoefs.no2ndChannelEq>
0x003068        DDF0E40A                 jump $pop_rLink_and_rts;

 <$user_eq.calcBandCoefs>
0x003069        F3D00000                 push rLink;
0x00306A        0062000F                 r4 = r0 + Null;
0x00306B        8122FFF0                 r0 = r0 AND 0xfff0;
0x00306C        E1F00027                 call $user_eq.calcParamAddrOffset;
0x00306D        00A2005F                 r8 = r0 + r3;
0x00306E        D1890002                 r6 = M[r7 + 2];
0x00306F        D1880003                 r6 = M[r6 + 3];
0x003070        2008003F                 Null = r6 - r1;
0x003071        DD000004                 if EQ jump $user_eq.calcBandCoefsB;
0x003072        0054000F                 r3 = r2 + Null;
0x003073        0043000F                 r2 = r1 + Null;
0x003074        DDF00002                 jump $user_eq.calcBandCoefsAorB;

 <$user_eq.calcBandCoefsB>
0x003075        0053000F                 r3 = r1 + Null;

 <$user_eq.calcBandCoefsAorB>
0x003076        5000005F                 I0 = Null + r3;
0x003077        5010004F                 I1 = Null + r2;
0x003078        D1C90001                 r10 = M[r7 + 1];
0x003079        99CC0006                 r10 = r10 * 6 (int);
0x00307A        01CC0003                 r10 = r10 + 3;
0x00307B        E5F00003                 do $user_eq.copyCurrentCoefsLoop;
0x00307C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00307D        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$user_eq.copyCurrentCoefsLoop>
0x00307E        500000AF                 I0 = Null + r8;
0x00307F        0026000F                 r0 = r4 + Null;
0x003080        E1F0002B                 call $user_eq.calcCoefAddrOffset;
0x003081        00A2004F                 r8 = r0 + r2;
0x003082        501000AF                 I1 = Null + r8;
0x003083        00A3004F                 r8 = r1 + r2;
0x003084        502000AF                 I2 = Null + r8;
0x003085        F1000210                 pushm <r2, r7>;
0x003086        0026000F                 r0 = r4 + Null;
0x003087        E1F00034                 call $user_eq.coefCalc;
0x003088        F1040210                 popm <r2, r7>;
0x003089        F1000210                 pushm <r2, r7>;
0x00308A        D1990002                 r7 = M[r7 + 2];
0x00308B        D5490003                 M[r7 + 3] = r2;
0x00308C        E1F0F585                 call $audio_proc.hq_peq.initialize;
0x00308D        F1040210                 popm <r2, r7>;
0x00308E        D1990003                 r7 = M[r7 + 3];
0x00308F        DD000003                 if EQ jump $user_eq.calcBandCoefs.no2ndChannelEq;
0x003090        D5490003                 M[r7 + 3] = r2;
0x003091        E1F0F580                 call $audio_proc.hq_peq.initialize;

 <$user_eq.calcBandCoefs.no2ndChannelEq>
0x003092        DDF0E3E0                 jump $pop_rLink_and_rts;

 <$user_eq.calcParamAddrOffset>
0x003093        F1000038                 pushm <r1, r2, r3>;
0x003094        81320F00                 r1 = r0 AND 0xf00;
0x003095        91330078                 r1 = r1 ASHIFT -8;
0x003096        814200F0                 r2 = r0 AND 0xf0;
0x003097        9144007C                 r2 = r2 ASHIFT -4;
0x003098        8152000F                 r3 = r0 AND 0xf;
0x003099        0025000F                 r0 = r3 + Null;
0x00309A        21030000                 Null = r1 - 0;
0x00309B        DD00000E                 if EQ jump $user_eq.completedParamAddrCalculation;
0x00309C        E433003F                 r1 = r1 - 1;
0x00309D        D1290001                 r0 = M[r7 + 1];
0x00309E        99220004                 r0 = r0 * 4 (int);
0x00309F        01220002                 r0 = r0 + 2;
0x0030A0        9B320000                 r1 = r1 * r0 (int);
0x0030A1        0023005F                 r0 = r1 + r3;
0x0030A2        E422002F                 r0 = r0 + 1;
0x0030A3        21040000                 Null = r2 - 0;
0x0030A4        DD000005                 if EQ jump $user_eq.completedParamAddrCalculation;
0x0030A5        E444003F                 r2 = r2 - 1;
0x0030A6        99440004                 r2 = r2 * 4 (int);
0x0030A7        03240000                 r0 = r0 + r2;
0x0030A8        01220002                 r0 = r0 + 2;

 <$user_eq.completedParamAddrCalculation>
0x0030A9        F1040038                 popm <r1, r2, r3>;
0x0030AA        DC0D000F                 rts;

 <$user_eq.calcCoefAddrOffset>
0x0030AB        F1000030                 pushm <r2, r3>;
0x0030AC        814200F0                 r2 = r0 AND 0xf0;
0x0030AD        9144007C                 r2 = r2 ASHIFT -4;
0x0030AE        8152000F                 r3 = r0 AND 0xf;
0x0030AF        0025000F                 r0 = r3 + Null;
0x0030B0        21040000                 Null = r2 - 0;
0x0030B1        DD000008                 if EQ jump $user_eq.completedCoefAddrCalculation;
0x0030B2        E444003F                 r2 = r2 - 1;
0x0030B3        D1290001                 r0 = M[r7 + 1];
0x0030B4        99220005                 r0 = r0 * 5 (int);
0x0030B5        01220003                 r0 = r0 + 3;
0x0030B6        0034002F                 r1 = r2 + r0;
0x0030B7        99240005                 r0 = r2 * 5 (int);
0x0030B8        01220003                 r0 = r0 + 3;

 <$user_eq.completedCoefAddrCalculation>
0x0030B9        F1040030                 popm <r2, r3>;
0x0030BA        DC0D000F                 rts;

 <$user_eq.coefCalc>
0x0030BB        F3D00000                 push rLink;
0x0030BC        814200F0                 r2 = r0 AND 0xf0;
0x0030BD        9144007C                 r2 = r2 ASHIFT -4;
0x0030BE        DD10000A                 if NE jump $user_eq.coefCalcBiquadBand.jump_entry;
0x0030BF        8122000F                 r0 = r0 AND 0xf;
0x0030C0        21020000                 Null = r0 - 0;
0x0030C1        DD000033                 if EQ jump $user_eq.calcNumBands.jump_entry;
0x0030C2        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0030C3        E402003F                 Null = r0 - 1;
0x0030C4        DD000035                 if EQ jump $user_eq.calcPreGain.jump_entry;
0x0030C5        F3D40000                 pop rLink;
0x0030C6        DC0D000F                 rts;

 <$user_eq.coefCalcBiquadBand.call_entry>
0x0030C7        F3D00000                 push rLink;

 <$user_eq.coefCalcBiquadBand.jump_entry>
0x0030C8        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030C9        21020000                 Null = r0 - 0;
0x0030CA        DD000044                 if EQ jump $user_eq.calcBypass.jump_entry;
0x0030CB        019014F9                 r7 = Null + 5369;
0x0030CC        E402003F                 Null = r0 - 1;
0x0030CD        DD000044                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030CE        0190152E                 r7 = Null + 5422;
0x0030CF        21020002                 Null = r0 - 2;
0x0030D0        DD000041                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030D1        01901562                 r7 = Null + 5474;
0x0030D2        21020003                 Null = r0 - 3;
0x0030D3        DD00003E                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030D4        01901661                 r7 = Null + 5729;
0x0030D5        21020007                 Null = r0 - 7;
0x0030D6        DD00005B                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030D7        019016B2                 r7 = Null + 5810;
0x0030D8        21020008                 Null = r0 - 8;
0x0030D9        DD000058                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030DA        01901702                 r7 = Null + 5890;
0x0030DB        21020009                 Null = r0 - 9;
0x0030DC        DD000055                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030DD        01901602                 r7 = Null + 5634;
0x0030DE        21020004                 Null = r0 - 4;
0x0030DF        DD00007B                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E0        01901620                 r7 = Null + 5664;
0x0030E1        21020005                 Null = r0 - 5;
0x0030E2        DD000078                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E3        01901640                 r7 = Null + 5696;
0x0030E4        21020006                 Null = r0 - 6;
0x0030E5        DD000075                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E6        019017E9                 r7 = Null + 6121;
0x0030E7        2102000A                 Null = r0 - 10;
0x0030E8        DD0000A0                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030E9        0190180A                 r7 = Null + 6154;
0x0030EA        2102000B                 Null = r0 - 11;
0x0030EB        DD00009D                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030EC        0190182D                 r7 = Null + 6189;
0x0030ED        2102000C                 Null = r0 - 12;
0x0030EE        DD00009A                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030EF        2102000D                 Null = r0 - 13;
0x0030F0        DD0000CE                 if EQ jump $user_eq.calcPEQ.jump_entry;

 <$user_eq.coefCalcInvalid>
0x0030F1        F3D40000                 pop rLink;
0x0030F2        DC0D000F                 rts;

 <$user_eq.calcNumBands.call_entry>
0x0030F3        F3D00000                 push rLink;

 <$user_eq.calcNumBands.jump_entry>
0x0030F4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030F5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030F6        F3D40000                 pop rLink;
0x0030F7        DC0D000F                 rts;

 <$user_eq.calcPreGain.call_entry>
0x0030F8        F3D00000                 push rLink;

 <$user_eq.calcPreGain.jump_entry>
0x0030F9        0120003C                 r0 = Null + 60;
0x0030FA        E1F0EA6F                 call $kal_float_lib.int_to_float;
0x0030FB        0042000F                 r2 = r0 + Null;
0x0030FC        0053000F                 r3 = r1 + Null;
0x0030FD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030FE        8D220008                 r0 = r0 LSHIFT 8;
0x0030FF        91220078                 r0 = r0 ASHIFT -8;
0x003100        0130F790                 r1 = Null + -2160;
0x003101        E423006F                 r0 = MAX r1;
0x003102        013002D0                 r1 = Null + 720;
0x003103        E423005F                 r0 = MIN r1;
0x003104        E1F0EA65                 call $kal_float_lib.int_to_float;
0x003105        E1F0EABB                 call $kal_float_lib.div;
0x003106        E1F0E391                 call $kal_filter_coef_lib.__db2lin;
0x003107        812200FF                 r0 = r0 AND 0xff;
0x003108        2122007F                 r0 = r0 - 127;
0x003109        8D33007F                 r1 = r1 LSHIFT -1;
0x00310A        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00310B        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x00310C        F3D40000                 pop rLink;
0x00310D        DC0D000F                 rts;

 <$user_eq.calcBypass.jump_entry>
0x00310E        F1030006                 SP = SP + 6;
0x00310F        E1F0E3DD                 call $kal_filter_coef_lib.calc_bypass;
0x003110        DDF000E7                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP1.jump_entry>
0x003111        F1030006                 SP = SP + 6;
0x003112        01200003                 r0 = Null + 3;
0x003113        E1F0EA56                 call $kal_float_lib.int_to_float;
0x003114        0042000F                 r2 = r0 + Null;
0x003115        0053000F                 r3 = r1 + Null;
0x003116        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003117        FD000000 0170BB80        r5 = Null + 48000;
0x003119        09609632                 r4 = Null + M[$current_codec_sampling_rate];
0x00311A        00670000                 if EQ r4 = r5 + Null;
0x00311B        FD00003A 01700CC8        r5 = Null + 3804360;
0x00311D        CC66007F                 r4 = r4 * r5 (SS);
0x00311E        99660003                 r4 = r4 * 3 (int);
0x00311F        2002006F                 Null = r0 - r4;
0x003120        DDC000D5                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003121        E430002F                 r1 = Null + 1;
0x003122        E423006F                 r0 = MAX r1;
0x003123        FD000000 0130EA60        r1 = Null + 60000;
0x003125        E423005F                 r0 = MIN r1;
0x003126        E1F0EA43                 call $kal_float_lib.int_to_float;
0x003127        E1F0EA99                 call $kal_float_lib.div;
0x003128        F100000C                 pushm <r0, r1>;
0x003129        FD000000 0130BB80        r1 = Null + 48000;
0x00312B        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x00312C        00230000                 if EQ r0 = r1 + Null;
0x00312D        E1F0EA3C                 call $kal_float_lib.int_to_float;
0x00312E        F100000C                 pushm <r0, r1>;
0x00312F        E009000F                 call r7;
0x003130        DDF000C7                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP2.jump_entry>
0x003131        F1030006                 SP = SP + 6;
0x003132        01200003                 r0 = Null + 3;
0x003133        E1F0EA36                 call $kal_float_lib.int_to_float;
0x003134        0042000F                 r2 = r0 + Null;
0x003135        0053000F                 r3 = r1 + Null;
0x003136        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003137        FD000000 0170BB80        r5 = Null + 48000;
0x003139        09609632                 r4 = Null + M[$current_codec_sampling_rate];
0x00313A        00670000                 if EQ r4 = r5 + Null;
0x00313B        FD00003A 01700CC8        r5 = Null + 3804360;
0x00313D        CC66007F                 r4 = r4 * r5 (SS);
0x00313E        99660003                 r4 = r4 * 3 (int);
0x00313F        2002006F                 Null = r0 - r4;
0x003140        DDC000B5                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003141        01300078                 r1 = Null + 120;
0x003142        E423006F                 r0 = MAX r1;
0x003143        FD000000 0130EA60        r1 = Null + 60000;
0x003145        E423005F                 r0 = MIN r1;
0x003146        E1F0EA23                 call $kal_float_lib.int_to_float;
0x003147        E1F0EA79                 call $kal_float_lib.div;
0x003148        F100000C                 pushm <r0, r1>;
0x003149        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314B        01300400                 r1 = Null + 1024;
0x00314C        E423006F                 r0 = MAX r1;
0x00314D        01302000                 r1 = Null + 8192;
0x00314E        E423005F                 r0 = MIN r1;
0x00314F        0130000C                 r1 = Null + 12;
0x003150        E1F0E9FE                 call $kal_float_lib.q_to_float;
0x003151        F100000C                 pushm <r0, r1>;
0x003152        FD000000 0130BB80        r1 = Null + 48000;
0x003154        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x003155        00230000                 if EQ r0 = r1 + Null;
0x003156        E1F0EA13                 call $kal_float_lib.int_to_float;
0x003157        F100000C                 pushm <r0, r1>;
0x003158        E009000F                 call r7;
0x003159        DDF0009E                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf1.jump_entry>
0x00315A        F1030006                 SP = SP + 6;
0x00315B        01200003                 r0 = Null + 3;
0x00315C        E1F0EA0D                 call $kal_float_lib.int_to_float;
0x00315D        0042000F                 r2 = r0 + Null;
0x00315E        0053000F                 r3 = r1 + Null;
0x00315F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003160        FD000000 0170BB80        r5 = Null + 48000;
0x003162        09609632                 r4 = Null + M[$current_codec_sampling_rate];
0x003163        00670000                 if EQ r4 = r5 + Null;
0x003164        FD00003A 01700CC8        r5 = Null + 3804360;
0x003166        CC66007F                 r4 = r4 * r5 (SS);
0x003167        99660003                 r4 = r4 * 3 (int);
0x003168        2002006F                 Null = r0 - r4;
0x003169        DDC0008C                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x00316A        0130003C                 r1 = Null + 60;
0x00316B        E423006F                 r0 = MAX r1;
0x00316C        FD000000 0130EA60        r1 = Null + 60000;
0x00316E        E423005F                 r0 = MIN r1;
0x00316F        E1F0E9FA                 call $kal_float_lib.int_to_float;
0x003170        E1F0EA50                 call $kal_float_lib.div;
0x003171        F100000C                 pushm <r0, r1>;
0x003172        0120003C                 r0 = Null + 60;
0x003173        E1F0E9F6                 call $kal_float_lib.int_to_float;
0x003174        0042000F                 r2 = r0 + Null;
0x003175        0053000F                 r3 = r1 + Null;
0x003176        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003177        8D220008                 r0 = r0 LSHIFT 8;
0x003178        91220078                 r0 = r0 ASHIFT -8;
0x003179        0130FD30                 r1 = Null + -720;
0x00317A        E423006F                 r0 = MAX r1;
0x00317B        013002D0                 r1 = Null + 720;
0x00317C        E423005F                 r0 = MIN r1;
0x00317D        E1F0E9EC                 call $kal_float_lib.int_to_float;
0x00317E        E1F0EA42                 call $kal_float_lib.div;
0x00317F        F100000C                 pushm <r0, r1>;
0x003180        FD000000 0130BB80        r1 = Null + 48000;
0x003182        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x003183        00230000                 if EQ r0 = r1 + Null;
0x003184        E1F0E9E5                 call $kal_float_lib.int_to_float;
0x003185        F100000C                 pushm <r0, r1>;
0x003186        E009000F                 call r7;
0x003187        DDF00070                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf2.jump_entry>
0x003188        F1030006                 SP = SP + 6;
0x003189        01200003                 r0 = Null + 3;
0x00318A        E1F0E9DF                 call $kal_float_lib.int_to_float;
0x00318B        0042000F                 r2 = r0 + Null;
0x00318C        0053000F                 r3 = r1 + Null;
0x00318D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00318E        FD000000 0170BB80        r5 = Null + 48000;
0x003190        09609632                 r4 = Null + M[$current_codec_sampling_rate];
0x003191        00670000                 if EQ r4 = r5 + Null;
0x003192        FD00003A 01700CC8        r5 = Null + 3804360;
0x003194        CC66007F                 r4 = r4 * r5 (SS);
0x003195        99660003                 r4 = r4 * 3 (int);
0x003196        2002006F                 Null = r0 - r4;
0x003197        DDC0005E                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003198        01300078                 r1 = Null + 120;
0x003199        E423006F                 r0 = MAX r1;
0x00319A        FD000000 0130EA60        r1 = Null + 60000;
0x00319C        E423005F                 r0 = MIN r1;
0x00319D        E1F0E9CC                 call $kal_float_lib.int_to_float;
0x00319E        E1F0EA22                 call $kal_float_lib.div;
0x00319F        F100000C                 pushm <r0, r1>;
0x0031A0        0120003C                 r0 = Null + 60;
0x0031A1        E1F0E9C8                 call $kal_float_lib.int_to_float;
0x0031A2        0042000F                 r2 = r0 + Null;
0x0031A3        0053000F                 r3 = r1 + Null;
0x0031A4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031A5        8D220008                 r0 = r0 LSHIFT 8;
0x0031A6        91220078                 r0 = r0 ASHIFT -8;
0x0031A7        0130FD30                 r1 = Null + -720;
0x0031A8        E423006F                 r0 = MAX r1;
0x0031A9        013002D0                 r1 = Null + 720;
0x0031AA        E423005F                 r0 = MIN r1;
0x0031AB        E1F0E9BE                 call $kal_float_lib.int_to_float;
0x0031AC        E1F0EA14                 call $kal_float_lib.div;
0x0031AD        F100000C                 pushm <r0, r1>;
0x0031AE        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031AF        01300400                 r1 = Null + 1024;
0x0031B0        E423006F                 r0 = MAX r1;
0x0031B1        01302000                 r1 = Null + 8192;
0x0031B2        E423005F                 r0 = MIN r1;
0x0031B3        0130000C                 r1 = Null + 12;
0x0031B4        E1F0E99A                 call $kal_float_lib.q_to_float;
0x0031B5        F100000C                 pushm <r0, r1>;
0x0031B6        FD000000 0130BB80        r1 = Null + 48000;
0x0031B8        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x0031B9        00230000                 if EQ r0 = r1 + Null;
0x0031BA        E1F0E9AF                 call $kal_float_lib.int_to_float;
0x0031BB        F100000C                 pushm <r0, r1>;
0x0031BC        E009000F                 call r7;
0x0031BD        DDF0003A                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcPEQ.jump_entry>
0x0031BE        F1030006                 SP = SP + 6;
0x0031BF        01200003                 r0 = Null + 3;
0x0031C0        E1F0E9A9                 call $kal_float_lib.int_to_float;
0x0031C1        0042000F                 r2 = r0 + Null;
0x0031C2        0053000F                 r3 = r1 + Null;
0x0031C3        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031C4        FD000000 0170BB80        r5 = Null + 48000;
0x0031C6        09609632                 r4 = Null + M[$current_codec_sampling_rate];
0x0031C7        00670000                 if EQ r4 = r5 + Null;
0x0031C8        FD00003A 01700CC8        r5 = Null + 3804360;
0x0031CA        CC66007F                 r4 = r4 * r5 (SS);
0x0031CB        99660003                 r4 = r4 * 3 (int);
0x0031CC        2002006F                 Null = r0 - r4;
0x0031CD        DDC00028                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x0031CE        0130003C                 r1 = Null + 60;
0x0031CF        E423006F                 r0 = MAX r1;
0x0031D0        FD000000 0130EA60        r1 = Null + 60000;
0x0031D2        E423005F                 r0 = MIN r1;
0x0031D3        E1F0E996                 call $kal_float_lib.int_to_float;
0x0031D4        E1F0E9EC                 call $kal_float_lib.div;
0x0031D5        F100000C                 pushm <r0, r1>;
0x0031D6        0120003C                 r0 = Null + 60;
0x0031D7        E1F0E992                 call $kal_float_lib.int_to_float;
0x0031D8        0042000F                 r2 = r0 + Null;
0x0031D9        0053000F                 r3 = r1 + Null;
0x0031DA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031DB        8D220008                 r0 = r0 LSHIFT 8;
0x0031DC        91220078                 r0 = r0 ASHIFT -8;
0x0031DD        0130F790                 r1 = Null + -2160;
0x0031DE        E423006F                 r0 = MAX r1;
0x0031DF        013002D0                 r1 = Null + 720;
0x0031E0        E423005F                 r0 = MIN r1;
0x0031E1        E1F0E988                 call $kal_float_lib.int_to_float;
0x0031E2        E1F0E9DE                 call $kal_float_lib.div;
0x0031E3        F100000C                 pushm <r0, r1>;
0x0031E4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031E5        01300400                 r1 = Null + 1024;
0x0031E6        E423006F                 r0 = MAX r1;
0x0031E7        FD000000 01308000        r1 = Null + 32768;
0x0031E9        E423005F                 r0 = MIN r1;
0x0031EA        0130000C                 r1 = Null + 12;
0x0031EB        E1F0E963                 call $kal_float_lib.q_to_float;
0x0031EC        F100000C                 pushm <r0, r1>;
0x0031ED        FD000000 0130BB80        r1 = Null + 48000;
0x0031EF        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x0031F0        00230000                 if EQ r0 = r1 + Null;
0x0031F1        E1F0E978                 call $kal_float_lib.int_to_float;
0x0031F2        F100000C                 pushm <r0, r1>;
0x0031F3        E1F0E65E                 call $kal_filter_coef_lib.calc_peq;
0x0031F4        DDF00003                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.substituteBypassFilter.jump_entry>
0x0031F5        E1F0E2F7                 call $kal_filter_coef_lib.calc_bypass;
0x0031F6        DDF00001                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.pop_biquad_coefs_and_rts>
0x0031F7        F3240000                 pop r0;
0x0031F8        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031F9        F3240000                 pop r0;
0x0031FA        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FB        F3240000                 pop r0;
0x0031FC        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FD        F3240000                 pop r0;
0x0031FE        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FF        F3240000                 pop r0;
0x003200        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003201        F3240000                 pop r0;
0x003202        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x003203        F3D40000                 pop rLink;
0x003204        DC0D000F                 rts;

 <$main>
0x003205        0920963A                 r0 = Null + M[$reset_count1];
0x003206        E422002F                 r0 = r0 + 1;
0x003207        1920963A                 M[$reset_count1] = r0 + Null;
0x003208        E402003F                 Null = r0 - 1;
0x003209        DD10F450                 if NE jump $error;
0x00320A        E1F0F421                 call $_stack_initialise;
0x00320B        E1F0F3E0                 call $interrupt.initialise;
0x00320C        E1F0F452                 call $message.initialise;
0x00320D        E1F0F43F                 call $cbuffer.initialise;
0x00320E        E1F0F3D2                 call $pskey.initialise;
0x00320F        E1F0F3F8                 call $wall_clock.initialise;
0x003210        E1F0CE2A                 call $flash.init_dmconst;
0x003211        FD0000FF 01307FFC        r1 = Null + -32772;
0x003213        01401070                 r2 = Null + 4208;
0x003214        015035AE                 r3 = Null + 13742;
0x003215        E1F0F3B2                 call $message.register_handler;
0x003216        013000BC                 r1 = Null + 188;
0x003217        01401071                 r2 = Null + 4209;
0x003218        0150367C                 r3 = Null + 13948;
0x003219        E1F0F3AE                 call $message.register_handler;
0x00321A        013065DB                 r1 = Null + 26075;
0x00321B        01401072                 r2 = Null + 4210;
0x00321C        01501159                 r3 = Null + 4441;
0x00321D        E1F0F3AA                 call $message.register_handler;
0x00321E        E1F0F445                 call $spi_comm.initialize;
0x00321F        E1F0048B                 call $music_example.power_up_reset;
0x003220        01401000                 r2 = Null + 4096;
0x003221        FD000000 0150E00B        r3 = Null + 57355;
0x003223        0960963D                 r4 = Null + M[$music_example.Version];
0x003224        8D660078                 r4 = r4 LSHIFT -8;
0x003225        E1F0E086                 call $message.send_short;
0x003226        0160933D                 r4 = Null + -27843;
0x003227        E1F0E1CF                 call $frame_sync.run_function_table;
0x003228        0120322D                 r0 = Null + 12845;
0x003229        19206681                 M[$cbuffer.write_port_connect_address] = r0 + Null;
0x00322A        01203230                 r0 = Null + 12848;
0x00322B        19209681                 M[$cbuffer.write_port_disconnect_address] = r0 + Null;
0x00322C        DDF00008                 jump $M.main.skip_port_handlers;

 <$M.main.write_port_connected_handler>
0x00322D        2143000C                 r2 = r1 - 12;
0x00322E        D1246451                 r0 = M[r2 + 25681];
0x00322F        DC02000F                 jump r0;

 <$M.main.write_port_disconnected_handler>
0x003230        2143000C                 r2 = r1 - 12;
0x003231        D124645D                 r0 = M[r2 + 25693];
0x003232        DC02000F                 jump r0;

 <$M.main.dummy>
0x003233        DC0D000F                 rts;

 <$M.main.skip_port_handlers>
0x003234        019063C7                 r7 = Null + 25543;
0x003235        E1F0E0AB                 call $latency.reset_encoded_latency;
0x003236        E1F0F39C                 call $message.send_ready_wait_for_go;

 <$M.main.wait_for_long_message_workaround>
0x003237        0900664E                 Null = Null + M[$SetOutputDevType_message_received];
0x003238        DD00FFFF                 if EQ jump $M.main.wait_for_long_message_workaround;
0x003239        E1F0EC88                 call $conn_init;
0x00323A        015065D7                 r3 = Null + 26071;
0x00323B        E1F00248                 call $multi_chan_port_scan_and_routing_config;
0x00323C        E1F00386                 call $multi_chan_config_tone_mixing;
0x00323D        E1F001E6                 call $codec_resampler.config;
0x00323E        E1F00172                 call $config_rate_matching;
0x00323F        E1F000A7                 call $codec_rate_adj.config_buffers;
0x003240        E1F000D5                 call $codec_rate_adj.config_quality;
0x003241        01A003D4                 r8 = Null + 980;
0x003242        E1F0F265                 call $config_usb;
0x003243        E1F0046C                 call $set_output_handler_timer;
0x003244        FD0000FF 01304F7C        r1 = Null + -45188;
0x003246        09406639                 r2 = Null + M[$tmr_period_audio_copy];
0x003247        01500EEA                 r3 = Null + 3818;
0x003248        E1F0E21D                 call $timer.schedule_event_in;
0x003249        FD0000FF 0130377C        r1 = Null + -51332;
0x00324B        09409638                 r2 = Null + M[$tmr_period_con_copy];
0x00324C        01500E95                 r3 = Null + 3733;
0x00324D        E1F0E218                 call $timer.schedule_event_in;
0x00324E        013095B4                 r1 = Null + -27212;
0x00324F        09406680                 r2 = Null + M[$tmr_period_tone_copy];
0x003250        01500DE0                 r3 = Null + 3552;
0x003251        E1F0E214                 call $timer.schedule_event_in;
0x003252        013000A4                 r1 = Null + 164;
0x003253        FD00000F 01404240        r2 = Null + 1000000;
0x003255        0150253F                 r3 = Null + 9535;
0x003256        E1F0E20F                 call $timer.schedule_event_in;

 <$M.main.frame_loop>
0x003257        E1F0F33A                 call $spi_comm.polled_service_routine;
0x003258        0920006F                 r0 = Null + M[$app_config.io];
0x003259        21020005                 Null = r0 - 5;
0x00325A        DD100003                 if NE jump $M.main.skip_usb;
0x00325B        E1F0F305                 call $usb_cond_buffer_reset;
0x00325C        DDF00019                 jump $M.main.skip_a2dp_decode;

 <$M.main.skip_usb>
0x00325D        21020008                 Null = r0 - 8;
0x00325E        DD000017                 if EQ jump $M.main.skip_a2dp_decode;

 <$M.main.start_profiler>
0x00325F        01A0647F                 r8 = Null + 25727;
0x003260        E1F0DC03                 call $M.mips_profile.mainstart;
0x003261        0170037F                 r5 = Null + 895;
0x003262        E1F0EB89                 call $codec.av_decode;
0x003263        09200390                 r0 = Null + M[0x390];
0x003264        E110F31E                 if NE call $av_audio_out_silence_prime;
0x003265        09200390                 r0 = Null + M[0x390];
0x003266        E100F2E2                 if EQ call $av_audio_out_silence_insert;
0x003267        E1F0D45B                 call $sra_calcrate;
0x003268        09009670                 Null = Null + M[$M.configure_latency_reporting.enabled];
0x003269        DD000003                 if EQ jump $M.main.skip_latency_measurement;
0x00326A        019063C7                 r7 = Null + 25543;
0x00326B        E1F0D30C                 call $latency.calc_encoded_latency;

 <$M.main.skip_latency_measurement>
0x00326C        01A0647F                 r8 = Null + 25727;
0x00326D        E1F0DC03                 call $M.mips_profile.mainend;
0x00326E        D12A0006                 r0 = M[r8 + 6];
0x00326F        1920956A                 M[$music_example.PeakMipsDecoder] = r0 + Null;
0x003270        0170037F                 r5 = Null + 895;
0x003271        D1270006                 r0 = M[r5 + 6];
0x003272        21020000                 Null = r0 - 0;
0x003273        E110F087                 if NE call $SystemSleep;
0x003274        DDF00002                 jump $M.main.done_decode;

 <$M.main.skip_a2dp_decode>
0x003275        E1F0D44D                 call $sra_calcrate;

 <$M.main.done_decode>
0x003276        0900663D                 Null = Null + M[$codec_resampler.resampler_active];
0x003277        E11001D4                 if NE call $codec_resampler.run_resampler;
0x003278        0900667D                 Null = Null + M[$chain0_hw_warp_enable];
0x003279        E1000096                 if EQ call $codec_rate_adj.run_rate_adjustment;
0x00327A        01A093BD                 r8 = Null + -27715;
0x00327B        09006673                 Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x00327C        E110D811                 if NE call $pcm_sync_calc_rate;
0x00327D        0950963F                 r3 = Null + M[$music_example.frame_processing_size];
0x00327E        E1F0E741                 call $M.Subwoofer.set_frame_size;
0x00327F        09206410                 r0 = Null + M[$M.system_config.data.stream_map_left_in];
0x003280        E1F0E190                 call $cbuffer.calc_amount_data;
0x003281        2002005F                 Null = r0 - r3;
0x003282        DD40FFD5                 if NEG jump $M.main.frame_loop;
0x003283        0920641D                 r0 = Null + M[$M.system_config.data.stream_map_primary_left_out];
0x003284        E1F0E17C                 call $cbuffer.calc_amount_space;
0x003285        2002005F                 Null = r0 - r3;
0x003286        DD40FFD1                 if NEG jump $M.main.frame_loop;
0x003287        E1F0EF95                 call $jitter_buffering;
0x003288        0900963B                 Null = Null + M[$M.jitter_buffering.is_buffering];
0x003289        DD10FFCE                 if NE jump $M.main.frame_loop;
0x00328A        E1F00223                 call $music_example_process;
0x00328B        E1F0E73E                 call $M.Subwoofer.transmit_wireless_subwoofer_audio;
0x00328C        DDF0FFCB                 jump $M.main.frame_loop;

 <$multi_chan_config_cbops_copy_strucs>
0x00328D        F3D00000                 push rLink;
0x00328E        09009672                 Null = Null + M[$M.multi_chan_output.num_chain0_channels];
0x00328F        DD000037                 if EQ jump $M.multi_chan_config_cbops_copy_strucs.skip_chain0_config;
0x003290        092065D7                 r0 = Null + M[$interface_map_struc];
0x003291        093065D9                 r1 = Null + M[0x65d9];
0x003292        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x003294        83230000                 r0 = r0 AND r1;
0x003295        0130000F                 r1 = Null + 15;
0x003296        E1F003C2                 call $multi_chan_calc_cbops_channel_enables;
0x003297        19506675                 M[$M.multi_chan_output.chain0_tone_mix_en] = r3 + Null;
0x003298        09209673                 r0 = Null + M[$M.multi_chan_output.chain0_enables];
0x003299        8122003F                 r0 = r0 AND 0x3f;
0x00329A        E422009F                 r0 = ONEBITCOUNT r0;
0x00329B        1920944A                 M[0xff944a] = r0 + Null;
0x00329C        09509674                 r3 = Null + M[$M.multi_chan_output.chain0_anc_enable];
0x00329D        09402BFF                 r2 = Null + M[$current_dac_sampling_rate];
0x00329E        21050002                 Null = r3 - 2;
0x00329F        DD00000B                 if EQ jump $M.multi_chan_config_cbops_copy_strucs.anc_192k;
0x0032A0        FD0000FF 01207BCD        r0 = Null + -33843;
0x0032A2        FD0000FF 01307F34        r1 = Null + -32972;
0x0032A4        FD000000 2104BB80        Null = r2 - 48000;
0x0032A6        00230000                 if EQ r0 = r1 + Null;
0x0032A7        192007B1                 M[0x7b1] = r0 + Null;
0x0032A8        19204F6A                 M[0x4f6a] = r0 + Null;
0x0032A9        DDF0000A                 jump $M.multi_chan_config_cbops_copy_strucs.anc_rate_configured;

 <$M.multi_chan_config_cbops_copy_strucs.anc_192k>
0x0032AA        FD0000FF 01204F60        r0 = Null + -45216;
0x0032AC        FD0000FF 01307F80        r1 = Null + -32896;
0x0032AE        FD000000 2104BB80        Null = r2 - 48000;
0x0032B0        00230000                 if EQ r0 = r1 + Null;
0x0032B1        192007B1                 M[0x7b1] = r0 + Null;
0x0032B2        19204F6A                 M[0x4f6a] = r0 + Null;

 <$M.multi_chan_config_cbops_copy_strucs.anc_rate_configured>
0x0032B3        09209672                 r0 = Null + M[$M.multi_chan_output.num_chain0_channels];
0x0032B4        192007B0                 M[0x7b0] = r0 + Null;
0x0032B5        E422002F                 r0 = r0 + 1;
0x0032B6        19204F69                 M[0x4f69] = r0 + Null;
0x0032B7        09209672                 r0 = Null + M[$M.multi_chan_output.num_chain0_channels];
0x0032B8        192064B2                 M[0x64b2] = r0 + Null;
0x0032B9        E422002F                 r0 = r0 + 1;
0x0032BA        19209478                 M[0xff9478] = r0 + Null;
0x0032BB        E422002F                 r0 = r0 + 1;
0x0032BC        192064BA                 M[0x64ba] = r0 + Null;
0x0032BD        E422002F                 r0 = r0 + 1;
0x0032BE        19209480                 M[0xff9480] = r0 + Null;
0x0032BF        E422002F                 r0 = r0 + 1;
0x0032C0        192064C2                 M[0x64c2] = r0 + Null;
0x0032C1        E422002F                 r0 = r0 + 1;
0x0032C2        19209488                 M[0xff9488] = r0 + Null;
0x0032C3        01206387                 r0 = Null + 25479;
0x0032C4        09309677                 r1 = Null + M[$M.multi_chan_output.chain0_sync_port];
0x0032C5        E1F003C0                 call $multi_chan_set_port_for_latency_calc;

 <$M.multi_chan_config_cbops_copy_strucs.skip_chain0_config>
0x0032C6        09006673                 Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x0032C7        DD00001A                 if EQ jump $M.multi_chan_config_cbops_copy_strucs.skip_chain1_config;
0x0032C8        092065D7                 r0 = Null + M[$interface_map_struc];
0x0032C9        093065D9                 r1 = Null + M[0x65d9];
0x0032CA        83230000                 r0 = r0 AND r1;
0x0032CB        0130000F                 r1 = Null + 15;
0x0032CC        E1F0038C                 call $multi_chan_calc_cbops_channel_enables;
0x0032CD        19509675                 M[$M.multi_chan_output.chain1_tone_mix_en] = r3 + Null;
0x0032CE        09206674                 r0 = Null + M[$M.multi_chan_output.chain1_enables];
0x0032CF        81220003                 r0 = r0 AND 0x3;
0x0032D0        E422009F                 r0 = ONEBITCOUNT r0;
0x0032D1        19206496                 M[0x6496] = r0 + Null;
0x0032D2        E440002F                 r2 = Null + 1;
0x0032D3        E450003F                 r3 = Null - 1;
0x0032D4        E460003F                 r4 = Null - 1;
0x0032D5        E470002F                 r5 = Null + 1;
0x0032D6        09206673                 r0 = Null + M[$M.multi_chan_output.num_chain1_channels];
0x0032D7        21020002                 Null = r0 - 2;
0x0032D8        DD400005                 if NEG jump $M.multi_chan_config_cbops_copy_strucs.conf_chai1_sra_op;
0x0032D9        01400002                 r2 = Null + 2;
0x0032DA        E450002F                 r3 = Null + 1;
0x0032DB        01600003                 r4 = Null + 3;
0x0032DC        01700002                 r5 = Null + 2;

 <$M.multi_chan_config_cbops_copy_strucs.conf_chai1_sra_op>
0x0032DD        19406328                 M[0x6328] = r2 + Null;
0x0032DE        19506329                 M[0x6329] = r3 + Null;
0x0032DF        1960632A                 M[0x632a] = r4 + Null;
0x0032E0        197064CA                 M[0x64ca] = r5 + Null;

 <$M.multi_chan_config_cbops_copy_strucs.skip_chain1_config>
0x0032E1        01500000                 r3 = Null + 0;
0x0032E2        E1F0016F                 call $multi_chan_soft_mute;
0x0032E3        09309658                 r1 = Null + M[$M.system_config.data.dithertype];
0x0032E4        E1F00308                 call $multi_chan_config_dither_type;
0x0032E5        DDF0E18D                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.config_buffers>
0x0032E6        F3D00000                 push rLink;
0x0032E7        E1F0E141                 call $block_interrupts;
0x0032E8        016000ED                 r4 = Null + 237;
0x0032E9        017095D2                 r5 = Null + -27182;
0x0032EA        0900663D                 Null = Null + M[$codec_resampler.resampler_active];
0x0032EB        DD100007                 if NE jump $codec_rate_adj.resampler_done;
0x0032EC        012000ED                 r0 = Null + 237;
0x0032ED        E1F0DFAE                 call $cbuffer.empty_buffer;
0x0032EE        012095D2                 r0 = Null + -27182;
0x0032EF        E1F0DFAC                 call $cbuffer.empty_buffer;
0x0032F0        016000AD                 r4 = Null + 173;
0x0032F1        017095CF                 r5 = Null + -27185;

 <$codec_rate_adj.resampler_done>
0x0032F2        0920667D                 r0 = Null + M[$chain0_hw_warp_enable];
0x0032F3        09229639                 r0 = r0 + M[$rate_match_disable];
0x0032F4        DD000006                 if EQ jump $codec_rate_adj.chain0_sw_rate_matching;
0x0032F5        0120012D                 r0 = Null + 301;
0x0032F6        E1F0DFA5                 call $cbuffer.empty_buffer;
0x0032F7        012095D5                 r0 = Null + -27179;
0x0032F8        E1F0DFA3                 call $cbuffer.empty_buffer;
0x0032F9        DDF00005                 jump $codec_rate_adj.rate_adj_done;

 <$codec_rate_adj.chain0_sw_rate_matching>
0x0032FA        1960932A                 M[$codec_rate_adj.stereo] = r4 + Null;
0x0032FB        1970932C                 M[0xff932c] = r5 + Null;
0x0032FC        0160012D                 r4 = Null + 301;
0x0032FD        017095D5                 r5 = Null + -27179;

 <$codec_rate_adj.rate_adj_done>
0x0032FE        19606410                 M[$M.system_config.data.stream_map_left_in] = r4 + Null;
0x0032FF        197093E5                 M[$M.system_config.data.stream_map_right_in] = r5 + Null;
0x003300        01202FCE                 r0 = Null + 12238;
0x003301        013093C5                 r1 = Null + -27707;
0x003302        0900967D                 Null = Null + M[$chain1_hw_warp_enable];
0x003303        00230001                 if NE r0 = r1 + Null;
0x003304        19206593                 M[0x6593] = r0 + Null;
0x003305        E1F0E113                 call $interrupt.unblock;
0x003306        0920667D                 r0 = Null + M[$chain0_hw_warp_enable];
0x003307        0922667D                 r0 = r0 + M[$chain0_hw_warp_enable];
0x003308        DD10E16A                 if NE jump $pop_rLink_and_rts;
0x003309        01600000                 r4 = Null + 0;
0x00330A        FD000000 01408004        r2 = Null + 32772;
0x00330C        01500003                 r3 = Null + 3;
0x00330D        E1F0DF9E                 call $message.send_short;
0x00330E        DDF0E164                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.run_rate_adjustment>
0x00330F        09009639                 Null = Null + M[$rate_match_disable];
0x003310        DC0D0001                 if NE rts;
0x003311        F3D00000                 push rLink;
0x003312        01A0932A                 r8 = Null + -27862;
0x003313        E1F0D325                 call $cbops.rate_adjustment_and_shift.Process;

 <$codec_rate_adj.done>
0x003314        DDF0E15E                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.config_quality>
0x003315        FD0000FF 01403507        r2 = Null + -51961;
0x003317        0150000C                 r3 = Null + 12;
0x003318        090047DE                 Null = Null + M[0x47de];
0x003319        DD000004                 if EQ jump $codec_rate_adj.set_warp_operator;
0x00331A        FD0000FF 014031A0        r2 = Null + -52832;
0x00331C        01500024                 r3 = Null + 36;

 <$codec_rate_adj.set_warp_operator>
0x00331D        1940932F                 M[0xff932f] = r2 + Null;
0x00331E        19509335                 M[0xff9335] = r3 + Null;
0x00331F        DC0D000F                 rts;

 <$codec_rate_adj.clear_history_buffers>
0x003320        01C00024                 r10 = Null + 36;
0x003321        01200080                 r0 = Null + 128;
0x003322        5000002F                 I0 = Null + r0;
0x003323        012000C0                 r0 = Null + 192;
0x003324        5010002F                 I1 = Null + r0;
0x003325        01200000                 r0 = Null + 0;
0x003326        E5F00003                 do $codec_rate_adj.audio_fill_loop1;
0x003327        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003328        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$codec_rate_adj.audio_fill_loop1>
0x003329        DC0D000F                 rts;

 <$M.music_example.GetControl.func>
0x00332A        F3D00000                 push rLink;
0x00332B        51406475                 I4 = Null + 25717;
0x00332C        5000003F                 I0 = Null + r1;
0x00332D        01C0000A                 r10 = Null + 10;
0x00332E        E5F00003                 do $M.music_example.GetControl.lp_copy_control;
0x00332F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003330        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.music_example.GetControl.lp_copy_control>
0x003331        09306640                 r1 = Null + M[$music_example.SystemVolume];
0x003332        1930664A                 M[$M.music_example.GetControl.local_sys_vol] = r1 + Null;
0x003333        09206475                 r0 = Null + M[$music_example.SpiSysControl];
0x003334        81028000                 Null = r0 AND 0x8000;
0x003335        DD000008                 if EQ jump $M.music_example.GetControl.dontupdateDAC;
0x003336        09306476                 r1 = Null + M[$music_example.OvrSystemVolume];
0x003337        8133000F                 r1 = r1 AND 0xf;
0x003338        1930664A                 M[$M.music_example.GetControl.local_sys_vol] = r1 + Null;
0x003339        0960664A                 r4 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x00333A        0056000F                 r3 = r4 + Null;
0x00333B        01401006                 r2 = Null + 4102;
0x00333C        E1F0DF6F                 call $message.send_short;

 <$M.music_example.GetControl.dontupdateDAC>
0x00333D        09206475                 r0 = Null + M[$music_example.SpiSysControl];
0x00333E        81021000                 Null = r0 AND 0x1000;
0x00333F        DD000011                 if EQ jump $M.music_example.GetControl.dontupdateAUX;
0x003340        0930664A                 r1 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x003341        09406479                 r2 = Null + M[$music_example.AuxOvrMasterVolumes];
0x003342        09506643                 r3 = Null + M[$music_example.Main.ToneVolume];
0x003343        0960647A                 r4 = Null + M[$music_example.AuxOvrTrimVolumes];
0x003344        91760074                 r5 = r4 ASHIFT -12;
0x003345        8D66000C                 r4 = r4 LSHIFT 12;
0x003346        91660074                 r4 = r4 ASHIFT -12;
0x003347        51009541                 I0 = Null + -27327;
0x003348        0300B100                 Null = Null + Null, M[I0,1] = r1;
0x003349        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x00334A        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x00334B        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x00334C        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x00334D        5000000F                 I0 = Null + Null;
0x00334E        01509541                 r3 = Null + -27327;
0x00334F        E1F0EE47                 call $M.music_example_message.AuxVolume.update_volumes;

 <$M.music_example.GetControl.dontupdateAUX>
0x003350        09206475                 r0 = Null + M[$music_example.SpiSysControl];
0x003351        81020800                 Null = r0 AND 0x800;
0x003352        DD00001E                 if EQ jump $M.music_example.GetControl.dontupdateDAC1;
0x003353        0930664A                 r1 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x003354        0940647B                 r2 = Null + M[$music_example.MainOvrMasterVolumes];
0x003355        09506643                 r3 = Null + M[$music_example.Main.ToneVolume];
0x003356        0960647C                 r4 = Null + M[$music_example.PriOvrTrimVolumes];
0x003357        91760074                 r5 = r4 ASHIFT -12;
0x003358        8D66000C                 r4 = r4 LSHIFT 12;
0x003359        91660074                 r4 = r4 ASHIFT -12;
0x00335A        0980647D                 r6 = Null + M[$music_example.SecOvrTrimVolumes];
0x00335B        91980074                 r7 = r6 ASHIFT -12;
0x00335C        8D88000C                 r6 = r6 LSHIFT 12;
0x00335D        91880074                 r6 = r6 ASHIFT -12;
0x00335E        09A0647E                 r8 = Null + M[$music_example.SubOvrTrimVolumes];
0x00335F        8DAA000C                 r8 = r8 LSHIFT 12;
0x003360        91AA0074                 r8 = r8 ASHIFT -12;
0x003361        510047F8                 I0 = Null + 18424;
0x003362        0300B100                 Null = Null + Null, M[I0,1] = r1;
0x003363        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003364        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x003365        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x003366        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x003367        0028000F                 r0 = r6 + Null;
0x003368        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003369        0029000F                 r0 = r7 + Null;
0x00336A        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x00336B        002A000F                 r0 = r8 + Null;
0x00336C        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x00336D        5000000F                 I0 = Null + Null;
0x00336E        015047F8                 r3 = Null + 18424;
0x00336F        E1F0EC99                 call $M.music_example_message.MainVolume.update_volumes;

 <$M.music_example.GetControl.dontupdateDAC1>
0x003370        01A00000                 r8 = Null + 0;
0x003371        DDF0E101                 jump $pop_rLink_and_rts;

 <$M.music_example.PsKeyReadHandler.func>
0x003372        F3D00000                 push rLink;
0x003373        E404002F                 Null = r2 + 1;
0x003374        DD100009                 if NE jump $M.music_example.PsKeyReadHandler.No_Retry;
0x003375        0920664D                 r0 = Null + M[$M.music_example.LoadParams.Pskey_fetch_flg];
0x003376        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.No_2nd_Retry;
0x003377        1900664D                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = Null + Null;
0x003378        0940964D                 r2 = Null + M[$M.music_example.LoadParams.Last_PsKey];
0x003379        DDF001CF                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example.PsKeyReadHandler.No_2nd_Retry>
0x00337A        E420002F                 r0 = Null + 1;
0x00337B        1920664D                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = r0 + Null;
0x00337C        DDF001D1                 jump $M.music_example.LoadParams.done;

 <$M.music_example.PsKeyReadHandler.No_Retry>
0x00337D        51050001                 I0 = r3 + 1;
0x00337E        E4C4003F                 r10 = r2 - 1;
0x00337F        5820000F                 I2 = I0 + Null;
0x003380        FD000000 0150FFFF        r3 = Null + 65535;
0x003382        E5F00004                 do $M.music_example.PsKeyReadHandler.loop1;
0x003383        03002800                 Null = Null + Null, r0 = M[I2,0];
0x003384        83250000                 r0 = r0 AND r3;
0x003385        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.music_example.PsKeyReadHandler.loop1>
0x003386        01C00100                 r10 = Null + 256;
0x003387        79220001                 I2 = I2 - 1;
0x003388        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003389        2003002F                 Null = r1 - r0;
0x00338A        DD1001C3                 if NE jump $M.music_example.LoadParams.done;
0x00338B        03007100                 Null = Null + Null, r5 = M[I0,1];
0x00338C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00338D        816200FF                 r4 = r0 AND 0xff;
0x00338E        006C0000                 if EQ r4 = r10 + Null;
0x00338F        8D220078                 r0 = r0 LSHIFT -8;
0x003390        00A0000F                 r8 = Null + Null;

 <$M.music_example.PsKeyReadHandler.start_loop>
0x003391        8DAA007F                 r8 = r8 LSHIFT -1;
0x003392        DD100007                 if NE jump $M.music_example.PsKeyReadHandler.withinGroup;
0x003393        6C02000F                 Null = I2 - I0;
0x003394        DD400016                 if NEG jump $M.music_example.PsKeyReadHandler.endOfBuffer;
0x003395        03005100                 Null = Null + Null, r3 = M[I0,1];
0x003396        FD000000 01A08000        r8 = Null + 32768;
0x003398        0090000F                 r7 = Null + Null;

 <$M.music_example.PsKeyReadHandler.withinGroup>
0x003399        800500AF                 Null = r3 AND r8;
0x00339A        DD00000D                 if EQ jump $M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue;
0x00339B        FD0000FF 8999FFFF        r7 = r7 XOR 0xffffff;
0x00339D        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.SomeWhere;
0x00339E        03004100                 Null = Null + Null, r2 = M[I0,1];
0x00339F        8D840078                 r6 = r2 LSHIFT -8;
0x0033A0        DDF00002                 jump $M.music_example.PsKeyReadHandler.SomeWhereElse;

 <$M.music_example.PsKeyReadHandler.SomeWhere>
0x0033A1        818400FF                 r6 = r2 AND 0xff;

 <$M.music_example.PsKeyReadHandler.SomeWhereElse>
0x0033A2        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0033A3        8D880010                 r6 = r6 LSHIFT 16;
0x0033A4        87380000                 r1 = r1 OR r6;
0x0033A5        0982964C                 r6 = r0 + M[$M.music_example.LoadParams.paramoffset];
0x0033A6        D5384600                 M[r6 + 17920] = r1;

 <$M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue>
0x0033A7        E422002F                 r0 = r0 + 1;
0x0033A8        2002006F                 Null = r0 - r4;
0x0033A9        DD40FFE8                 if NEG jump $M.music_example.PsKeyReadHandler.start_loop;

 <$M.music_example.PsKeyReadHandler.endOfBuffer>
0x0033AA        0940964C                 r2 = Null + M[$M.music_example.LoadParams.paramoffset];
0x0033AB        200600CF                 Null = r4 - r10;
0x0033AC        004400C0                 if EQ r2 = r2 + r10;
0x0033AD        1940964C                 M[$M.music_example.LoadParams.paramoffset] = r2 + Null;
0x0033AE        0047000F                 r2 = r5 + Null;
0x0033AF        DDF00199                 jump $M.music_example.LoadParams.TestPsKey;

 <$config_rate_matching>
0x0033B0        F3D00000                 push rLink;
0x0033B1        09302BFF                 r1 = Null + M[$current_dac_sampling_rate];
0x0033B2        99330003                 r1 = r1 * 3 (int);
0x0033B3        19302FC2                 M[0x2fc2] = r1 + Null;
0x0033B4        09406634                 r2 = Null + M[$max_clock_mismatch];
0x0033B5        8D240079                 r0 = r2 LSHIFT -7;
0x0033B6        81220001                 r0 = r0 AND 0x1;
0x0033B7        19209639                 M[$rate_match_disable] = r0 + Null;
0x0033B8        09606633                 r4 = Null + M[$local_encoded_play_back];
0x0033B9        DD000005                 if EQ jump $M.config_rate_matching.is_remote_stream;
0x0033BA        012001F4                 r0 = Null + 500;
0x0033BB        19209638                 M[$tmr_period_con_copy] = r0 + Null;
0x0033BC        E420002F                 r0 = Null + 1;
0x0033BD        19209639                 M[$rate_match_disable] = r0 + Null;

 <$M.config_rate_matching.is_remote_stream>
0x0033BE        09009639                 Null = Null + M[$rate_match_disable];
0x0033BF        DD100029                 if NE jump $M.config_rate_matching.end;
0x0033C0        8144007F                 r2 = r2 AND 0x7f;
0x0033C1        21340004                 r1 = r2 - 4;
0x0033C2        20440034                 if NEG r2 = r2 - r1;
0x0033C3        994420C5                 r2 = r2 * 8389 (int);
0x0033C4        95342000                 r1 = r2 * 0.25 (frac);
0x0033C5        03430000                 r2 = r2 + r1;
0x0033C6        FD000003 2134D70A        r1 = r2 - 251658;
0x0033C8        20440035                 if POS r2 = r2 - r1;
0x0033C9        19402FC1                 M[0x2fc1] = r2 + Null;
0x0033CA        FD000040 01400000        r2 = Null + 4194304;
0x0033CC        19402FD6                 M[0x2fd6] = r2 + Null;
0x0033CD        09509634                 r3 = Null + M[$long_term_mismatch];
0x0033CE        81250001                 r0 = r3 AND 0x1;
0x0033CF        DD000019                 if EQ jump $M.config_rate_matching.end;
0x0033D0        9155007F                 r3 = r3 ASHIFT -1;
0x0033D1        91550006                 r3 = r3 ASHIFT 6;
0x0033D2        29052FC1                 Null = r3 - M[0x2fc1];
0x0033D3        DD500015                 if POS jump $M.config_rate_matching.end;
0x0033D4        09052FC1                 Null = r3 + M[0x2fc1];
0x0033D5        DD400013                 if NEG jump $M.config_rate_matching.end;
0x0033D6        19502FD5                 M[0x2fd5] = r3 + Null;
0x0033D7        19502FCE                 M[0x2fce] = r3 + Null;
0x0033D8        09202FC2                 r0 = Null + M[0x2fc2];
0x0033D9        97250000                 r0 = r0 * r3 (frac);
0x0033DA        19202FDD                 M[0x2fdd] = r0 + Null;
0x0033DB        19202FDE                 M[0x2fde] = r0 + Null;
0x0033DC        01200002                 r0 = Null + 2;
0x0033DD        19202FD0                 M[0x2fd0] = r0 + Null;
0x0033DE        E420002F                 r0 = Null + 1;
0x0033DF        19202FD7                 M[0x2fd7] = r0 + Null;
0x0033E0        0900667D                 Null = Null + M[$chain0_hw_warp_enable];
0x0033E1        DD000007                 if EQ jump $M.config_rate_matching.end;
0x0033E2        19506596                 M[0x6596] = r3 + Null;
0x0033E3        9565FE00                 r4 = r3 * -0.015625 (frac);
0x0033E4        FD000000 01408004        r2 = Null + 32772;
0x0033E6        01500003                 r3 = Null + 3;
0x0033E7        E1F0DEC4                 call $message.send_short;

 <$M.config_rate_matching.end>
0x0033E8        DDF0E08A                 jump $pop_rLink_and_rts;

 <$multi_chan_adjust_tone_cbuffers>
0x0033E9        09406602                 r2 = Null + M[$tone_in_left_resample_cbuffer_struc];
0x0033EA        01500000                 r3 = Null + 0;
0x0033EB        09606604                 r4 = Null + M[0x6604];
0x0033EC        09206606                 r0 = Null + M[0x6606];
0x0033ED        29029678                 Null = r0 - M[$M.multi_chan_output.tone0_in_left_read_ptr];
0x0033EE        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_left;
0x0033EF        2026002F                 r0 = r4 - r0;
0x0033F0        00220044                 if NEG r0 = r0 + r2;
0x0033F1        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_left>
0x0033F2        09206609                 r0 = Null + M[0x6609];
0x0033F3        29026679                 Null = r0 - M[$M.multi_chan_output.tone1_in_left_read_ptr];
0x0033F4        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_left;
0x0033F5        2026002F                 r0 = r4 - r0;
0x0033F6        00220044                 if NEG r0 = r0 + r2;
0x0033F7        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_left>
0x0033F8        0920660C                 r0 = Null + M[0x660c];
0x0033F9        29029679                 Null = r0 - M[$M.multi_chan_output.tone2_in_left_read_ptr];
0x0033FA        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_left;
0x0033FB        2026002F                 r0 = r4 - r0;
0x0033FC        00220044                 if NEG r0 = r0 + r2;
0x0033FD        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_left>
0x0033FE        01700000                 r5 = Null + 0;
0x0033FF        09809604                 r6 = Null + M[0xff9604];
0x003400        09209606                 r0 = Null + M[0xff9606];
0x003401        2902667A                 Null = r0 - M[$M.multi_chan_output.tone0_in_right_read_ptr];
0x003402        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_right;
0x003403        2028002F                 r0 = r6 - r0;
0x003404        00220044                 if NEG r0 = r0 + r2;
0x003405        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_right>
0x003406        09209609                 r0 = Null + M[0xff9609];
0x003407        2902967A                 Null = r0 - M[$M.multi_chan_output.tone1_in_right_read_ptr];
0x003408        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_right;
0x003409        2028002F                 r0 = r6 - r0;
0x00340A        00220044                 if NEG r0 = r0 + r2;
0x00340B        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_right>
0x00340C        0920960C                 r0 = Null + M[0xff960c];
0x00340D        2902667B                 Null = r0 - M[$M.multi_chan_output.tone2_in_right_read_ptr];
0x00340E        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_right;
0x00340F        2028002F                 r0 = r6 - r0;
0x003410        00220044                 if NEG r0 = r0 + r2;
0x003411        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_right>
0x003412        0005000F                 Null = r3 + Null;
0x003413        00570000                 if EQ r3 = r5 + Null;
0x003414        0007000F                 Null = r5 + Null;
0x003415        00750000                 if EQ r5 = r3 + Null;
0x003416        50C0004F                 L0 = Null + r2;
0x003417        7080005F                 M0 = Null - r3;
0x003418        5000006F                 I0 = Null + r4;
0x003419        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00341A        4420000F                 r0 = Null + I0;
0x00341B        19206603                 M[0x6603] = r0 + Null;
0x00341C        7080007F                 M0 = Null - r5;
0x00341D        5000008F                 I0 = Null + r6;
0x00341E        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00341F        4420000F                 r0 = Null + I0;
0x003420        19209603                 M[0xff9603] = r0 + Null;
0x003421        51C00000                 L0 = Null + 0;
0x003422        DC0D000F                 rts;

 <$codec_resampler.config>
0x003423        F3D00000                 push rLink;
0x003424        01306281                 r1 = Null + 25217;

 <$codec_resampler.lookup_loop>
0x003425        D023000F                 r0 = M[r1 + Null];
0x003426        DD000008                 if EQ jump $codec_resampler.rates_not_supported;
0x003427        29029632                 Null = r0 - M[$current_codec_sampling_rate];
0x003428        DD100004                 if NE jump $codec_resampler.skip;
0x003429        D1230001                 r0 = M[r1 + 1];
0x00342A        29022BFF                 Null = r0 - M[$current_dac_sampling_rate];
0x00342B        DD000014                 if EQ jump $codec_resampler.done;

 <$codec_resampler.skip>
0x00342C        01330003                 r1 = r1 + 3;
0x00342D        DDF0FFF8                 jump $codec_resampler.lookup_loop;

 <$codec_resampler.rates_not_supported>
0x00342E        09509632                 r3 = Null + M[$current_codec_sampling_rate];
0x00342F        09602BFF                 r4 = Null + M[$current_dac_sampling_rate];
0x003430        0120000A                 r0 = Null + 10;
0x003431        0015000F                 rMAC = r3 + Null;
0x003432        D9020000                 Div = rMAC / r0;
0x003433        D9500001                 r3 = DivResult;
0x003434        0016000F                 rMAC = r4 + Null;
0x003435        D9020000                 Div = rMAC / r0;
0x003436        D9600001                 r4 = DivResult;
0x003437        01401090                 r2 = Null + 4240;
0x003438        E1F0DE73                 call $message.send_short;
0x003439        E1F0F220                 call $error;
0x00343A        01306281                 r1 = Null + 25217;
0x00343B        D023000F                 r0 = M[r1 + Null];
0x00343C        19209632                 M[$current_codec_sampling_rate] = r0 + Null;
0x00343D        D1230001                 r0 = M[r1 + 1];
0x00343E        19202BFF                 M[$current_dac_sampling_rate] = r0 + Null;

 <$codec_resampler.done>
0x00343F        E1F0DFE9                 call $block_interrupts;
0x003440        E440002F                 r2 = Null + 1;
0x003441        19004FC1                 M[0x4fc1] = Null + Null;
0x003442        1900536F                 M[0x536f] = Null + Null;
0x003443        D1230002                 r0 = M[r1 + 2];
0x003444        19204FB4                 M[0x4fb4] = r0 + Null;
0x003445        19205362                 M[0x5362] = r0 + Null;
0x003446        00400000                 if EQ r2 = Null + Null;
0x003447        1940663D                 M[$codec_resampler.resampler_active] = r2 + Null;
0x003448        E1F00125                 call $calc_sra_resampling_adjustment;
0x003449        E1F0DFCF                 call $interrupt.unblock;
0x00344A        DDF0E028                 jump $pop_rLink_and_rts;

 <$codec_resampler.run_resampler>
0x00344B        F3D00000                 push rLink;
0x00344C        01A04FB2                 r8 = Null + 20402;
0x00344D        E1F0D5F3                 call $iir_resamplev2.Process;
0x00344E        01A05360                 r8 = Null + 21344;
0x00344F        E1F0D5F1                 call $iir_resamplev2.Process;

 <$codec_resampler.run_resampler_done>
0x003450        DDF0E022                 jump $pop_rLink_and_rts;

 <$multi_chan_soft_mute>
0x003451        F3D00000                 push rLink;
0x003452        1950967B                 M[$M.multi_chan_output.channels_mute_en] = r3 + Null;
0x003453        092065D7                 r0 = Null + M[$interface_map_struc];
0x003454        093065D9                 r1 = Null + M[0x65d9];
0x003455        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x003457        83230000                 r0 = r0 AND r1;
0x003458        0035000F                 r1 = r3 + Null;
0x003459        E1F001FF                 call $multi_chan_calc_cbops_channel_enables;
0x00345A        1950667C                 M[$M.multi_chan_output.chain0_mute_en] = r3 + Null;
0x00345B        E430002F                 r1 = Null + 1;
0x00345C        81050001                 Null = r3 AND 0x1;
0x00345D        20300031                 if NE r1 = Null - r1;
0x00345E        FD0000FF 19306BFB        M[$M.multi_chan_output.chain0_ch0_mute_op.param] = r1 + Null;
0x003460        E430002F                 r1 = Null + 1;
0x003461        81050002                 Null = r3 AND 0x2;
0x003462        20300031                 if NE r1 = Null - r1;
0x003463        193064DF                 M[$M.multi_chan_output.chain0_ch1_mute_op.param] = r1 + Null;
0x003464        E430002F                 r1 = Null + 1;
0x003465        81050004                 Null = r3 AND 0x4;
0x003466        20300031                 if NE r1 = Null - r1;
0x003467        19309497                 M[$M.multi_chan_output.chain0_ch2_mute_op.param] = r1 + Null;
0x003468        E430002F                 r1 = Null + 1;
0x003469        81050008                 Null = r3 AND 0x8;
0x00346A        20300031                 if NE r1 = Null - r1;
0x00346B        193064E6                 M[$M.multi_chan_output.chain0_ch3_mute_op.param] = r1 + Null;
0x00346C        E430002F                 r1 = Null + 1;
0x00346D        81050010                 Null = r3 AND 0x10;
0x00346E        20300031                 if NE r1 = Null - r1;
0x00346F        1930949E                 M[$M.multi_chan_output.chain0_ch4_mute_op.param] = r1 + Null;
0x003470        E430002F                 r1 = Null + 1;
0x003471        81050020                 Null = r3 AND 0x20;
0x003472        20300031                 if NE r1 = Null - r1;
0x003473        193064ED                 M[$M.multi_chan_output.chain0_ch5_mute_op.param] = r1 + Null;
0x003474        092065D7                 r0 = Null + M[$interface_map_struc];
0x003475        093065D9                 r1 = Null + M[0x65d9];
0x003476        83230000                 r0 = r0 AND r1;
0x003477        0930967B                 r1 = Null + M[$M.multi_chan_output.channels_mute_en];
0x003478        E1F001E0                 call $multi_chan_calc_cbops_channel_enables;
0x003479        1950967C                 M[$M.multi_chan_output.chain1_mute_en] = r3 + Null;
0x00347A        E430002F                 r1 = Null + 1;
0x00347B        81050001                 Null = r3 AND 0x1;
0x00347C        20300031                 if NE r1 = Null - r1;
0x00347D        193094A5                 M[$M.multi_chan_output.chain1_ch0_mute_op.param] = r1 + Null;
0x00347E        E430002F                 r1 = Null + 1;
0x00347F        81050002                 Null = r3 AND 0x2;
0x003480        20300031                 if NE r1 = Null - r1;
0x003481        193064F4                 M[$M.multi_chan_output.chain1_ch1_mute_op.param] = r1 + Null;
0x003482        DDF0DFF0                 jump $pop_rLink_and_rts;

 <$multi_chan_port_scan_and_routing_config>
0x003483        F3D00000                 push rLink;
0x003484        FD0000FF 01204BF9        r0 = Null + -46087;
0x003486        01C00007                 r10 = Null + 7;
0x003487        E1F001C6                 call $multi_chan_build_channel_enable_mask;
0x003488        D5650000                 M[r3 + 0] = r4;
0x003489        012064CF                 r0 = Null + 25807;
0x00348A        E430002F                 r1 = Null + 1;
0x00348B        01C00007                 r10 = Null + 7;
0x00348C        E1F00215                 call $multi_chan_build_channel_type_mask;
0x00348D        D5750001                 M[r3 + 1] = r5;
0x00348E        E1F001A0                 call $multi_chan_select_chain_usage;
0x00348F        012064CF                 r0 = Null + 25807;
0x003490        01300003                 r1 = Null + 3;
0x003491        01C00007                 r10 = Null + 7;
0x003492        E1F0020F                 call $multi_chan_build_channel_type_mask;
0x003493        D5750003                 M[r3 + 3] = r5;
0x003494        1950967E                 M[$M.multi_chan_port_scan_and_routing_config.fp_config_input] = r3 + Null;
0x003495        0075000F                 r5 = r3 + Null;
0x003496        E1F0008E                 call $multi_chan_select_rate_matching;
0x003497        E1F00071                 call $multi_chan_build_all_cbops_copy_strucs;
0x003498        E1F0FDF5                 call $multi_chan_config_cbops_copy_strucs;
0x003499        092092DC                 r0 = Null + M[0xff92dc];
0x00349A        192064D6                 M[$M.multi_chan_output.chain0_pcm_cbuffers_latency_measure] = r0 + Null;
0x00349B        09209677                 r0 = Null + M[$M.multi_chan_output.chain0_sync_port];
0x00349C        192064D9                 M[0x64d9] = r0 + Null;
0x00349D        FD0000FF 19207BF5        M[$calc_chain0_actual_port_rate_struc] = r0 + Null;
0x00349F        0920646B                 r0 = Null + M[0x646b];
0x0034A0        FD0000FF 19205BF9        M[$M.multi_chan_output.chain1_pcm_cbuffers_latency_measure] = r0 + Null;
0x0034A2        09206678                 r0 = Null + M[$M.multi_chan_output.chain1_sync_port];
0x0034A3        FD0000FF 19205BFC        M[0xff5bfc] = r0 + Null;
0x0034A5        19209432                 M[$calc_chain1_actual_port_rate_struc] = r0 + Null;
0x0034A6        0950967E                 r3 = Null + M[$M.multi_chan_port_scan_and_routing_config.fp_config_input];
0x0034A7        E1F0E752                 call $M.frame_proc_stream_configure.func;
0x0034A8        09206677                 r0 = Null + M[$M.multi_chan_output.i2s_slave0];
0x0034A9        FD0000FF 01307BF5        r1 = Null + -33803;
0x0034AB        E1F00211                 call $config_calc_port_rate;
0x0034AC        DDF0DFC6                 jump $pop_rLink_and_rts;

 <$music_example_process>
0x0034AD        F3D00000                 push rLink;
0x0034AE        1900FE93                 M[0xfffe93] = Null + Null;
0x0034AF        01A0943D                 r8 = Null + -27587;
0x0034B0        E1F0D9B3                 call $M.mips_profile.mainstart;
0x0034B1        0900963E                 Null = Null + M[$music_example.reinit];
0x0034B2        E11000D4                 if NE call $music_example_reinitialize;
0x0034B3        09309658                 r1 = Null + M[$M.system_config.data.dithertype];
0x0034B4        E1F00138                 call $multi_chan_config_dither_type;
0x0034B5        0930663E                 r1 = Null + M[$music_example.sys_mode];
0x0034B6        09206475                 r0 = Null + M[$music_example.SpiSysControl];
0x0034B7        09606478                 r4 = Null + M[$music_example.OvrMode];
0x0034B8        81022000                 Null = r0 AND 0x2000;
0x0034B9        00360001                 if NE r1 = r4 + Null;
0x0034BA        E440002F                 r2 = Null + 1;
0x0034BB        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x0034BC        FD000000 2102AC44        Null = r0 - 44100;
0x0034BE        DD000005                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x0034BF        FD000000 2102BB80        Null = r0 - 48000;
0x0034C1        DD000002                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x0034C2        0034000F                 r1 = r2 + Null;

 <$M.music_example_process.no_fs_force_passthru>
0x0034C3        19309568                 M[$music_example.CurMode] = r1 + Null;
0x0034C4        D163959C                 r4 = M[r1 + -27236];
0x0034C5        E1F0DF31                 call $frame_sync.run_function_table;
0x0034C6        01A0943D                 r8 = Null + -27587;
0x0034C7        E1F0D9A9                 call $M.mips_profile.mainend;
0x0034C8        D12A0006                 r0 = M[r8 + 6];
0x0034C9        19209569                 M[$music_example.PeakMipsFunc] = r0 + Null;
0x0034CA        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x0034CB        1920956B                 M[$music_example.SamplingRate] = r0 + Null;
0x0034CC        DDF0DFA6                 jump $pop_rLink_and_rts;

 <$master_app_reset>
0x0034CD        F3D00000                 push rLink;
0x0034CE        09006633                 Null = Null + M[$local_encoded_play_back];
0x0034CF        DD000008                 if EQ jump $M.master_app_reset.pause_happened;
0x0034D0        01401080                 r2 = Null + 4224;
0x0034D1        01500000                 r3 = Null + 0;
0x0034D2        01600000                 r4 = Null + 0;
0x0034D3        01700000                 r5 = Null + 0;
0x0034D4        01800000                 r6 = Null + 0;
0x0034D5        E1F0DDD6                 call $message.send_short;
0x0034D6        19006633                 M[$local_encoded_play_back] = Null + Null;

 <$M.master_app_reset.pause_happened>
0x0034D7        E1F0DF51                 call $block_interrupts;
0x0034D8        E1F00166                 call $multi_chan_purge_buffers;
0x0034D9        E1F00138                 call $purge_input_pcm_cbuffers;
0x0034DA        016062CA                 r4 = Null + 25290;
0x0034DB        E1F0DF1B                 call $frame_sync.run_function_table;
0x0034DC        0160933D                 r4 = Null + -27843;
0x0034DD        E1F0DF19                 call $frame_sync.run_function_table;
0x0034DE        01600FE0                 r4 = Null + 4064;
0x0034DF        E1F0DF17                 call $frame_sync.run_function_table;
0x0034E0        019063C7                 r7 = Null + 25543;
0x0034E1        E1F0DDFF                 call $latency.reset_encoded_latency;
0x0034E2        1900966D                 M[$first_packet_received] = Null + Null;
0x0034E3        19002FD9                 M[0x2fd9] = Null + Null;
0x0034E4        E1F0DF34                 call $interrupt.unblock;
0x0034E5        DDF0DF8D                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetMode.func>
0x0034E6        0004000F                 Null = r2 + Null;
0x0034E7        DD000017                 if EQ jump $M.music_example_message.SetMode.do_not_advance_to_next_eq_bank;
0x0034E8        01600007                 r4 = Null + 7;
0x0034E9        09704631                 r5 = Null + M[0x4631];
0x0034EA        83760000                 r5 = r5 AND r4;
0x0034EB        09204600                 r0 = Null + M[$M.system_config.data.CurParams];
0x0034EC        8082006F                 r6 = r0 AND r4;
0x0034ED        E488002F                 r6 = r6 + 1;
0x0034EE        21040002                 Null = r2 - 2;
0x0034EF        00850000                 if EQ r6 = r3 + Null;
0x0034F0        01A00200                 r8 = Null + 512;
0x0034F1        01500000                 r3 = Null + 0;
0x0034F2        E490002F                 r7 = Null + 1;
0x0034F3        800200AF                 Null = r0 AND r8;
0x0034F4        00590000                 if EQ r3 = r7 + Null;
0x0034F5        2007008F                 Null = r5 - r6;
0x0034F6        0085000B                 if LT r6 = r3 + Null;
0x0034F7        21080000                 Null = r6 - 0;
0x0034F8        00850000                 if EQ r6 = r3 + Null;
0x0034F9        FD0000FF 8996FFFF        r7 = r4 XOR 0xffffff;
0x0034FB        8092009F                 r7 = r0 AND r7;
0x0034FC        8489008F                 r6 = r7 OR r6;
0x0034FD        19804600                 M[$M.system_config.data.CurParams] = r6 + Null;

 <$M.music_example_message.SetMode.do_not_advance_to_next_eq_bank>
0x0034FE        01500003                 r3 = Null + 3;
0x0034FF        2005003F                 Null = r3 - r1;
0x003500        00350004                 if NEG r1 = r3 + Null;
0x003501        01500000                 r3 = Null + 0;
0x003502        2005003F                 Null = r3 - r1;
0x003503        00350005                 if POS r1 = r3 + Null;
0x003504        1930663E                 M[$music_example.sys_mode] = r1 + Null;
0x003505        E430002F                 r1 = Null + 1;
0x003506        1930963E                 M[$music_example.reinit] = r1 + Null;
0x003507        DC0D000F                 rts;

 <$multi_chan_build_all_cbops_copy_strucs>
0x003508        F3D00000                 push rLink;
0x003509        D1670000                 r4 = M[r5 + 0];
0x00350A        D1770002                 r5 = M[r5 + 2];
0x00350B        FD0000FF 8927FFFF        r0 = r5 XOR 0xffffff;
0x00350D        F3600000                 push r4;
0x00350E        83620000                 r4 = r4 AND r0;
0x00350F        E426009F                 r0 = ONEBITCOUNT r4;
0x003510        19209672                 M[$M.multi_chan_output.num_chain0_channels] = r0 + Null;
0x003511        E9220001                 r0 = 0x1 LSHIFT r0;
0x003512        E422003F                 r0 = r0 - 1;
0x003513        19209673                 M[$M.multi_chan_output.chain0_enables] = r0 + Null;
0x003514        012092DA                 r0 = Null + -27942;
0x003515        01300FF9                 r1 = Null + 4089;
0x003516        01809677                 r6 = Null + -27017;
0x003517        E1F00109                 call $multi_chan_build_cbops_copy_struc;
0x003518        F3640000                 pop r4;
0x003519        83670000                 r4 = r4 AND r5;
0x00351A        E426009F                 r0 = ONEBITCOUNT r4;
0x00351B        19206673                 M[$M.multi_chan_output.num_chain1_channels] = r0 + Null;
0x00351C        E9220001                 r0 = 0x1 LSHIFT r0;
0x00351D        E422003F                 r0 = r0 - 1;
0x00351E        19206674                 M[$M.multi_chan_output.chain1_enables] = r0 + Null;
0x00351F        01206469                 r0 = Null + 25705;
0x003520        01300FF9                 r1 = Null + 4089;
0x003521        01806678                 r6 = Null + 26232;
0x003522        E1F000FE                 call $multi_chan_build_cbops_copy_struc;
0x003523        DDF0DF4F                 jump $pop_rLink_and_rts;

 <$multi_chan_select_rate_matching>
0x003524        1900667D                 M[$chain0_hw_warp_enable] = Null + Null;
0x003525        1900967D                 M[$chain1_hw_warp_enable] = Null + Null;
0x003526        DDF00019                 jump $M.multi_chan_select_rate_matching.exit;
0x003527        09009639                 Null = Null + M[$rate_match_disable];
0x003528        DD100017                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x003529        D1270000                 r0 = M[r5 + 0];
0x00352A        D1370001                 r1 = M[r5 + 1];
0x00352B        D1470002                 r2 = M[r5 + 2];
0x00352C        FD0000FF 8954FFFF        r3 = r2 XOR 0xffffff;
0x00352E        83520000                 r3 = r3 AND r0;
0x00352F        83420000                 r2 = r2 AND r0;
0x003530        FD0000FF 8963FFFF        r4 = r1 XOR 0xffffff;
0x003532        8005003F                 Null = r3 AND r1;
0x003533        DD000006                 if EQ jump $M.multi_chan_select_rate_matching.check_chain1;
0x003534        8005006F                 Null = r3 AND r4;
0x003535        DD10000A                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x003536        E420002F                 r0 = Null + 1;
0x003537        1920667D                 M[$chain0_hw_warp_enable] = r0 + Null;
0x003538        DDF00007                 jump $M.multi_chan_select_rate_matching.exit;

 <$M.multi_chan_select_rate_matching.check_chain1>
0x003539        8004003F                 Null = r2 AND r1;
0x00353A        DD000005                 if EQ jump $M.multi_chan_select_rate_matching.exit;
0x00353B        8004006F                 Null = r2 AND r4;
0x00353C        DD100003                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x00353D        E420002F                 r0 = Null + 1;
0x00353E        1920967D                 M[$chain1_hw_warp_enable] = r0 + Null;

 <$M.multi_chan_select_rate_matching.exit>
0x00353F        DC0D000F                 rts;

 <$M.music_example.LoadParams.func>
0x003540        F3D00000                 push rLink;
0x003541        01A00000                 r8 = Null + 0;
0x003542        19A0663E                 M[$music_example.sys_mode] = r8 + Null;
0x003543        F3300000                 push r1;
0x003544        E1F000BA                 call $M.music_example.load_default_params.func;
0x003545        1900964C                 M[$M.music_example.LoadParams.paramoffset] = Null + Null;
0x003546        F3440000                 pop r2;
0x003547        1940964D                 M[$M.music_example.LoadParams.Last_PsKey] = r2 + Null;

 <$M.music_example.LoadParams.TestPsKey>
0x003548        DD000005                 if EQ jump $M.music_example.LoadParams.done;
0x003549        013095DE                 r1 = Null + -27170;
0x00354A        01503372                 r3 = Null + 13170;
0x00354B        E1F0DD71                 call $pskey.read_key;
0x00354C        DDF0DF26                 jump $pop_rLink_and_rts;

 <$M.music_example.LoadParams.done>
0x00354D        09206638                 r0 = Null + M[$codec_config];
0x00354E        D1224600                 r0 = M[r0 + 17920];
0x00354F        19204600                 M[$M.system_config.data.CurParams] = r0 + Null;
0x003550        E1F00171                 call $M.music_example.ReInit.func;
0x003551        01401015                 r2 = Null + 4117;
0x003552        E1F0DD59                 call $message.send_short;
0x003553        DDF0DF1F                 jump $pop_rLink_and_rts;

 <$M.music_example.GetStatus.func>
0x003554        5010003F                 I1 = Null + r1;
0x003555        01C00032                 r10 = Null + 50;
0x003556        00AC000F                 r8 = r10 + Null;
0x003557        51402BCD                 I4 = Null + 11213;
0x003558        03000031                 Null = Null + Null, r1 = M[I4,1];
0x003559        E5F00004                 do $M.music_example.GetStatus.lp_copy_status;
0x00355A        D3300000                 r1 = M[r1 + Null];
0x00355B        0300B531                 Null = Null + Null, M[I1,1] = r1, r1 = M[I4,1];
0x00355C        03000000                 Null = Null + Null;

 <$M.music_example.GetStatus.lp_copy_status>
0x00355D        01C00004                 r10 = Null + 4;
0x00355E        51409568                 I4 = Null + -27288;
0x00355F        8B440000                 r2 = r2 XOR r2;
0x003560        E5F00002                 do $M.music_example.GetStatus.loop_clr_statistics;
0x003561        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.music_example.GetStatus.loop_clr_statistics>
0x003562        FD0000FF 19006FFF        M[0xff6fff] = Null + Null;
0x003564        190053FF                 M[0x53ff] = Null + Null;
0x003565        19009627                 M[0xff9627] = Null + Null;
0x003566        1900662A                 M[0x662a] = Null + Null;
0x003567        19009629                 M[0xff9629] = Null + Null;
0x003568        1900662C                 M[0x662c] = Null + Null;
0x003569        1900962B                 M[0xff962b] = Null + Null;
0x00356A        1900662E                 M[0x662e] = Null + Null;
0x00356B        1900962D                 M[0xff962d] = Null + Null;
0x00356C        DC0D000F                 rts;

 <$calc_sra_resampling_adjustment>
0x00356D        F100003E                 pushm <rMAC, r0, r1, r2, r3>;
0x00356E        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x00356F        09302BFF                 r1 = Null + M[$current_dac_sampling_rate];
0x003570        E440002F                 r2 = Null + 1;
0x003571        01500000                 r3 = Null + 0;
0x003572        2002003F                 Null = r0 - r1;
0x003573        DD00000F                 if EQ jump $M.calc_sra_resampling_adjustment.done;
0x003574        DD40000A                 if NEG jump $M.calc_sra_resampling_adjustment.upsampling;
0x003575        8D22007E                 r0 = r0 LSHIFT -2;
0x003576        8DE2007F                 rMAC = r0 LSHIFT -1 (MI);
0x003577        D9030000                 Div = rMAC / r1;
0x003578        D9200001                 r0 = DivResult;
0x003579        8D42006B                 r2 = r0 LSHIFT -21;
0x00357A        FD00001F 8122FFFF        r0 = r0 AND 0x1fffff;
0x00357C        8D520002                 r3 = r0 LSHIFT 2;
0x00357D        DDF00005                 jump $M.calc_sra_resampling_adjustment.done;

 <$M.calc_sra_resampling_adjustment.upsampling>
0x00357E        8DE2007F                 rMAC = r0 LSHIFT -1 (MI);
0x00357F        D9030000                 Div = rMAC / r1;
0x003580        01400000                 r2 = Null + 0;
0x003581        D9500001                 r3 = DivResult;

 <$M.calc_sra_resampling_adjustment.done>
0x003582        1940664F                 M[$sra_resamp_adjust_int] = r2 + Null;
0x003583        1950964F                 M[$sra_resamp_adjust_frac] = r3 + Null;
0x003584        F104003E                 popm <rMAC, r0, r1, r2, r3>;
0x003585        DC0D000F                 rts;

 <$music_example_reinitialize>
0x003586        F3D00000                 push rLink;
0x003587        51900001                 M1 = Null + 1;
0x003588        FD0000FF 510033DA        I0 = Null + -52262;
0x00358A        02002100                 Null = Null + Null, r0 = M[I0,M1];

 <$M.music_example_reinitialize.lp_param_copy>
0x00358B        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x00358C        D3200000                 r0 = M[r0 + Null];
0x00358D        1832210F                 M[r1] = r0 + Null, r0 = M[I0,M1];
0x00358E        0002000F                 Null = r0 + Null;
0x00358F        DD10FFFC                 if NE jump $M.music_example_reinitialize.lp_param_copy;
0x003590        09204600                 r0 = Null + M[$M.system_config.data.CurParams];
0x003591        09406638                 r2 = Null + M[$codec_config];
0x003592        D5244600                 M[r2 + 17920] = r0;
0x003593        01401014                 r2 = Null + 4116;
0x003594        81520007                 r3 = r0 AND 0x7;
0x003595        E1F0DD16                 call $message.send_short;
0x003596        016062CA                 r4 = Null + 25290;
0x003597        E1F0DE5F                 call $frame_sync.run_function_table;
0x003598        1900963E                 M[$music_example.reinit] = Null + Null;
0x003599        DDF0DED9                 jump $pop_rLink_and_rts;

 <$music_example.peq.initialize>
0x00359A        09204600                 r0 = Null + M[$M.system_config.data.CurParams];
0x00359B        D07A000F                 r5 = M[r8 + Null];
0x00359C        81520007                 r3 = r0 AND 0x7;
0x00359D        E407003F                 Null = r5 - 1;
0x00359E        00500000                 if EQ r3 = Null + Null;
0x00359F        09309632                 r1 = Null + M[$current_codec_sampling_rate];
0x0035A0        FD000000 2103BB80        Null = r1 - 48000;
0x0035A2        00550070                 if EQ r3 = r3 + r5;
0x0035A3        E4AA002F                 r8 = r8 + 1;
0x0035A4        D02A005F                 r0 = M[r8 + r3];
0x0035A5        D5290003                 M[r7 + 3] = r0;
0x0035A6        DC0D0000                 if EQ rts;
0x0035A7        DDF0F06A                 jump $audio_proc.hq_peq.initialize;

 <$music_example.peq.process>
0x0035A8        09204600                 r0 = Null + M[$M.system_config.data.CurParams];
0x0035A9        800200AF                 Null = r0 AND r8;
0x0035AA        DC0D0001                 if NE rts;
0x0035AB        D1090003                 Null = M[r7 + 3];
0x0035AC        DC0D0000                 if EQ rts;
0x0035AD        DDF0D624                 jump $audio_proc.hq_peq.process;

 <$set_dac_rate_from_vm>
0x0035AE        8133FFFF                 r1 = r1 AND 0xffff;
0x0035AF        9933000A                 r1 = r1 * 10 (int);
0x0035B0        19302BFF                 M[$current_dac_sampling_rate] = r1 + Null;
0x0035B1        19406634                 M[$max_clock_mismatch] = r2 + Null;
0x0035B2        19509634                 M[$long_term_mismatch] = r3 + Null;
0x0035B3        81360200                 r1 = r4 AND 0x200;
0x0035B4        89430200                 r2 = r1 XOR 0x200;
0x0035B5        81260100                 r0 = r4 AND 0x100;
0x0035B6        9F420000                 r2 = r2 * r0 (int) (sat);
0x0035B7        19406633                 M[$local_encoded_play_back] = r2 + Null;
0x0035B8        E450002F                 r3 = Null + 1;
0x0035B9        9F320000                 r1 = r1 * r0 (int) (sat);
0x0035BA        00350001                 if NE r1 = r3 + Null;
0x0035BB        19309633                 M[$aux_input_stream_available] = r1 + Null;
0x0035BC        F3D00000                 push rLink;
0x0035BD        09202BFF                 r0 = Null + M[$current_dac_sampling_rate];
0x0035BE        E1F0DE9B                 call $latency.calc_inv_fs;
0x0035BF        19209635                 M[$inv_dac_fs] = r0 + Null;
0x0035C0        F3D40000                 pop rLink;
0x0035C1        DC0D000F                 rts;

 <$multi_chan_config_tone_mixing>
0x0035C2        095065D7                 r3 = Null + M[$interface_map_struc];
0x0035C3        096065D9                 r4 = Null + M[0x65d9];
0x0035C4        FD0000FF 8936FFFF        r1 = r4 XOR 0xffffff;
0x0035C6        8025003F                 r0 = r3 AND r1;
0x0035C7        09306676                 r1 = Null + M[$M.multi_chan_output.prim_tone_mix_ratio];
0x0035C8        09409676                 r2 = Null + M[$M.multi_chan_output.aux_tone_mix_ratio];
0x0035C9        1940930B                 M[0xff930b] = r2 + Null;
0x0035CA        19406343                 M[0x6343] = r2 + Null;
0x0035CB        81020003                 Null = r0 AND 0x3;
0x0035CC        00340000                 if EQ r1 = r2 + Null;
0x0035CD        193092F7                 M[0xff92f7] = r1 + Null;
0x0035CE        193003F5                 M[0x3f5] = r1 + Null;
0x0035CF        8025006F                 r0 = r3 AND r4;
0x0035D0        09306676                 r1 = Null + M[$M.multi_chan_output.prim_tone_mix_ratio];
0x0035D1        09409676                 r2 = Null + M[$M.multi_chan_output.aux_tone_mix_ratio];
0x0035D2        81020003                 Null = r0 AND 0x3;
0x0035D3        00340000                 if EQ r1 = r2 + Null;
0x0035D4        1930931F                 M[0xff931f] = r1 + Null;
0x0035D5        19306357                 M[0x6357] = r1 + Null;
0x0035D6        DC0D000F                 rts;

 <$multi_chan_clone_tone_cbuffers>
0x0035D7        09206606                 r0 = Null + M[0x6606];
0x0035D8        19209678                 M[$M.multi_chan_output.tone0_in_left_read_ptr] = r0 + Null;
0x0035D9        09206609                 r0 = Null + M[0x6609];
0x0035DA        19206679                 M[$M.multi_chan_output.tone1_in_left_read_ptr] = r0 + Null;
0x0035DB        0920660C                 r0 = Null + M[0x660c];
0x0035DC        19209679                 M[$M.multi_chan_output.tone2_in_left_read_ptr] = r0 + Null;
0x0035DD        09206604                 r0 = Null + M[0x6604];
0x0035DE        19206607                 M[0x6607] = r0 + Null;
0x0035DF        1920660A                 M[0x660a] = r0 + Null;
0x0035E0        1920660D                 M[0x660d] = r0 + Null;
0x0035E1        09209606                 r0 = Null + M[0xff9606];
0x0035E2        1920667A                 M[$M.multi_chan_output.tone0_in_right_read_ptr] = r0 + Null;
0x0035E3        09209609                 r0 = Null + M[0xff9609];
0x0035E4        1920967A                 M[$M.multi_chan_output.tone1_in_right_read_ptr] = r0 + Null;
0x0035E5        0920960C                 r0 = Null + M[0xff960c];
0x0035E6        1920667B                 M[$M.multi_chan_output.tone2_in_right_read_ptr] = r0 + Null;
0x0035E7        09209604                 r0 = Null + M[0xff9604];
0x0035E8        19209607                 M[0xff9607] = r0 + Null;
0x0035E9        1920960A                 M[0xff960a] = r0 + Null;
0x0035EA        1920960D                 M[0xff960d] = r0 + Null;
0x0035EB        DC0D000F                 rts;

 <$multi_chan_config_dither_type>
0x0035EC        F3D00000                 push rLink;
0x0035ED        E1F0DE3B                 call $block_interrupts;
0x0035EE        0023000F                 r0 = r1 + Null;
0x0035EF        01400000                 r2 = Null + 0;
0x0035F0        09302BFF                 r1 = Null + M[$current_dac_sampling_rate];
0x0035F1        FD000000 2103AC44        Null = r1 - 44100;
0x0035F3        00240004                 if NEG r0 = r2 + Null;
0x0035F4        192064B4                 M[0x64b4] = r0 + Null;
0x0035F5        1920947A                 M[0xff947a] = r0 + Null;
0x0035F6        192064BC                 M[0x64bc] = r0 + Null;
0x0035F7        19209482                 M[0xff9482] = r0 + Null;
0x0035F8        192064C4                 M[0x64c4] = r0 + Null;
0x0035F9        1920948A                 M[0xff948a] = r0 + Null;
0x0035FA        192064CC                 M[0x64cc] = r0 + Null;
0x0035FB        19209492                 M[0xff9492] = r0 + Null;
0x0035FC        E1F0DE1C                 call $interrupt.unblock;
0x0035FD        DDF0DE75                 jump $pop_rLink_and_rts;

 <$M.music_example.load_default_params.func>
0x0035FE        51C00005                 L0 = Null + 5;
0x0035FF        510000A8                 I0 = Null + 168;
0x003600        FD0000D0 51400000        I4 = Null + -3145728;
0x003602        51104600                 I1 = Null + 17920;
0x003603        01C001E0                 r10 = Null + 480;
0x003604        91CC007F                 r10 = r10 ASHIFT -1;
0x003605        03006121                 Null = Null + Null, r4 = M[I0,1], r0 = M[I4,1];
0x003606        E5F00009                 do $M.music_example.load_default_params.three16_to_two24_loop;
0x003607        8F266140                 r0 = r0 LSHIFT r4, r4 = M[I0,1], r2 = M[I4,0];
0x003608        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x003609        8F466151                 r2 = r2 LSHIFT r4, r4 = M[I0,1], r3 = M[I4,1];
0x00360A        87240041                 r0 = r0 OR r2, r2 = M[I4,1];
0x00360B        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x00360C        8F56A500                 r3 = r3 LSHIFT r4, M[I1,1] = r0;
0x00360D        87546121                 r3 = r3 OR r2, r4 = M[I0,1], r0 = M[I4,1];
0x00360E        0300D500                 Null = Null + Null, M[I1,1] = r3;

 <$M.music_example.load_default_params.three16_to_two24_loop>
0x00360F        51C00000                 L0 = Null + 0;
0x003610        DC0D000F                 rts;

 <$purge_input_pcm_cbuffers>
0x003611        F3D00000                 push rLink;
0x003612        092000AF                 r0 = Null + M[0xaf];
0x003613        192000AE                 M[0xae] = r0 + Null;
0x003614        092095D1                 r0 = Null + M[0xff95d1];
0x003615        192095D0                 M[0xff95d0] = r0 + Null;
0x003616        092000EF                 r0 = Null + M[0xef];
0x003617        192000EE                 M[0xee] = r0 + Null;
0x003618        092095D4                 r0 = Null + M[0xff95d4];
0x003619        192095D3                 M[0xff95d3] = r0 + Null;
0x00361A        0920012F                 r0 = Null + M[0x12f];
0x00361B        1920012E                 M[0x12e] = r0 + Null;
0x00361C        092095D7                 r0 = Null + M[0xff95d7];
0x00361D        192095D6                 M[0xff95d6] = r0 + Null;
0x00361E        E1F0FD02                 call $codec_rate_adj.clear_history_buffers;
0x00361F        DDF0DE53                 jump $pop_rLink_and_rts;

 <$multi_chan_build_cbops_copy_struc>
0x003620        F3D00000                 push rLink;
0x003621        E456009F                 r3 = ONEBITCOUNT r4;
0x003622        51320001                 I3 = r0 + 1;
0x003623        0300DD00                 Null = Null + Null, M[I3,1] = r3;
0x003624        0023000F                 r0 = r1 + Null;
0x003625        01C00007                 r10 = Null + 7;
0x003626        E1F0003E                 call $multi_chan_copy_enabled_channels;
0x003627        1880000F                 M[r6] = Null + Null;
0x003628        0300DD00                 Null = Null + Null, M[I3,1] = r3;
0x003629        FD0000FF 01204BF9        r0 = Null + -46087;
0x00362B        01C00007                 r10 = Null + 7;
0x00362C        E1F00038                 call $multi_chan_copy_enabled_channels;
0x00362D        DDF0DE45                 jump $pop_rLink_and_rts;

 <$multi_chan_select_chain_usage>
0x00362E        01300000                 r1 = Null + 0;
0x00362F        8006007F                 Null = r4 AND r5;
0x003630        DD00000C                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;
0x003631        FD0000FF 8927FFFF        r0 = r5 XOR 0xffffff;
0x003633        8006002F                 Null = r4 AND r0;
0x003634        DD000008                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;
0x003635        09202BFF                 r0 = Null + M[$current_dac_sampling_rate];
0x003636        FD000000 2102AC44        Null = r0 - 44100;
0x003638        DD000003                 if EQ jump $M.multi_chan_select_chain_usage.chain0_and_chain1;
0x003639        09206677                 r0 = Null + M[$M.multi_chan_output.i2s_slave0];
0x00363A        DD000002                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;

 <$M.multi_chan_select_chain_usage.chain0_and_chain1>
0x00363B        0037000F                 r1 = r5 + Null;

 <$M.multi_chan_select_chain_usage.only_chain0>
0x00363C        D5350002                 M[r3 + 2] = r1;
0x00363D        DC0D000F                 rts;

 <$multi_chan_purge_buffers>
0x00363E        092095F5                 r0 = Null + M[0xff95f5];
0x00363F        192095F4                 M[0xff95f4] = r0 + Null;
0x003640        092065F8                 r0 = Null + M[0x65f8];
0x003641        192065F7                 M[0x65f7] = r0 + Null;
0x003642        092095F8                 r0 = Null + M[0xff95f8];
0x003643        192095F7                 M[0xff95f7] = r0 + Null;
0x003644        092065FB                 r0 = Null + M[0x65fb];
0x003645        192065FA                 M[0x65fa] = r0 + Null;
0x003646        092095FB                 r0 = Null + M[0xff95fb];
0x003647        192095FA                 M[0xff95fa] = r0 + Null;
0x003648        092065FE                 r0 = Null + M[0x65fe];
0x003649        192065FD                 M[0x65fd] = r0 + Null;
0x00364A        092095FE                 r0 = Null + M[0xff95fe];
0x00364B        192095FD                 M[0xff95fd] = r0 + Null;
0x00364C        DC0D000F                 rts;

 <$multi_chan_build_channel_enable_mask>
0x00364D        F3D00000                 push rLink;
0x00364E        5020002F                 I2 = Null + r0;
0x00364F        E430002F                 r1 = Null + 1;
0x003650        01600000                 r4 = Null + 0;
0x003651        E5F00006                 do $M.multi_chan_build_channel_enable_mask.channel_loop;
0x003652        03002900                 Null = Null + Null, r0 = M[I2,1];
0x003653        E1F0DDEC                 call $cbuffer.is_it_enabled;
0x003654        DD000002                 if EQ jump $M.multi_chan_build_channel_enable_mask.not_enabled;
0x003655        87630000                 r4 = r4 OR r1;

 <$M.multi_chan_build_channel_enable_mask.not_enabled>
0x003656        8D330001                 r1 = r1 LSHIFT 1;

 <$M.multi_chan_build_channel_enable_mask.channel_loop>
0x003657        DDF0DE1B                 jump $pop_rLink_and_rts;

 <$multi_chan_calc_cbops_channel_enables>
0x003658        01C00007                 r10 = Null + 7;
0x003659        E440002F                 r2 = Null + 1;
0x00365A        01500000                 r3 = Null + 0;
0x00365B        E460002F                 r4 = Null + 1;
0x00365C        E5F00007                 do $M.multi_chan_calc_cbops_channel_enables.loop_over_channels;
0x00365D        8002006F                 Null = r0 AND r4;
0x00365E        DD000004                 if EQ jump $M.multi_chan_calc_cbops_channel_enables.skip_en;
0x00365F        8003006F                 Null = r1 AND r4;
0x003660        84550041                 if NE r3 = r3 OR r2;
0x003661        8D440001                 r2 = r2 LSHIFT 1;

 <$M.multi_chan_calc_cbops_channel_enables.skip_en>
0x003662        8D660001                 r4 = r4 LSHIFT 1;

 <$M.multi_chan_calc_cbops_channel_enables.loop_over_channels>
0x003663        DC0D000F                 rts;

 <$multi_chan_copy_enabled_channels>
0x003664        5020002F                 I2 = Null + r0;
0x003665        E430002F                 r1 = Null + 1;
0x003666        E5F00009                 do $M.multi_chan_copy_enabled_channels.channel_loop;
0x003667        03002900                 Null = Null + Null, r0 = M[I2,1];
0x003668        8006003F                 Null = r4 AND r1;
0x003669        DD000005                 if EQ jump $M.multi_chan_copy_enabled_channels.not_enabled;
0x00366A        D048000F                 r2 = M[r6 + Null];
0x00366B        00420000                 if EQ r2 = r0 + Null;
0x00366C        1884000F                 M[r6] = r2 + Null;
0x00366D        0300AD00                 Null = Null + Null, M[I3,1] = r0;

 <$M.multi_chan_copy_enabled_channels.not_enabled>
0x00366E        8D330001                 r1 = r1 LSHIFT 1;

 <$M.multi_chan_copy_enabled_channels.channel_loop>
0x00366F        DC0D000F                 rts;

 <$multi_chan_tones_active>
0x003670        092092FF                 r0 = Null + M[0xff92ff];
0x003671        093003FD                 r1 = Null + M[0x3fd];
0x003672        87230000                 r0 = r0 OR r1;
0x003673        09309313                 r1 = Null + M[0xff9313];
0x003674        87230000                 r0 = r0 OR r1;
0x003675        0930634B                 r1 = Null + M[0x634b];
0x003676        87230000                 r0 = r0 OR r1;
0x003677        09309327                 r1 = Null + M[0xff9327];
0x003678        87230000                 r0 = r0 OR r1;
0x003679        0930635F                 r1 = Null + M[0x635f];
0x00367A        87230000                 r0 = r0 OR r1;
0x00367B        DC0D000F                 rts;

 <$set_codec_rate_from_vm>
0x00367C        8133FFFF                 r1 = r1 AND 0xffff;
0x00367D        9933000A                 r1 = r1 * 10 (int);
0x00367E        19309632                 M[$current_codec_sampling_rate] = r1 + Null;
0x00367F        F3D00000                 push rLink;
0x003680        09209632                 r0 = Null + M[$current_codec_sampling_rate];
0x003681        E1F0DDD8                 call $latency.calc_inv_fs;
0x003682        19206635                 M[$inv_codec_fs] = r0 + Null;
0x003683        F3D40000                 pop rLink;
0x003684        DC0D000F                 rts;

 <$multi_chan_set_port_for_latency_calc>
0x003685        5000002F                 I0 = Null + r0;
0x003686        51800003                 M0 = Null + 3;
0x003687        5190FFFD                 M1 = Null + -3;

 <$M.multi_chan_set_port_for_latency_calc.next_entry>
0x003688        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003689        DD000005                 if EQ jump $M.multi_chan_set_port_for_latency_calc.exit;
0x00368A        D802000F                 Null = SIGNDET r0;
0x00368B        DD10FFFD                 if NE jump $M.multi_chan_set_port_for_latency_calc.next_entry;
0x00368C        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x00368D        0200B100                 Null = Null + Null, M[I0,M1] = r1;

 <$M.multi_chan_set_port_for_latency_calc.exit>
0x00368E        DC0D000F                 rts;

 <$M.music_example.GetParams.func>
0x00368F        01504600                 r3 = Null + 17920;
0x003690        016001DF                 r4 = Null + 479;
0x003691        FD0000D0 01700000        r5 = Null + -3145728;
0x003693        1835000F                 M[r1] = r3 + Null;
0x003694        D5630001                 M[r1 + 1] = r4;
0x003695        D5730002                 M[r1 + 2] = r5;
0x003696        01A00003                 r8 = Null + 3;
0x003697        DC0D000F                 rts;

 <$M.music_example.GetVersion.func>
0x003698        FD000000 0150E00B        r3 = Null + 57355;
0x00369A        0970963D                 r5 = Null + M[$music_example.Version];
0x00369B        09809632                 r6 = Null + M[$current_codec_sampling_rate];
0x00369C        1835000F                 M[r1] = r3 + Null;
0x00369D        D5730001                 M[r1 + 1] = r5;
0x00369E        D5830002                 M[r1 + 2] = r6;
0x00369F        01A00003                 r8 = Null + 3;
0x0036A0        DC0D000F                 rts;

 <$multi_chan_build_channel_type_mask>
0x0036A1        5020002F                 I2 = Null + r0;
0x0036A2        01700000                 r5 = Null + 0;
0x0036A3        E440002F                 r2 = Null + 1;
0x0036A4        E5F00005                 do $M.multi_chan_build_channel_type_mask.channel_loop;
0x0036A5        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0036A6        23230000                 r0 = r0 - r1;
0x0036A7        84770040                 if EQ r5 = r5 OR r2;
0x0036A8        8D440001                 r2 = r2 LSHIFT 1;

 <$M.multi_chan_build_channel_type_mask.channel_loop>
0x0036A9        DC0D000F                 rts;

 <$music_example.power_up_reset>
0x0036AA        F3D00000                 push rLink;
0x0036AB        E1F0FF53                 call $M.music_example.load_default_params.func;
0x0036AC        01602F60                 r4 = Null + 12128;
0x0036AD        E1F0DD26                 call $frame_sync.register_handlers;
0x0036AE        DDF0DDC4                 jump $pop_rLink_and_rts;

 <$set_output_handler_timer>
0x0036AF        09509674                 r3 = Null + M[$M.multi_chan_output.chain0_anc_enable];
0x0036B0        012005DC                 r0 = Null + 1500;
0x0036B1        0130012C                 r1 = Null + 300;
0x0036B2        21050002                 Null = r3 - 2;
0x0036B3        00230000                 if EQ r0 = r1 + Null;
0x0036B4        19206639                 M[$tmr_period_audio_copy] = r0 + Null;
0x0036B5        DC0D000F                 rts;

 <$copy_codec_stats_pointers>
0x0036B6        01C0000D                 r10 = Null + 13;
0x0036B7        51402BF2                 I4 = Null + 11250;
0x0036B8        E5F00003                 do $M.copy_codec_stats_pointers.assign_loop;
0x0036B9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0036BA        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.copy_codec_stats_pointers.assign_loop>
0x0036BB        DC0D000F                 rts;

 <$config_calc_port_rate>
0x0036BC        01402BFF                 r2 = Null + 11263;
0x0036BD        0002000F                 Null = r0 + Null;
0x0036BE        00400001                 if NE r2 = Null + Null;
0x0036BF        D5430001                 M[r1 + 1] = r2;
0x0036C0        DC0D000F                 rts;

 <$M.music_example.ReInit.func>
0x0036C1        E4A0002F                 r8 = Null + 1;
0x0036C2        19A0963E                 M[$music_example.reinit] = r8 + Null;
0x0036C3        01A00000                 r8 = Null + 0;
0x0036C4        DC0D000F                 rts;

 <$apply_sra_resampling_adjustment>
0x0036C5        99220003                 r0 = r0 * 3 (int);
0x0036C6        19202FC2                 M[0x2fc2] = r0 + Null;
0x0036C7        DC0D000F                 rts;

 <$multi_chan_set_prim_tone_mix_ratio>
0x0036C8        19506676                 M[$M.multi_chan_output.prim_tone_mix_ratio] = r3 + Null;
0x0036C9        DC0D000F                 rts;

 <$multi_chan_set_aux_tone_mix_ratio>
0x0036CA        19509676                 M[$M.multi_chan_output.aux_tone_mix_ratio] = r3 + Null;
0x0036CB        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$M.spi_block.signature
0x000000	$M.spi_block.SPI_BLOCK
        435352 204356 432043 4F4E54 
        524F4C 

0x000005	$M.spi_block.payload
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000045	$M.spi_block.command
        000000 

0x000046	$M.spi_block.cmd_ready
        00AAAA 

0x000047	$M.spi_block.cmd_complete
        005555 

0x000048	$M.spi_block.cmd_status
        005555 

0x000049	$M.spi_block.cmd_length
        000000 

0x00004A	$analogue_audio_in_mono_copy_struc
        FF955A 000001 800000 000002 
        0000AD FF95CF 

0x000050	$codec_tones.tone_left_resample_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x00005D	$interrupt.start_time
        000000 

0x00005E	$sbcdec.codec_struc
        000000 000000 

0x000060	$codec_tones.tone_right_resample_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x00006F	$app_config.io
        FFFFFF 

0x000070	$M.multi_chan_output.chain0_ch0_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00007C	$us_per_sample_sbc
        000000 000000 5AB3F4 535555 

0x000080	$codec_rate_adj.hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000A4	$signal_detect_timer_struc
        000000 000000 000000 000000 

0x0000A8	$M.music_example.load_default_params.operatorvals
        000008 00FF00 FFFFF8 00FFFF 
        000010 

0x0000AD	$audio_out_left_cbuffer_struc
        0005DC 004800 004800 

0x0000B0	$M.multi_chan_output.chain0_ch1_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000BC	$set_codec_rate_from_vm_message_struc
        000000 000000 000000 000000 

0x0000C0	$codec_rate_adj.hist_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000E4	$M.main.samples_latency_measure
        000000 006635 FF9636 000000 

0x0000E8	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0000ED	$codec_resamp_out_left_cbuffer_struc
        000334 FF6C00 FF6C00 

0x0000F0	$M.multi_chan_output.chain0_ch2_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000FC	$M.music_example_message.set_plugin_message_struc
        000000 000000 000000 000000 

0x000100	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift._sr_hist0
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000124	$M.music_example_message.multi_volume_message_struc
        000000 000000 000000 000000 

0x000128	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00012D	$codec_rate_adj_out_left_cbuffer_struc
        000334 FF7C00 FF7C00 

0x000130	$M.multi_chan_output.chain0_ch3_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00013C	$M.music_example_message.set_config_message_struc
        000000 000000 000000 000000 

0x000140	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift._sr_hist1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000164	$M.music_example_message.set_output_dev_type_message_struc
        000000 000000 000000 000000 

0x000168	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00016D	$M.music_example_spi.status_message_struc
        000000 000000 000000 

0x000170	$M.multi_chan_output.chain1_ch0_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00017C	$M.music_example_message.set_anc_mode_message_struc
        000000 000000 000000 000000 

0x000180	$M.multi_chan_output.chain1_ch1_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00018C	$M.music_example_message.multi_channel_aux_mute_message_struc
        000000 000000 000000 000000 

0x000190	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x000195	$M.music_example_spi.reinit_message_struc
        000000 000000 000000 

0x000198	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00019D	$M.music_example_spi.control_message_struc
        000000 000000 000000 

0x0001A0	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001A5	$M.sra_calcrate.mode_funtion_table
        0006CD 0006D1 0006DD 

0x0001A8	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001AD	$usb_fn_table
        002136 002143 002159 

0x0001B0	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001B5	$M.system_config.data.delay_buf_pri_right_cbuffer_struc
        000BCD FF5000 FF5000 

0x0001B8	$M.cbops.rate_adjustment_and_shift.main.dith_hist_left
        000000 000000 000000 000000 
        000000 

0x0001BD	$M.system_config.data.delay_buf_sec_right_cbuffer_struc
        000BCD FF6000 FF6000 

0x0001C0	$M.cbops.rate_adjustment_and_shift.main.dith_hist_right
        000000 000000 000000 000000 
        000000 

0x0001C5	$sbc.audio_sample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0002C5	$sbc.win_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000315	$sbc.win_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00033D	$M.math.log2_table.tab32_log2
        000000 000B5E 001664 002119 
        002B80 00359F 003F78 004910 
        00526A 005B88 00646F 006D20 
        00759E 007DEA 008608 008DFA 
        0095C0 009D5E 00A4D4 00AC24 
        00B350 00BA59 00C141 00C807 
        00CEAF 00D538 00DBA4 00E1F5 
        00E82A 00EE45 00F446 00FA2F 
        010000 

0x00035E	$M.math.pow2_table.tab32_pow2
        3FFFFF 4166C2 42D561 444C06 
        45CAE0 47521C 48E1E9 4A7A77 
        4C1BF7 4DC69C 4F7A98 513821 
        52FF6A 54D0AC 56AC1E 5891FA 
        5A8279 5C7DD7 5E8451 609625 
        62B394 64DCDE 671245 69540E 
        6BA27D 6DFDDB 70666E 72DC82 
        756062 77F25C 7A92BE 7D41D8 
        7FFFFF 

0x00037F	$decoder_codec_stream_struc
        000000 000000 000000 FF95CC 
        0000AD FF95CF 000000 000000 
        000000 000000 000000 6CCCCD 
        000000 000001 0034CD 000000 
        000000 000000 000000 000000 
        000000 

0x000394	$sbc.scale_factor
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003A4	$sbc.scale_factor_js
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003B4	$sbc.bitneed
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003C4	$sbc.bits
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003D4	$usb_audio_in_copy_struc
        800000 0000AD FF95CF 0000C0 
        000008 000000 000000 000000 
        000000 000000 

0x0003DE	$analogue_audio_in_copy_struc
        FF9555 000002 800000 800001 
        000002 0000AD FF95CF 

0x0003E5	$M.math.pow2_taylor.pow2_coefs
        000291 001641 009D90 038D32 
        0F5FE0 2C5C8C 400000 

0x0003EC	$M.multi_chan_output.chain0_ch1_mix_op.next
0x0003EC	$chain0_ch1_mix_op
        006529 

0x0003ED	$M.multi_chan_output.chain0_ch1_mix_op.func
        00661A 

0x0003EE	$M.multi_chan_output.chain0_ch1_mix_op.param
        000001 FFFFFF FF9605 FF3507 
        002BFF 0000B0 002BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000400	$multi_chan_primary_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000760	$M.cbops.soft_mute.mute_coefs
        000000 FFABF1 FEB09F FD109F 
        FAD035 F7F54C F48764 F08F7F 
        EC1809 E72CBF E1DA8C DC2F6B 
        D63A40 D00AB1 C9B0FF C33DD7 
        BCC22A B64F02 AFF550 A9C5C1 
        A3D096 9E2575 98D342 93E7F8 
        8F7082 8B789D 880AB5 852FCC 
        82EF62 814F62 805410 800000 

0x000780	$sub_out_1k2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0007AD	$chain0_ch0_resamp_op
0x0007AD	$M.multi_chan_output.chain0_ch0_resamp_op.next
        006541 

0x0007AE	$M.multi_chan_output.chain0_ch0_resamp_op.func
        FF9617 

0x0007AF	$M.multi_chan_output.chain0_ch0_resamp_op.param
        000000 000000 000000 FFFFF8 
        000000 004DDC 00018A 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0007F9	$M.MUSIC_EXAMPLE_MODULES_STAMP.ModulesStamp
0x0007F9	$M.MUSIC_EXAMPLE_MODULES_STAMP.s1
        00FEEB 

0x0007FA	$M.MUSIC_EXAMPLE_MODULES_STAMP.s2
        00FEEB 

0x0007FB	$M.MUSIC_EXAMPLE_MODULES_STAMP.s3
        00FEEB 

0x0007FC	$M.MUSIC_EXAMPLE_MODULES_STAMP.CompConfig
        07BBC0 

0x0007FD	$M.MUSIC_EXAMPLE_MODULES_STAMP.s4
        00FEEB 

0x0007FE	$M.MUSIC_EXAMPLE_MODULES_STAMP.s5
        00FEEB 

0x0007FF	$M.MUSIC_EXAMPLE_MODULES_STAMP.s6
        00FEEB 

0x000800	$multi_chan_sub_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000F08	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000F76	$M.system_config.data.full_proc_funcs
        00125F 006489 000000 001377 
        FF6FFE 000000 001377 0053FE 
        000000 000D4B 0065BB 000000 
        000D4B FF9598 000000 00243F 
        FF9655 006656 00096B 000000 
        FF927A 000B8E 000000 FF927A 
        0035A8 FF366B 000100 0035A8 
        FF3685 000100 0035A8 FF36D0 
        000080 0035A8 FF36DE 000080 
        0035A8 FF30D0 000400 0035A8 
        FF3585 000400 0008FD FF36EC 
        000000 0001C7 FF9426 000000 
        002500 FF9656 000000 0007F9 
        000000 00650B 0007F9 000000 
        FF94C9 0007F9 000000 006511 
        0007F9 000000 FF94CF 0007F9 
        000000 006517 0007F9 000000 
        FF94D5 0004C2 0062A6 000000 
        0004C2 FF9360 000000 001377 
        FF9626 000000 001377 006629 
        000000 001377 FF9628 000000 
        001377 00662B 000000 001377 
        FF962A 000000 001377 00662D 
        000000 001377 FF962C 000000 
        0019EE 000000 000000 0019B3 
        000000 000000 0011ED 006489 
        000000 000000 

0x000FE0	$M.system_config.data.filter_reset_table
        002641 FF30D0 000000 002641 
        FF3585 000000 002641 FF36D0 
        000000 002641 FF36DE 000000 
        002641 FF366B 000000 002641 
        FF3685 000000 000D41 005B34 
        0002D0 002636 FF369F 000000 
        000000 

0x000FF9	$M.multi_chan_output.wired_in_buffer_table
        FF95F3 0065F6 FF95F9 0065FC 
        FF95F6 0065F9 FF95FC 

0x001000	$codec_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002000	$M.system_config.data.delay_buf_sec_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x002BCD	$M.system_config.data.StatisticsPtrs
        FF9568 006475 FF9569 FF956A 
        FF9649 FF6FFF 0053FF 006653 
        00662E FF962D FF9627 00662A 
        00662C FF962B FF9629 FF9629 
        006640 FF9640 FF9641 006642 
        FF9642 FF9643 006644 FF9644 
        006645 FF9645 004600 0007FC 
        006672 006646 FF9646 006647 
        FF9647 FF956B 002BFF FF9632 
        FF9637 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x002BFF	$current_dac_sampling_rate
        000000 

0x002C00	$multi_chan_primary_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002F60	$M.music_example.power_up_reset.message_handlers
        0000FC 001020 002355 0025C7 
        FF956C 001001 0034E6 0025C7 
        00013C 00100E 0023F8 0025C7 
        000124 001002 00204D 0025C7 
        FF9570 00101B 0021C3 0025C7 
        FF9574 001012 003540 0025C7 
        FF9580 001018 002572 0025C7 
        004FFC 00101A 002461 0025C7 
        FF95B0 001027 001327 0025C7 
        FF9584 00121A 00242F 0025C7 
        0065AB 00129A 002519 0025C7 
        FF9588 00121B 002525 0025C7 
        0065AF 00129B 002472 0025C7 
        000164 0010A0 002495 0025C7 
        FF9578 0010A1 00258E 0025C7 
        00017C 0010A4 00258B 0025C7 
        FF957C 0010A2 00231D 0025C7 
        00018C 0010A3 0024F2 0025C7 
        00016D 001007 003554 002652 
        FF95D8 00100A 003698 002652 
        00019D 00100B 00332A 002652 
        000195 001009 0036C1 002652 
        FF95DB 001008 00368F 002652 
        000000 

0x002FBD	$sra_struct
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002FFD	$M.system_config.data.delay_buf_aux_right_cbuffer_struc
        000BCD FF7000 FF7000 

0x003000	$M.system_config.data.delay_buf_aux_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x003BCD	$M.system_config.data.copy_proc_funcs
        00125F 006489 000000 001377 
        FF6FFE 000000 001377 0053FE 
        000000 000D4B 0065BB 000000 
        000D4B FF9598 000000 0020A2 
        0063F4 000000 00243F FF9655 
        006656 0004C2 0062A6 000000 
        001377 FF9626 000000 001377 
        006629 000000 001377 FF9628 
        000000 001377 00662B 000000 
        001377 FF962A 000000 001377 
        00662D 000000 001377 FF962C 
        000000 0011ED 006489 000000 
        000000 

0x003BFE	$M.sra_tagtimes.mode_funtion_table
        0004A4 0004AE 

0x003C00	$multi_chan_secondary_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x003F60	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x003FB8	$sbc.sbc_common_data_array
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        0001C5 0002C5 000315 FF30A0 
        000394 0003A4 0003B4 0003C4 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x003FFD	$sub_out_1k2_cbuffer_struc
        00002D 000780 000780 

0x004000	$tone_in_left_resample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x004600	$M.system_config.data.CurParams
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0047E0	$cbuffer.port_buffer_size
0x0047E0	$cbuffer.read_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0047EC	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0047F8	$ufe_main.message_volume_struc
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x004800	$audio_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x004DDC	$M.multi_chan_output.chain0_ch0_resamp_op.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x004F66	$chain0_ch1_resamp_op
0x004F66	$M.multi_chan_output.chain0_ch1_resamp_op.next
        FFFFFF 

0x004F67	$M.multi_chan_output.chain0_ch1_resamp_op.func
        FF9617 

0x004F68	$M.multi_chan_output.chain0_ch1_resamp_op.param
        000001 000000 000000 FFFFF8 
        000000 00607C 00018A 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x004FB2	$codec_resampler.left
        0000AD 0000ED 000000 FFFFF8 
        000008 005E04 000278 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x004FFC	$M.music_example_message.soft_mute_message_struct
        000000 000000 000000 000000 

0x005000	$multi_chan_aux_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005360	$codec_resampler.right
        FF95CF FF95D2 000000 FFFFF8 
        000008 005E04 000278 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0053AA	$M.system_config.data.SpkrEqCoefsA
        00000A 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 000001 
        000001 000001 000001 

0x0053E9	$M.system_config.data.SubEqCoefsA
        000003 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 

0x0053FE	$M.system_config.data.pcmin_r_pk_dtct
        FF93E5 000000 

0x005400	$codec_resamp_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005734	$M.system_config.data.SpkrEqCoefsB
        00000A 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 000001 
        000001 000001 000001 

0x005773	$M.system_config.data.spkr_ctrl_pri_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x0057A0	$M.system_config.data.spkr_ctrl_pri_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x0057CD	$M.system_config.data.spkr_ctrl_sec_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x0057FA	$M.system_config.data.SpkrEqDefnTable
        000001 00000A FF30D0 FF3585 
        0053AA 005734 

0x005800	$codec_rate_adj_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005B34	$M.system_config.data.spkr_ctrl_bass_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x005E04	$codec_resampler.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00607C	$M.multi_chan_output.chain0_ch1_resamp_op.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006206	$M.system_config.data.spkr_ctrl_sec_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x006233	$M.system_config.data.spkr_ctrl_bass_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 

0x00625A	$M.system_config.data.spkr_ctrl_bass_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 

0x006281	$codec_resampler.filter_spec_lookup_table
        00BB80 00BB80 000000 00AC44 
        00AC44 000000 007D00 007D00 
        000000 005622 005622 000000 
        003E80 003E80 000000 001F40 
        001F40 000000 003E80 00BB80 
        FF6FC7 007D00 00BB80 FF7F5A 
        00AC44 00BB80 FF4BCD 003E80 
        00AC44 FF6F9D 007D00 00AC44 
        FF6BCD 00BB80 00AC44 FF5BCD 
        000000 

0x0062A6	$M.system_config.data.multichannel_volume_and_limit_block
0x0062A6	$M.system_config.data.multichannel_volume_and_limit_obj
        000000 001000 000005 FF9632 
        000000 FBD57B 072148 79999A 
        000000 000000 000000 

0x0062B1	$M.system_config.data.left_primary_channel_vol_struc
        00641D 00641D 080000 000000 
        000000 

0x0062B6	$M.system_config.data.right_primary_channel_vol_struc
        FF93F2 FF93F2 080000 000000 
        000000 

0x0062BB	$M.system_config.data.left_secondary_channel_vol_struc
        00642A 00642A 080000 000000 
        000000 

0x0062C0	$M.system_config.data.right_secondary_channel_vol_struc
        FF93FF FF93FF 080000 000000 
        000000 

0x0062C5	$M.system_config.data.wired_sub_channel_vol_struc
        006444 006444 080000 000000 
        000000 

0x0062CA	$M.system_config.data.reinitialize_table
        003020 0057FA FF9654 003020 
        FF94B1 006655 003000 0064F9 
        FF30F9 002661 FF36EC 000000 
        0025B0 000000 FF927A 0013EA 
        0062A6 0062A6 0013EA FF92B0 
        FF92B0 0013EA FF9360 FF9360 
        000D12 FF37F9 000000 003020 
        FF94C3 006657 0025B0 000000 
        FF925C 000000 

0x0062EC	$M.system_config.data.UserEqCoefsA
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x00630D	$cbuffer.read_port_limit_addr
0x00630D	$cbuffer.port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x006319	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x006325	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.next
0x006325	$chain1_sync_rate_adjustment_and_shift
        FFFFFF 

0x006326	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.func
        FF9614 

0x006327	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.param
        000000 000000 000000 000000 
        FFFFF8 FF3507 000100 000140 
        FF93C5 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x00633A	$chain0_ch3_mix_op
0x00633A	$M.multi_chan_output.chain0_ch3_mix_op.next
        FF9447 

0x00633B	$M.multi_chan_output.chain0_ch3_mix_op.func
        00661A 

0x00633C	$M.multi_chan_output.chain0_ch3_mix_op.param
        000003 FFFFFF FF9608 FF3507 
        002BFF 000130 002BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00634E	$chain1_ch1_mix_op
0x00634E	$M.multi_chan_output.chain1_ch1_mix_op.next
        006493 

0x00634F	$M.multi_chan_output.chain1_ch1_mix_op.func
        00661A 

0x006350	$M.multi_chan_output.chain1_ch1_mix_op.param
        000001 FFFFFF FF960B FF3507 
        002BFF 000180 002BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006362	$usb_rate_candidates
        00BB80 0000C0 000000 001F40 
        000020 000000 003E80 000040 
        000000 005622 00005C 000014 
        007D00 000080 000000 00AC44 
        0000B4 00000A 000000 

0x006375	$M.system_config.data.MeloD_Expansion_filter_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006387	$M.main.cbuffers_latency_measure
        0000AD 006635 FF9636 0000ED 
        FF9635 FF9636 00012D FF9635 
        006637 FF95F3 FF9635 006637 
        800011 FF9635 006637 000000 

0x006397	$M.system_config.data.spkr_ctrl_gain_coefs_B
        200000 000000 000000 000000 
        200000 000000 200000 000000 
        000000 000000 200000 000000 
        100000 100000 000000 200000 

0x0063A7	$cbops.buffer_sizes
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0063B7	$cbops.buffer_pointers
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0063C7	$encoded_latency_struct
        FF373E 0065F3 FF95CC 0000AD 
        006635 FF9636 000003 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x0063D6	$mono_tone_in_left_resample_op.next
0x0063D6	$mono_tone_in_left_resample_op
        FF939F 

0x0063D7	$mono_tone_in_left_resample_op.func
        FF9620 

0x0063D8	$mono_tone_in_left_resample_op.param
        000000 000001 FF3507 00667F 
        002BFF 000050 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0063E5	$tone_in_left_resample_op
0x0063E5	$tone_in_left_resample_op.next
        FF93AE 

0x0063E6	$tone_in_left_resample_op.func
        FF9620 

0x0063E7	$tone_in_left_resample_op.param
        000000 000002 FF3507 00667F 
        002BFF 000050 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0063F4	$M.system_config.data.ModeControl
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006402	$kal_filter_coef_lib.__warp.constants
        000081 C90FDB 00007D BE76C9 
        80007D E24DD3 80007D AC0831 
        00007F 8624DD 00007D EB851F 
        000080 800000 

0x006410	$M.system_config.data.stream_map_left_in
        000000 000000 000000 000168 
        000BB8 001409 0013BA 000000 
        000000 000000 000000 000000 
        000000 

0x00641D	$M.system_config.data.stream_map_primary_left_out
        FF95F3 000000 000000 000168 
        000BB8 0013DE 001273 000000 
        000000 000000 000000 000000 
        000000 

0x00642A	$M.system_config.data.stream_map_secondary_left_out
        FF95F6 000000 000000 000168 
        000BB8 0013DE 001273 000000 
        000000 000000 000000 000000 
        000000 

0x006437	$M.system_config.data.stream_map_aux_left_out
        FF95F9 000000 000000 000168 
        000BB8 0013DE 001273 000000 
        000000 000000 000000 000000 
        000000 

0x006444	$M.system_config.data.stream_map_sub_out
        FF95FC 000000 000000 000168 
        000BB8 0013DE 001273 000000 
        000000 000000 000000 000000 
        000000 

0x006451	$M.main.write_port_function_table
        00194F 00196E 003233 003233 
        003233 003233 003233 003233 
        003233 003233 003233 003233 

0x00645D	$M.main.write_port_disconnected_function_table
        0019A3 0019A3 003233 003233 
        003233 003233 003233 003233 
        003233 003233 003233 003233 

0x006469	$M.multi_chan_output.chain1_copy_struc
        FF951D 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x006475	$music_example.SysControl
0x006475	$music_example.SpiSysControl
        000000 

0x006476	$music_example.OvrSystemVolume
        000009 

0x006477	$music_example.OvrCallState
        000000 

0x006478	$music_example.OvrMode
        000000 

0x006479	$music_example.AuxOvrMasterVolumes
        000000 

0x00647A	$music_example.AuxOvrTrimVolumes
        000000 

0x00647B	$music_example.MainOvrMasterVolumes
        000000 

0x00647C	$music_example.PriOvrTrimVolumes
        000000 

0x00647D	$music_example.SecOvrTrimVolumes
        000000 

0x00647E	$music_example.SubOvrTrimVolumes
        000000 

0x00647F	$DecoderMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x006489	$M.system_config.data.rcv_process_streams
        006410 FF93E5 00641D FF93F2 
        00642A FF93FF 006437 FF940C 
        006444 000000 

0x006493	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.next
0x006493	$chain1_ch0_1_signal_detect_op
        FF94A3 

0x006494	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.func
        FF961A 

0x006495	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.param
        00651D 000000 000000 000001 
        000002 000003 000004 000005 

0x00649D	$M.system_config.data.BoostEqCoefsA
        000001 000001 400000 000000 
        000000 400000 000000 000000 
        000001 

0x0064A6	$M.system_config.data.spkr_ctrl_coefs
        000001 FF35AE FF35CE 000000 
        000000 FF364E FF9350 FF9350 
        006397 

0x0064AF	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.next
0x0064AF	$chain0_ch0_dither_and_shift_op
        006547 

0x0064B0	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.func
        006611 

0x0064B1	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.param
        000000 000000 FFFFF8 000000 
        0000E8 000000 

0x0064B7	$chain0_ch2_dither_and_shift_op
0x0064B7	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.next
        FF950B 

0x0064B8	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.func
        006611 

0x0064B9	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.param
        000002 000000 FFFFF8 000000 
        000168 000000 

0x0064BF	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.next
0x0064BF	$chain0_ch4_dither_and_shift_op
        FF9517 

0x0064C0	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.func
        006611 

0x0064C1	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.param
        000004 000000 FFFFF8 000000 
        000198 000000 

0x0064C7	$chain1_ch0_dither_and_shift_op
0x0064C7	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.next
        006577 

0x0064C8	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.func
        006611 

0x0064C9	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.param
        000000 000000 FFFFF8 000000 
        0001A8 000000 

0x0064CF	$M.multi_chan_output.wired_out_type_table
        000000 000000 000000 000000 
        000000 000000 000000 

0x0064D6	$M.multi_chan_output.chain0_pcm_cbuffers_latency_measure
        000000 FF9635 000000 000000 
        FF9635 000000 000000 

0x0064DD	$M.multi_chan_output.chain0_ch1_mute_op.next
0x0064DD	$chain0_ch1_mute_op
        FF94F3 

0x0064DE	$M.multi_chan_output.chain0_ch1_mute_op.func
        00661D 

0x0064DF	$M.multi_chan_output.chain0_ch1_mute_op.param
        000000 000000 000001 000001 
        000001 

0x0064E4	$M.multi_chan_output.chain0_ch3_mute_op.next
0x0064E4	$chain0_ch3_mute_op
        006553 

0x0064E5	$M.multi_chan_output.chain0_ch3_mute_op.func
        00661D 

0x0064E6	$M.multi_chan_output.chain0_ch3_mute_op.param
        000000 000000 000001 000003 
        000003 

0x0064EB	$M.multi_chan_output.chain0_ch5_mute_op.next
0x0064EB	$chain0_ch5_mute_op
        00655F 

0x0064EC	$M.multi_chan_output.chain0_ch5_mute_op.func
        00661D 

0x0064ED	$M.multi_chan_output.chain0_ch5_mute_op.param
        000000 000000 000001 000005 
        000005 

0x0064F2	$M.multi_chan_output.chain1_ch1_mute_op.next
0x0064F2	$chain1_ch1_mute_op
        006571 

0x0064F3	$M.multi_chan_output.chain1_ch1_mute_op.func
        00661D 

0x0064F4	$M.multi_chan_output.chain1_ch1_mute_op.param
        000000 000000 000001 000001 
        000001 

0x0064F9	$M.system_config.data.UserEqDefnTable
        000006 000005 FF366B FF3685 
        0062EC FF7FDB 

0x0064FF	$M.system_config.data.spkr_ctrl_sec_eq_defn_table
        000002 000007 FF35EE FF360E 
        0057CD 006206 

0x006505	$M.system_config.data.aux_mix_obj
        006410 FF93E5 006437 FF9653 
        FF9653 006653 

0x00650B	$M.system_config.data.delay_pri_left
        00641D 00641D FF95E4 000000 
        000000 000000 

0x006511	$M.system_config.data.delay_sec_left
        00642A 00642A FF95E7 000000 
        000000 000000 

0x006517	$M.system_config.data.delay_aux_left
        006437 006437 FF95EA 000000 
        000000 000000 

0x00651D	$M.multi_chan_output.signal_detect_coeffs
        000A5B 000258 000000 000000 
        000001 001019 

0x006523	$chain0_ch0_tone_switch_op
0x006523	$M.multi_chan_output.chain0_ch0_tone_switch_op.next
        FF92EE 

0x006524	$M.multi_chan_output.chain0_ch0_tone_switch_op.func
        FF961D 

0x006525	$M.multi_chan_output.chain0_ch0_tone_switch_op.param
        006675 FF94E1 000001 000000 

0x006529	$M.multi_chan_output.chain0_ch2_tone_switch_op.next
0x006529	$chain0_ch2_tone_switch_op
        FF9302 

0x00652A	$M.multi_chan_output.chain0_ch2_tone_switch_op.func
        FF961D 

0x00652B	$M.multi_chan_output.chain0_ch2_tone_switch_op.param
        006675 FF94E7 000004 000000 

0x00652F	$M.multi_chan_output.chain0_ch0_switch_op.next
0x00652F	$chain0_ch0_switch_op
        FF6BF9 

0x006530	$M.multi_chan_output.chain0_ch0_switch_op.func
        FF961D 

0x006531	$M.multi_chan_output.chain0_ch0_switch_op.param
        FF9673 006535 000001 000000 

0x006535	$M.multi_chan_output.chain0_ch1_switch_op.next
0x006535	$chain0_ch1_switch_op
        0064DD 

0x006536	$M.multi_chan_output.chain0_ch1_switch_op.func
        FF961D 

0x006537	$M.multi_chan_output.chain0_ch1_switch_op.param
        FF9673 00653B 000002 000000 

0x00653B	$M.multi_chan_output.chain0_anc_switch_op.next
0x00653B	$chain0_anc_switch_op
        FF94F9 

0x00653C	$M.multi_chan_output.chain0_anc_switch_op.func
        FF961D 

0x00653D	$M.multi_chan_output.chain0_anc_switch_op.param
        FF9674 FF94FF 000003 000000 

0x006541	$M.multi_chan_output.chain0_ch1_resamp_switch_op.next
0x006541	$chain0_ch1_resamp_switch_op
        004F66 

0x006542	$M.multi_chan_output.chain0_ch1_resamp_switch_op.func
        FF961D 

0x006543	$M.multi_chan_output.chain0_ch1_resamp_switch_op.param
        FF9673 FFFFFF 000002 000000 

0x006547	$chain0_ch1_dither_switch_op
0x006547	$M.multi_chan_output.chain0_ch1_dither_switch_op.next
        FF9475 

0x006548	$M.multi_chan_output.chain0_ch1_dither_switch_op.func
        FF961D 

0x006549	$M.multi_chan_output.chain0_ch1_dither_switch_op.param
        FF9673 FF9505 000002 000000 

0x00654D	$chain0_ch2_dc_remove_op
0x00654D	$M.multi_chan_output.chain0_ch2_dc_remove_op.next
        0064B7 

0x00654E	$M.multi_chan_output.chain0_ch2_dc_remove_op.func
        FF960E 

0x00654F	$M.multi_chan_output.chain0_ch2_dc_remove_op.param
        000002 000002 000000 000000 

0x006553	$chain0_ch3_dc_remove_op
0x006553	$M.multi_chan_output.chain0_ch3_dc_remove_op.next
        FF947D 

0x006554	$M.multi_chan_output.chain0_ch3_dc_remove_op.func
        FF960E 

0x006555	$M.multi_chan_output.chain0_ch3_dc_remove_op.param
        000003 000003 000000 000000 

0x006559	$M.multi_chan_output.chain0_ch4_dc_remove_op.next
0x006559	$chain0_ch4_dc_remove_op
        0064BF 

0x00655A	$M.multi_chan_output.chain0_ch4_dc_remove_op.func
        FF960E 

0x00655B	$M.multi_chan_output.chain0_ch4_dc_remove_op.param
        000004 000004 000000 000000 

0x00655F	$chain0_ch5_dc_remove_op
0x00655F	$M.multi_chan_output.chain0_ch5_dc_remove_op.next
        FF9485 

0x006560	$M.multi_chan_output.chain0_ch5_dc_remove_op.func
        FF960E 

0x006561	$M.multi_chan_output.chain0_ch5_dc_remove_op.param
        000005 000005 000000 000000 

0x006565	$chain1_ch0_tone_switch_op
0x006565	$M.multi_chan_output.chain1_ch0_tone_switch_op.next
        FF9316 

0x006566	$M.multi_chan_output.chain1_ch0_tone_switch_op.func
        FF961D 

0x006567	$M.multi_chan_output.chain1_ch0_tone_switch_op.param
        FF9675 FF9523 000001 000000 

0x00656B	$chain1_ch0_dc_remove_op
0x00656B	$M.multi_chan_output.chain1_ch0_dc_remove_op.next
        FF9529 

0x00656C	$M.multi_chan_output.chain1_ch0_dc_remove_op.func
        FF960E 

0x00656D	$M.multi_chan_output.chain1_ch0_dc_remove_op.param
        000000 000000 000000 000000 

0x006571	$chain1_ch1_dc_remove_op
0x006571	$M.multi_chan_output.chain1_ch1_dc_remove_op.next
        FF952F 

0x006572	$M.multi_chan_output.chain1_ch1_dc_remove_op.func
        FF960E 

0x006573	$M.multi_chan_output.chain1_ch1_dc_remove_op.param
        000001 000001 000000 000000 

0x006577	$M.multi_chan_output.chain1_ch1_switch2_op.next
0x006577	$chain1_ch1_switch2_op
        FF948D 

0x006578	$M.multi_chan_output.chain1_ch1_switch2_op.func
        FF961D 

0x006579	$M.multi_chan_output.chain1_ch1_switch2_op.param
        006674 FFFFFF 000002 000000 

0x00657D	$stereo_tone_in_copy_struc
        FF953B 000001 946003 000002 
        0065FF FF95FF 

0x006583	$codec_in_copy_struc
        FF9564 000001 800000 000001 
        FF95CC 

0x006588	$sub_esco_out_copy_struc
        00658D 000001 FF95ED 000001 
        91A00C 

0x00658D	$signal_detect_op
0x00658D	$signal_detect_op.next
        0065C3 

0x00658E	$signal_detect_op.func
        FF961A 

0x00658F	$signal_detect_op.param
        00651D 000001 000000 

0x006592	$hw_warp_struct
        007D00 002FCE 000080 000000 
        000000 

0x006597	$tone_in_copy_op
0x006597	$tone_in_copy_op.next
        FFFFFF 

0x006598	$tone_in_copy_op.func
        006617 

0x006599	$tone_in_copy_op.param
        000000 000001 00000B 

0x00659C	$analogue_in_right_copy_op
0x00659C	$analogue_in_right_copy_op.next
        FFFFFF 

0x00659D	$analogue_in_right_copy_op.func
        006617 

0x00659E	$analogue_in_right_copy_op.param
        000001 000003 000008 

0x0065A1	$analogue_mono_in_left_copy_op.next
0x0065A1	$analogue_mono_in_left_copy_op
        FF955F 

0x0065A2	$analogue_mono_in_left_copy_op.func
        006617 

0x0065A3	$analogue_mono_in_left_copy_op.param
        000001 000001 000008 

0x0065A6	$M.cbops.dac_av_copy.default_dac_av_copy_srtuct
        000000 000000 000000 000000 
        000000 

0x0065AB	$M.music_example_message.get_user_eq_param_message_struct
        000000 000000 000000 000000 

0x0065AF	$M.music_example_message.get_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0x0065B3	$M.system_config.data.passthru_primary_right
        FF93E5 000000 0063F6 0063F7 

0x0065B7	$M.system_config.data.passthru_secondary_left
        006410 000000 0063F8 0063F9 

0x0065BB	$M.system_config.data.left_headroom_obj
        006410 006410 006654 006653 

0x0065BF	$M.system_config.data.aux_stereo_copy_obj
        006410 FF93E5 006437 FF940C 

0x0065C3	$codec_out_copy_op.next
0x0065C3	$codec_out_copy_op
        FFFFFF 

0x0065C4	$codec_out_copy_op.func
        00660E 

0x0065C5	$codec_out_copy_op.param
        000000 000001 

0x0065C7	$sco_params_message_struc
        000000 000000 000000 000000 

0x0065CB	$sco_timer_struc
        000000 000000 000000 000000 

0x0065CF	$bdaddr_struc
        000000 000000 000000 000000 

0x0065D3	$M.report_latency_to_vm.timer_struc
        000000 000000 000000 000000 

0x0065D7	$interface_map_struc
        000000 000000 000000 000000 

0x0065DB	$set_tone_rate_from_vm_message_struc
        000000 000000 000000 000000 

0x0065DF	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0x0065E3	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0x0065E7	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0x0065EB	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0x0065EF	$M.frame_sync.usb_in_stereo_audio_copy.usb_in_state_fn
        000772 000785 000785 0007AF 

0x0065F3	$codec_packets_info_cbuffer_struc
        000032 FF4F80 FF4F80 

0x0065F6	$multi_chan_primary_right_out_cbuffer_struc
        000360 002C00 002C00 

0x0065F9	$multi_chan_secondary_right_out_cbuffer_struc
        000360 003C00 003C00 

0x0065FC	$multi_chan_aux_right_out_cbuffer_struc
        000360 005000 005000 

0x0065FF	$tone_in_left_cbuffer_struc
        000100 FF3E00 FF3E00 

0x006602	$tone_in_left_resample_cbuffer_struc
        000600 004000 004000 

0x006605	$tone0_in_left_resample_cbuffer_struc
        000600 004000 004000 

0x006608	$tone1_in_left_resample_cbuffer_struc
        000600 004000 004000 

0x00660B	$tone2_in_left_resample_cbuffer_struc
        000600 004000 004000 

0x00660E	$cbops.copy_op
        000000 000000 001344 

0x006611	$cbops.dither_and_shift
        000000 000000 000AEB 

0x006614	$cbops.one_to_two_chan_copy
        000000 000000 0011BC 

0x006617	$cbops.shift
        000000 000000 0012CC 

0x00661A	$cbops.auto_upsample_and_mix
        000000 000000 000302 

0x00661D	$cbops.soft_mute
        000000 000000 0022B3 

0x006620	$cbops.deinterleave
        000000 001454 00113C 

0x006623	$cbops_fir_resample_complete
        000000 000000 00146D 

0x006626	$M.audio_proc.delay.process.write_byte_pos_func
        00085E 000864 00086C 

0x006629	$M.system_config.data.primout_r_pk_dtct
        FF93F2 000000 

0x00662B	$M.system_config.data.scndout_l_pk_dtct
        00642A 000000 

0x00662D	$M.system_config.data.auxout_l_pk_dtct
        006437 000000 

0x00662F	$M.multi_chan_output.chain1_pcm_latency_input_struct
        FF5BF9 000000 

0x006631	$tone_in_resample_complete_op
0x006631	$tone_in_resample_complete_op.next
        FFFFFF 

0x006632	$tone_in_resample_complete_op.func
        006623 

0x006633	$local_encoded_play_back
        000000 

0x006634	$max_clock_mismatch
        000000 

0x006635	$inv_codec_fs
        14D555 

0x006636	$M.main.zero
        000000 

0x006637	$latency_calc_port_warp
        006636 

0x006638	$codec_config
        FFFFFF 

0x006639	$tmr_period_audio_copy
        000000 

0x00663A	$sra_rate_addr
        002FCE 

0x00663B	$debug_codec_in_level
        000000 

0x00663C	$M.av_audio_out_silence_insert.left_zero_samples
        000000 

0x00663D	$codec_resampler.resampler_active
        000000 

0x00663E	$music_example.sys_mode
        000002 

0x00663F	$music_example.sync_flag_ptr
        006693 

0x006640	$music_example.SystemVolume
        00000B 

0x006641	$music_example.Aux.ToneVolume
        000000 

0x006642	$music_example.Aux.RightTrimVolume
        000000 

0x006643	$music_example.Main.ToneVolume
        000000 

0x006644	$music_example.Main.PrimaryRightTrimVolume
        000000 

0x006645	$music_example.Main.SecondaryRightTrimVolume
        000000 

0x006646	$music_example.DAC_IF_Connections
        000000 

0x006647	$music_example.I2S_IF_Connections
        000000 

0x006648	$M.mips_profile.evalinterval_us
        0186A0 

0x006649	$M.Sleep.LastUpdateTm
        000000 

0x00664A	$M.music_example.GetControl.local_sys_vol
        000000 

0x00664B	$M.music_example_message.AuxVolume.temp_msg_ptr
        000000 

0x00664C	$M.music_example_message.MainVolume.temp_msg_ptr
        000000 

0x00664D	$M.music_example.LoadParams.Pskey_fetch_flg
        000001 

0x00664E	$SetOutputDevType_message_received
        000000 

0x00664F	$sra_resamp_adjust_int
        000001 

0x006650	$usb_state
        000000 

0x006651	$usb_pause_period_thresh
        000003 

0x006652	$usb_reset_pending
        000001 

0x006653	$M.system_config.data.ZeroValue
        000000 

0x006654	$M.system_config.data.headroom_mant
        200000 

0x006655	$M.system_config.data.BoostEqParams
        00462B 

0x006656	$M.system_config.data.aux_downmix
        000000 

0x006657	$M.system_config.data.WiredSubEqParams
        0046B6 

0x006658	$cmpd_gain
        000000 

0x006659	$DAC_conn_main
        000000 

0x00665A	$M.frame_proc_stream_configure.if_struc_temp
        000000 

0x00665B	$M.Subwoofer.playback_time
        000000 

0x00665C	$wall_clock_lsw
        000000 

0x00665D	$sco_param_tesco
        000000 

0x00665E	$sco_param_clock_lsw
        000000 

0x00665F	$sco_param_from_air_size
        000000 

0x006660	$sco_param_from_air_time
        000000 

0x006661	$bass_timer_id
        000000 

0x006662	$sub_app_esco_func
        000000 

0x006663	$M.Subwoofer.recompute_time_to_play_flag
        000000 

0x006664	$queue_another_bass_packet
        000000 

0x006665	$late_write_counter
        000000 

0x006666	$early_write_counter
        000000 

0x006667	$max_early_write
        000000 

0x006668	$M.downsample_sub_to_1k2.residual
        000000 

0x006669	$wall_clock_adjustment
        000000 

0x00666A	$wall_clock_timer_id
        000000 

0x00666B	$subwoofer.running
        000000 

0x00666C	$codec_packets_info_last_write_address
        001000 

0x00666D	$codec_packets_info_timer_gap
        001388 

0x00666E	$M.report_latency_to_vm.smoothing_factor_low
        19999A 

0x00666F	$M.report_latency_to_vm.reported_latency
        000000 

0x006670	$M.report_latency_to_vm.latency_max_counter
        000000 

0x006671	$M.configure_latency_reporting.report_period
        002710 

0x006672	$M.configure_latency_reporting.average_latency
        FFFFFF 

0x006673	$M.multi_chan_output.num_chain1_channels
        000000 

0x006674	$M.multi_chan_output.chain1_enables
        000000 

0x006675	$M.multi_chan_output.chain0_tone_mix_en
        000000 

0x006676	$M.multi_chan_output.prim_tone_mix_ratio
        000000 

0x006677	$M.multi_chan_output.i2s_slave0
        000000 

0x006678	$M.multi_chan_output.chain1_sync_port
        000000 

0x006679	$M.multi_chan_output.tone1_in_left_read_ptr
        000000 

0x00667A	$M.multi_chan_output.tone0_in_right_read_ptr
        000000 

0x00667B	$M.multi_chan_output.tone2_in_right_read_ptr
        000000 

0x00667C	$M.multi_chan_output.chain0_mute_en
        000000 

0x00667D	$chain0_hw_warp_enable
        000000 

0x00667E	$M.multi_chan_output.chain1_warp_ptr
        006333 

0x00667F	$current_tone_sampling_rate
        001F40 

0x006680	$tmr_period_tone_copy
        001F40 

0x006681	$cbuffer.write_port_connect_address
        000000 

0x006682	$cbuffer.read_port_connect_address
        000000 

0x006683	$cbuffer.auto_mcu_message
        000001 000000 

0x006685	$interrupt.total_time
        000000 

0x006686	$message.queue_read_ptr
        000000 

0x006687	$message.last_seq_sent
        000000 

0x006688	$M.message.send_ready_wait_for_go.go_from_vm
        000000 

0x006689	$pskey.last_addr
        FFFFFF 

0x00668A	$timer.last_addr
        FFFFFF 

0x00668B	$cbops.struc_ptr
        000000 

0x00668C	$cbops.amount_written
        000000 

0x00668D	$M.cbops.av_copy.control_cbuffer
        000000 

0x00668E	$M.cbops.dac_av_copy.dac_av_struct
        000000 

0x00668F	$M.cbops.rate_adjustment_and_shift.amount_used
        000000 

0x006690	$M.cbops.rate_adjustment_and_shift.main.rand_num
        005555 

0x006691	$M.cbops.auto_upsample_and_mix.main.right_temp
        000000 

0x006692	$M.codec_av_decode.data_ptr
        000000 

0x006693	$frame_sync.sync_flag
        000000 

0x006694	$M.cmpd100.analysis.MusicComp_Peak
        000000 

0x006695	$M.cmpd100.analysis.region
        000000 

0x006696	$M.cmpd100.applygain.lin_gain
        000000 

0x006697	$M.cmpd100.applygain.remaninder_samples
        000000 


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sbcdec.synthesis_vch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30A0	$sbc.loudness_offset_m4_ram
0xFF30A0	$sbc.loudness_offset_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30B0	$sbc.loudness_offset_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30D0	$M.system_config.data.spkr_eq_left_dm2
        006410 006410 00000A 0053AA 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF30F9	$M.system_config.data.user_eq_bank_select
        000000 004632 004648 00465E 
        004674 00468A 0046A0 

0xFF3100	$sbcdec.synthesis_vch2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF31A0	$sra_coeffs_hd_quality
        7649F5 7587F0 740625 71C90F 
        6ED751 6B399F 66FA9F 6226C4 
        5CCC23 56FA3E 50C1D1 4A3496 
        436505 3C661B 354B11 2E2720 
        270D3E 200FDE 1940B9 12B08B 
        0C6EE9 068A09 010E9C FC07A6 
        F77E66 F37A3C F00099 ED14FA 
        EAB8E5 E8EBF3 E7ABDA E6F485 
        E6C02E E7077E E7C1B4 E8E4D1 
        EA65C3 EC389A EE50B9 F0A10E 
        F31C43 F5B4F9 F85DF6 FB0A5D 
        FDADD7 003CC6 02AC66 04F2F6 
        0707D3 08E391 0A8013 0BD890 
        0CE9A2 0DB144 0E2ED0 0E62F2 
        0E4F9B 0DF7EE 0D6024 0C8D75 
        0B85F2 0A5068 08F438 077932 
        05E770 04472A 02A097 00FBC1 
        FF6067 FDD5DA FC62DE FB0D92 
        F9DB57 F8D0BD F7F178 F7404F 
        F6BF1D F66ECD F64F59 F65FD8 
        F69E86 F708CE F79B66 F85259 
        F92926 FA1AD7 FB2219 FC395A 
        FD5AE7 FE8103 FFA605 00C473 
        01D71A 02D922 03C626 049A46 
        055231 05EB37 06634D 06B915 
        06EBDE 06FBA5 06E90E 06B55E 
        066270 05F2AA 0568ED 04C880 
        041506 035263 0284AB 01B00D 
        00D8BB 0002DD FF3274 FE6B4F 
        FDB0F8 FD06A3 FC6F20 FBECD5 
        FB81B1 FB2F24 FAF620 FAD715 
        FAD1F1 FAE627 FB12B1 FB561A 
        FBAE86 FC19C3 FC954C FD1E61 
        FDB211 FE4D48 FEECE4 FF8DBF 
        002CC3 00C6F5 015985 01E1D9 
        025D9B 02CAC0 032791 0372B2 
        03AB26 03D04F 03E1F5 03E03D 
        03CBAA 03A51B 036DBD 03270B 
        02D2BE 0272CB 02094E 019889 
        0122D1 00AA85 003200 FFBB90 
        FF496C FEDDA4 FE7A1F FE208D 
        FDD264 FD90D8 FD5CD7 FD3708 
        FD1FC8 FD1728 FD1CF4 FD30B0 
        FD51A1 FD7ECE FDB70B FDF8F9 
        FE4318 FE93C4 FEE949 FF41E2 
        FF9BC8 FFF53C 004C89 00A012 
        00EE58 0135FD 0175D0 01ACCD 
        01DA22 01FD34 02159C 02232C 
        0225EC 021E1A 020C26 01F0AE 
        01CC7B 01A07D 016DC3 013575 
        00F8CF 00B91A 0077A6 0035C0 
        FFF4AF FFB5AF FF79E5 FF4260 
        FF1012 FEE3CD FEBE3F FE9FED 
        FE8939 FE7A5A FE735D FE742A 
        FE7C84 FE8C06 FEA22F FEBE5E 
        FEDFDA FF05D6 FF2F72 FF5BC5 
        FF89E0 FFB8D1 FFE7A9 001581 
        004180 006ADA 0090D8 00B2DA 
        00D058 00E8E5 00FC2F 010A04 
        01124B 01150B 011263 010A90 
        00FDE2 00ECC4 00D7AF 00BF2E 
        00A3DA 008652 00673C 004741 
        002707 000732 FFE85B FFCB13 
        FFAFDE FF9731 FF816E FF6EE7 
        FF5FDB FF5473 FF4CC6 FF48D7 
        FF4895 FF4BDF FF5280 FF5C37 
        FF68B5 FF77A0 FF8894 FF9B28 
        FFAEEE FFC376 FFD852 FFED15 
        000158 0014BB 0026E4 003785 
        00465C 005330 005DD8 006635 
        006C37 006FDA 007127 007032 
        006D1A 006807 00612C 0058C0 
        004F01 004431 003894 002C6F 
        002008 0013A2 00077B FFFBD0 
        FFF0D5 FFE6BC FFDDAB FFD5C4 
        FFCF21 FFC9D1 FFC5DF FFC34C 
        FFC212 FFC223 FFC36D FFC5D7 
        FFC944 FFCD92 FFD29D FFD83F 
        FFDE51 FFE4AB FFEB28 FFF1A3 
        FFF7F8 FFFE08 0003B7 0008ED 
        000D96 0011A1 001504 0017B9 
        0019BB 001B0F 001BB8 001BC1 
        001B36 001A24 00189D 0016B3 
        001479 001202 000F63 000CAD 
        0009F3 000746 0004B5 00024C 
        000016 FFFE1C FFFC65 FFFAF4 
        FFF9CC FFF8EC FFF852 FFF7FB 
        FFF7E1 FFF7FE FFF84B FFF8BF 
        FFF953 FFF9FE FFFAB9 FFFB7B 
        FFFC3E FFFCFB FFFDAD FFFE50 
        FFFEE0 FFFF5C FFFFC2 000013 
        00004E 000075 00008B 000093 
        00008E 000080 00006C 000056 
        00003E 000029 000017 00000A 
        000002 000000 

0xFF331A	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF33DA	$M.system_config.data.ParameterMap
        0046C7 FF9390 0046C8 FF9391 
        0046C9 FF9392 0046CA FF9393 
        0046CB FF9394 0046CC FF9395 
        0046CD FF9396 0046CE FF9397 
        0046CF FF9398 0046D0 FF9399 
        0046D1 FF939A 0046D2 FF939B 
        0046D3 FF939C 0046D4 FF939D 
        0046D5 FF939E 004785 FF9350 
        004786 FF9351 004787 FF9352 
        004788 FF9353 004789 FF9354 
        00478A FF9355 00478B FF9356 
        00478C FF9357 00478D FF9358 
        00478E FF9359 00478F FF935A 
        004790 FF935B 004791 FF935C 
        004792 FF935D 004793 FF935E 
        004794 FF935F 004795 006397 
        004796 006398 004797 006399 
        004798 00639A 004799 00639B 
        00479A 00639C 00479B 00639D 
        00479C 00639E 00479D 00639F 
        00479E 0063A0 00479F 0063A1 
        0047A0 0063A2 0047A1 0063A3 
        0047A2 0063A4 0047A3 0063A5 
        0047A4 0063A6 004600 FF927A 
        0047A5 FF9284 0047A6 FF9285 
        0047A7 FF9286 0047A8 FF9287 
        0047A9 FF9288 0047AA FF9289 
        0047AB FF928A 0047AC FF928B 
        0047AD FF928F 0047AE FF9290 
        0047AF FF9291 0047B0 FF9292 
        0047B1 FF9293 0047B2 FF9294 
        0047B3 FF9295 0047B4 FF9296 
        0047B5 FF9280 004600 FF925C 
        0047B6 FF9266 0047B7 FF9267 
        0047B8 FF9268 0047B9 FF9269 
        0047BA FF926A 0047BB FF926B 
        0047BC FF926C 0047BD FF926D 
        0047BE FF9271 0047BF FF9272 
        0047C0 FF9273 0047C1 FF9274 
        0047C2 FF9275 0047C3 FF9276 
        0047C4 FF9277 0047C5 FF9278 
        0047C6 FF9262 0047C9 FF9658 
        004600 0062A6 004600 FF9360 
        000000 

0xFF3487	$sbcdec.synthesis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3507	$sra_coeffs
        7898E8 77C2D9 76198F 73A2A2 
        70665A 6C6F8E 67CB70 62895B 
        5CBA95 567200 4FC3D4 48C549 
        418C41 3A2EF1 32C38B 2B5FE5 
        241928 1D037D 1631CA 0FB568 
        099DEE 03F8FD FED216 FA3281 
        F62134 F2A2CE EFB995 ED6585 
        EBA464 EA71E0 E9C7B7 E99DE7 
        E9EADD EAA3B6 EBBC77 ED2852 
        EED9E3 F0C377 F2D748 F507BF 
        F747AC F98A80 FBC47A FDEAD4 
        FFF3E8 01D74D 038DEB 05120A 
        065F5C 0772F6 084B4E 08E82B 
        094A90 0974A2 09698F 092D67 
        08C4F9 0835B0 078568 06BA47 
        05DA99 04ECAA 03F6A0 02FE61 
        02096F 011CD7 003D16 FF6E0D 
        FEB2F5 FE0E56 FD8207 FD0F2C 
        FCB642 FC7723 FC5112 FC42D0 
        FC4AA7 FC6680 FC93F9 FCD074 
        FD1930 FD6B5E FDC42E FE20E8 
        FE7EF5 FEDBF3 FF35BD FF8A72 
        FFD881 001EA9 005BFE 008FE3 
        00BA0C 00DA76 00F165 00FF56 
        0104F8 010327 00FADC 00ED23 
        00DB17 00C5D0 00AE63 0095D1 
        007D09 0064DC 004DFE 0038FF 
        00264C 00162F 0008CE FFFE32 
        FFF645 FFF0D8 FFEDA9 FFEC68 
        FFECB9 FFEE3B FFF091 FFF35D 
        FFF64F FFF920 FFFB98 FFFD91 
        FFFEF6 FFFFC1 

0xFF3585	$M.system_config.data.spkr_eq_right_dm2
        FF93E5 FF93E5 00000A 0053AA 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF35AE	$M.system_config.data.spkr_ctrl_left_pri_eq_dm
        00641D 00641D 000007 005773 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF35CE	$M.system_config.data.spkr_ctrl_right_pri_eq_dm
        FF93F2 FF93F2 000007 005773 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF35EE	$M.system_config.data.spkr_ctrl_left_sec_eq_dm
        00642A 00642A 000007 0057CD 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF360E	$M.system_config.data.spkr_ctrl_right_sec_eq_dm
        FF93FF FF93FF 000007 0057CD 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF362E	$sbcdec.synthesis_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF364E	$M.system_config.data.spkr_ctrl_bass_eq_dm
        005B34 005B34 000006 006233 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF366B	$M.system_config.data.user_eq_left_dm2
        006410 006410 000005 0062EC 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3685	$M.system_config.data.user_eq_right_dm2
        FF93E5 FF93E5 000005 0062EC 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF369F	$M.system_config.data.sub_eq_dm2
        006444 006444 000003 0053E9 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF36B0	$sbcdec.bitmask_lookup_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF36C1	$sbcdec.levelrecip_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF36D0	$M.system_config.data.boost_eq_left_dm2
        006410 006410 000001 00649D 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF36DE	$M.system_config.data.boost_eq_right_dm2
        FF93E5 FF93E5 000001 00649D 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF36EC	$M.system_config.data.MeloD_Expansion_struct
        006410 FF93E5 006410 FF93E5 
        004600 000040 000000 006375 
        FF9390 

0xFF36F5	$cbops.dither_and_shift.coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF36FC	$M.cbops.rate_adjustment_and_shift.main.dither_coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF3703	$M.system_config.data.spkr_ctrl_pri_eq_bank_select
        000000 0046D7 0046F5 

0xFF3706	$M.system_config.data.spkr_ctrl_sec_eq_bank_select
        000000 004714 004732 

0xFF3709	$M.system_config.data.spkr_ctrl_bass_eq_bank_select
        000000 004751 00476B 

0xFF370C	$M.iir_resamplev2.fir_L4_M7_K10.coeffs
        FF9963 FFE4F0 FFFDB6 000000 
        FBF807 FCFD2B FE1B51 FF0328 
        06CD1E 001DD0 FCAD66 FB9A3F 
        458F80 31ABA5 1FD2E4 11569E 
        7FFFFF 78CBEF 6B62A4 598F18 

0xFF3720	$M.wbs.decoder.frame_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF373E	$pcm_latency_input_struct
        006387 0000E4 

0xFF3740	$sub_codec_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3772	$M.iir_resamplev2.fir_L2_M1_K10.coeffs
        002B5A 000000 FF9B87 009B13 
        F534D2 FAC27C 1E52F5 FC63A7 
        7FFFFF 54CFE6 

0xFF377C	$con_in_timer_struc
        000000 000000 000000 000000 

0xFF3780	$M.cbops.av_copy.left_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF37F9	$M.system_config.data.spkr_ctrl_init_struct
        FF9426 FF94B7 FF3703 000000 
        000000 FF94BD FF3709 

0xFF3800	$tone_in_right_resample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3E00	$tone_in_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3F00	$tone_in_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4000	$M.system_config.data.delay_buf_pri_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF4BCD	$M.iir_resamplev2.Up_160_Down_147.int_ratio
0xFF4BCD	$M.iir_resamplev2.Up_160_Down_147.filter
        000000 

0xFF4BCE	$M.iir_resamplev2.Up_160_Down_147.frac_ratio
        75999A 

0xFF4BCF	$M.iir_resamplev2.Up_160_Down_147.int_ratio_s1
        000000 

0xFF4BD0	$M.iir_resamplev2.Up_160_Down_147.frac_ratio_s1
        433333 

0xFF4BD1	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s1
        000F33 

0xFF4BD2	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s1
        000006 

0xFF4BD3	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s1
        000000 

0xFF4BD4	$M.iir_resamplev2.Up_160_Down_147.Rout_s1
        000028 

0xFF4BD5	$M.iir_resamplev2.Up_160_Down_147.input_scale_s1
        000007 

0xFF4BD6	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s1
        FF5F60 

0xFF4BD7	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s1
        433334 

0xFF4BD8	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s2
        000B41 

0xFF4BD9	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s2
        00000A 

0xFF4BDA	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s2
        000013 

0xFF4BDB	$M.iir_resamplev2.Up_160_Down_147.Rout_s2
        000004 

0xFF4BDC	$M.iir_resamplev2.Up_160_Down_147.input_scale_s2
        FFFFF9 

0xFF4BDD	$M.iir_resamplev2.Up_160_Down_147.output_scale_s2
        FFFFF9 

0xFF4BDE	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s2
        FF370C 

0xFF4BDF	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s2
        600001 

0xFF4BE0	$M.iir_resamplev2.Up_160_Down_147.IntRatio_s2
        000001 

0xFF4BE1	$M.iir_resamplev2.Up_160_Down_147.IIRFunction_s2
        00118F 

0xFF4BE2	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s21
        126DE1 012549 F936BB 158A93 
        D14CB0 4B88F6 A147C2 5D47B7 
        B8581F 29A476 EF0696 

0xFF4BED	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s21
        000005 

0xFF4BEE	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s22
        002DBC FEDAB7 06B358 EB875C 
        29E241 C16137 46C3C6 C359EA 
        2668A0 EF5323 

0xFF4BF8	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s22
        000005 

0xFF4BF9	$M.multi_chan_output.wired_out_port_table
        800011 800012 800015 800016 
        800013 800014 800010 

0xFF4C00	$multi_chan_secondary_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4F60	$M.iir_resamplev2.Up_640_Down_147_low_mips.filter
0xFF4F60	$M.iir_resamplev2.Up_640_Down_147_low_mips.int_ratio
        000000 

0xFF4F61	$M.iir_resamplev2.Up_640_Down_147_low_mips.frac_ratio
        1D6666 

0xFF4F62	$M.iir_resamplev2.Up_640_Down_147_low_mips.int_ratio_s1
        000000 

0xFF4F63	$M.iir_resamplev2.Up_640_Down_147_low_mips.frac_ratio_s1
        000000 

0xFF4F64	$M.iir_resamplev2.Up_640_Down_147_low_mips.func_ptr1_s1
        000000 

0xFF4F65	$M.iir_resamplev2.Up_640_Down_147_low_mips.func_ptr1_s2
        000CD5 

0xFF4F66	$M.iir_resamplev2.Up_640_Down_147_low_mips.FIR_Size_s2
        00000A 

0xFF4F67	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIR_Size_s2
        000009 

0xFF4F68	$M.iir_resamplev2.Up_640_Down_147_low_mips.Rout_s2
        000280 

0xFF4F69	$M.iir_resamplev2.Up_640_Down_147_low_mips.input_scale_s2
        000000 

0xFF4F6A	$M.iir_resamplev2.Up_640_Down_147_low_mips.output_scale_s2
        FFFFF9 

0xFF4F6B	$M.iir_resamplev2.Up_640_Down_147_low_mips.FirFilter_s2
        FF85DC 

0xFF4F6C	$M.iir_resamplev2.Up_640_Down_147_low_mips.FracRatio_s2
        1D6667 

0xFF4F6D	$M.iir_resamplev2.Up_640_Down_147_low_mips.IntRatio_s2
        000000 

0xFF4F6E	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRFunction_s2
        001357 

0xFF4F6F	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRCoeffs_s21
        14FC55 F6EB95 2CC675 A21BBE 
        688DFC C1E3AF 

0xFF4F75	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRScale_s21
        000003 

0xFF4F76	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRCoeffs_s22
        00FB50 12B98E B2B669 7F732B 
        9BED20 

0xFF4F7B	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRScale_s22
        000002 

0xFF4F7C	$audio_out_timer_struc
        000000 000000 000000 000000 

0xFF4F80	$codec_packets_info
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4FB2	$M.iir_resamplev2.fir_L21_M10_K6.coeffs
        002D83 007554 00A5E9 00C270 
        00CE4C 00CCE3 00C17C 00AF1E 
        00987C 007FE4 00673A 004FF5 
        003B20 002966 001B1A 001040 
        0008A0 0003CD 000135 00002E 
        000000 FE2E6C FB11F8 F8A2C3 
        F6D640 F59F18 F4EDD2 F4B176 
        F4D832 F54FF9 F6070F F6EC87 
        F7F0B0 F90565 FA1E4B FB30F8 
        FC3500 FD23F6 FDF952 FEB24D 
        FF4DB4 FFCBAF 7FFFFF 7EC8AD 
        7C60AF 78D51B 743918 6EA54C 
        683727 611005 595441 512A2D 
        48B907 4027F1 379CEA 2F3BE0 
        2725DC 1F7845 184C53 11B69D 
        0BC6DC 0687CE 01FF49 

0xFF4FF1	$M.iir_resamplev2.fir_L3_M1_K10.coeffs
        FE8D2F FF79F6 004647 043253 
        004510 FE5DAC F946D5 03EAF1 
        0702B8 00F96E EBE55D ED1295 
        7FFFFF 5E4D6D 2C305E 

0xFF5000	$M.system_config.data.delay_buf_pri_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF5BCD	$M.iir_resamplev2.Up_147_Down_160.int_ratio
0xFF5BCD	$M.iir_resamplev2.Up_147_Down_160.filter
        000001 

0xFF5BCE	$M.iir_resamplev2.Up_147_Down_160.frac_ratio
        0B51DA 

0xFF5BCF	$M.iir_resamplev2.Up_147_Down_160.int_ratio_s1
        000000 

0xFF5BD0	$M.iir_resamplev2.Up_147_Down_160.frac_ratio_s1
        3CF3CF 

0xFF5BD1	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s1
        000F33 

0xFF5BD2	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s1
        000006 

0xFF5BD3	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s1
        000000 

0xFF5BD4	$M.iir_resamplev2.Up_147_Down_160.Rout_s1
        000015 

0xFF5BD5	$M.iir_resamplev2.Up_147_Down_160.input_scale_s1
        000007 

0xFF5BD6	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s1
        FF4FB2 

0xFF5BD7	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s1
        3CF3D0 

0xFF5BD8	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s2
        000B41 

0xFF5BD9	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s2
        00000A 

0xFF5BDA	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s2
        000013 

0xFF5BDB	$M.iir_resamplev2.Up_147_Down_160.Rout_s2
        000007 

0xFF5BDC	$M.iir_resamplev2.Up_147_Down_160.input_scale_s2
        FFFFF9 

0xFF5BDD	$M.iir_resamplev2.Up_147_Down_160.output_scale_s2
        FFFFF8 

0xFF5BDE	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s2
        FF7FA4 

0xFF5BDF	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s2
        24924A 

0xFF5BE0	$M.iir_resamplev2.Up_147_Down_160.IntRatio_s2
        000002 

0xFF5BE1	$M.iir_resamplev2.Up_147_Down_160.IIRFunction_s2
        00118F 

0xFF5BE2	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s21
        010EA0 00B4A5 FAEC08 124FF2 
        D4F5F1 48910C A4811A 576A65 
        C14A41 2090F8 F4CADB 

0xFF5BED	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s21
        000006 

0xFF5BEE	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s22
        002BB9 FE96B6 09B4B6 DF1AC6 
        476E88 92F341 7944E0 9D8C40 
        38983F EADC4F 

0xFF5BF8	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s22
        000005 

0xFF5BF9	$M.multi_chan_output.chain1_pcm_cbuffers_latency_measure
        000000 FF9635 00667E 000000 
        FF9635 000000 000000 

0xFF5C00	$multi_chan_aux_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF5F60	$M.iir_resamplev2.fir_L40_M21_K6.coeffs
        00192B 0045FD 006BC5 008AE8 
        00A3D9 00B70E 00C503 00CE37 
        00D329 00D459 00D241 00CD5B 
        00C61B 00BCEE 00B23D 00A668 
        0099C8 008CAE 007F61 007223 
        00652B 0058A9 004CC4 00419D 
        00374C 002DE3 00256D 001DEF 
        001769 0011D7 000D2D 00095F 
        00065C 00040F 000263 000140 
        00008C 00002C 000007 000000 
        FF052E FD3502 FB9622 FA2780 
        F8E7CC F7D575 F6EEB4 F63190 
        F59BE4 F52B67 F4DDB2 F4B048 
        F4A09A F4AC0F F4D00A F509EF 
        F5572A F5B532 F62191 F699E4 
        F71BE2 F7A55F F8344D F8C6C3 
        F95AF8 F9EF4A FA823E FB1280 
        FB9EE0 FC2659 FCA809 FD2335 
        FD9744 FE03C2 FE6858 FEC4D1 
        FF1912 FF6519 FFA900 FFE4F1 
        7FFFFF 7FAA20 7EFEE4 7DFF4D 
        7CACD9 7B0985 7917C1 76DA72 
        7454E8 718AD7 6E8051 6B39BE 
        67BBD2 640B83 602E00 5C28A8 
        5800FD 53BC9B 4F612C 4AF460 
        467BDF 41FD40 3D7E00 39037A 
        3492D8 303111 2BE2DD 27ACB0 
        2392B3 1F98BE 1BC253 18129B 
        148C63 113217 0E05C6 0B091B 
        083D64 05A38E 033C28 010769 

0xFF5FD8	$M.iir_resamplev2.fir_L8_M7_K10.coeffs
        FF3E47 FF6C7F FF97C1 FFBD1B 
        FFDABF FFEFCA FFFC13 000000 
        00D48D FFEC08 FF5441 FEFCEA 
        FED700 FED522 FEEBCC FF1168 
        1AC598 154C35 10815E 0C64D1 
        08F14F 061D65 03DC4E 021EE5 
        578E06 4F5F8F 470F3E 3EC897 
        36B3B7 2EF438 27A84B 20E821 
        7FFFFF 7EB058 7C1A04 784E9D 
        7367A9 6D859E 66CEA1 5F6D15 

0xFF6000	$M.system_config.data.delay_buf_sec_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF6BCD	$M.iir_resamplev2.Up_441_Down_320.filter
0xFF6BCD	$M.iir_resamplev2.Up_441_Down_320.int_ratio
        000000 

0xFF6BCE	$M.iir_resamplev2.Up_441_Down_320.frac_ratio
        5CE13C 

0xFF6BCF	$M.iir_resamplev2.Up_441_Down_320.int_ratio_s1
        000000 

0xFF6BD0	$M.iir_resamplev2.Up_441_Down_320.frac_ratio_s1
        3CF3CF 

0xFF6BD1	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s1
        000F33 

0xFF6BD2	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s1
        000006 

0xFF6BD3	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s1
        000000 

0xFF6BD4	$M.iir_resamplev2.Up_441_Down_320.Rout_s1
        000015 

0xFF6BD5	$M.iir_resamplev2.Up_441_Down_320.input_scale_s1
        000007 

0xFF6BD6	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s1
        FF4FB2 

0xFF6BD7	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s1
        3CF3D0 

0xFF6BD8	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s2
        000B41 

0xFF6BD9	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s2
        00000A 

0xFF6BDA	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s2
        000013 

0xFF6BDB	$M.iir_resamplev2.Up_441_Down_320.Rout_s2
        000015 

0xFF6BDC	$M.iir_resamplev2.Up_441_Down_320.input_scale_s2
        FFFFF9 

0xFF6BDD	$M.iir_resamplev2.Up_441_Down_320.output_scale_s2
        FFFFF9 

0xFF6BDE	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s2
        FF6F34 

0xFF6BDF	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s2
        430C32 

0xFF6BE0	$M.iir_resamplev2.Up_441_Down_320.IntRatio_s2
        000001 

0xFF6BE1	$M.iir_resamplev2.Up_441_Down_320.IIRFunction_s2
        00118F 

0xFF6BE2	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s21
        01DAA0 00A5D4 FBB33F 0EB2F6 
        DE9B31 375325 BA6945 43543C 
        CE4C70 1B0E4C F6015A 

0xFF6BED	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s21
        000006 

0xFF6BEE	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s22
        003057 FEB458 085037 E50E02 
        39048E A9C4E7 6080C7 AFDCE6 
        2FFD13 ECE4FB 

0xFF6BF8	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s22
        000005 

0xFF6BF9	$M.multi_chan_output.chain0_ch0_mute_op.next
0xFF6BF9	$chain0_ch0_mute_op
        FF94ED 

0xFF6BFA	$M.multi_chan_output.chain0_ch0_mute_op.func
        00661D 

0xFF6BFB	$M.multi_chan_output.chain0_ch0_mute_op.param
        000000 000000 000001 000000 
        000000 

0xFF6C00	$codec_resamp_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF6F34	$M.iir_resamplev2.fir_L21_M8_K10.coeffs
        FF69FF FF7082 FF7879 FF8191 
        FF8B7B FF95F3 FFA0B8 FFAB92 
        FFB64F FFC0C0 FFCABF FFD428 
        FFDCDE FFE4C5 FFEBC9 FFF1D7 
        FFF6E0 FFFAD6 FFFDB2 FFFF6C 
        000000 03BF9F 032646 029BD1 
        021F73 01B05D 014DBF 00F6CC 
        00AAB9 0068BD 003014 000000 
        FFD7C6 FFB6B5 FF9C1F FF875F 
        FF77D9 FF6CF7 FF662C FF62F3 
        FF62D0 FF654D 22079B 1FBD31 
        1D87E8 1B6846 195EB8 176B8C 
        158EFB 13C920 1219FF 108185 
        0EFF88 0D93CA 0C3DF7 0AFDAA 
        09D26E 08BBBD 07B903 06C9A1 
        05ECEA 05222C 0468AA 5D268F 
        5A508D 576E4D 548206 518DE7 
        4E941C 4B96CA 489808 4599E4 
        429E5B 3FA75A 3CB6BB 39CE45 
        36EFA7 341C79 31563D 2E9E58 
        2BF617 295EA9 26D925 246681 
        7FFFFF 7FD3C8 7F7B83 7EF780 
        7E4838 7D6E4A 7C6A7D 7B3DBC 
        79E916 786DBD 76CD04 75085D 
        732157 71199E 6EF2F5 6CAF37 
        6A5052 67D847 654926 62A50D 
        5FEE20 

0xFF6F9D	$M.iir_resamplev2.Up_441_Down_160.filter
0xFF6F9D	$M.iir_resamplev2.Up_441_Down_160.int_ratio
        000000 

0xFF6F9E	$M.iir_resamplev2.Up_441_Down_160.frac_ratio
        2E709E 

0xFF6F9F	$M.iir_resamplev2.Up_441_Down_160.int_ratio_s1
        000000 

0xFF6FA0	$M.iir_resamplev2.Up_441_Down_160.frac_ratio_s1
        3CF3CF 

0xFF6FA1	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s1
        000F33 

0xFF6FA2	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s1
        000006 

0xFF6FA3	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s1
        000000 

0xFF6FA4	$M.iir_resamplev2.Up_441_Down_160.Rout_s1
        000015 

0xFF6FA5	$M.iir_resamplev2.Up_441_Down_160.input_scale_s1
        000007 

0xFF6FA6	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s1
        FF4FB2 

0xFF6FA7	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s1
        3CF3D0 

0xFF6FA8	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s2
        000CD5 

0xFF6FA9	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s2
        00000A 

0xFF6FAA	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s2
        00000F 

0xFF6FAB	$M.iir_resamplev2.Up_441_Down_160.Rout_s2
        000015 

0xFF6FAC	$M.iir_resamplev2.Up_441_Down_160.input_scale_s2
        FFFFF9 

0xFF6FAD	$M.iir_resamplev2.Up_441_Down_160.output_scale_s2
        FFFFF9 

0xFF6FAE	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s2
        FF6F34 

0xFF6FAF	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s2
        618619 

0xFF6FB0	$M.iir_resamplev2.Up_441_Down_160.IntRatio_s2
        000000 

0xFF6FB1	$M.iir_resamplev2.Up_441_Down_160.IIRFunction_s2
        0011D6 

0xFF6FB2	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s21
        0B6A70 043DED EAE08C 31263F 
        BBDB01 3B4FC8 E0DBA9 

0xFF6FB9	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s21
        000004 

0xFF6FBA	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s22
        01CA86 F70BCC 25E520 B60E9A 
        522202 CBB779 

0xFF6FC0	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s22
        000003 

0xFF6FC1	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s23
        022E26 134B43 BCED2E 68FE06 
        AB1AB0 

0xFF6FC6	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s23
        000002 

0xFF6FC7	$M.iir_resamplev2.Up_3_Down_1.int_ratio
0xFF6FC7	$M.iir_resamplev2.Up_3_Down_1.filter
        000000 

0xFF6FC8	$M.iir_resamplev2.Up_3_Down_1.frac_ratio
        2AAAAA 

0xFF6FC9	$M.iir_resamplev2.Up_3_Down_1.int_ratio_s1
        000000 

0xFF6FCA	$M.iir_resamplev2.Up_3_Down_1.frac_ratio_s1
        000000 

0xFF6FCB	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s1
        000000 

0xFF6FCC	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s2
        000CD5 

0xFF6FCD	$M.iir_resamplev2.Up_3_Down_1.FIR_Size_s2
        00000A 

0xFF6FCE	$M.iir_resamplev2.Up_3_Down_1.IIR_Size_s2
        000013 

0xFF6FCF	$M.iir_resamplev2.Up_3_Down_1.Rout_s2
        000003 

0xFF6FD0	$M.iir_resamplev2.Up_3_Down_1.input_scale_s2
        000000 

0xFF6FD1	$M.iir_resamplev2.Up_3_Down_1.output_scale_s2
        FFFFF9 

0xFF6FD2	$M.iir_resamplev2.Up_3_Down_1.FirFilter_s2
        FF4FF1 

0xFF6FD3	$M.iir_resamplev2.Up_3_Down_1.FracRatio_s2
        2AAAAC 

0xFF6FD4	$M.iir_resamplev2.Up_3_Down_1.IntRatio_s2
        000000 

0xFF6FD5	$M.iir_resamplev2.Up_3_Down_1.IIRFunction_s2
        001121 

0xFF6FD6	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s21
        01D0BF FDA0AE 0DEAC7 D9D456 
        3F01E9 BC83FF 2F0233 EC2249 

0xFF6FDE	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s21
        000005 

0xFF6FDF	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s22
        00320F 04E927 E6F590 3AF29B 
        AEF1B1 44AE60 DDCC80 

0xFF6FE6	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s22
        000004 

0xFF6FE7	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s23
        002858 048911 E72FCB 3CD517 
        AA724C 48E472 DC297B 

0xFF6FEE	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s23
        000004 

0xFF6FEF	$M.iir_resamplev2.fir_L3_M2_K10.coeffs
        004CBB 000DB7 000000 FF0BD3 
        0082B5 00A27E F4FD59 F74DCC 
        FBB02D 25DF93 0996C2 F99AB5 
        7FFFFF 6B7916 49BEBE 

0xFF6FFE	$M.system_config.data.pcmin_l_pk_dtct
        006410 000000 

0xFF7000	$M.system_config.data.delay_buf_aux_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF7BCD	$M.iir_resamplev2.Up_320_Down_147.filter
0xFF7BCD	$M.iir_resamplev2.Up_320_Down_147.int_ratio
        000000 

0xFF7BCE	$M.iir_resamplev2.Up_320_Down_147.frac_ratio
        3ACCCD 

0xFF7BCF	$M.iir_resamplev2.Up_320_Down_147.int_ratio_s1
        000000 

0xFF7BD0	$M.iir_resamplev2.Up_320_Down_147.frac_ratio_s1
        433333 

0xFF7BD1	$M.iir_resamplev2.Up_320_Down_147.func_ptr1_s1
        000F33 

0xFF7BD2	$M.iir_resamplev2.Up_320_Down_147.FIR_Size_s1
        000006 

0xFF7BD3	$M.iir_resamplev2.Up_320_Down_147.IIR_Size_s1
        000000 

0xFF7BD4	$M.iir_resamplev2.Up_320_Down_147.Rout_s1
        000028 

0xFF7BD5	$M.iir_resamplev2.Up_320_Down_147.input_scale_s1
        000007 

0xFF7BD6	$M.iir_resamplev2.Up_320_Down_147.FirFilter_s1
        FF5F60 

0xFF7BD7	$M.iir_resamplev2.Up_320_Down_147.FracRatio_s1
        433334 

0xFF7BD8	$M.iir_resamplev2.Up_320_Down_147.func_ptr1_s2
        000CD5 

0xFF7BD9	$M.iir_resamplev2.Up_320_Down_147.FIR_Size_s2
        00000A 

0xFF7BDA	$M.iir_resamplev2.Up_320_Down_147.IIR_Size_s2
        00000F 

0xFF7BDB	$M.iir_resamplev2.Up_320_Down_147.Rout_s2
        000008 

0xFF7BDC	$M.iir_resamplev2.Up_320_Down_147.input_scale_s2
        FFFFF9 

0xFF7BDD	$M.iir_resamplev2.Up_320_Down_147.output_scale_s2
        FFFFF9 

0xFF7BDE	$M.iir_resamplev2.Up_320_Down_147.FirFilter_s2
        FF5FD8 

0xFF7BDF	$M.iir_resamplev2.Up_320_Down_147.FracRatio_s2
        700001 

0xFF7BE0	$M.iir_resamplev2.Up_320_Down_147.IntRatio_s2
        000000 

0xFF7BE1	$M.iir_resamplev2.Up_320_Down_147.IIRFunction_s2
        00124A 

0xFF7BE2	$M.iir_resamplev2.Up_320_Down_147.IIRCoeffs_s21
        18C7CD 02B0D1 F0FCD2 2AEC7D 
        AFEE7F 69B8DD 9ABF37 455530 
        E055ED 

0xFF7BEB	$M.iir_resamplev2.Up_320_Down_147.IIRScale_s21
        000004 

0xFF7BEC	$M.iir_resamplev2.Up_320_Down_147.IIRCoeffs_s22
        00922C FD4F31 0E501A DA0D01 
        3FDC01 B69DAF 39EA2A E26A76 

0xFF7BF4	$M.iir_resamplev2.Up_320_Down_147.IIRScale_s22
        000004 

0xFF7BF5	$calc_chain0_actual_port_rate_struc
        800011 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF7C00	$codec_rate_adj_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF7F34	$M.iir_resamplev2.Up_2_Down_1.int_ratio
0xFF7F34	$M.iir_resamplev2.Up_2_Down_1.filter
        000000 

0xFF7F35	$M.iir_resamplev2.Up_2_Down_1.frac_ratio
        400000 

0xFF7F36	$M.iir_resamplev2.Up_2_Down_1.int_ratio_s1
        000000 

0xFF7F37	$M.iir_resamplev2.Up_2_Down_1.frac_ratio_s1
        000000 

0xFF7F38	$M.iir_resamplev2.Up_2_Down_1.func_ptr1_s1
        000000 

0xFF7F39	$M.iir_resamplev2.Up_2_Down_1.func_ptr1_s2
        000CD5 

0xFF7F3A	$M.iir_resamplev2.Up_2_Down_1.FIR_Size_s2
        00000A 

0xFF7F3B	$M.iir_resamplev2.Up_2_Down_1.IIR_Size_s2
        000013 

0xFF7F3C	$M.iir_resamplev2.Up_2_Down_1.Rout_s2
        000002 

0xFF7F3D	$M.iir_resamplev2.Up_2_Down_1.input_scale_s2
        000000 

0xFF7F3E	$M.iir_resamplev2.Up_2_Down_1.output_scale_s2
        FFFFF9 

0xFF7F3F	$M.iir_resamplev2.Up_2_Down_1.FirFilter_s2
        FF3772 

0xFF7F40	$M.iir_resamplev2.Up_2_Down_1.FracRatio_s2
        400001 

0xFF7F41	$M.iir_resamplev2.Up_2_Down_1.IntRatio_s2
        000000 

0xFF7F42	$M.iir_resamplev2.Up_2_Down_1.IIRFunction_s2
        00118F 

0xFF7F43	$M.iir_resamplev2.Up_2_Down_1.IIRCoeffs_s21
        21DB4E 0137A2 F88329 186193 
        CA4BC2 5782B3 9253BA 6B1360 
        AF2393 2DC17E EE0E49 

0xFF7F4E	$M.iir_resamplev2.Up_2_Down_1.IIRScale_s21
        000005 

0xFF7F4F	$M.iir_resamplev2.Up_2_Down_1.IIRCoeffs_s22
        001AF3 FEC85E 074E34 E94E97 
        2ED3E6 B9EB60 4EB089 BD7CF5 
        2934A5 EEA788 

0xFF7F59	$M.iir_resamplev2.Up_2_Down_1.IIRScale_s22
        000005 

0xFF7F5A	$M.iir_resamplev2.Up_3_Down_2.filter
0xFF7F5A	$M.iir_resamplev2.Up_3_Down_2.int_ratio
        000000 

0xFF7F5B	$M.iir_resamplev2.Up_3_Down_2.frac_ratio
        555556 

0xFF7F5C	$M.iir_resamplev2.Up_3_Down_2.int_ratio_s1
        000000 

0xFF7F5D	$M.iir_resamplev2.Up_3_Down_2.frac_ratio_s1
        000000 

0xFF7F5E	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s1
        000000 

0xFF7F5F	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s2
        000CD5 

0xFF7F60	$M.iir_resamplev2.Up_3_Down_2.FIR_Size_s2
        00000A 

0xFF7F61	$M.iir_resamplev2.Up_3_Down_2.IIR_Size_s2
        000013 

0xFF7F62	$M.iir_resamplev2.Up_3_Down_2.Rout_s2
        000003 

0xFF7F63	$M.iir_resamplev2.Up_3_Down_2.input_scale_s2
        000000 

0xFF7F64	$M.iir_resamplev2.Up_3_Down_2.output_scale_s2
        FFFFF9 

0xFF7F65	$M.iir_resamplev2.Up_3_Down_2.FirFilter_s2
        FF6FEF 

0xFF7F66	$M.iir_resamplev2.Up_3_Down_2.FracRatio_s2
        555556 

0xFF7F67	$M.iir_resamplev2.Up_3_Down_2.IntRatio_s2
        000000 

0xFF7F68	$M.iir_resamplev2.Up_3_Down_2.IIRFunction_s2
        00118F 

0xFF7F69	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s21
        420971 033E5F F4C4FC 1AC226 
        CF9D10 46ECC6 A94E63 5931C8 
        B277E2 37BEFB E2336B 

0xFF7F74	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s21
        000003 

0xFF7F75	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s22
        28FA23 FCC1A1 0C4D5C E29ED9 
        34251A B6936E 544FDF B08851 
        3C37C6 DCEA2E 

0xFF7F7F	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s22
        000003 

0xFF7F80	$M.iir_resamplev2.Up_4_Down_1.int_ratio
0xFF7F80	$M.iir_resamplev2.Up_4_Down_1.filter
        000000 

0xFF7F81	$M.iir_resamplev2.Up_4_Down_1.frac_ratio
        200000 

0xFF7F82	$M.iir_resamplev2.Up_4_Down_1.int_ratio_s1
        000000 

0xFF7F83	$M.iir_resamplev2.Up_4_Down_1.frac_ratio_s1
        000000 

0xFF7F84	$M.iir_resamplev2.Up_4_Down_1.func_ptr1_s1
        000000 

0xFF7F85	$M.iir_resamplev2.Up_4_Down_1.func_ptr1_s2
        000CD5 

0xFF7F86	$M.iir_resamplev2.Up_4_Down_1.FIR_Size_s2
        00000A 

0xFF7F87	$M.iir_resamplev2.Up_4_Down_1.IIR_Size_s2
        00000F 

0xFF7F88	$M.iir_resamplev2.Up_4_Down_1.Rout_s2
        000004 

0xFF7F89	$M.iir_resamplev2.Up_4_Down_1.input_scale_s2
        000000 

0xFF7F8A	$M.iir_resamplev2.Up_4_Down_1.output_scale_s2
        FFFFF9 

0xFF7F8B	$M.iir_resamplev2.Up_4_Down_1.FirFilter_s2
        FF7FC7 

0xFF7F8C	$M.iir_resamplev2.Up_4_Down_1.FracRatio_s2
        200001 

0xFF7F8D	$M.iir_resamplev2.Up_4_Down_1.IntRatio_s2
        000000 

0xFF7F8E	$M.iir_resamplev2.Up_4_Down_1.IIRFunction_s2
        0011D6 

0xFF7F8F	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s21
        033C6B 052949 E31869 474710 
        9CF8AD 51D4D7 D9B4BC 

0xFF7F96	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s21
        000004 

0xFF7F97	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s22
        00617A F54FFD 3274C8 99FD54 
        6E2517 C045F6 

0xFF7F9D	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s22
        000003 

0xFF7F9E	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s23
        00510B 0B350E D4FA26 4380DC 
        CCF071 

0xFF7FA3	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s23
        000003 

0xFF7FA4	$M.iir_resamplev2.fir_L7_M16_K10.coeffs
        FF2CF7 FF72C3 FFAAA0 FFD384 
        FFEE0E FFFC05 000000 FE74F5 
        FE00B7 FDE03C FDF9C3 FE3765 
        FE8776 FEDC7F 14483A 0E7B7A 
        09B0FB 05DE46 02F05A 00CDF0 
        FF59CB 52E19F 48C9F7 3EAD7C 
        34D440 2B7D33 22DBE6 1B171E 
        7FFFFF 7E16B5 7A56D9 74E4CF 
        6DF49C 65C711 5CA640 

0xFF7FC7	$M.iir_resamplev2.fir_L4_M1_K10.coeffs
        004B72 0010FA FFFFD6 000000 
        004F1B 012883 011C49 00B23D 
        F39204 F67313 FA8E7F FE1C72 
        21F045 0AE75B FBAB6D F47264 
        7FFFFF 72A641 5AFFA0 3E31F4 

0xFF7FDB	$M.system_config.data.UserEqCoefsB
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0xFF7FFC	$set_dac_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF8000	$audio_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF85DC	$M.iir_resamplev2.fir_L640_M147_K10.coeffs
        FFB301 FFB2E3 FFB2C7 FFB2AB 
        FFB290 FFB276 FFB25D FFB245 
        FFB22D FFB217 FFB201 FFB1EC 
        FFB1D8 FFB1C5 FFB1B3 FFB1A2 
        FFB192 FFB182 FFB173 FFB165 
        FFB158 FFB14C FFB140 FFB136 
        FFB12C FFB123 FFB11A FFB113 
        FFB10C FFB106 FFB101 FFB0FD 
        FFB0F9 FFB0F7 FFB0F4 FFB0F3 
        FFB0F3 FFB0F3 FFB0F4 FFB0F5 
        FFB0F8 FFB0FB FFB0FF FFB103 
        FFB109 FFB10F FFB115 FFB11D 
        FFB125 FFB12D FFB137 FFB141 
        FFB14C FFB157 FFB163 FFB170 
        FFB17D FFB18C FFB19A FFB1AA 
        FFB1BA FFB1CA FFB1DC FFB1ED 
        FFB200 FFB213 FFB227 FFB23B 
        FFB250 FFB265 FFB27B FFB292 
        FFB2A9 FFB2C1 FFB2DA FFB2F3 
        FFB30C FFB326 FFB341 FFB35C 
        FFB378 FFB394 FFB3B1 FFB3CE 
        FFB3EC FFB40A FFB429 FFB448 
        FFB468 FFB488 FFB4A9 FFB4CB 
        FFB4ED FFB50F FFB532 FFB555 
        FFB579 FFB59D FFB5C2 FFB5E7 
        FFB60C FFB632 FFB659 FFB680 
        FFB6A7 FFB6CF FFB6F7 FFB720 
        FFB749 FFB772 FFB79C FFB7C6 
        FFB7F1 FFB81C FFB847 FFB873 
        FFB89F FFB8CC FFB8F9 FFB926 
        FFB954 FFB982 FFB9B0 FFB9DF 
        FFBA0E FFBA3D FFBA6D FFBA9D 
        FFBACE FFBAFE FFBB2F FFBB61 
        FFBB93 FFBBC5 FFBBF7 FFBC29 
        FFBC5C FFBC90 FFBCC3 FFBCF7 
        FFBD2B FFBD5F FFBD94 FFBDC9 
        FFBDFE FFBE33 FFBE69 FFBE9F 
        FFBED5 FFBF0C FFBF42 FFBF79 
        FFBFB0 FFBFE8 FFC01F FFC057 
        FFC08F FFC0C8 FFC100 FFC139 
        FFC172 FFC1AB FFC1E4 FFC21E 
        FFC257 FFC291 FFC2CB FFC305 
        FFC340 FFC37A FFC3B5 FFC3F0 
        FFC42B FFC466 FFC4A2 FFC4DD 
        FFC519 FFC555 FFC591 FFC5CD 
        FFC609 FFC645 FFC682 FFC6BE 
        FFC6FB FFC738 FFC775 FFC7B2 
        FFC7EF FFC82C FFC86A FFC8A7 
        FFC8E5 FFC922 FFC960 FFC99E 
        FFC9DC FFCA1A FFCA58 FFCA96 
        FFCAD4 FFCB12 FFCB51 FFCB8F 
        FFCBCD FFCC0C FFCC4A FFCC89 
        FFCCC8 FFCD06 FFCD45 FFCD84 
        FFCDC2 FFCE01 FFCE40 FFCE7F 
        FFCEBE FFCEFC FFCF3B FFCF7A 
        FFCFB9 FFCFF8 FFD037 FFD076 
        FFD0B5 FFD0F4 FFD132 FFD171 
        FFD1B0 FFD1EF FFD22E FFD26D 
        FFD2AB FFD2EA FFD329 FFD368 
        FFD3A6 FFD3E5 FFD423 FFD462 
        FFD4A0 FFD4DF FFD51D FFD55C 
        FFD59A FFD5D8 FFD616 FFD654 
        FFD692 FFD6D0 FFD70E FFD74C 
        FFD78A FFD7C8 FFD805 FFD843 
        FFD880 FFD8BD FFD8FB FFD938 
        FFD975 FFD9B2 FFD9EF FFDA2C 
        FFDA68 FFDAA5 FFDAE1 FFDB1E 
        FFDB5A FFDB96 FFDBD2 FFDC0E 
        FFDC4A FFDC86 FFDCC2 FFDCFD 
        FFDD38 FFDD74 FFDDAF FFDDEA 
        FFDE24 FFDE5F FFDE9A FFDED4 
        FFDF0E FFDF49 FFDF83 FFDFBD 
        FFDFF6 FFE030 FFE069 FFE0A3 
        FFE0DC FFE115 FFE14E FFE186 
        FFE1BF FFE1F7 FFE22F FFE267 
        FFE29F FFE2D7 FFE30E FFE346 
        FFE37D FFE3B4 FFE3EB FFE422 
        FFE458 FFE48E FFE4C5 FFE4FA 
        FFE530 FFE566 FFE59B FFE5D1 
        FFE606 FFE63B FFE66F FFE6A4 
        FFE6D8 FFE70C FFE740 FFE774 
        FFE7A7 FFE7DB FFE80E FFE841 
        FFE874 FFE8A6 FFE8D8 FFE90B 
        FFE93C FFE96E FFE9A0 FFE9D1 
        FFEA02 FFEA33 FFEA64 FFEA94 
        FFEAC5 FFEAF5 FFEB25 FFEB54 
        FFEB84 FFEBB3 FFEBE2 FFEC11 
        FFEC3F FFEC6E FFEC9C FFECCA 
        FFECF7 FFED25 FFED52 FFED7F 
        FFEDAC FFEDD9 FFEE05 FFEE31 
        FFEE5D FFEE89 FFEEB4 FFEEE0 
        FFEF0B FFEF35 FFEF60 FFEF8A 
        FFEFB4 FFEFDE FFF008 FFF031 
        FFF05B FFF084 FFF0AC FFF0D5 
        FFF0FD FFF125 FFF14D FFF175 
        FFF19C FFF1C3 FFF1EA FFF211 
        FFF237 FFF25D FFF283 FFF2A9 
        FFF2CE FFF2F4 FFF319 FFF33D 
        FFF362 FFF386 FFF3AA FFF3CE 
        FFF3F2 FFF415 FFF438 FFF45B 
        FFF47E FFF4A0 FFF4C3 FFF4E5 
        FFF506 FFF528 FFF549 FFF56A 
        FFF58B FFF5AB FFF5CC FFF5EC 
        FFF60C FFF62B FFF64B FFF66A 
        FFF689 FFF6A8 FFF6C6 FFF6E4 
        FFF702 FFF720 FFF73E FFF75B 
        FFF778 FFF795 FFF7B1 FFF7CE 
        FFF7EA FFF806 FFF822 FFF83D 
        FFF858 FFF873 FFF88E FFF8A9 
        FFF8C3 FFF8DD FFF8F7 FFF911 
        FFF92A FFF943 FFF95C FFF975 
        FFF98D FFF9A6 FFF9BE FFF9D6 
        FFF9ED FFFA05 FFFA1C FFFA33 
        FFFA4A FFFA60 FFFA76 FFFA8D 
        FFFAA2 FFFAB8 FFFACE FFFAE3 
        FFFAF8 FFFB0D FFFB21 FFFB36 
        FFFB4A FFFB5E FFFB72 FFFB85 
        FFFB98 FFFBAC FFFBBF FFFBD1 
        FFFBE4 FFFBF6 FFFC08 FFFC1A 
        FFFC2C FFFC3D FFFC4F FFFC60 
        FFFC71 FFFC81 FFFC92 FFFCA2 
        FFFCB2 FFFCC2 FFFCD2 FFFCE2 
        FFFCF1 FFFD00 FFFD0F FFFD1E 
        FFFD2C FFFD3B FFFD49 FFFD57 
        FFFD65 FFFD73 FFFD80 FFFD8D 
        FFFD9A FFFDA7 FFFDB4 FFFDC1 
        FFFDCD FFFDD9 FFFDE5 FFFDF1 
        FFFDFD FFFE09 FFFE14 FFFE1F 
        FFFE2A FFFE35 FFFE40 FFFE4A 
        FFFE55 FFFE5F FFFE69 FFFE73 
        FFFE7D FFFE86 FFFE90 FFFE99 
        FFFEA2 FFFEAB FFFEB4 FFFEBD 
        FFFEC5 FFFECD FFFED6 FFFEDE 
        FFFEE6 FFFEEE FFFEF5 FFFEFD 
        FFFF04 FFFF0B FFFF12 FFFF19 
        FFFF20 FFFF27 FFFF2D FFFF34 
        FFFF3A FFFF40 FFFF46 FFFF4C 
        FFFF52 FFFF58 FFFF5D FFFF62 
        FFFF68 FFFF6D FFFF72 FFFF77 
        FFFF7C FFFF80 FFFF85 FFFF8A 
        FFFF8E FFFF92 FFFF96 FFFF9A 
        FFFF9E FFFFA2 FFFFA6 FFFFAA 
        FFFFAD FFFFB1 FFFFB4 FFFFB7 
        FFFFBA FFFFBD FFFFC0 FFFFC3 
        FFFFC6 FFFFC9 FFFFCB FFFFCE 
        FFFFD0 FFFFD3 FFFFD5 FFFFD7 
        FFFFD9 FFFFDB FFFFDD FFFFDF 
        FFFFE1 FFFFE3 FFFFE5 FFFFE6 
        FFFFE8 FFFFE9 FFFFEB FFFFEC 
        FFFFEE FFFFEF FFFFF0 FFFFF1 
        FFFFF2 FFFFF3 FFFFF4 FFFFF5 
        FFFFF6 FFFFF7 FFFFF8 FFFFF8 
        FFFFF9 FFFFFA FFFFFA FFFFFB 
        FFFFFB FFFFFC FFFFFC FFFFFD 
        FFFFFD FFFFFE FFFFFE FFFFFE 
        FFFFFE FFFFFF FFFFFF FFFFFF 
        FFFFFF FFFFFF FFFFFF 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        033CEA 033BFA 033B07 033A11 
        033916 033819 033717 033613 
        03350B 0333FF 0332F0 0331DE 
        0330C8 032FAF 032E92 032D73 
        032C50 032B29 032A00 0328D3 
        0327A3 032670 03253A 032400 
        0322C4 032184 032041 031EFC 
        031DB3 031C67 031B18 0319C6 
        031872 03171A 0315C0 031462 
        031302 03119F 031039 030ED0 
        030D65 030BF7 030A86 030912 
        03079C 030623 0304A7 030329 
        0301A8 030024 02FE9E 02FD15 
        02FB8A 02F9FD 02F86D 02F6DA 
        02F545 02F3AD 02F214 02F077 
        02EED9 02ED38 02EB95 02E9EF 
        02E847 02E69D 02E4F1 02E342 
        02E192 02DFDF 02DE2A 02DC72 
        02DAB9 02D8FE 02D740 02D581 
        02D3BF 02D1FB 02D036 02CE6E 
        02CCA5 02CAD9 02C90C 02C73D 
        02C56C 02C399 02C1C4 02BFED 
        02BE15 02BC3B 02BA5F 02B881 
        02B6A1 02B4C0 02B2DD 02B0F9 
        02AF13 02AD2B 02AB42 02A957 
        02A76A 02A57C 02A38D 02A19C 
        029FA9 029DB5 029BBF 0299C9 
        0297D0 0295D6 0293DB 0291DF 
        028FE1 028DE2 028BE1 0289E0 
        0287DD 0285D9 0283D3 0281CC 
        027FC5 027DBB 027BB1 0279A6 
        027799 02758C 02737D 02716E 
        026F5D 026D4B 026B38 026924 
        026710 0264FA 0262E3 0260CB 
        025EB3 025C99 025A7F 025864 
        025648 02542B 02520E 024FEF 
        024DD0 024BB0 02498F 02476E 
        02454C 024329 024105 023EE1 
        023CBD 023A97 023871 02364B 
        023423 0231FC 022FD3 022DAB 
        022B81 022958 02272D 022503 
        0222D7 0220AC 021E80 021C53 
        021A26 0217F9 0215CC 02139E 
        021170 020F41 020D13 020AE3 
        0208B4 020685 020455 020225 
        01FFF5 01FDC4 01FB94 01F963 
        01F732 01F501 01F2D0 01F09F 
        01EE6D 01EC3C 01EA0B 01E7D9 
        01E5A8 01E376 01E145 01DF13 
        01DCE2 01DAB0 01D87F 01D64E 
        01D41D 01D1EC 01CFBB 01CD8A 
        01CB59 01C928 01C6F8 01C4C8 
        01C298 01C068 01BE38 01BC09 
        01B9DA 01B7AB 01B57C 01B34E 
        01B120 01AEF2 01ACC5 01AA98 
        01A86B 01A63E 01A412 01A1E7 
        019FBC 019D91 019B66 01993C 
        019713 0194EA 0192C1 019099 
        018E71 018C4A 018A23 0187FD 
        0185D7 0183B2 01818E 017F6A 
        017D46 017B24 017901 0176E0 
        0174BF 01729E 01707F 016E60 
        016C41 016A24 016806 0165EA 
        0163CF 0161B4 015F99 015D80 
        015B67 01594F 015738 015522 
        01530C 0150F7 014EE3 014CD0 
        014ABE 0148AC 01469B 01448B 
        01427C 01406E 013E61 013C55 
        013A49 01383F 013635 01342C 
        013224 01301E 012E18 012C13 
        012A0F 01280C 01260A 012409 
        012209 01200A 011E0C 011C0F 
        011A13 011818 01161E 011425 
        01122D 011037 010E41 010C4D 
        010A59 010867 010676 010486 
        010297 0100A9 00FEBC 00FCD1 
        00FAE6 00F8FD 00F715 00F52E 
        00F348 00F164 00EF81 00ED9E 
        00EBBE 00E9DE 00E7FF 00E622 
        00E446 00E26B 00E092 00DEB9 
        00DCE2 00DB0C 00D938 00D765 
        00D593 00D3C2 00D1F2 00D024 
        00CE58 00CC8C 00CAC2 00C8F9 
        00C731 00C56B 00C3A6 00C1E3 
        00C020 00BE60 00BCA0 00BAE2 
        00B925 00B76A 00B5B0 00B3F7 
        00B240 00B08A 00AED5 00AD22 
        00AB70 00A9C0 00A811 00A663 
        00A4B7 00A30D 00A163 009FBB 
        009E15 009C70 009ACC 00992A 
        00978A 0095EB 00944D 0092B0 
        009116 008F7C 008DE4 008C4E 
        008AB9 008925 008793 008603 
        008474 0082E6 00815A 007FD0 
        007E46 007CBF 007B39 0079B4 
        007831 0076B0 007530 0073B1 
        007234 0070B8 006F3E 006DC6 
        006C4F 006ADA 006966 0067F3 
        006683 006513 0063A5 006239 
        0060CF 005F65 005DFE 005C98 
        005B33 0059D0 00586F 00570F 
        0055B1 005454 0052F9 00519F 
        005047 004EF1 004D9C 004C48 
        004AF6 0049A6 004857 00470A 
        0045BF 004475 00432C 0041E5 
        0040A0 003F5C 003E1A 003CD9 
        003B9A 003A5D 003921 0037E6 
        0036AE 003576 003441 00330D 
        0031DA 0030A9 002F7A 002E4C 
        002D20 002BF5 002ACC 0029A4 
        00287E 00275A 002637 002516 
        0023F6 0022D8 0021BB 0020A0 
        001F87 001E6F 001D59 001C44 
        001B31 001A1F 00190F 001801 
        0016F4 0015E8 0014DE 0013D6 
        0012CF 0011CA 0010C6 000FC4 
        000EC4 000DC5 000CC7 000BCB 
        000AD1 0009D8 0008E1 0007EB 
        0006F7 000604 000513 000423 
        000335 000249 00015E 000074 
        FFFF8C FFFEA6 FFFDC1 FFFCDD 
        FFFBFB FFFB1B FFFA3C FFF95F 
        FFF883 FFF7A8 FFF6CF FFF5F8 
        FFF522 FFF44E FFF37B FFF2A9 
        FFF1DA FFF10B FFF03E FFEF73 
        FFEEA9 FFEDE0 FFED19 FFEC53 
        FFEB8F FFEACD FFEA0C FFE94C 
        FFE88E FFE7D1 FFE715 FFE65B 
        FFE5A3 FFE4EC FFE436 FFE382 
        FFE2CF FFE21E FFE16E FFE0C0 
        FFE013 FFDF67 FFDEBD FFDE14 
        FFDD6D FFDCC7 FFDC22 FFDB7F 
        FFDADD FFDA3D FFD99E FFD901 
        FFD864 FFD7CA FFD730 FFD698 
        FFD601 FFD56C FFD4D8 FFD445 
        FFD3B4 FFD324 FFD296 FFD208 
        FFD17C FFD0F2 FFD069 FFCFE1 
        FFCF5A FFCED5 FFCE51 FFCDCF 
        FFCD4D FFCCCD FFCC4F FFCBD1 
        FFCB55 FFCADA FFCA61 FFC9E9 
        FFC972 FFC8FC FFC888 FFC815 
        FFC7A3 FFC732 FFC6C3 FFC655 
        FFC5E8 FFC57C FFC512 FFC4A9 
        FFC441 FFC3DA FFC375 FFC310 
        FFC2AD FFC24C FFC1EB FFC18C 
        FFC12D FFC0D0 FFC075 FFC01A 
        FFBFC1 FFBF68 FFBF11 FFBEBB 
        FFBE66 FFBE13 FFBDC0 FFBD6F 
        FFBD1F FFBCD0 FFBC82 FFBC35 
        FFBBEA FFBB9F FFBB56 FFBB0E 
        FFBAC6 FFBA80 FFBA3B FFB9F8 
        FFB9B5 FFB973 FFB932 FFB8F3 
        FFB8B4 FFB877 FFB83B FFB800 
        FFB7C5 FFB78C FFB754 FFB71D 
        FFB6E7 FFB6B2 FFB67E FFB64B 
        FFB619 FFB5E8 FFB5B8 FFB589 
        FFB55C FFB52F FFB503 FFB4D8 
        FFB4AE FFB485 FFB45D FFB436 
        FFB410 FFB3EB FFB3C6 FFB3A3 
        FFB381 FFB360 FFB33F FFB320 
        F3AD09 F3B707 F3C10B F3CB15 
        F3D524 F3DF39 F3E954 F3F375 
        F3FD9B F407C6 F411F7 F41C2D 
        F42669 F430A9 F43AEF F4453A 
        F44F89 F459DE F46437 F46E95 
        F478F8 F48360 F48DCC F4983C 
        F4A2B1 F4AD2A F4B7A8 F4C22A 
        F4CCAF F4D739 F4E1C7 F4EC59 
        F4F6EF F50188 F50C26 F516C7 
        F5216B F52C13 F536BF F5416E 
        F54C20 F556D5 F5618E F56C4A 
        F57709 F581CB F58C90 F59757 
        F5A222 F5ACEF F5B7BF F5C292 
        F5CD67 F5D83E F5E318 F5EDF5 
        F5F8D3 F603B4 F60E97 F6197C 
        F62464 F62F4D F63A38 F64525 
        F65013 F65B04 F665F6 F670EA 
        F67BDF F686D6 F691CE F69CC7 
        F6A7C2 F6B2BE F6BDBC F6C8BA 
        F6D3B9 F6DEBA F6E9BB F6F4BD 
        F6FFC0 F70AC4 F715C9 F720CE 
        F72BD3 F736DA F741E0 F74CE7 
        F757EF F762F7 F76DFF F77907 
        F7840F F78F17 F79A20 F7A528 
        F7B030 F7BB38 F7C640 F7D148 
        F7DC4F F7E756 F7F25C F7FD62 
        F80867 F8136C F81E70 F82973 
        F83476 F83F78 F84A79 F85579 
        F86078 F86B76 F87673 F8816E 
        F88C69 F89762 F8A25A F8AD51 
        F8B846 F8C33A F8CE2C F8D91D 
        F8E40C F8EEFA F8F9E5 F904CF 
        F90FB8 F91A9E F92583 F93065 
        F93B46 F94624 F95101 F95BDB 
        F966B3 F97189 F97C5C F9872D 
        F991FC F99CC9 F9A792 F9B25A 
        F9BD1F F9C7E1 F9D2A0 F9DD5D 
        F9E817 F9F2CE F9FD83 FA0834 
        FA12E3 FA1D8F FA2837 FA32DD 
        FA3D7F FA481E FA52BA FA5D53 
        FA67E9 FA727B FA7D0A FA8795 
        FA921D FA9CA2 FAA722 FAB1A0 
        FABC1A FAC690 FAD102 FADB71 
        FAE5DB FAF042 FAFAA5 FB0505 
        FB0F60 FB19B7 FB240B FB2E5A 
        FB38A5 FB42EC FB4D2F FB576D 
        FB61A8 FB6BDE FB760F FB803D 
        FB8A66 FB948A FB9EAA FBA8C6 
        FBB2DD FBBCEF FBC6FD FBD106 
        FBDB0B FBE50A FBEF05 FBF8FC 
        FC02ED FC0CD9 FC16C1 FC20A4 
        FC2A81 FC345A FC3E2E FC47FC 
        FC51C6 FC5B8A FC654A FC6F04 
        FC78B9 FC8268 FC8C13 FC95B8 
        FC9F57 FCA8F2 FCB286 FCBC16 
        FCC5A0 FCCF24 FCD8A3 FCE21D 
        FCEB91 FCF4FF FCFE68 FD07CA 
        FD1128 FD1A7F FD23D1 FD2D1D 
        FD3663 FD3FA3 FD48DE FD5213 
        FD5B41 FD646A FD6D8D FD76AA 
        FD7FC0 FD88D1 FD91DC FD9AE0 
        FDA3DF FDACD7 FDB5C9 FDBEB5 
        FDC79B FDD07B FDD954 FDE227 
        FDEAF4 FDF3BA FDFC7A FE0534 
        FE0DE7 FE1694 FE1F3A FE27DA 
        FE3074 FE3907 FE4193 FE4A19 
        FE5299 FE5B11 FE6384 FE6BEF 
        FE7454 FE7CB2 FE850A FE8D5B 
        FE95A5 FE9DE8 FEA625 FEAE5B 
        FEB68A FEBEB2 FEC6D4 FECEEF 
        FED702 FEDF0F FEE715 FEEF15 
        FEF70D FEFEFE FF06E8 FF0ECC 
        FF16A8 FF1E7D FF264C FF2E13 
        FF35D3 FF3D8D FF453F FF4CEA 
        FF548E FF5C2A FF63C0 FF6B4F 
        FF72D6 FF7A56 FF81CF FF8941 
        FF90AC FF980F FF9F6C FFA6C1 
        FFAE0E FFB555 FFBC94 FFC3CC 
        FFCAFD FFD226 FFD948 FFE063 
        FFE776 FFEE82 FFF587 FFFC84 
        00037A 000A69 001150 001830 
        001F08 0025D9 002CA2 003365 
        003A1F 0040D2 00477E 004E23 
        0054BF 005B55 0061E3 006869 
        006EE8 007560 007BCF 008238 
        008899 008EF2 009544 009B8F 
        00A1D1 00A80D 00AE40 00B46D 
        00BA91 00C0AF 00C6C4 00CCD2 
        00D2D9 00D8D8 00DECF 00E4BF 
        00EAA7 00F087 00F661 00FC32 
        0101FC 0107BE 010D79 01132C 
        0118D8 011E7C 012418 0129AD 
        012F3A 0134C0 013A3E 013FB4 
        014523 014A8A 014FEA 015542 
        015A93 015FDC 01651D 016A57 
        016F89 0174B4 0179D7 017EF2 
        018406 018913 018E18 019315 
        01980A 019CF9 01A1DF 01A6BE 
        01AB96 01B066 01B52E 01B9EF 
        01BEA8 01C35A 01C804 01CCA7 
        01D142 01D5D6 01DA62 01DEE7 
        01E364 01E7DA 01EC48 01F0AF 
        01F50E 01F966 01FDB7 020200 
        020641 020A7B 020EAE 0212D9 
        0216FD 021B19 021F2E 02233C 
        022742 022B41 022F38 023328 
        023711 023AF2 023ECC 02429F 
        02466A 024A2E 024DEB 0251A0 
        02554E 0258F5 025C95 02602D 
        0263BE 026748 026ACA 026E46 
        0271BA 027527 02788D 027BEB 
        027F43 028293 0285DC 02891E 
        028C59 028F8C 0292B9 0295DE 
        0298FD 029C14 029F24 02A22E 
        02A530 02A82B 02AB1F 02AE0C 
        02B0F3 02B3D2 02B6AA 02B97B 
        02BC46 02BF09 02C1C6 02C47B 
        02C72A 02C9D2 02CC73 02CF0D 
        02D1A0 02D42D 02D6B3 02D931 
        02DBAA 02DE1B 02E086 02E2E9 
        02E547 02E79D 02E9ED 02EC36 
        02EE79 02F0B4 02F2EA 02F518 
        02F740 02F961 02FB7C 02FD91 
        02FF9E 0301A6 0303A6 0305A0 
        030794 030981 030B68 030D49 
        030F23 0310F6 0312C4 03148A 
        03164B 031805 0319B9 031B67 
        031D0E 031EAF 03204A 0321DE 
        03236D 0324F5 032677 0327F3 
        032968 032AD8 032C41 032DA5 
        032F02 033059 0331AB 0332F6 
        03343B 03357A 0336B3 0337E7 
        033914 033A3C 033B5D 033C79 
        033D8F 033E9F 033FA9 0340AE 
        0341AC 0342A5 034398 034486 
        03456D 03464F 03472C 034803 
        0348D4 03499F 034A65 034B25 
        034BE0 034C95 034D45 034DEF 
        034E94 034F34 034FCD 035062 
        0350F1 03517B 0351FF 03527E 
        0352F8 03536C 0353DC 035446 
        0354AA 03550A 035564 0355B9 
        035609 035654 03569A 0356DA 
        035716 03574C 03577E 0357AA 
        0357D2 0357F4 035812 03582A 
        03583E 03584D 035857 03585C 
        03585C 035858 03584F 035841 
        03582E 035816 0357FA 0357D9 
        0357B4 03578A 03575B 035728 
        0356F0 0356B3 035672 03562D 
        0355E3 035594 035541 0354EA 
        03548E 03542E 0353CA 035361 
        0352F4 035283 03520D 035193 
        035115 035092 03500C 034F81 
        034EF2 034E5F 034DC8 034D2D 
        034C8E 034BEA 034B43 034A98 
        0349E9 034935 03487E 0347C3 
        034704 034642 03457B 0344B0 
        0343E2 034310 03423A 034161 
        034084 033FA3 033EBE 033DD6 
        19536D 1922CF 18F248 18C1D6 
        18917A 186134 183104 1800EA 
        17D0E7 17A0FA 177123 174163 
        1711BA 16E228 16B2AC 168347 
        1653FA 1624C3 15F5A4 15C69B 
        1597AB 1568D1 153A10 150B65 
        14DCD3 14AE58 147FF6 1451AB 
        142378 13F55D 13C75B 139971 
        136B9F 133DE5 131045 12E2BC 
        12B54D 1287F6 125AB8 122D93 
        120087 11D394 11A6BA 1179FA 
        114D52 1120C4 10F450 10C7F5 
        109BB4 106F8C 10437E 10178A 
        0FEBB0 0FBFEF 0F9449 0F68BD 
        0F3D4B 0F11F3 0EE6B6 0EBB93 
        0E908A 0E659C 0E3AC8 0E100F 
        0DE571 0DBAEE 0D9085 0D6638 
        0D3C05 0D11ED 0CE7F1 0CBE0F 
        0C9449 0C6A9E 0C410E 0C179A 
        0BEE42 0BC504 0B9BE3 0B72DD 
        0B49F3 0B2124 0AF871 0ACFDB 
        0AA760 0A7F01 0A56BE 0A2E97 
        0A068D 09DE9E 09B6CC 098F16 
        09677D 094000 09189F 08F15B 
        08CA34 08A329 087C3B 085569 
        082EB5 08081D 07E1A2 07BB44 
        079503 076EDF 0748D8 0722EE 
        06FD21 06D771 06B1DF 068C6A 
        066712 0641D8 061CBB 05F7BB 
        05D2D9 05AE15 05896E 0564E5 
        054079 051C2B 04F7FB 04D3E8 
        04AFF4 048C1D 046864 0444C9 
        04214C 03FDED 03DAAC 03B789 
        039484 03719D 034ED4 032C2A 
        03099E 02E730 02C4E0 02A2AF 
        02809C 025EA7 023CD1 021B19 
        01F97F 01D805 01B6A8 01956A 
        01744B 01534A 013268 0111A5 
        00F100 00D07A 00B013 008FCA 
        006FA0 004F95 002FA9 000FDB 
        FFF02D FFD09D FFB12C FF91DA 
        FF72A7 FF5393 FF349D FF15C7 
        FEF710 FED878 FEB9FF FE9BA5 
        FE7D69 FE5F4D FE4150 FE2373 
        FE05B4 FDE814 FDCA94 FDAD32 
        FD8FF0 FD72CD FD55C9 FD38E5 
        FD1C1F FCFF79 FCE2F2 FCC68A 
        FCAA42 FC8E18 FC720E FC5623 
        FC3A58 FC1EAB FC031E FBE7B1 
        FBCC62 FBB133 FB9623 FB7B32 
        FB6061 FB45AF FB2B1C FB10A8 
        FAF654 FADC1F FAC20A FAA813 
        FA8E3C FA7484 FA5AEC FA4173 
        FA2819 FA0EDE F9F5C3 F9DCC7 
        F9C3EA F9AB2C F9928E F97A0F 
        F961AF F9496F F9314D F9194B 
        F90168 F8E9A5 F8D200 F8BA7B 
        F8A315 F88BCE F874A6 F85D9D 
        F846B3 F82FE9 F8193E F802B1 
        F7EC44 F7D5F6 F7BFC7 F7A9B7 
        F793C6 F77DF4 F76841 F752AD 
        F73D38 F727E2 F712AB F6FD93 
        F6E899 F6D3BF F6BF03 F6AA66 
        F695E8 F68189 F66D49 F65927 
        F64524 F63140 F61D7A F609D3 
        F5F64B F5E2E1 F5CF96 F5BC6A 
        F5A95C F5966D F5839C F570E9 
        F55E55 F54BE0 F53989 F52750 
        F51535 F50339 F4F15B F4DF9C 
        F4CDFB F4BC77 F4AB12 F499CB 
        F488A3 F47798 F466AB F455DD 
        F4452C F43499 F42425 F413CE 
        F40395 F3F379 F3E37C F3D39C 
        F3C3DA F3B436 F3A4AF F39546 
        F385FA F376CC F367BC F358C9 
        F349F3 F33B3B F32CA0 F31E22 
        F30FC2 F3017F F2F359 F2E550 
        F2D765 F2C996 F2BBE5 F2AE50 
        F2A0D8 F2937E F28640 F2791F 
        F26C1B F25F33 F25268 F245BA 
        F23928 F22CB3 F2205B F2141F 
        F207FF F1FBFC F1F015 F1E44A 
        F1D89B F1CD09 F1C193 F1B639 
        F1AAFB F19FD9 F194D3 F189E9 
        F17F1A F17468 F169D1 F15F56 
        F154F7 F14AB3 F1408B F1367E 
        F12C8D F122B7 F118FC F10F5D 
        F105D9 F0FC70 F0F322 F0E9EF 
        F0E0D8 F0D7DB F0CEF9 F0C632 
        F0BD86 F0B4F5 F0AC7E F0A422 
        F09BE1 F093BA F08BAE F083BC 
        F07BE4 F07427 F06C83 F064FB 
        F05D8C F05637 F04EFC F047DC 
        F040D5 F039E8 F03314 F02C5B 
        F025BB F01F35 F018C8 F01275 
        F00C3B F0061A F00013 EFFA25 
        EFF450 EFEE95 EFE8F2 EFE368 
        EFDDF8 EFD8A0 EFD361 EFCE3A 
        EFC92D EFC438 EFBF5B EFBA97 
        EFB5EB EFB158 EFACDD EFA87A 
        EFA42F EF9FFD EF9BE2 EF97E0 
        EF93F5 EF9022 EF8C67 EF88C3 
        EF8538 EF81C3 EF7E67 EF7B21 
        EF77F3 EF74DD EF71DD EF6EF5 
        EF6C23 EF6969 EF66C6 EF643A 
        EF61C4 EF5F65 EF5D1D EF5AEB 
        EF58D0 EF56CC EF54DD EF5305 
        EF5144 EF4F98 EF4E03 EF4C84 
        EF4B1A EF49C7 EF4889 EF4761 
        EF464F EF4553 EF446C EF439A 
        EF42DE EF4237 EF41A6 EF4129 
        EF40C2 EF4070 EF4032 EF400A 
        EF3FF6 EF3FF8 EF400D EF4038 
        EF4077 EF40CA EF4132 EF41AE 
        EF423E EF42E3 EF439B EF4468 
        EF4548 EF463C EF4744 EF4860 
        EF4990 EF4AD3 EF4C29 EF4D93 
        EF4F10 EF50A0 EF5244 EF53FB 
        EF55C4 EF57A1 EF5991 EF5B93 
        EF5DA8 EF5FD0 EF620A EF6457 
        EF66B6 EF6927 EF6BAB EF6E41 
        EF70E9 EF73A3 EF766F EF794D 
        EF7C3D EF7F3F EF8252 EF8576 
        EF88AD EF8BF4 EF8F4D EF92B7 
        EF9633 EF99BF EF9D5D EFA10B 
        EFA4CA EFA89A EFAC7B EFB06D 
        EFB46F EFB881 EFBCA4 EFC0D7 
        EFC51B EFC96E EFCDD2 EFD246 
        EFD6C9 EFDB5D EFE000 EFE4B3 
        EFE976 EFEE48 EFF32A EFF81B 
        EFFD1B F0022A F00749 F00C77 
        F011B4 F016FF F01C5A F021C3 
        F0273B F02CC1 F03256 F037FA 
        F03DAC F0436C F0493A F04F17 
        F05501 F05AFA F06100 F06714 
        F06D36 F07365 F079A3 F07FED 
        F08645 F08CAA F0931D F0999D 
        F0A02A F0A6C4 F0AD6B F0B41E 
        F0BADF F0C1AC F0C886 F0CF6C 
        F0D65F F0DD5E F0E46A F0EB82 
        F0F2A6 F0F9D6 F10112 F1085A 
        F10FAE F1170D F11E78 F125EF 
        F12D72 F13500 F13C99 F1443E 
        F14BED F153A8 F15B6E F1633F 
        F16B1B F17302 F17AF3 F182EF 
        F18AF6 F19307 F19B23 F1A349 
        F1AB7A F1B3B4 F1BBF9 F1C448 
        F1CCA1 F1D503 F1DD70 F1E5E6 
        F1EE66 F1F6EF F1FF82 F2081F 
        F210C5 F21974 F2222C F22AEE 
        F233B8 F23C8C F24568 F24E4E 
        F2573C F26033 F26932 F2723A 
        F27B4A F28463 F28D84 F296AD 
        F29FDF F2A918 F2B25A F2BBA3 
        F2C4F5 F2CE4E F2D7AE F2E117 
        F2EA87 F2F3FE F2FD7D F30704 
        F31091 F31A26 F323C2 F32D64 
        F3370E F340BF F34A77 F35435 
        F35DFA F367C5 F37198 F37B70 
        F3854F F38F34 F39920 F3A312 
        7FFFFF 7FFFCD 7FFF6A 7FFED4 
        7FFE0D 7FFD15 7FFBEA 7FFA8E 
        7FF900 7FF740 7FF54F 7FF32C 
        7FF0D7 7FEE50 7FEB98 7FE8AE 
        7FE593 7FE245 7FDEC6 7FDB16 
        7FD733 7FD320 7FCEDA 7FCA63 
        7FC5BA 7FC0E0 7FBBD4 7FB697 
        7FB128 7FAB88 7FA5B6 7F9FB3 
        7F997E 7F9318 7F8C80 7F85B7 
        7F7EBD 7F7792 7F7035 7F68A6 
        7F60E7 7F58F6 7F50D4 7F4881 
        7F3FFC 7F3747 7F2E60 7F2549 
        7F1C00 7F1286 7F08DB 7EFEFF 
        7EF4F3 7EEAB5 7EE047 7ED5A7 
        7ECAD7 7EBFD6 7EB4A4 7EA942 
        7E9DAF 7E91EB 7E85F7 7E79D2 
        7E6D7D 7E60F7 7E5441 7E475B 
        7E3A44 7E2CFC 7E1F85 7E11DD 
        7E0405 7DF5FD 7DE7C5 7DD95C 
        7DCAC4 7DBBFC 7DAD04 7D9DDC 
        7D8E84 7D7EFC 7D6F45 7D5F5E 
        7D4F48 7D3F01 7D2E8C 7D1DE6 
        7D0D12 7CFC0E 7CEADB 7CD978 
        7CC7E7 7CB626 7CA436 7C9217 
        7C7FC9 7C6D4C 7C5AA0 7C47C6 
        7C34BD 7C2185 7C0E1E 7BFA89 
        7BE6C5 7BD2D3 7BBEB3 7BAA64 
        7B95E7 7B813C 7B6C63 7B575C 
        7B4227 7B2CC3 7B1732 7B0174 
        7AEB87 7AD56D 7ABF25 7AA8B0 
        7A920D 7A7B3D 7A6440 7A4D16 
        7A35BE 7A1E39 7A0688 79EEA9 
        79D69E 79BE65 79A600 798D6F 
        7974B1 795BC6 7942AF 79296C 
        790FFC 78F661 78DC99 78C2A5 
        78A886 788E3A 7873C3 785920 
        783E52 782358 780833 77ECE2 
        77D166 77B5BF 7799ED 777DF0 
        7761C8 774576 7728F8 770C50 
        76EF7E 76D281 76B559 769808 
        767A8C 765CE6 763F16 76211C 
        7602F9 75E4AB 75C635 75A794 
        7588CA 7569D7 754ABB 752B75 
        750C07 74EC6F 74CCAF 74ACC6 
        748CB4 746C7A 744C17 742B8C 
        740AD9 73E9FD 73C8FA 73A7CF 
        73867B 736500 73435E 732194 
        72FFA2 72DD89 72BB49 7298E2 
        727654 72539F 7230C4 720DC1 
        71EA98 71C749 71A3D3 718037 
        715C75 71388C 71147E 70F04B 
        70CBF1 70A772 7082CD 705E03 
        703914 701400 6FEEC7 6FC969 
        6FA3E6 6F7E3E 6F5872 6F3281 
        6F0C6D 6EE633 6EBFD6 6E9955 
        6E72B0 6E4BE8 6E24FB 6DFDEC 
        6DD6B9 6DAF62 6D87E9 6D604C 
        6D388D 6D10AB 6CE8A6 6CC07F 
        6C9835 6C6FCA 6C473B 6C1E8B 
        6BF5B9 6BCCC6 6BA3B0 6B7A79 
        6B5121 6B27A8 6AFE0D 6AD451 
        6AAA74 6A8077 6A5659 6A2C1A 
        6A01BC 69D73C 69AC9D 6981DE 
        6956FF 692C00 6900E1 68D5A3 
        68AA46 687EC9 68532E 682773 
        67FB9A 67CFA2 67A38B 677756 
        674B03 671E92 66F202 66C555 
        66988A 666BA1 663E9B 661177 
        65E437 65B6D9 65895E 655BC6 
        652E12 650042 64D254 64A44B 
        647626 6447E4 641987 63EB0E 
        63BC7A 638DCA 635EFE 633018 
        630117 62D1FA 62A2C4 627372 
        624406 621480 61E4E0 61B525 
        618551 615563 61255B 60F53A 
        60C500 6094AD 606440 6033BB 
        60031D 5FD266 5FA197 5F70B0 
        5F3FB0 5F0E99 5EDD69 5EAC22 
        5E7AC3 5E494D 5E17C0 5DE61B 
        5DB460 5D828E 5D50A5 5D1EA5 
        5CEC8F 5CBA63 5C8821 5C55C8 
        5C235A 5BF0D7 5BBE3D 5B8B8F 
        5B58CB 5B25F2 5AF304 5AC002 
        5A8CEA 5A59BF 5A267F 59F32A 
        59BFC2 598C46 5958B6 592513 
        58F15C 58BD92 5889B5 5855C4 
        5821C1 57EDAC 57B983 578549 
        5750FC 571C9D 56E82C 56B3AA 
        567F15 564A70 5615B9 55E0F1 
        55AC17 55772D 554233 550D27 
        54D80C 54A2E0 546DA3 543857 
        5402FC 53CD90 539815 53628B 
        532CF1 52F749 52C192 528BCB 
        5255F7 522014 51EA22 51B423 
        517E15 5147FA 5111D1 50DB9B 
        50A557 506F06 5038A8 50023D 
        4FCBC6 4F9541 4F5EB1 4F2814 
        4EF16B 4EBAB6 4E83F5 4E4D29 
        4E1651 4DDF6D 4DA87F 4D7185 
        4D3A81 4D0372 4CCC58 4C9534 
        4C5E05 4C26CD 4BEF8A 4BB83E 
        4B80E8 4B4988 4B121F 4ADAAD 
        4AA332 4A6BAE 4A3421 49FC8B 
        49C4EE 498D48 495599 491DE3 
        48E625 48AE5F 487692 483EBE 
        4806E2 47CEFF 479715 475F25 
        47272E 46EF30 46B72C 467F22 
        464712 460EFC 45D6E1 459EC0 
        45669A 452E6E 44F63D 44BE08 
        4485CD 444D8E 44154B 43DD03 
        43A4B7 436C67 433413 42FBBC 
        42C361 428B02 4252A1 421A3C 
        41E1D4 41A969 4170FC 41388C 
        41001A 40C7A6 408F30 4056B7 
        401E3D 3FE5C2 3FAD45 3F74C6 
        3F3C47 3F03C6 3ECB45 3E92C3 
        3E5A40 3E21BD 3DE93A 3DB0B6 
        3D7833 3D3FB0 3D072D 3CCEAA 
        3C9628 3C5DA7 3C2527 3BECA8 
        3BB42A 3B7BAE 3B4333 3B0AB9 
        3AD242 3A99CC 3A6159 3A28E7 
        39F078 39B80C 397FA2 39473B 
        390ED7 38D677 389E19 3865BF 
        382D68 37F515 37BCC6 37847B 
        374C33 3713F1 36DBB2 36A378 
        366B43 363312 35FAE7 35C2C0 
        358A9F 355283 351A6D 34E25C 
        34AA51 34724C 343A4E 340255 
        33CA63 339277 335A92 3322B4 
        32EADC 32B30C 327B43 324381 
        320BC6 31D413 319C68 3164C5 
        312D2A 30F597 30BE0C 30868A 
        304F10 30179F 2FE036 2FA8D7 
        2F7181 2F3A34 2F02F0 2ECBB6 
        2E9485 2E5D5E 2E2641 2DEF2E 
        2DB825 2D8127 2D4A33 2D1349 
        2CDC6A 2CA596 2C6ECD 2C380E 
        2C015C 2BCAB4 2B9418 2B5D87 
        2B2702 2AF089 2ABA1C 2A83BB 
        2A4D66 2A171D 29E0E1 29AAB2 
        29748F 293E79 290870 28D274 
        289C86 2866A4 2830D0 27FB0A 
        27C551 278FA7 275A0A 27247B 
        26EEFB 26B988 268424 264ECF 
        261989 25E451 25AF28 257A0E 
        254503 251008 24DB1C 24A63F 
        247172 243CB5 240808 23D36A 
        239EDD 236A60 2335F3 230197 
        22CD4B 229910 2264E5 2230CC 
        21FCC3 21C8CC 2194E6 216111 
        212D4D 20F99B 20C5FB 20926D 
        205EF0 202B86 1FF82D 1FC4E7 
        1F91B3 1F5E91 1F2B82 1EF886 
        1EC59C 1E92C6 1E6002 1E2D51 
        1DFAB4 1DC829 1D95B2 1D634F 
        1D30FF 1CFEC3 1CCC9A 1C9A86 
        1C6885 1C3699 1C04C1 1BD2FD 
        1BA14D 1B6FB2 1B3E2C 1B0CBA 
        1ADB5D 1AAA15 1A78E2 1A47C4 
        1A16BB 19E5C7 19B4E9 198420 

0xFF925C	$M.system_config.data.cmpd100_obj_wired_sub
        000040 004000 006444 006444 
        006444 006444 080000 FF9657 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0xFF927A	$M.system_config.data.cmpd100_obj
        000040 000020 006410 FF93E5 
        006410 FF93E5 080000 006658 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0xFF9298	$cbuffer.read_port_offset_addr
0xFF9298	$cbuffer.port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF92A4	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF92B0	$M.system_config.data.aux_stereo_volume_and_limit_block
0xFF92B0	$M.system_config.data.aux_stereo_volume_and_limit_obj
        000000 001000 000002 FF9632 
        000000 FBD57B 072148 79999A 
        000000 000000 000000 

0xFF92BB	$M.system_config.data.aux_left_channel_vol_struc
        006437 006437 080000 000000 
        000000 

0xFF92C0	$M.system_config.data.aux_right_channel_vol_struc
        FF940C FF940C 080000 000000 
        000000 

0xFF92C5	$M.system_config.data.SubEqCoefsB
        000003 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 

0xFF92DA	$M.multi_chan_output.chain0_copy_struc
        FF94DB 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF92EE	$M.multi_chan_output.chain0_ch0_mix_op.next
0xFF92EE	$chain0_ch0_mix_op
        FF94E1 

0xFF92EF	$M.multi_chan_output.chain0_ch0_mix_op.func
        00661A 

0xFF92F0	$M.multi_chan_output.chain0_ch0_mix_op.param
        000000 FFFFFF 006605 FF3507 
        002BFF 000070 002BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF9302	$M.multi_chan_output.chain0_ch2_mix_op.next
0xFF9302	$chain0_ch2_mix_op
        FF94E7 

0xFF9303	$M.multi_chan_output.chain0_ch2_mix_op.func
        00661A 

0xFF9304	$M.multi_chan_output.chain0_ch2_mix_op.param
        000002 FFFFFF 006608 FF3507 
        002BFF 0000F0 002BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF9316	$chain1_ch0_mix_op
0xFF9316	$M.multi_chan_output.chain1_ch0_mix_op.next
        FF9523 

0xFF9317	$M.multi_chan_output.chain1_ch0_mix_op.func
        00661A 

0xFF9318	$M.multi_chan_output.chain1_ch0_mix_op.param
        000000 FFFFFF 00660B FF3507 
        002BFF 000170 002BFF 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF932A	$codec_rate_adj.stereo
        0000ED 00012D FF95D2 FF95D5 
        000000 FF3507 000080 0000C0 
        002FCE 000000 000000 000024 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF933D	$M.system_config.data.delay_reinitialize_table
        00261F 000000 00650B 00261F 
        000000 FF94C9 00261F 000000 
        006511 00261F 000000 FF94CF 
        00261F 000000 006517 00261F 
        000000 FF94D5 000000 

0xFF9350	$M.system_config.data.spkr_ctrl_gain_coefs_A
        200000 000000 000000 000000 
        200000 000000 200000 000000 
        000000 000000 200000 000000 
        000000 000000 000000 000000 

0xFF9360	$M.system_config.data.sub_volume_and_limit_block
0xFF9360	$M.system_config.data.sub_volume_and_limit_obj
        000000 001000 000001 FF9632 
        200000 FBD57B 072148 79999A 
        000000 000000 000000 

0xFF936B	$M.system_config.data.sub_channel_vol_struc
        006444 006444 080000 000000 
        000000 

0xFF9370	$cbops.buffer_addresses
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF9380	$flash.code.address
	-------- [0x000C octets]

0xFF9384	$flash.data16.address
	-------- [0x000C octets]

0xFF9388	$flash.data24.address
	-------- [0x000C octets]

0xFF938C	$flash.windowed_data16.address
	-------- [0x000C octets]

0xFF9390	$M.system_config.data.MeloD_Expansion_coefficients
        B1AA81 571F3E C3ECED 400000 
        84DA2F 3B3194 400000 D53FA4 
        FEA000 400000 81543A 3EB7E0 
        400000 BB3B4C 24BC7F 

0xFF939F	$mono_tone_in_right_resample_op.next
0xFF939F	$mono_tone_in_right_resample_op
        006631 

0xFF93A0	$mono_tone_in_right_resample_op.func
        FF9620 

0xFF93A1	$mono_tone_in_right_resample_op.param
        000000 000002 FF3507 00667F 
        002BFF 000060 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF93AE	$tone_in_right_resample_op
0xFF93AE	$tone_in_right_resample_op.next
        006631 

0xFF93AF	$tone_in_right_resample_op.func
        FF9620 

0xFF93B0	$tone_in_right_resample_op.param
        000001 000003 FF3507 00667F 
        002BFF 000060 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF93BD	$chain1_to_chain0_pcm_sync_struct
        0147AE 001388 00662F FF962E 
        FF943A FF7BFD 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF93CB	$sbc_stats
        003FD4 003FD6 003FDA 003FD5 
        003FD7 003FD9 003FD8 006653 
        006653 006653 006653 006653 
        006653 

0xFF93D8	$usb_stats
        FF956B 006653 006653 006653 
        006653 006653 006653 006653 
        006653 006653 006653 006653 
        006653 

0xFF93E5	$M.system_config.data.stream_map_right_in
        000000 000000 000000 000168 
        000BB8 001409 0013BA 000000 
        000000 000000 000000 000000 
        000000 

0xFF93F2	$M.system_config.data.stream_map_primary_right_out
        0065F6 000000 000000 000168 
        000BB8 0013DE 001273 000000 
        000000 000000 000000 000000 
        000000 

0xFF93FF	$M.system_config.data.stream_map_secondary_right_out
        0065F9 000000 000000 000168 
        000BB8 0013DE 001273 000000 
        000000 000000 000000 000000 
        000000 

0xFF940C	$M.system_config.data.stream_map_aux_right_out
        0065FC 000000 000000 000168 
        000BB8 0013DE 001273 000000 
        000000 000000 000000 000000 
        000000 

0xFF9419	$analogue_stats
        FF956B 006653 006653 006653 
        006653 006653 006653 006653 
        006653 006653 006653 006653 
        006653 

0xFF9426	$M.system_config.data.spkr_ctrl_struct
        006410 FF93E5 000000 000000 
        000000 000000 000000 000000 
        005B34 004600 000800 0064A6 

0xFF9432	$calc_chain1_actual_port_rate_struc
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF943D	$FunctionMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF9447	$chain0_ch0_5_signal_detect_op
0xFF9447	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.next
        00652F 

0xFF9448	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.func
        FF961A 

0xFF9449	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.param
        00651D 000000 000000 000001 
        000002 000003 000004 000005 

0xFF9451	$kal_filter_coef_lib.__db2lin.constants
        000082 C0A8C1 000074 BBFFCB 
        000078 CC9A78 00007C EC8E69 
        000080 800000 

0xFF945B	$M.system_config.data.BoostEqCoefsB
        000001 000001 400000 000000 
        000000 400000 000000 000000 
        000001 

0xFF9464	$interrupt.isr_call_table
        001203 002659 000C15 002659 
        002659 002659 002659 002659 
        002659 

0xFF946D	$M.downsample_sub_to_1k2.sub_mute_coefs
        000000 F9A97A E7E742 CE3DC9 
        B1C238 9818BF 865687 800000 

0xFF9475	$chain0_ch1_dither_and_shift_op
0xFF9475	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.next
        FF9505 

0xFF9476	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.func
        006611 

0xFF9477	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.param
        000001 000000 FFFFF8 000000 
        000128 000000 

0xFF947D	$chain0_ch3_dither_and_shift_op
0xFF947D	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.next
        FF9511 

0xFF947E	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.func
        006611 

0xFF947F	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.param
        000003 000000 FFFFF8 000000 
        000190 000000 

0xFF9485	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.next
0xFF9485	$chain0_ch5_dither_and_shift_op
        FFFFFF 

0xFF9486	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.func
        006611 

0xFF9487	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.param
        000005 000000 FFFFF8 000000 
        0001A0 000000 

0xFF948D	$chain1_ch1_dither_and_shift_op
0xFF948D	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.next
        FFFFFF 

0xFF948E	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.func
        006611 

0xFF948F	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.param
        000001 000003 FFFFF8 000000 
        0001B0 000000 

0xFF9495	$M.multi_chan_output.chain0_ch2_mute_op.next
0xFF9495	$chain0_ch2_mute_op
        00654D 

0xFF9496	$M.multi_chan_output.chain0_ch2_mute_op.func
        00661D 

0xFF9497	$M.multi_chan_output.chain0_ch2_mute_op.param
        000000 000000 000001 000002 
        000002 

0xFF949C	$chain0_ch4_mute_op
0xFF949C	$M.multi_chan_output.chain0_ch4_mute_op.next
        006559 

0xFF949D	$M.multi_chan_output.chain0_ch4_mute_op.func
        00661D 

0xFF949E	$M.multi_chan_output.chain0_ch4_mute_op.param
        000000 000000 000001 000004 
        000004 

0xFF94A3	$M.multi_chan_output.chain1_ch0_mute_op.next
0xFF94A3	$chain1_ch0_mute_op
        00656B 

0xFF94A4	$M.multi_chan_output.chain1_ch0_mute_op.func
        00661D 

0xFF94A5	$M.multi_chan_output.chain1_ch0_mute_op.param
        000000 000000 000001 000000 
        000000 

0xFF94AA	$stereo_tone_in_resample_copy_struc
        0063E5 000002 0065FF FF95FF 
        000002 006602 FF9602 

0xFF94B1	$M.system_config.data.BoostEqDefnTable
        000001 000001 FF36D0 FF36DE 
        00649D FF945B 

0xFF94B7	$M.system_config.data.spkr_ctrl_pri_eq_defn_table
        000002 000007 FF35AE FF35CE 
        005773 0057A0 

0xFF94BD	$M.system_config.data.spkr_ctrl_bass_eq_defn_table
        000002 000006 FF364E 000000 
        006233 00625A 

0xFF94C3	$M.system_config.data.WiredSubEqDefnTable
        000001 000003 FF369F 000000 
        0053E9 FF92C5 

0xFF94C9	$M.system_config.data.delay_pri_right
        FF93F2 FF93F2 0001B5 000000 
        000000 000000 

0xFF94CF	$M.system_config.data.delay_sec_right
        FF93FF FF93FF 0001BD 000000 
        000000 000000 

0xFF94D5	$M.system_config.data.delay_aux_right
        FF940C FF940C 002FFD 000000 
        000000 000000 

0xFF94DB	$M.multi_chan_output.chain0_processing_switch_op.next
0xFF94DB	$chain0_processing_switch_op
        006523 

0xFF94DC	$M.multi_chan_output.chain0_processing_switch_op.func
        FF961D 

0xFF94DD	$M.multi_chan_output.chain0_processing_switch_op.param
        FF9673 FFFFFF 000001 000000 

0xFF94E1	$chain0_ch1_tone_switch_op
0xFF94E1	$M.multi_chan_output.chain0_ch1_tone_switch_op.next
        0003EC 

0xFF94E2	$M.multi_chan_output.chain0_ch1_tone_switch_op.func
        FF961D 

0xFF94E3	$M.multi_chan_output.chain0_ch1_tone_switch_op.param
        006675 006529 000002 000000 

0xFF94E7	$M.multi_chan_output.chain0_ch3_tone_switch_op.next
0xFF94E7	$chain0_ch3_tone_switch_op
        00633A 

0xFF94E8	$M.multi_chan_output.chain0_ch3_tone_switch_op.func
        FF961D 

0xFF94E9	$M.multi_chan_output.chain0_ch3_tone_switch_op.param
        006675 FF9447 000008 000000 

0xFF94ED	$M.multi_chan_output.chain0_ch0_dc_remove_op.next
0xFF94ED	$chain0_ch0_dc_remove_op
        006535 

0xFF94EE	$M.multi_chan_output.chain0_ch0_dc_remove_op.func
        FF960E 

0xFF94EF	$M.multi_chan_output.chain0_ch0_dc_remove_op.param
        000000 000000 000000 000000 

0xFF94F3	$M.multi_chan_output.chain0_ch1_dc_remove_op.next
0xFF94F3	$chain0_ch1_dc_remove_op
        00653B 

0xFF94F4	$M.multi_chan_output.chain0_ch1_dc_remove_op.func
        FF960E 

0xFF94F5	$M.multi_chan_output.chain0_ch1_dc_remove_op.param
        000001 000001 000000 000000 

0xFF94F9	$M.multi_chan_output.chain0_ch0_resamp_switch_op.next
0xFF94F9	$chain0_ch0_resamp_switch_op
        0007AD 

0xFF94FA	$M.multi_chan_output.chain0_ch0_resamp_switch_op.func
        FF961D 

0xFF94FB	$M.multi_chan_output.chain0_ch0_resamp_switch_op.param
        FF9673 006541 000001 000000 

0xFF94FF	$chain0_ch0_dither_switch_op
0xFF94FF	$M.multi_chan_output.chain0_ch0_dither_switch_op.next
        0064AF 

0xFF9500	$M.multi_chan_output.chain0_ch0_dither_switch_op.func
        FF961D 

0xFF9501	$M.multi_chan_output.chain0_ch0_dither_switch_op.param
        FF9673 006547 000001 000000 

0xFF9505	$M.multi_chan_output.chain0_ch2_switch_op.next
0xFF9505	$chain0_ch2_switch_op
        FF9495 

0xFF9506	$M.multi_chan_output.chain0_ch2_switch_op.func
        FF961D 

0xFF9507	$M.multi_chan_output.chain0_ch2_switch_op.param
        FF9673 FF950B 000004 000000 

0xFF950B	$M.multi_chan_output.chain0_ch3_switch_op.next
0xFF950B	$chain0_ch3_switch_op
        0064E4 

0xFF950C	$M.multi_chan_output.chain0_ch3_switch_op.func
        FF961D 

0xFF950D	$M.multi_chan_output.chain0_ch3_switch_op.param
        FF9673 FF9511 000008 000000 

0xFF9511	$M.multi_chan_output.chain0_ch4_switch_op.next
0xFF9511	$chain0_ch4_switch_op
        FF949C 

0xFF9512	$M.multi_chan_output.chain0_ch4_switch_op.func
        FF961D 

0xFF9513	$M.multi_chan_output.chain0_ch4_switch_op.param
        FF9673 FF9517 000010 000000 

0xFF9517	$chain0_ch5_switch_op
0xFF9517	$M.multi_chan_output.chain0_ch5_switch_op.next
        0064EB 

0xFF9518	$M.multi_chan_output.chain0_ch5_switch_op.func
        FF961D 

0xFF9519	$M.multi_chan_output.chain0_ch5_switch_op.param
        FF9673 FFFFFF 000020 000000 

0xFF951D	$M.multi_chan_output.chain1_processing_switch_op.next
0xFF951D	$chain1_processing_switch_op
        006565 

0xFF951E	$M.multi_chan_output.chain1_processing_switch_op.func
        FF961D 

0xFF951F	$M.multi_chan_output.chain1_processing_switch_op.param
        006674 FFFFFF 000001 000000 

0xFF9523	$M.multi_chan_output.chain1_ch1_tone_switch_op.next
0xFF9523	$chain1_ch1_tone_switch_op
        00634E 

0xFF9524	$M.multi_chan_output.chain1_ch1_tone_switch_op.func
        FF961D 

0xFF9525	$M.multi_chan_output.chain1_ch1_tone_switch_op.param
        FF9675 006493 000002 000000 

0xFF9529	$M.multi_chan_output.chain1_ch1_switch_op.next
0xFF9529	$chain1_ch1_switch_op
        0064F2 

0xFF952A	$M.multi_chan_output.chain1_ch1_switch_op.func
        FF961D 

0xFF952B	$M.multi_chan_output.chain1_ch1_switch_op.param
        006674 FF952F 000002 000000 

0xFF952F	$chain1_rm_type_switch_op
0xFF952F	$M.multi_chan_output.chain1_rm_type_switch_op.next
        0064C7 

0xFF9530	$M.multi_chan_output.chain1_rm_type_switch_op.func
        FF961D 

0xFF9531	$M.multi_chan_output.chain1_rm_type_switch_op.param
        FF967D 006325 000000 000000 

0xFF9535	$mono_tone_in_resample_copy_struc
        0063D6 000001 0065FF 000002 
        006602 FF9602 

0xFF953B	$stereo_tone_in_copy_op
0xFF953B	$stereo_tone_in_copy_op.next
        FFFFFF 

0xFF953C	$stereo_tone_in_copy_op.func
        006620 

0xFF953D	$stereo_tone_in_copy_op.param
        000000 000001 000002 000008 

0xFF9541	$ufe_aux.message_volume_struc
        000000 000000 000000 000000 
        000000 

0xFF9546	$sub_l2cap_out_copy_struc
        00658D 000001 FF95ED 000001 
        9D800D 

0xFF954B	$output_port_and_delay_size
        800011 00007E 000BCC 00007E 
        000000 

0xFF9550	$mono_tone_in_copy_struc
        006597 000001 946003 000001 
        0065FF 

0xFF9555	$analogue_in_left_copy_op
0xFF9555	$analogue_in_left_copy_op.next
        00659C 

0xFF9556	$analogue_in_left_copy_op.func
        006617 

0xFF9557	$analogue_in_left_copy_op.param
        000000 000002 000008 

0xFF955A	$audio_channel_one_to_two_internal_copy_op
0xFF955A	$audio_channel_one_to_two_internal_copy_op.next
        0065A1 

0xFF955B	$audio_channel_one_to_two_internal_copy_op.func
        006614 

0xFF955C	$audio_channel_one_to_two_internal_copy_op.param
        000000 000001 000002 

0xFF955F	$analogue_mono_in_right_copy_op
0xFF955F	$analogue_mono_in_right_copy_op.next
        FFFFFF 

0xFF9560	$analogue_mono_in_right_copy_op.func
        006617 

0xFF9561	$analogue_mono_in_right_copy_op.param
        000002 000002 000008 

0xFF9564	$codec_in_copy_op.next
0xFF9564	$codec_in_copy_op
        FFFFFF 

0xFF9565	$codec_in_copy_op.func
        00660E 

0xFF9566	$codec_in_copy_op.param
        000000 000001 

0xFF9568	$music_example.CurMode
0xFF9568	$music_example.Statistics
        000000 

0xFF9569	$music_example.PeakMipsFunc
        000000 

0xFF956A	$music_example.PeakMipsDecoder
        000000 

0xFF956B	$music_example.SamplingRate
        000000 

0xFF956C	$M.music_example_message.set_mode_message_struc
        000000 000000 000000 000000 

0xFF9570	$M.music_example_message.aux_volume_message_struc
        000000 000000 000000 000000 

0xFF9574	$M.music_example_message.load_params_message_struc
        000000 000000 000000 000000 

0xFF9578	$M.music_example_message.set_i2s_mode_message_struc
        000000 000000 000000 000000 

0xFF957C	$M.music_example_message.multi_channel_main_mute_message_struc
        000000 000000 000000 000000 

0xFF9580	$M.music_example_message.signal_detect_message_struct
        000000 000000 000000 000000 

0xFF9584	$M.music_example_message.set_user_eq_param_message_struct
        000000 000000 000000 000000 

0xFF9588	$M.music_example_message.set_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0xFF958C	$M.system_config.data.passthru_primary_left
        006410 000000 0063F4 0063F5 

0xFF9590	$M.system_config.data.passthru_sub
        006410 000000 006400 006401 

0xFF9594	$M.system_config.data.passthru_secondary_right
        FF93E5 000000 0063FA 0063FB 

0xFF9598	$M.system_config.data.right_headroom_obj
        FF93E5 FF93E5 006654 006653 

0xFF959C	$M.system_config.data.mode_table
        003BCD 003BCD 000F76 000000 

0xFF95A0	$bdaddr_message_struc
        000000 000000 000000 000000 

0xFF95A4	$wall_clock_message_struc
        000000 000000 000000 000000 

0xFF95A8	$wall_clock_timer_struc
        000000 000000 000000 000000 

0xFF95AC	$bass_timer_struc
        000000 000000 000000 000000 

0xFF95B0	$M.configure_latency_reporting.message_struct
        000000 000000 000000 000000 

0xFF95B4	$tone_copy_timer_struc
        000000 000000 000000 000000 

0xFF95B8	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0xFF95BC	$M.message.send_ready_wait_for_go.go_from_vm_message_struc
        000000 000000 000000 000000 

0xFF95C0	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0xFF95C4	$wall_clock.message_struc
        000000 000000 000000 000000 

0xFF95C8	$sbcdec.convert_mono_message_struc
        000000 000000 000000 000000 

0xFF95CC	$codec_in_cbuffer_struc
        001000 001000 001000 

0xFF95CF	$audio_out_right_cbuffer_struc
        0005DC FF8000 FF8000 

0xFF95D2	$codec_resamp_out_right_cbuffer_struc
        000334 005400 005400 

0xFF95D5	$codec_rate_adj_out_right_cbuffer_struc
        000334 005800 005800 

0xFF95D8	$M.music_example_spi.version_message_struc
        000000 000000 000000 

0xFF95DB	$M.music_example_spi.parameter_message_struc
        000000 000000 000000 

0xFF95DE	$M.music_example_message.ps_key_struc
        000000 000000 000000 

0xFF95E1	$M.calc_actual_samples.state_tab
        00205E 002065 00207A 

0xFF95E4	$M.system_config.data.delay_buf_pri_left_cbuffer_struc
        000BCD FF4000 FF4000 

0xFF95E7	$M.system_config.data.delay_buf_sec_left_cbuffer_struc
        000BCD 002000 002000 

0xFF95EA	$M.system_config.data.delay_buf_aux_left_cbuffer_struc
        000BCD 003000 003000 

0xFF95ED	$sub_codec_out_cbuffer_struc
        000032 FF3740 FF3740 

0xFF95F0	$output_buffers
        FF95F3 00007E 000000 

0xFF95F3	$multi_chan_primary_left_out_cbuffer_struc
        000360 000400 000400 

0xFF95F6	$multi_chan_secondary_left_out_cbuffer_struc
        000360 FF4C00 FF4C00 

0xFF95F9	$multi_chan_aux_left_out_cbuffer_struc
        000360 FF5C00 FF5C00 

0xFF95FC	$multi_chan_sub_out_cbuffer_struc
        000708 000800 000800 

0xFF95FF	$tone_in_right_cbuffer_struc
        000100 FF3F00 FF3F00 

0xFF9602	$tone_in_right_resample_cbuffer_struc
        000600 FF3800 FF3800 

0xFF9605	$tone0_in_right_resample_cbuffer_struc
        000600 FF3800 FF3800 

0xFF9608	$tone1_in_right_resample_cbuffer_struc
        000600 FF3800 FF3800 

0xFF960B	$tone2_in_right_resample_cbuffer_struc
        000600 FF3800 FF3800 

0xFF960E	$cbops.dc_remove
        001474 000000 001101 

0xFF9611	$M.cbops.dither_and_shift.main.dither_func
        000B01 000B0E 000B1D 

0xFF9614	$cbops.rate_adjustment_and_shift
        000000 0013C7 000044 

0xFF9617	$cbops_iir_resamplev2
        000000 000FD8 000C56 

0xFF961A	$cbops.signal_detect_op
        000000 000000 0023CC 

0xFF961D	$cbops.switch_op
        001467 001469 00146B 

0xFF9620	$cbops.fir_resample
        000000 000FFD 000888 

0xFF9623	$M.audio_proc.delay.process.read_byte_pos_func
        000846 00084C 000852 

0xFF9626	$M.system_config.data.primout_l_pk_dtct
        00641D 000000 

0xFF9628	$M.system_config.data.sub_pk_dtct
        006444 000000 

0xFF962A	$M.system_config.data.scndout_r_pk_dtct
        FF93FF 000000 

0xFF962C	$M.system_config.data.auxout_r_pk_dtct
        FF940C 000000 

0xFF962E	$M.multi_chan_output.chain0_pcm_latency_input_struct
        0064D6 000000 

0xFF9630	$cbuffer.tmp
        000000 000000 

0xFF9632	$current_codec_sampling_rate
        000000 

0xFF9633	$aux_input_stream_available
        000000 

0xFF9634	$long_term_mismatch
        000000 

0xFF9635	$inv_dac_fs
        14D555 

0xFF9636	$latency_calc_current_warp
        FF9336 

0xFF9637	$codec_type
        FFFFFF 

0xFF9638	$tmr_period_con_copy
        000000 

0xFF9639	$rate_match_disable
        000000 

0xFF963A	$reset_count1
        000000 

0xFF963B	$M.jitter_buffering.is_buffering
        000001 

0xFF963C	$M.av_audio_out_silence_insert.right_zero_samples
        000000 

0xFF963D	$music_example.Version
        000001 

0xFF963E	$music_example.reinit
        000001 

0xFF963F	$music_example.frame_processing_size
        000168 

0xFF9640	$music_example.Aux.MasterVolume
        000000 

0xFF9641	$music_example.Aux.LeftTrimVolume
        000000 

0xFF9642	$music_example.Main.MasterVolume
        000000 

0xFF9643	$music_example.Main.PrimaryLeftTrimVolume
        000000 

0xFF9644	$music_example.Main.SecondaryLeftTrimVolume
        000000 

0xFF9645	$music_example.Main.SubTrimVolume
        000000 

0xFF9646	$music_example.SPDIF_IF_Connections
        000000 

0xFF9647	$music_example.OTA_IF_Connections
        000000 

0xFF9648	$M.Sleep.TotalTime
        000000 

0xFF9649	$M.Sleep.Mips
        000000 

0xFF964A	$aux_vol_msg_echo
        000000 

0xFF964B	$multichannel_vol_msg_echo
        000000 

0xFF964C	$M.music_example.LoadParams.paramoffset
        000000 

0xFF964D	$M.music_example.LoadParams.Last_PsKey
        000000 

0xFF964E	$tag_averaging_fraction
        200000 

0xFF964F	$sra_resamp_adjust_frac
        000000 

0xFF9650	$usb_pause_period_count
        000000 

0xFF9651	$usb_pause_silence_insertion_time
        00C49C 

0xFF9652	$debug_usb_pause_count
        000000 

0xFF9653	$M.system_config.data.HalfValue
        400000 

0xFF9654	$M.system_config.data.SpkrEqParams
        004601 

0xFF9655	$M.system_config.data.uses_aux_out
        000000 

0xFF9656	$M.system_config.data.uses_wired_sub
        000000 

0xFF9657	$cmpd_subwoofer_gain
        000000 

0xFF9658	$M.system_config.data.dithertype
        000000 

0xFF9659	$DAC_conn_aux
        000000 

0xFF965A	$sub_link_port
        000000 

0xFF965B	$wall_clock_msw
        000000 

0xFF965C	$wall_clock_time
        000000 

0xFF965D	$sco_param_clock_msw
        000000 

0xFF965E	$sco_param_to_air_size
        000000 

0xFF965F	$sco_param_to_air_time
        000000 

0xFF9660	$sco_timer_id
        000000 

0xFF9661	$subwoofer_temp
        000000 

0xFF9662	$subwoofer_trim_buffers_flag
        000000 

0xFF9663	$M.Subwoofer.sco_schedule_to_air_flag
        000000 

0xFF9664	$min_port_space
        0003E8 

0xFF9665	$max_late_write
        000000 

0xFF9666	$min_early_write
        FFEC78 

0xFF9667	$M.downsample_sub_to_1k2.mute_direction
        000001 

0xFF9668	$M.downsample_sub_to_1k2.mute_index
        000000 

0xFF9669	$esco_write_deadline
        000000 

0xFF966A	$M.create_sub_packet.packet_counter
        000001 

0xFF966B	$subwoofer.sco_offset
        000000 

0xFF966C	$codec_packets_info_last_timer_time
        000000 

0xFF966D	$first_packet_received
        000000 

0xFF966E	$M.report_latency_to_vm.smoothing_factor_high
        4CCCCD 

0xFF966F	$M.report_latency_to_vm.latency_max
        000000 

0xFF9670	$M.configure_latency_reporting.enabled
        000000 

0xFF9671	$M.configure_latency_reporting.min_change
        000000 

0xFF9672	$M.multi_chan_output.num_chain0_channels
        000000 

0xFF9673	$M.multi_chan_output.chain0_enables
        000000 

0xFF9674	$M.multi_chan_output.chain0_anc_enable
        000000 

0xFF9675	$M.multi_chan_output.chain1_tone_mix_en
        000000 

0xFF9676	$M.multi_chan_output.aux_tone_mix_ratio
        000000 

0xFF9677	$M.multi_chan_output.chain0_sync_port
        000000 

0xFF9678	$M.multi_chan_output.tone0_in_left_read_ptr
        000000 

0xFF9679	$M.multi_chan_output.tone2_in_left_read_ptr
        000000 

0xFF967A	$M.multi_chan_output.tone1_in_right_read_ptr
        000000 

0xFF967B	$M.multi_chan_output.channels_mute_en
        000000 

0xFF967C	$M.multi_chan_output.chain1_mute_en
        000000 

0xFF967D	$chain1_hw_warp_enable
        000000 

0xFF967E	$M.multi_chan_port_scan_and_routing_config.fp_config_input
        000000 

0xFF967F	$stereo_tone
        000000 

0xFF9680	$no_tone_timer
        000000 

0xFF9681	$cbuffer.write_port_disconnect_address
        000000 

0xFF9682	$cbuffer.read_port_disconnect_address
        000000 

0xFF9683	$error.handler
        000000 

0xFF9684	$interrupt.block_count
        000000 

0xFF9685	$message.last_addr
        FFFFFF 

0xFF9686	$message.queue_write_ptr
        000000 

0xFF9687	$message.long_message_size
        000000 

0xFF9688	$pskey.request_in_progress
        000000 

0xFF9689	$timer.id
        000001 

0xFF968A	$wall_clock.last_addr
        FFFFFF 

0xFF968B	$cbops.amount_to_use
        000000 

0xFF968C	$M.cbops.av_copy.control_port
        000000 

0xFF968D	$M.cbops.dac_av_copy.buffer_level
        000000 

0xFF968E	$M.cbops.dither_and_shift.main.rand_num
        005555 

0xFF968F	$M.cbops.rate_adjustment_and_shift.main.dither_function
        000000 

0xFF9690	$M.cbops.iir_resamplev2.amount_used
        000000 

0xFF9691	$M.cbops.fir_resample.amount_used
        000000 

0xFF9692	$master_reset_needed
        000001 

0xFF9693	$M.frame_sync.handlers.LOOP_COUNT
        000000 

0xFF9694	$M.cmpd100.analysis.MusicComp_Peak_log
        000000 

0xFF9695	$M.cmpd100.analysis.inst_gain
        000000 

0xFF9696	$M.cmpd100.applygain.old_lin_gain
        000000 

0xFF9697	$M.spi_comm.last_addr
        FFFFFF 


------------------------------------------------------------------------
Region: flash.data16
------------------------------------------------------------------------
0xD00000	$M.system_config.data.DefaultParameters
        000017 00F000 000000 000000 
        000000 00000D 000000 006000 
        000000 000016 00A000 00000D 
        000000 00C000 000000 000016 
        00A000 00000D 000001 007700 
        000000 000016 00A000 00000D 
        000002 00EE00 000000 000016 
        00A000 00000D 000005 00DC00 
        000000 000016 00A000 00000D 
        00000B 00B800 000000 000016 
        00A000 00000D 000017 007000 
        000000 000016 00A000 00000D 
        00002E 00E000 000000 000016 
        00A000 00000D 00005D 00C000 
        000000 000016 00A000 00000D 
        0000BB 008000 000000 000016 
        00A000 000001 000000 000000 
        00000A 000004 00B000 000000 
        00000B 005000 000006 000000 
        000000 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000000 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000000 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000000 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000000 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000000 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000000 000000 
        000000 000D00 000060 000000 
        000000 0016A0 000000 000D00 
        0000C0 000000 000000 0016A0 
        000000 000D00 000177 000000 
        000000 0016A0 000000 000000 
        00000F 000000 000FB1 00AA81 
        00571F 003EC3 00ECED 004000 
        000084 00DA2F 003B31 009440 
        000000 00D53F 00A4FE 00A000 
        004000 000081 00543A 003EB7 
        00E040 000000 00BB3B 004C24 
        00BC7F 000000 000200 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000005 000000 000000 000008 
        000001 006800 000000 000009 
        00E300 000008 000001 006800 
        000000 000008 000000 000008 
        000001 006800 000000 000019 
        00E300 000008 000001 006800 
        000000 000009 00E300 000008 
        000001 006800 000000 000019 
        00E300 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000002 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000200 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000006 000000 000000 
        000007 000001 006800 000000 
        000008 004800 000007 000001 
        006800 000000 00000B 005000 
        000007 000001 006800 000000 
        00001E 00E800 000007 000001 
        006800 000000 000008 004800 
        000007 000001 006800 000000 
        00000B 005000 000007 000001 
        006800 000000 00001E 00E820 
        000000 000000 000000 000000 
        000000 000020 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000020 
        000000 000000 000010 0009B9 
        000000 000020 000000 001009 
        00B900 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000010 0009B9 001009 
        00B920 000000 002000 0000F9 
        00B037 00FA05 0042FE 0056CC 
        00FF80 007110 000000 000800 
        000001 005555 0000CC 00CC40 
        0028FD 0002EF 001840 0028FD 
        0000E3 002960 0028F0 000097 
        009D7C 000CBE 000071 00C708 
        000000 00F9B0 0037FA 000542 
        00FE56 00CCFF 008071 001000 
        000008 000000 000155 005500 
        00CCCC 004028 00FD02 00EF18 
        004028 00FD00 00E329 006028 
        00F000 00979D 007C0C 00BE00 
        0071C7 000800 000000 000A5D 
        000002 005800 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000003 00E000 
        0003E0 000003 00E000 0003E0 
        000003 00E000 0003E0 000003 
        00E000 0003E0 000003 00E000 
        0003E0 000000 000000 


------------------------------------------------------------------------
Region: flash.windowed_data16
------------------------------------------------------------------------
0x000000	$sbcdec.synthesis_coefs_m8
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 005A82 007AA5 
        007D86 00A57D 00865A 00827A 
        00471C 00ED82 0075A1 0018F8 
        00B86A 006D99 009592 0067E7 
        000748 007D8A 005FB8 00E313 
        0030FB 00C589 00BE51 007641 
        00AFCF 00043B 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        0018F8 00B8B8 00E313 006A6D 
        009982 0075A1 007D8A 005F95 
        009267 00471C 00EDE7 000748 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        00E707 004847 001CED 009592 
        00677D 008A5F 008275 00A16A 
        006D99 00B8E3 001318 00F8B8 
        00CF04 003B76 0041AF 0089BE 
        005130 00FBC5 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        00B8E3 00137D 008A5F 00E707 
        004895 009267 006A6D 009918 
        00F8B8 008275 00A147 001CED 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 00A57D 00865A 
        00827A 005A82 007AA5 007D86 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        008000 000080 000000 008000 
        000080 000000 008000 000080 
        000000 008000 000080 000000 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 

0x0000C0	$sbc.win_coefs_m8
        000000 000000 001486 00002C 
        00FE00 0048B2 00006B 00FE00 
        00956A 0000C1 008400 00E9CC 
        000107 00B201 0013BD 000105 
        006E00 00D3E3 000076 003FFF 
        00E890 00FF27 00C4FE 00359E 
        0002E5 00CD04 001C6E 00055A 
        00CF06 0086CE 000780 008908 
        0024A4 00084E 001907 00D7D1 
        00069F 00B404 0088FB 00017F 
        0044FD 007BAE 00F881 000DF2 
        00A1BA 00EBFE 0058E4 00C4A2 
        0022D0 00C22A 007CFA 0031F5 
        006738 00EEC6 003F1C 008844 
        003B3C 004810 00D84A 00708A 
        004B3D 00B24A 00708A 004810 
        00D844 003B3C 003F1C 008838 
        00EEC6 0031F5 00672A 007CFA 
        00DD2F 003EE4 00C4A2 00EBFE 
        0058F2 00A1BA 00F881 000DFD 
        007BAE 00017F 004404 0088FB 
        00069F 00B407 00D7D1 00084E 
        001908 0024A4 000780 008906 
        0086CE 00055A 00CF04 001C6E 
        00FD1A 0033FE 00359E 00FF27 
        00C4FF 00E890 000076 003F00 
        00D3E3 000105 006E01 0013BD 
        000107 00B200 00E9CC 0000C1 
        008400 00956A 00006B 00FE00 
        0048B2 00002C 00FE00 001486 

0x000138	$sbc.win_coefs_m4
        000000 000000 00232A 000061 
        00C600 00B328 0000FB 007A00 
        00FF12 00007A 0047FF 003774 
        0002CB 003F05 003B75 000764 
        006708 003DDD 00069F 00DC01 
        0091E5 00F89F 0024EC 001F5E 
        0022B6 003E31 00EAB9 003F23 
        009548 0025E5 004B58 004048 
        0025E5 003F23 009531 00EAB9 
        00DD49 00C2EC 001F5E 00F89F 
        002401 0091E5 00069F 00DC08 
        003DDD 000764 006705 003B75 
        00FD34 00C1FF 003774 00007A 
        004700 00FF12 0000FB 007A00 
        00B328 000061 00C600 00232A 

0x000174	$sbcdec.synthesis_coefs_m4
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        000000 000000 000000 000000 
        000000 000000 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 
        008000 000080 000000 008000 
        000080 000000 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 

0x0001A4	$sbc.loudness_offset
0x0001A4	$sbc.loudness_offset_m4
        FFFFFF 000000 000000 000000 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 

0x0001B4	$sbc.loudness_offset_m8
        FFFFFE 000000 000000 000000 
        000000 000000 000000 000001 
        FFFFFD 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 

0x0001D4	$sbcdec.bitmask_lookup
        000000 000000 000001 000000 
        000300 000007 000000 000F00 
        00001F 000000 003F00 00007F 
        000000 00FF00 0001FF 000003 
        00FF00 0007FF 00000F 00FF00 
        001FFF 00003F 00FF00 007FFF 
        0000FF 00FF00 

0x0001EE	$sbcdec.levelrecip_coefs
        00AAAA 00AB92 004925 008888 
        008984 002108 008208 002181 
        000204 008080 008180 004020 
        008020 000880 001002 008008 
        000180 000400 008002 000080 
        000100 008000 008000 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 26264 of 32768 words used, 6504 words available in 1 blocks
  DM2_REGION: 26264 of 32768 words used, 6504 words available in 1 blocks
  flash.data16: 719 of 1048576 words used, 1047857 words available in 1 blocks
  flash.windowed_data16: 517 of 16777216 words used, 16776699 words available in 1 blocks
TOTAL: 53764 of 17891328 words used, 17837564 words available in 4 blocks

CODE:
  PM_REGION: 9830 of 11264 words used, 1434 words available in 1 blocks
  flash.code: 1740 of 16764928 words used, 16763188 words available in 1 blocks
TOTAL: 11570 of 16776192 words used, 16764622 words available in 2 blocks

