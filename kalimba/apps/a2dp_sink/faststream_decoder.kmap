
========================================================================
disasm
========================================================================

------------------------------------------------------------------------
Region: PM_REGION
------------------------------------------------------------------------

 <$reset>
0x000000        03000000                 Null = Null + Null;
0x000001        DDF00044                 jump $pre_main;

 <$interrupt.handler>
0x000002        F100001C                 pushm <r0, r1, r2>;
0x000003        0920FE4D                 r0 = Null + M[0xfffe4d];
0x000004        F3200000                 push r0;
0x000005        1900FE4D                 M[0xfffe4d] = Null + Null;
0x000006        0920FE93                 r0 = Null + M[0xfffe93];
0x000007        F3200000                 push r0;
0x000008        1900FE93                 M[0xfffe93] = Null + Null;
0x000009        0920FE71                 r0 = Null + M[0xfffe71];
0x00000A        1920004A                 M[$interrupt.start_time] = r0 + Null;
0x00000B        81EEFFBF                 rFlags = rFlags AND 0xffbf;
0x00000C        1900FE12                 M[0xfffe12] = Null + Null;
0x00000D        0930FE19                 r1 = Null + M[0xfffe19];
0x00000E        0940FE44                 r2 = Null + M[0xfffe44];
0x00000F        F1007FF8                 pushm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000010        F101FFFF                 pushm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000011        F1023FFF                 pushm <rMAC2, rMAC1, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB1, rMACB0, B0, B1, B4, B5>;
0x000012        1900FE17                 M[0xfffe17] = Null + Null;
0x000013        51C00000                 L0 = Null + 0;
0x000014        51D00000                 L1 = Null + 0;
0x000015        51E00000                 L4 = Null + 0;
0x000016        51F00000                 L5 = Null + 0;
0x000017        F3000000                 push Null;
0x000018        F1DAFFFF                 B5 = M[SP + -0x1];
0x000019        F1CAFFFF                 B4 = M[SP + -0x1];
0x00001A        F1BAFFFF                 B1 = M[SP + -0x1];
0x00001B        F3A60000                 pop B0;
0x00001C        0940FE18                 r2 = Null + M[0xfffe18];
0x00001D        FD0000FF D154589D        r3 = M[r2 + -42851];
0x00001F        01E00080                 rFlags = Null + 128;
0x000020        E420002F                 r0 = Null + 1;
0x000021        09002A56                 Null = Null + M[$interrupt.block_count];
0x000022        00200001                 if NE r0 = Null + Null;
0x000023        1920FE12                 M[0xfffe12] = r0 + Null;
0x000024        E005000F                 call r3;
0x000025        01E00000                 rFlags = Null + 0;
0x000026        F1063FFF                 popm <rMAC2, rMAC12, rMAC0, DoLoopStart, DoLoopEnd, DivResult, DivRemainder, rMACB2, rMACB12, rMACB0, B0, B1, B4, B5>;
0x000027        F105FFFF                 popm <I0, I1, I2, I3, I4, I5, I6, I7, M0, M1, M2, M3, L0, L1, L4, L5>;
0x000028        F1047FF8                 popm <r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, rLink, rFlags>;
0x000029        1940FE44                 M[0xfffe44] = r2 + Null;
0x00002A        85334000                 r1 = r1 OR 0x4000;
0x00002B        1930FE16                 M[0xfffe16] = r1 + Null;
0x00002C        FD0000FF 09305A56        r1 = Null + M[$interrupt.total_time];
0x00002E        2933004A                 r1 = r1 - M[$interrupt.start_time];
0x00002F        0933FE71                 r1 = r1 + M[0xfffe71];
0x000030        FD0000FF 19305A56        M[$interrupt.total_time] = r1 + Null;
0x000032        F104000C                 popm <r0, r1>;
0x000033        1930FE93                 M[0xfffe93] = r1 + Null;
0x000034        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x000035        F104001C                 popm <r0, r1, r2>;
0x000036        DC0E000F                 rti;

 <$flash.init_pm>
0x000037        0920282E                 r0 = Null + M[$flash.code.address];
0x000038        1920FE83                 M[0xfffe83] = r0 + Null;
0x000039        FD000004 85200000        r0 = Null OR 0x40000;
0x00003B        1920FE84                 M[0xfffe84] = r0 + Null;
0x00003C        DC0D000F                 rts;

 <$flash.init_dmconst>
0x00003D        09202836                 r0 = Null + M[$flash.data24.address];
0x00003E        1920FE5C                 M[0xfffe5c] = r0 + Null;
0x00003F        01200002                 r0 = Null + 2;
0x000040        1920FE62                 M[0xfffe62] = r0 + Null;
0x000041        09202832                 r0 = Null + M[$flash.data16.address];
0x000042        1920FE5B                 M[0xfffe5b] = r0 + Null;
0x000043        1900FE61                 M[0xfffe61] = Null + Null;
0x000044        DC0D000F                 rts;

 <$pre_main>
0x000045        E1F0FFF2                 call $flash.init_pm;
0x000046        DDF031BF                 jump $main;

 <$cbops.rate_adjustment_and_shift.main>
0x000047        F3D00000                 push rLink;
0x000048        F1F00001                 pushm <FP(=SP)>, SP = SP + 0xf;
0x000049        F1070001                 FP = FP + 1;
0x00004A        D14A0000                 r2 = M[r8 + 0];
0x00004B        D058004F                 r3 = M[r6 + r2];
0x00004C        5040005F                 I4 = Null + r3;
0x00004D        D069004F                 r4 = M[r7 + r2];
0x00004E        50E0006F                 L4 = Null + r4;
0x00004F        D14A0001                 r2 = M[r8 + 1];
0x000050        D058004F                 r3 = M[r6 + r2];
0x000051        5050005F                 I5 = Null + r3;
0x000052        D069004F                 r4 = M[r7 + r2];
0x000053        50F0006F                 L5 = Null + r4;
0x000054        D14A0002                 r2 = M[r8 + 2];
0x000055        F14C0000                 M[FP + 0] = r2;
0x000056        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_right_channel;
0x000057        D058004F                 r3 = M[r6 + r2];
0x000058        F15C0001                 M[FP + 0x1] = r3;
0x000059        D069004F                 r4 = M[r7 + r2];
0x00005A        F16C0002                 M[FP + 0x2] = r4;
0x00005B        D14A0003                 r2 = M[r8 + 3];
0x00005C        D058004F                 r3 = M[r6 + r2];
0x00005D        F15C0004                 M[FP + 0x4] = r3;
0x00005E        D069004F                 r4 = M[r7 + r2];
0x00005F        F16C0005                 M[FP + 0x5] = r4;

 <$M.cbops.rate_adjustment_and_shift.main.no_right_channel>
0x000060        D19A0004                 r7 = M[r8 + 4];
0x000061        F19C0007                 M[FP + 0x7] = r7;
0x000062        D12A0006                 r0 = M[r8 + 6];
0x000063        5000002F                 I0 = Null + r0;
0x000064        0120000C                 r0 = Null + 12;
0x000065        D13A000B                 r1 = M[r8 + 11];
0x000066        00320000                 if EQ r1 = r0 + Null;
0x000067        50C0003F                 L0 = Null + r1;
0x000068        50D0003F                 L1 = Null + r1;
0x000069        D12A0005                 r0 = M[r8 + 5];
0x00006A        99330015                 r1 = r1 * 21 (int);
0x00006B        8D33007F                 r1 = r1 LSHIFT -1;
0x00006C        5032003F                 I3 = r0 + r1;
0x00006D        D12A0008                 r0 = M[r8 + 8];
0x00006E        D062000F                 r4 = M[r0 + Null];
0x00006F        D17A000C                 r5 = M[r8 + 12];
0x000070        E430002F                 r1 = Null + 1;
0x000071        2027006F                 r0 = r5 - r4;
0x000072        20200024                 if NEG r0 = Null - r0;
0x000073        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x000075        21023127                 Null = r0 - 12583;
0x000076        00430004                 if NEG r2 = r1 + Null;
0x000077        21340026                 r1 = r2 - 38;
0x000078        20440035                 if POS r2 = r2 - r1;
0x000079        2037006F                 r1 = r5 - r4;
0x00007A        2023004F                 r0 = r1 - r2;
0x00007B        20330025                 if POS r1 = r1 - r0;
0x00007C        0023004F                 r0 = r1 + r2;
0x00007D        20330024                 if NEG r1 = r1 - r0;
0x00007E        23730000                 r5 = r5 - r1;
0x00007F        D57A000C                 M[r8 + 12] = r5;
0x000080        01300189                 r1 = Null + 393;
0x000081        0140019B                 r2 = Null + 411;
0x000082        01500000                 r3 = Null + 0;
0x000083        D12A0009                 r0 = M[r8 + 9];
0x000084        E402003F                 Null = r0 - 1;
0x000085        00530000                 if EQ r3 = r1 + Null;
0x000086        21020002                 Null = r0 - 2;
0x000087        00540000                 if EQ r3 = r2 + Null;
0x000088        4420004F                 r0 = Null + I4;
0x000089        FD0000FF 8122FF80        r0 = r0 AND 0xffff80;
0x00008B        21020F80                 Null = r0 - 3968;
0x00008C        00500000                 if EQ r3 = Null + Null;
0x00008D        19502A61                 M[$M.cbops.rate_adjustment_and_shift.main.dither_function] = r3 + Null;
0x00008E        F1CC000C                 M[FP + 0xc] = r10;
0x00008F        FD0000FF 19C05A60        M[$M.cbops.rate_adjustment_and_shift.amount_used] = r10 + Null;
0x000091        D5CA0012                 M[r8 + 18] = r10;
0x000092        F10C000D                 M[FP + 0xd] = Null;
0x000093        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop>
0x000094        09202A61                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x000095        E11000DD                 if NE call $M.cbops.rate_adjustment_and_shift.main.dither_preset;
0x000096        E1F0002B                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x000097        509000CF                 M1 = Null + r10;
0x000098        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x000099        F138000D                 r1 = M[FP + 0xd];
0x00009A        005A003F                 r3 = r8 + r1;
0x00009B        4430000F                 r1 = Null + I0;
0x00009C        D5350006                 M[r3 + 6] = r1;
0x00009D        09202A61                 r0 = Null + M[$M.cbops.rate_adjustment_and_shift.main.dither_function];
0x00009E        E11000DC                 if NE call $M.cbops.rate_adjustment_and_shift.main.run_dither_function;
0x00009F        F138000D                 r1 = M[FP + 0xd];
0x0000A0        DD100010                 if NE jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0000A1        F1380000                 r1 = M[FP + 0];
0x0000A2        DD40000E                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.finished;
0x0000A3        D13A0007                 r1 = M[r8 + 7];
0x0000A4        5000003F                 I0 = Null + r1;
0x0000A5        F1380001                 r1 = M[FP + 0x1];
0x0000A6        5040003F                 I4 = Null + r1;
0x0000A7        F1380002                 r1 = M[FP + 0x2];
0x0000A8        50E0003F                 L4 = Null + r1;
0x0000A9        F1380004                 r1 = M[FP + 0x4];
0x0000AA        5050003F                 I5 = Null + r1;
0x0000AB        F1380005                 r1 = M[FP + 0x5];
0x0000AC        50F0003F                 L5 = Null + r1;
0x0000AD        E430002F                 r1 = Null + 1;
0x0000AE        F13C000D                 M[FP + 0xd] = r1;
0x0000AF        DDF0FFE5                 jump $M.cbops.rate_adjustment_and_shift.main.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.main.finished>
0x0000B0        D56A000D                 M[r8 + 13] = r4;
0x0000B1        6420009F                 r0 = Null - M1;
0x0000B2        D52A000E                 M[r8 + 14] = r0;
0x0000B3        51F00000                 L5 = Null + 0;
0x0000B4        51E00000                 L4 = Null + 0;
0x0000B5        51C00000                 L0 = Null + 0;
0x0000B6        51D00000                 L1 = Null + 0;
0x0000B7        4420007F                 r0 = Null + I7;
0x0000B8        FD0000FF 19205A5D        M[$cbops.amount_written] = r0 + Null;
0x0000BA        09402A5D                 r2 = Null + M[$cbops.amount_to_use];
0x0000BB        D13AFFFE                 r1 = M[r8 + -2];
0x0000BC        E403002F                 Null = r1 + 1;
0x0000BD        00420001                 if NE r2 = r0 + Null;
0x0000BE        19402A5D                 M[$cbops.amount_to_use] = r2 + Null;
0x0000BF        F1F64000                 SP = SP - 0xf, popm <FP>;
0x0000C0        DDF0112B                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.main.sra_resample>
0x0000C1        D17A000C                 r5 = M[r8 + 12];
0x0000C2        F1670008                 r4 = FP + 8;
0x0000C3        5020006F                 I2 = Null + r4;
0x0000C4        D16A000D                 r4 = M[r8 + 13];
0x0000C5        01800015                 r6 = Null + 21;
0x0000C6        70A0008F                 M2 = Null - r6;
0x0000C7        5080008F                 M0 = Null + r6;
0x0000C8        CC16008F                 rMAC = r4 * r6 (SS);
0x0000C9        F1C8000C                 r10 = M[FP + 0xc];
0x0000CA        51700000                 I7 = Null + 0;
0x0000CB        D12A000E                 r0 = M[r8 + 14];
0x0000CC        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.start_gen;
0x0000CD        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0000CE        67CBB100                 r10 = r10 - M3, M[I0,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.start_gen>
0x0000CF        690C0024                 Null = L0 - 36;
0x0000D0        DD00003F                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop;
0x0000D1        690C0001                 Null = L0 - 1;
0x0000D2        DD000096                 if EQ jump $M.cbops.rate_adjustment_and_shift.main.run_interp_only_loop;
0x0000D3        E5F00039                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x0000D4        8D510018                 r3 = rMAC LSHIFT 24;
0x0000D5        8D55007F                 r3 = r3 LSHIFT -1;
0x0000D6        8D410000                 r2 = rMAC LSHIFT 0;
0x0000D7        5863004F                 I6 = I3 + r2;
0x0000D8        6524FFEA                 r0 = -22 - r2;
0x0000D9        7092004F                 M1 = r0 - r2;
0x0000DA        5810000F                 I1 = I0 + Null;
0x0000DB        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DC        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DD        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DE        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000DF        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000E0        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000E1        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E2        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E3        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E4        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E5        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E6        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000E7        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x0000E8        79990002                 M1 = M1 - 2;
0x0000E9        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x0000EA        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load;
0x0000EB        71980001                 M1 = r6 - 1;
0x0000EC        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load>
0x0000ED        5863004F                 I6 = I3 + r2;
0x0000EE        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x0000EF        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F0        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F1        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F2        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0000F3        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0000F4        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F5        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F6        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F7        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F8        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000F9        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0000FA        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];

 <$M.cbops.rate_adjustment_and_shift.main.continue_resample_proc>
0x0000FB        CF150051                 rMAC = rMAC * r3 (SS), r3 = M[I4,1];
0x0000FC        FD00007F BD13FFFF        rMAC = rMAC - r1 * 0.99999988079071045 (SS);
0x0000FE        00312B0F                 r1 = rMAC + Null, r0 = M[I2,M3];
0x0000FF        93320000                 r1 = r1 ASHIFT r0;

 <$M.cbops.rate_adjustment_and_shift.main.update_ratio>
0x000100        226700B7                 r4 = r4 - r5, M[I5,M3] = r1;
0x000101        DD40000A                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;
0x000102        FD000080 01660000        r4 = r4 + -8388608;
0x000104        0007000F                 Null = r5 + Null;
0x000105        DD400004                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.is_neg_rate;

 <$M.cbops.rate_adjustment_and_shift.main.is_pos_rate>
0x000106        03005353                 Null = Null + Null, r3 = M[I0,-1], r3 = M[I4,-1];
0x000107        47CB5000                 r10 = r10 + M3, r3 = M[I0,0];
0x000108        DDF00003                 jump $M.cbops.rate_adjustment_and_shift.main.no_extra_copy;

 <$M.cbops.rate_adjustment_and_shift.main.is_neg_rate>
0x000109        66CBD353                 r10 = r10 - M3, M[I0,M3] = r3, r3 = M[I4,M3];
0x00010A        DDD00003                 if LE jump $M.cbops.rate_adjustment_and_shift.main.end_rts;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_copy>
0x00010B        CC16D38F                 rMAC = r4 * r6 (SS), M[I0,M3] = r3;

 <$M.cbops.rate_adjustment_and_shift.main.sra_gen_loop>
0x00010C        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.end_rts>
0x00010D        66CBD300                 r10 = r10 - M3, M[I0,M3] = r3;
0x00010E        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_high_quality_gen_loop>
0x00010F        E5F0FFFD                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x000110        8D510018                 r3 = rMAC LSHIFT 24;
0x000111        8D55007F                 r3 = r3 LSHIFT -1;
0x000112        8D410000                 r2 = rMAC LSHIFT 0;
0x000113        5863004F                 I6 = I3 + r2;
0x000114        6524FFEA                 r0 = -22 - r2;
0x000115        7092004F                 M1 = r0 - r2;
0x000116        5810000F                 I1 = I0 + Null;
0x000117        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x000118        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000119        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011A        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011B        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011C        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011E        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00011F        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000120        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000121        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000122        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000123        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000124        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000125        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000126        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000127        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000128        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000129        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012B        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012C        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012D        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012E        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00012F        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000130        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000131        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000132        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000133        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000134        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000135        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000136        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000137        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000138        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000139        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00013A        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00013B        BF230030                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I4,0];
0x00013C        79990002                 M1 = M1 - 2;
0x00013D        474B9800                 r2 = r2 + M3, M[I2,0] = rMAC;
0x00013E        DD400003                 if NEG jump $M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd;
0x00013F        71980001                 M1 = r6 - 1;
0x000140        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.no_extra_load_hd>
0x000141        5863004F                 I6 = I3 + r2;
0x000142        5E7B273A                 I7 = I7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x000143        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000144        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000145        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000146        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000147        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000148        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000149        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014A        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014B        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014C        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014D        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014E        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00014F        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000150        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000151        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000152        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000153        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000154        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000155        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000156        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000157        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000158        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000159        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015A        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015B        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015C        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015D        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015E        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00015F        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000160        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000161        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000162        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000163        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000164        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000165        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000166        AF233B00                 rMAC = rMAC + r0 * r1 (SS), r1 = M[I2,-1];
0x000167        DDF0FF94                 jump $M.cbops.rate_adjustment_and_shift.main.continue_resample_proc;

 <$M.cbops.rate_adjustment_and_shift.main.run_interp_only_loop>
0x000168        F1880007                 r6 = M[FP + 0x7];
0x000169        E5F0FFA3                 do $M.cbops.rate_adjustment_and_shift.main.sra_gen_loop;
0x00016A        5E7B0053                 I7 = I7 + M3, r3 = M[I4,M3];
0x00016B        CF563000                 rMAC = r3 * r4 (SS), r1 = M[I0,0];
0x00016C        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x00016D        FD00007F AD15FFFF        rMAC = rMAC + r3 * 0.99999988079071045 (SS);
0x00016F        0031000F                 r1 = rMAC + Null;
0x000170        93380000                 r1 = r1 ASHIFT r6;
0x000171        DDF0FF8F                 jump $M.cbops.rate_adjustment_and_shift.main.update_ratio;

 <$M.cbops.rate_adjustment_and_shift.main.dither_preset>
0x000172        4420005F                 r0 = Null + I5;
0x000173        F12C0009                 M[FP + 0x9] = r0;
0x000174        442000FF                 r0 = Null + L5;
0x000175        F12C000A                 M[FP + 0xa] = r0;
0x000176        51F00000                 L5 = Null + 0;
0x000177        51500F80                 I5 = Null + 3968;
0x000178        F10C0007                 M[FP + 0x7] = Null;
0x000179        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.main.run_dither_function>
0x00017A        FD0000FF 09405A61        r2 = Null + M[$M.cbops.rate_adjustment_and_shift.main.rand_num];
0x00017C        51200F80                 I2 = Null + 3968;
0x00017D        44C0007F                 r10 = Null + I7;
0x00017E        F1380009                 r1 = M[FP + 0x9];
0x00017F        5050003F                 I5 = Null + r1;
0x000180        F138000A                 r1 = M[FP + 0xa];
0x000181        50F0003F                 L5 = Null + r1;
0x000182        D19A0004                 r7 = M[r8 + 4];
0x000183        FD00007F 0170FFFF        r5 = Null + 8388607;
0x000185        6589FFE8                 r6 = -24 - r7;
0x000186        9087008F                 r6 = r5 ASHIFT r6;
0x000187        51A00011                 M2 = Null + 17;
0x000188        DC02000F                 jump r0;

 <$sra.tpdf_dither_func>
0x000189        01503555                 r3 = Null + 13653;
0x00018A        FD0000FF 516036F9        I6 = Null + -51463;
0x00018C        03001900                 Null = Null + Null, rMAC = M[I2,1];
0x00018D        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x00018E        E5F00009                 do $M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop;
0x00018F        9B450000                 r2 = r2 * r3 (int);
0x000190        474A0000                 r2 = r2 + M2;
0x000191        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x000192        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x000193        9B450098                 r2 = r2 * r3 (int), M[I6,0] = rMAC;
0x000194        474A0038                 r2 = r2 + M2, r1 = M[I6,0];
0x000195        93391900                 r1 = r1 ASHIFT r7, rMAC = M[I2,1];
0x000196        AF4800B5                 rMAC = rMAC + r2 * r6 (SS), M[I5,1] = r1;

 <$M.cbops.rate_adjustment_and_shift.main.tpdf_dither_loop>
0x000197        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x000198        FD0000FF 19405A61        M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x00019A        DC0D000F                 rts;

 <$sra.noiseshaped_dither_func>
0x00019B        F3600000                 push r4;
0x00019C        F168000D                 r4 = M[FP + 0xd];
0x00019D        002A006F                 r0 = r8 + r4;
0x00019E        FD0000FF 19803700        M[0xff3700] = r6 + Null;
0x0001A0        D1220010                 r0 = M[r0 + 16];
0x0001A1        511201B8                 I1 = r0 + 440;
0x0001A2        013201C0                 r1 = r0 + 448;
0x0001A3        0006000F                 Null = r4 + Null;
0x0001A4        50100031                 if NE I1 = Null + r1;
0x0001A5        51D00005                 L1 = Null + 5;
0x0001A6        FD0000FF 516036FA        I6 = Null + -51462;
0x0001A8        5180FFFA                 M0 = Null + -6;
0x0001A9        01603555                 r4 = Null + 13653;
0x0001AA        FD0000FF 198036F9        M[0xff36f9] = r6 + Null;
0x0001AC        95886000                 r6 = r6 * 0.75 (frac);
0x0001AD        E450003F                 r3 = Null - 1;
0x0001AE        2020009F                 r0 = Null - r7;
0x0001AF        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0001B0        E5F00011                 do $M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop;
0x0001B1        9B461929                 r2 = r2 * r4 (int), rMAC = M[I2,1], r0 = M[I6,1];
0x0001B2        474AB700                 r2 = r2 + M2, M[I1,-1] = r1;
0x0001B3        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B4        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B5        BF323729                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I6,1];
0x0001B6        BF323429                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I6,1];
0x0001B7        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x0001B8        AF480098                 rMAC = rMAC + r2 * r6 (SS), M[I6,0] = rMAC;
0x0001B9        9B460029                 r2 = r2 * r4 (int), r0 = M[I6,1];
0x0001BA        474A0000                 r2 = r2 + M2;
0x0001BB        AE480038                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I6,M0];
0x0001BC        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x0001BD        8031005F                 r1 = rMAC AND r3;
0x0001BE        90E3009F                 rMAC = r1 ASHIFT r7;
0x0001BF        23320095                 r1 = r1 - r0, M[I5,1] = rMAC;
0x0001C0        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.rate_adjustment_and_shift.main.shaped_dither_loop>
0x0001C1        FD0000FF 19405A61        M[$M.cbops.rate_adjustment_and_shift.main.rand_num] = r2 + Null;
0x0001C3        0300B400                 Null = Null + Null, M[I1,0] = r1;
0x0001C4        F168000D                 r4 = M[FP + 0xd];
0x0001C5        002A006F                 r0 = r8 + r4;
0x0001C6        4430001F                 r1 = Null + I1;
0x0001C7        81330007                 r1 = r1 AND 0x7;
0x0001C8        D5320010                 M[r0 + 16] = r1;
0x0001C9        58DC000F                 L1 = L0 + Null;
0x0001CA        F3640000                 pop r4;
0x0001CB        DC0D000F                 rts;

 <$spkr_ctrl_system.process>
0x0001CC        F3D00000                 push rLink;
0x0001CD        D1290009                 r0 = M[r7 + 9];
0x0001CE        D3200000                 r0 = M[r0 + Null];
0x0001CF        D139000A                 r1 = M[r7 + 10];
0x0001D0        8002003F                 Null = r0 AND r1;
0x0001D1        DD1000EC                 if NE jump $M.spkr_ctrl_system.processing.bypass;
0x0001D2        D1A9000B                 r8 = M[r7 + 11];
0x0001D3        D1290000                 r0 = M[r7 + 0];
0x0001D4        E1F0012F                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001D5        00C5000F                 r10 = r3 + Null;
0x0001D6        D1290008                 r0 = M[r7 + 8];
0x0001D7        5020002F                 I2 = Null + r0;
0x0001D8        D1290006                 r0 = M[r7 + 6];
0x0001D9        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.clearBassBuffer;
0x0001DA        E1F00129                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001DB        5000002F                 I0 = Null + r0;
0x0001DC        50C0003F                 L0 = Null + r1;
0x0001DD        E5F00003                 do $M.spkr_ctrl_system.processing.inputLFEcopyLoop;
0x0001DE        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0001DF        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.inputLFEcopyLoop>
0x0001E0        DDF00004                 jump $M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR;

 <$M.spkr_ctrl_system.processing.clearBassBuffer>
0x0001E1        01200000                 r0 = Null + 0;
0x0001E2        E5F00002                 do $M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR;
0x0001E3        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.bassChannelReadyForMixingLR>
0x0001E4        D1290000                 r0 = M[r7 + 0];
0x0001E5        E1F0011E                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001E6        5000002F                 I0 = Null + r0;
0x0001E7        50C0003F                 L0 = Null + r1;
0x0001E8        00C5000F                 r10 = r3 + Null;
0x0001E9        F3C00000                 push r10;
0x0001EA        D1290001                 r0 = M[r7 + 1];
0x0001EB        E1F00118                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0001EC        5040002F                 I4 = Null + r0;
0x0001ED        50E0003F                 L4 = Null + r1;
0x0001EE        D1290008                 r0 = M[r7 + 8];
0x0001EF        5020002F                 I2 = Null + r0;
0x0001F0        F3A00000                 push r8;
0x0001F1        D1AA0006                 r8 = M[r8 + 6];
0x0001F2        D15A000C                 r3 = M[r8 + 12];
0x0001F3        D16A000D                 r4 = M[r8 + 13];
0x0001F4        D17A000E                 r5 = M[r8 + 14];
0x0001F5        F3A40000                 pop r8;
0x0001F6        E5F00007                 do $M.spkr_ctrl_system.processing.createBassLoop;
0x0001F7        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0001F8        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x0001F9        AF262800                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,0];
0x0001FA        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x0001FB        91210002                 r0 = rMAC ASHIFT 2;
0x0001FC        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.spkr_ctrl_system.processing.createBassLoop>
0x0001FD        F3640000                 pop r4;
0x0001FE        D12A0005                 r0 = M[r8 + 5];
0x0001FF        DD00000A                 if EQ jump $M.spkr_ctrl_system.processing.dontFilterBass;
0x000200        F1000600                 pushm <r7, r8>;
0x000201        0092000F                 r7 = r0 + Null;
0x000202        D1290000                 r0 = M[r7 + 0];
0x000203        5000002F                 I0 = Null + r0;
0x000204        5040002F                 I4 = Null + r0;
0x000205        51C00000                 L0 = Null + 0;
0x000206        51E00000                 L4 = Null + 0;
0x000207        E1F007A0                 call $audio_proc.hq_peq.process_op;
0x000208        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontFilterBass>
0x000209        D1290002                 r0 = M[r7 + 2];
0x00020A        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftPriOutput;
0x00020B        D1290000                 r0 = M[r7 + 0];
0x00020C        E1F000F7                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00020D        5000002F                 I0 = Null + r0;
0x00020E        50C0003F                 L0 = Null + r1;
0x00020F        00C5000F                 r10 = r3 + Null;
0x000210        D1290001                 r0 = M[r7 + 1];
0x000211        E1F000F2                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000212        5040002F                 I4 = Null + r0;
0x000213        50E0003F                 L4 = Null + r1;
0x000214        D1290008                 r0 = M[r7 + 8];
0x000215        5020002F                 I2 = Null + r0;
0x000216        D1290002                 r0 = M[r7 + 2];
0x000217        005C000F                 r3 = r10 + Null;
0x000218        E1F00FD1                 call $frmbuffer.set_frame_size;
0x000219        E1F000EA                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00021A        5010002F                 I1 = Null + r0;
0x00021B        50D0003F                 L1 = Null + r1;
0x00021C        F3A00000                 push r8;
0x00021D        D1AA0006                 r8 = M[r8 + 6];
0x00021E        D15A0000                 r3 = M[r8 + 0];
0x00021F        D16A0001                 r4 = M[r8 + 1];
0x000220        D17A0002                 r5 = M[r8 + 2];
0x000221        F3A40000                 pop r8;
0x000222        E5F00007                 do $M.spkr_ctrl_system.processing.createLeftPriOutLoop;
0x000223        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000224        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000225        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000226        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000227        91210002                 r0 = rMAC ASHIFT 2;
0x000228        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createLeftPriOutLoop>
0x000229        D12A0001                 r0 = M[r8 + 1];
0x00022A        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftPriOutput;
0x00022B        F1000600                 pushm <r7, r8>;
0x00022C        0092000F                 r7 = r0 + Null;
0x00022D        E1F0076E                 call $audio_proc.hq_peq.process;
0x00022E        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateLeftPriOutput>
0x00022F        D1290003                 r0 = M[r7 + 3];
0x000230        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightPriOutput;
0x000231        D1290000                 r0 = M[r7 + 0];
0x000232        E1F000D1                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000233        5000002F                 I0 = Null + r0;
0x000234        50C0003F                 L0 = Null + r1;
0x000235        00C5000F                 r10 = r3 + Null;
0x000236        D1290001                 r0 = M[r7 + 1];
0x000237        E1F000CC                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000238        5040002F                 I4 = Null + r0;
0x000239        50E0003F                 L4 = Null + r1;
0x00023A        D1290008                 r0 = M[r7 + 8];
0x00023B        5020002F                 I2 = Null + r0;
0x00023C        D1290003                 r0 = M[r7 + 3];
0x00023D        005C000F                 r3 = r10 + Null;
0x00023E        E1F00FAB                 call $frmbuffer.set_frame_size;
0x00023F        E1F000C4                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000240        5010002F                 I1 = Null + r0;
0x000241        50D0003F                 L1 = Null + r1;
0x000242        F3A00000                 push r8;
0x000243        D1AA0006                 r8 = M[r8 + 6];
0x000244        D15A0003                 r3 = M[r8 + 3];
0x000245        D16A0004                 r4 = M[r8 + 4];
0x000246        D17A0005                 r5 = M[r8 + 5];
0x000247        F3A40000                 pop r8;
0x000248        E5F00007                 do $M.spkr_ctrl_system.processing.createRightPriOutLoop;
0x000249        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00024A        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x00024B        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x00024C        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x00024D        91210002                 r0 = rMAC ASHIFT 2;
0x00024E        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createRightPriOutLoop>
0x00024F        D12A0002                 r0 = M[r8 + 2];
0x000250        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightPriOutput;
0x000251        F1000600                 pushm <r7, r8>;
0x000252        0092000F                 r7 = r0 + Null;
0x000253        E1F00748                 call $audio_proc.hq_peq.process;
0x000254        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateRightPriOutput>
0x000255        D1290004                 r0 = M[r7 + 4];
0x000256        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftSecOutput;
0x000257        D1290000                 r0 = M[r7 + 0];
0x000258        E1F000AB                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000259        5000002F                 I0 = Null + r0;
0x00025A        50C0003F                 L0 = Null + r1;
0x00025B        00C5000F                 r10 = r3 + Null;
0x00025C        D1290001                 r0 = M[r7 + 1];
0x00025D        E1F000A6                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00025E        5040002F                 I4 = Null + r0;
0x00025F        50E0003F                 L4 = Null + r1;
0x000260        D1290008                 r0 = M[r7 + 8];
0x000261        5020002F                 I2 = Null + r0;
0x000262        D1290004                 r0 = M[r7 + 4];
0x000263        005C000F                 r3 = r10 + Null;
0x000264        E1F00F85                 call $frmbuffer.set_frame_size;
0x000265        E1F0009E                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000266        5010002F                 I1 = Null + r0;
0x000267        50D0003F                 L1 = Null + r1;
0x000268        F3A00000                 push r8;
0x000269        D1AA0006                 r8 = M[r8 + 6];
0x00026A        D15A0006                 r3 = M[r8 + 6];
0x00026B        D16A0007                 r4 = M[r8 + 7];
0x00026C        D17A0008                 r5 = M[r8 + 8];
0x00026D        F3A40000                 pop r8;
0x00026E        E5F00007                 do $M.spkr_ctrl_system.processing.createLeftSecOutLoop;
0x00026F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000270        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000271        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000272        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000273        91210002                 r0 = rMAC ASHIFT 2;
0x000274        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createLeftSecOutLoop>
0x000275        D12A0003                 r0 = M[r8 + 3];
0x000276        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateLeftSecOutput;
0x000277        F1000600                 pushm <r7, r8>;
0x000278        0092000F                 r7 = r0 + Null;
0x000279        E1F00722                 call $audio_proc.hq_peq.process;
0x00027A        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateLeftSecOutput>
0x00027B        D1290005                 r0 = M[r7 + 5];
0x00027C        DD000025                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightSecOutput;
0x00027D        D1290000                 r0 = M[r7 + 0];
0x00027E        E1F00085                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00027F        5000002F                 I0 = Null + r0;
0x000280        50C0003F                 L0 = Null + r1;
0x000281        00C5000F                 r10 = r3 + Null;
0x000282        D1290001                 r0 = M[r7 + 1];
0x000283        E1F00080                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x000284        5040002F                 I4 = Null + r0;
0x000285        50E0003F                 L4 = Null + r1;
0x000286        D1290008                 r0 = M[r7 + 8];
0x000287        5020002F                 I2 = Null + r0;
0x000288        D1290005                 r0 = M[r7 + 5];
0x000289        005C000F                 r3 = r10 + Null;
0x00028A        E1F00F5F                 call $frmbuffer.set_frame_size;
0x00028B        E1F00078                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x00028C        5010002F                 I1 = Null + r0;
0x00028D        50D0003F                 L1 = Null + r1;
0x00028E        F3A00000                 push r8;
0x00028F        D1AA0006                 r8 = M[r8 + 6];
0x000290        D15A0009                 r3 = M[r8 + 9];
0x000291        D16A000A                 r4 = M[r8 + 10];
0x000292        D17A000B                 r5 = M[r8 + 11];
0x000293        F3A40000                 pop r8;
0x000294        E5F00007                 do $M.spkr_ctrl_system.processing.createRightSecOutLoop;
0x000295        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000296        CF250021                 rMAC = r0 * r3 (SS), r0 = M[I4,1];
0x000297        AF262900                 rMAC = rMAC + r0 * r4 (SS), r0 = M[I2,1];
0x000298        AC12007F                 rMAC = rMAC + r0 * r5 (SS);
0x000299        91210002                 r0 = rMAC ASHIFT 2;
0x00029A        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createRightSecOutLoop>
0x00029B        D12A0004                 r0 = M[r8 + 4];
0x00029C        DD000005                 if EQ jump $M.spkr_ctrl_system.processing.dontCreateRightSecOutput;
0x00029D        F1000600                 pushm <r7, r8>;
0x00029E        0092000F                 r7 = r0 + Null;
0x00029F        E1F006FC                 call $audio_proc.hq_peq.process;
0x0002A0        F1040600                 popm <r7, r8>;

 <$M.spkr_ctrl_system.processing.dontCreateRightSecOutput>
0x0002A1        D1290007                 r0 = M[r7 + 7];
0x0002A2        DD000015                 if EQ jump $M.spkr_ctrl_system.processing.createSubOutLoop;
0x0002A3        D1290000                 r0 = M[r7 + 0];
0x0002A4        E1F0005F                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002A5        00C5000F                 r10 = r3 + Null;
0x0002A6        D1290008                 r0 = M[r7 + 8];
0x0002A7        5020002F                 I2 = Null + r0;
0x0002A8        D1290007                 r0 = M[r7 + 7];
0x0002A9        005C000F                 r3 = r10 + Null;
0x0002AA        E1F00F3F                 call $frmbuffer.set_frame_size;
0x0002AB        E1F00058                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002AC        5010002F                 I1 = Null + r0;
0x0002AD        50D0003F                 L1 = Null + r1;
0x0002AE        F3A00000                 push r8;
0x0002AF        D1AA0006                 r8 = M[r8 + 6];
0x0002B0        D15A000F                 r3 = M[r8 + 15];
0x0002B1        F3A40000                 pop r8;
0x0002B2        E5F00005                 do $M.spkr_ctrl_system.processing.createSubOutLoop;
0x0002B3        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0002B4        CC12005F                 rMAC = r0 * r3 (SS);
0x0002B5        91210002                 r0 = rMAC ASHIFT 2;
0x0002B6        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.createSubOutLoop>
0x0002B7        51C00000                 L0 = Null + 0;
0x0002B8        51D00000                 L1 = Null + 0;
0x0002B9        51E00000                 L4 = Null + 0;
0x0002BA        51F00000                 L5 = Null + 0;
0x0002BB        F3D40000                 pop rLink;
0x0002BC        DC0D000F                 rts;

 <$M.spkr_ctrl_system.processing.bypass>
0x0002BD        D1290000                 r0 = M[r7 + 0];
0x0002BE        E1F00045                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002BF        5000002F                 I0 = Null + r0;
0x0002C0        50C0003F                 L0 = Null + r1;
0x0002C1        00C5000F                 r10 = r3 + Null;
0x0002C2        D1290001                 r0 = M[r7 + 1];
0x0002C3        E1F00040                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002C4        5040002F                 I4 = Null + r0;
0x0002C5        50E0003F                 L4 = Null + r1;
0x0002C6        D1290002                 r0 = M[r7 + 2];
0x0002C7        005C000F                 r3 = r10 + Null;
0x0002C8        E1F00F21                 call $frmbuffer.set_frame_size;
0x0002C9        E1F0003A                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002CA        5010002F                 I1 = Null + r0;
0x0002CB        50D0003F                 L1 = Null + r1;
0x0002CC        D1290003                 r0 = M[r7 + 3];
0x0002CD        005C000F                 r3 = r10 + Null;
0x0002CE        E1F00F1B                 call $frmbuffer.set_frame_size;
0x0002CF        E1F00034                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002D0        5050002F                 I5 = Null + r0;
0x0002D1        50F0003F                 L5 = Null + r1;
0x0002D2        F3C00000                 push r10;
0x0002D3        E5F00003                 do $M.spkr_ctrl_system.processing.copyLRinToLRoutLoop;
0x0002D4        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0002D5        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.spkr_ctrl_system.processing.copyLRinToLRoutLoop>
0x0002D6        F3C40000                 pop r10;
0x0002D7        D1290007                 r0 = M[r7 + 7];
0x0002D8        DD000013                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;
0x0002D9        005C000F                 r3 = r10 + Null;
0x0002DA        E1F00F0F                 call $frmbuffer.set_frame_size;
0x0002DB        E1F00028                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002DC        00C5000F                 r10 = r3 + Null;
0x0002DD        5010002F                 I1 = Null + r0;
0x0002DE        50D0003F                 L1 = Null + r1;
0x0002DF        D1290006                 r0 = M[r7 + 6];
0x0002E0        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearSubOutput;
0x0002E1        E1F00022                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002E2        5000002F                 I0 = Null + r0;
0x0002E3        50C0003F                 L0 = Null + r1;
0x0002E4        E5F00003                 do $M.spkr_ctrl_system.processing.bypassLFEcopyLoop;
0x0002E5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0002E6        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassLFEcopyLoop>
0x0002E7        DDF00004                 jump $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;

 <$M.spkr_ctrl_system.processing.bypassClearSubOutput>
0x0002E8        01200000                 r0 = Null + 0;
0x0002E9        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearSubOutputLoop;
0x0002EA        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearSubOutputLoop>
0x0002EB        D1290004                 r0 = M[r7 + 4];
0x0002EC        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop;
0x0002ED        E1F00016                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002EE        00C5000F                 r10 = r3 + Null;
0x0002EF        5010002F                 I1 = Null + r0;
0x0002F0        50D0003F                 L1 = Null + r1;
0x0002F1        01200000                 r0 = Null + 0;
0x0002F2        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop;
0x0002F3        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearLeftSecOutputLoop>
0x0002F4        D1290005                 r0 = M[r7 + 5];
0x0002F5        DD000008                 if EQ jump $M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop;
0x0002F6        E1F0000D                 call $M.spkr_ctrl_system.processing.get_ptrs;
0x0002F7        00C5000F                 r10 = r3 + Null;
0x0002F8        5010002F                 I1 = Null + r0;
0x0002F9        50D0003F                 L1 = Null + r1;
0x0002FA        01200000                 r0 = Null + 0;
0x0002FB        E5F00002                 do $M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop;
0x0002FC        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.spkr_ctrl_system.processing.bypassClearRightSecOutputLoop>
0x0002FD        51C00000                 L0 = Null + 0;
0x0002FE        51D00000                 L1 = Null + 0;
0x0002FF        51E00000                 L4 = Null + 0;
0x000300        51F00000                 L5 = Null + 0;
0x000301        F3D40000                 pop rLink;
0x000302        DC0D000F                 rts;

 <$M.spkr_ctrl_system.processing.get_ptrs>
0x000303        F3D00000                 push rLink;
0x000304        E1F00EBC                 call $frmbuffer.get_buffer;
0x000305        F3D40000                 pop rLink;
0x000306        DC0D000F                 rts;

 <$cbops.auto_upsample_and_mix.main>
0x000307        F3D00000                 push rLink;
0x000308        FD000000 0150BB80        r3 = Null + 48000;
0x00030A        01601F40                 r4 = Null + 8000;
0x00030B        D13A0006                 r1 = M[r8 + 6];
0x00030C        D0330001                 if NE r1 = M[r1 + Null];
0x00030D        00360000                 if EQ r1 = r4 + Null;
0x00030E        D14A0004                 r2 = M[r8 + 4];
0x00030F        D0440001                 if NE r2 = M[r2 + Null];
0x000310        00450000                 if EQ r2 = r3 + Null;
0x000311        D12A000B                 r0 = M[r8 + 11];
0x000312        2002003F                 Null = r0 - r1;
0x000313        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_set_up;
0x000314        D12A000A                 r0 = M[r8 + 10];
0x000315        2002004F                 Null = r0 - r2;
0x000316        DD00001E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_up_done;

 <$M.cbops.auto_upsample_and_mix.main.do_set_up>
0x000317        D53A000B                 M[r8 + 11] = r1;
0x000318        D54A000A                 M[r8 + 10] = r2;
0x000319        D50A000C                 M[r8 + 12] = Null;
0x00031A        FD00007F 0120FFFF        r0 = Null + 8388607;
0x00031C        D52A0009                 M[r8 + 9] = r0;
0x00031D        E460002F                 r4 = Null + 1;
0x00031E        FD000073 95233333        r0 = r1 * 0.89999997615814209 (frac);
0x000320        2004002F                 Null = r2 - r0;
0x000321        DD400012                 if NEG jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x000322        01600002                 r4 = Null + 2;
0x000323        E450002F                 r3 = Null + 1;
0x000324        2003004F                 Null = r1 - r2;
0x000325        DD00000E                 if EQ jump $M.cbops.auto_upsample_and_mix.main.set_opmode;
0x000326        00500004                 if NEG r3 = Null + Null;
0x000327        2033004C                 if GT r1 = r1 - r2;
0x000328        D55A000C                 M[r8 + 12] = r3;
0x000329        0013000F                 rMAC = r1 + Null;
0x00032A        91340001                 r1 = r2 ASHIFT 1;
0x00032B        D9030000                 Div = rMAC / r1;
0x00032C        D9200001                 r0 = DivResult;
0x00032D        D9300002                 r1 = DivRemainder;
0x00032E        E450002F                 r3 = Null + 1;
0x00032F        2003004F                 Null = r1 - r2;
0x000330        00220055                 if POS r0 = r0 + r3;
0x000331        D52A0009                 M[r8 + 9] = r0;
0x000332        01600000                 r4 = Null + 0;

 <$M.cbops.auto_upsample_and_mix.main.set_opmode>
0x000333        D56A0011                 M[r8 + 17] = r4;

 <$M.cbops.auto_upsample_and_mix.main.set_up_done>
0x000334        D12A0002                 r0 = M[r8 + 2];
0x000335        E1F00E56                 call $cbuffer.calc_amount_data;
0x000336        D13A0009                 r1 = M[r8 + 9];
0x000337        D15A000C                 r3 = M[r8 + 12];
0x000338        9B5C0000                 r3 = r3 * r10 (int);
0x000339        973C0000                 r1 = r1 * r10 (frac);
0x00033A        E433002F                 r1 = r1 + 1;
0x00033B        03350000                 r1 = r1 + r3;
0x00033C        D14A0010                 r2 = M[r8 + 16];
0x00033D        E444002F                 r2 = r2 + 1;
0x00033E        D16A000F                 r4 = M[r8 + 15];
0x00033F        DD000004                 if EQ jump $M.cbops.auto_upsample_and_mix.main.no_tone;
0x000340        0002000F                 Null = r0 + Null;
0x000341        00400001                 if NE r2 = Null + Null;
0x000342        DDF00003                 jump $M.cbops.auto_upsample_and_mix.main.set_new_state;

 <$M.cbops.auto_upsample_and_mix.main.no_tone>
0x000343        2002003F                 Null = r0 - r1;
0x000344        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.set_new_state>
0x000345        0026000F                 r0 = r4 + Null;
0x000346        E450002F                 r3 = Null + 1;
0x000347        21040003                 Null = r2 - 3;
0x000348        88660055                 if POS r4 = r4 XOR r3;
0x000349        FD00007F 0130FFFF        r1 = Null + 8388607;
0x00034B        D15A000E                 r3 = M[r8 + 14];
0x00034C        2006002F                 Null = r4 - r0;
0x00034D        00530001                 if NE r3 = r1 + Null;
0x00034E        D54A0010                 M[r8 + 16] = r2;
0x00034F        D55A000E                 M[r8 + 14] = r3;
0x000350        D56A000F                 M[r8 + 15] = r4;
0x000351        8406005F                 Null = r4 OR r3;
0x000352        DD000E99                 if EQ jump $pop_rLink_and_rts;
0x000353        D12A0002                 r0 = M[r8 + 2];
0x000354        E1F00E5D                 call $cbuffer.get_read_address_and_size;
0x000355        5000002F                 I0 = Null + r0;
0x000356        50C0003F                 L0 = Null + r1;
0x000357        51D0000C                 L1 = Null + 12;
0x000358        D12A0005                 r0 = M[r8 + 5];
0x000359        5010002F                 I1 = Null + r0;
0x00035A        D12A0000                 r0 = M[r8 + 0];
0x00035B        D038002F                 r1 = M[r6 + r0];
0x00035C        5040003F                 I4 = Null + r1;
0x00035D        D039002F                 r1 = M[r7 + r0];
0x00035E        50E0003F                 L4 = Null + r1;
0x00035F        FD0000FF 51505A62        I5 = Null + -42398;
0x000361        51F00001                 L5 = Null + 1;
0x000362        D12A0001                 r0 = M[r8 + 1];
0x000363        DD400005                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_right_channel;
0x000364        D038002F                 r1 = M[r6 + r0];
0x000365        5050003F                 I5 = Null + r1;
0x000366        D039002F                 r1 = M[r7 + r0];
0x000367        50F0003F                 L5 = Null + r1;

 <$M.cbops.auto_upsample_and_mix.main.no_right_channel>
0x000368        D16A0008                 r4 = M[r8 + 8];
0x000369        FD00007F 0150FFFF        r3 = Null + 8388607;
0x00036B        D14A000E                 r2 = M[r8 + 14];
0x00036C        DD000017                 if EQ jump $M.cbops.auto_upsample_and_mix.main.do_resample_mix;
0x00036D        D10A000F                 Null = M[r8 + 15];
0x00036E        DD100004                 if NE jump $M.cbops.auto_upsample_and_mix.main.do_soft_move;
0x00036F        FD00007F 0160FFFF        r4 = Null + 8388607;
0x000371        D15A0008                 r3 = M[r8 + 8];

 <$M.cbops.auto_upsample_and_mix.main.do_soft_move>
0x000372        23560000                 r3 = r3 - r4;
0x000373        FD00007F 0180FFFF        r6 = Null + 8388607;
0x000375        FD000002 0170AAAB        r5 = Null + 174763;
0x000377        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.soft_move_loop;
0x000378        CF450020                 rMAC = r2 * r3 (SS), r0 = M[I4,0];
0x000379        AC16008F                 rMAC = rMAC + r4 * r6 (SS);
0x00037A        97210034                 r0 = r0 * rMAC (frac), r1 = M[I5,0];
0x00037B        973100A1                 r1 = r1 * rMAC (frac), M[I4,1] = r0;
0x00037C        234700B5                 r2 = r2 - r5, M[I5,1] = r1;
0x00037D        00400004                 if NEG r2 = Null + Null;

 <$M.cbops.auto_upsample_and_mix.main.soft_move_loop>
0x00037E        D54A000E                 M[r8 + 14] = r2;
0x00037F        DDF00E6C                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.end_soft_move>
0x000380        01400000                 r2 = Null + 0;
0x000381        D54A000E                 M[r8 + 14] = r2;
0x000382        DDF00E69                 jump $pop_rLink_and_rts;

 <$M.cbops.auto_upsample_and_mix.main.do_resample_mix>
0x000383        D12A0011                 r0 = M[r8 + 17];
0x000384        21020000                 Null = r0 - 0;
0x000385        DD00001F                 if EQ jump $M.cbops.auto_upsample_and_mix.main.resampling_op;
0x000386        21020002                 Null = r0 - 2;
0x000387        DD000003                 if EQ jump $M.cbops.auto_upsample_and_mix.main.justmix_op;

 <$M.cbops.auto_upsample_and_mix.main.ignore_op>
0x000388        009C000F                 r7 = r10 + Null;
0x000389        DDF0006D                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.justmix_op>
0x00038A        009C000F                 r7 = r10 + Null;
0x00038B        D12A0002                 r0 = M[r8 + 2];
0x00038C        E1F00DFF                 call $cbuffer.calc_amount_data;
0x00038D        E4C2005F                 r10 = MIN r0;
0x00038E        204900CF                 r2 = r7 - r10;
0x00038F        D16A0007                 r4 = M[r8 + 7];
0x000390        D17A0008                 r5 = M[r8 + 8];
0x000391        009C000F                 r7 = r10 + Null;
0x000392        03002000                 Null = Null + Null, r0 = M[I0,0];
0x000393        FD00007F 0180FFFF        r6 = Null + 8388607;
0x000395        E5F00007                 do $M.cbops.auto_upsample_and_mix.main.just_mix_loop;
0x000396        9726A550                 r0 = r0 * r4 (frac), M[I1,1] = r0, r3 = M[I4,0];
0x000397        CF750034                 rMAC = r5 * r3 (SS), r1 = M[I5,0];
0x000398        AF285100                 rMAC = rMAC + r0 * r6 (SS), r3 = M[I0,1];
0x000399        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x00039A        AF282000                 rMAC = rMAC + r0 * r6 (SS), r0 = M[I0,0];
0x00039B        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_loop>
0x00039C        00C4000F                 r10 = r2 + Null;
0x00039D        01200000                 r0 = Null + 0;
0x00039E        E5F00005                 do $M.cbops.auto_upsample_and_mix.main.just_mix_zero_loop;
0x00039F        0300A550                 Null = Null + Null, M[I1,1] = r0, r3 = M[I4,0];
0x0003A0        CF755134                 rMAC = r5 * r3 (SS), r3 = M[I0,1], r1 = M[I5,0];
0x0003A1        CF730091                 rMAC = r5 * r1 (SS), M[I4,1] = rMAC;
0x0003A2        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.just_mix_zero_loop>
0x0003A3        DDF00053                 jump $M.cbops.auto_upsample_and_mix.main.op_done;

 <$M.cbops.auto_upsample_and_mix.main.resampling_op>
0x0003A4        D17A0003                 r5 = M[r8 + 3];
0x0003A5        5137007E                 I3 = r5 + 126;
0x0003A6        D17A0009                 r5 = M[r8 + 9];
0x0003A7        D16A000D                 r4 = M[r8 + 13];
0x0003A8        51B00001                 M3 = Null + 1;
0x0003A9        01800015                 r6 = Null + 21;
0x0003AA        70A0008F                 M2 = Null - r6;
0x0003AB        5080008F                 M0 = Null + r6;
0x0003AC        01900000                 r7 = Null + 0;
0x0003AD        D10A000C                 Null = M[r8 + 12];
0x0003AE        DD000006                 if EQ jump $M.cbops.auto_upsample_and_mix.main.upsampling;

 <$M.cbops.auto_upsample_and_mix.main.downsampling>
0x0003AF        E5F00044                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;
0x0003B0        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0003B1        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0003B2        02009300                 Null = Null + Null, M[I0,M3] = rMAC;
0x0003B3        DDF00002                 jump $M.cbops.auto_upsample_and_mix.main.start_norm;

 <$M.cbops.auto_upsample_and_mix.main.upsampling>
0x0003B4        E5F0003F                 do $M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop;

 <$M.cbops.auto_upsample_and_mix.main.start_norm>
0x0003B5        03670000                 r4 = r4 + r5;
0x0003B6        DD400006                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_copy;
0x0003B7        23112000                 rMAC = rMAC - rMAC, r0 = M[I0,0];
0x0003B8        FD000080 21660000        r4 = r4 - -8388608;
0x0003BA        469BA700                 r7 = r7 + M3, M[I1,M3] = r0;
0x0003BB        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_copy>
0x0003BC        CC16008F                 rMAC = r4 * r6 (SS);
0x0003BD        8D510018                 r3 = rMAC LSHIFT 24;
0x0003BE        8D55007F                 r3 = r3 LSHIFT -1;
0x0003BF        8D410000                 r2 = rMAC LSHIFT 0;
0x0003C0        5863004F                 I6 = I3 + r2;
0x0003C1        6524FFEA                 r0 = -22 - r2;
0x0003C2        7092004F                 M1 = r0 - r2;
0x0003C3        5871000F                 I7 = I1 + Null;
0x0003C4        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C5        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C6        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C7        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C8        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003C9        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0003CA        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003CB        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003CC        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003CD        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003CE        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003CF        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003D0        BF233000                 rMAC = rMAC - r0 * r1 (SS), r1 = M[I0,0];
0x0003D1        79990002                 M1 = M1 - 2;
0x0003D2        474B0000                 r2 = r2 + M3;
0x0003D3        DD400003                 if NEG jump $M.cbops.auto_upsample_and_mix.main.no_extra_load;
0x0003D4        71980001                 M1 = r6 - 1;
0x0003D5        2040B78F                 r2 = Null - r6, M[I1,M3] = r1;

 <$M.cbops.auto_upsample_and_mix.main.no_extra_load>
0x0003D6        5863004F                 I6 = I3 + r2;
0x0003D7        0041000F                 r2 = rMAC + Null;
0x0003D8        0200273A                 Null = Null + Null, r0 = M[I1,M3], r1 = M[I6,M2];
0x0003D9        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003DA        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003DB        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003DC        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x0003DD        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x0003DE        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003DF        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003E0        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003E1        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003E2        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003E3        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x0003E4        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x0003E5        5817000F                 I1 = I7 + Null;
0x0003E6        CF152B00                 rMAC = rMAC * r3 (SS), r0 = M[I2,-1];
0x0003E7        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x0003E9        D14A0007                 r2 = M[r8 + 7];
0x0003EA        97410050                 r2 = r2 * rMAC (frac), r3 = M[I4,0];
0x0003EB        D12A0008                 r0 = M[r8 + 8];
0x0003EC        CF250034                 rMAC = r0 * r3 (SS), r1 = M[I5,0];
0x0003ED        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0003EF        CF320091                 rMAC = r1 * r0 (SS), M[I4,1] = rMAC;
0x0003F0        FD00007F AD14FFFF        rMAC = rMAC + r2 * 0.99999988079071045 (SS);
0x0003F2        03000095                 Null = Null + Null, M[I5,1] = rMAC;

 <$M.cbops.auto_upsample_and_mix.main.fractinal_gen_loop>
0x0003F3        4420001F                 r0 = Null + I1;
0x0003F4        D52A0005                 M[r8 + 5] = r0;
0x0003F5        D56A000D                 M[r8 + 13] = r4;

 <$M.cbops.auto_upsample_and_mix.main.op_done>
0x0003F6        D12A0002                 r0 = M[r8 + 2];
0x0003F7        E1F00D94                 call $cbuffer.calc_amount_data;
0x0003F8        2039002F                 r1 = r7 - r0;
0x0003F9        20990035                 if POS r7 = r7 - r1;
0x0003FA        D12A0002                 r0 = M[r8 + 2];
0x0003FB        E1F00DB6                 call $cbuffer.get_read_address_and_size;
0x0003FC        5000002F                 I0 = Null + r0;
0x0003FD        50C0003F                 L0 = Null + r1;
0x0003FE        5080009F                 M0 = Null + r7;
0x0003FF        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x000400        4430000F                 r1 = Null + I0;
0x000401        D12A0002                 r0 = M[r8 + 2];
0x000402        E1F00DC3                 call $cbuffer.set_read_address;

 <$M.cbops.auto_upsample_and_mix.main.end>
0x000403        51E00000                 L4 = Null + 0;
0x000404        51D00000                 L1 = Null + 0;
0x000405        51C00000                 L0 = Null + 0;
0x000406        51F00000                 L5 = Null + 0;
0x000407        DDF00DE4                 jump $pop_rLink_and_rts;

 <$volume_and_limit.apply_volume>
0x000408        F3D00000                 push rLink;
0x000409        00A9000F                 r8 = r7 + Null;
0x00040A        D12A0003                 r0 = M[r8 + 3];
0x00040B        D3200000                 r0 = M[r0 + Null];
0x00040C        01100200                 rMAC = Null + 512;
0x00040D        D9020000                 Div = rMAC / r0;
0x00040E        D1CA0002                 r10 = M[r8 + 2];
0x00040F        DDD00DDC                 if LE jump $pop_rLink_and_rts;
0x000410        018A000B                 r6 = r8 + 11;
0x000411        FD00007F 0140FFFF        r2 = Null + 8388607;
0x000413        E5F0000A                 do $M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop;
0x000414        D1280000                 r0 = M[r6 + 0];
0x000415        D1520002                 r3 = M[r0 + 2];
0x000416        2004005F                 Null = r2 - r3;
0x000417        00450005                 if POS r2 = r3 + Null;
0x000418        D1280001                 r0 = M[r6 + 1];
0x000419        D1520002                 r3 = M[r0 + 2];
0x00041A        2004005F                 Null = r2 - r3;
0x00041B        00450005                 if POS r2 = r3 + Null;
0x00041C        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.find_transfer_mnt_loop>
0x00041D        00C4000F                 r10 = r2 + Null;
0x00041E        DDD00DCD                 if LE jump $pop_rLink_and_rts;
0x00041F        0920FE93                 r0 = Null + M[0xfffe93];
0x000420        F3200000                 push r0;
0x000421        D9200001                 r0 = DivResult;
0x000422        CC12004F                 rMAC = r0 * r2 (SS);
0x000423        91E10010                 rMAC = rMAC ASHIFT 16 (MI);
0x000424        F3C00000                 push r10;
0x000425        F3100000                 push rMAC;
0x000426        91E1007C                 rMAC = rMAC ASHIFT -4 (MI);
0x000427        9D710017                 r5 = rMAC * 23 (int) (sat);
0x000428        E420002F                 r0 = Null + 1;
0x000429        1920FE93                 M[0xfffe93] = r0 + Null;
0x00042A        D12A0008                 r0 = M[r8 + 8];
0x00042B        01320100                 r1 = r0 + 256;
0x00042C        00300004                 if NEG r1 = Null + Null;
0x00042D        CC13007F                 rMAC = r1 * r5 (SS);
0x00042E        9131000F                 r1 = rMAC ASHIFT 15;
0x00042F        01100100                 rMAC = Null + 256;
0x000430        AC17002F                 rMAC = rMAC + r5 * r0 (SS);
0x000431        91110008                 rMAC = rMAC ASHIFT 8 (56bit);
0x000432        CC11003F                 rMAC = rMAC * r1 (SS);
0x000433        91710007                 r5 = rMAC ASHIFT 7;
0x000434        D1CA0002                 r10 = M[r8 + 2];
0x000435        018A000B                 r6 = r8 + 11;
0x000436        51A00034                 M2 = Null + 52;
0x000437        D15A0004                 r3 = M[r8 + 4];
0x000438        01600000                 r4 = Null + 0;
0x000439        E5F00011                 do $M.audio_proc.volume_and_limit.apply_volume.volume_update_loop;
0x00043A        D1280002                 r0 = M[r6 + 2];
0x00043B        CC15002F                 rMAC = r3 * r0 (SS);
0x00043C        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x00043D        D1380003                 r1 = M[r6 + 3];
0x00043E        2021003F                 r0 = rMAC - r1;
0x00043F        DD000009                 if EQ jump $M.audio_proc.volume_and_limit.apply_volume.next_ch_vol;
0x000440        20200024                 if NEG r0 = Null - r0;
0x000441        9443007F                 r2 = r1 * r5 (frac);
0x000442        474A0000                 r2 = r2 + M2;
0x000443        E442005F                 r2 = MIN r0;
0x000444        2001003F                 Null = rMAC - r1;
0x000445        20400044                 if NEG r2 = Null - r2;
0x000446        03340000                 r1 = r1 + r2;
0x000447        D5380003                 M[r6 + 3] = r1;

 <$M.audio_proc.volume_and_limit.apply_volume.next_ch_vol>
0x000448        E463006F                 r4 = MAX r1;
0x000449        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_update_loop>
0x00044A        1900FE93                 M[0xfffe93] = Null + Null;
0x00044B        01500000                 r3 = Null + 0;
0x00044C        D12A0000                 r0 = M[r8 + 0];
0x00044D        D13A0001                 r1 = M[r8 + 1];
0x00044E        8002003F                 Null = r0 AND r1;
0x00044F        DD10002A                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000450        FD000008 21060000        Null = r4 - 524288;
0x000452        DD400027                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000453        018A000B                 r6 = r8 + 11;
0x000454        D12A0002                 r0 = M[r8 + 2];
0x000455        5090002F                 M1 = Null + r0;
0x000456        01600000                 r4 = Null + 0;
0x000457        51800001                 M0 = Null + 1;

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop>
0x000458        D1380003                 r1 = M[r6 + 3];
0x000459        FD000008 21030000        Null = r1 - 524288;
0x00045B        DD400010                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.get_next_channel;
0x00045C        F1C8FFFE                 r10 = M[SP + -0x2];
0x00045D        D1280000                 r0 = M[r6 + 0];
0x00045E        E1F00D62                 call $frmbuffer.get_buffer;
0x00045F        5000002F                 I0 = Null + r0;
0x000460        50C0003F                 L0 = Null + r1;
0x000461        E4CC003F                 r10 = r10 - 1;
0x000462        0070400F                 r5 = Null + Null, r2 = M[I0,M0];
0x000463        E5F00003                 do $M.audio_proc.volume_and_limit.apply_volume.channel_search_loop;
0x000464        E444004F                 r2 = ABS r2;
0x000465        E474406F                 r5 = MAX r2, r2 = M[I0,M0];

 <$M.audio_proc.volume_and_limit.apply_volume.channel_search_loop>
0x000466        E444004F                 r2 = ABS r2;
0x000467        E474006F                 r5 = MAX r2;
0x000468        D1380003                 r1 = M[r6 + 3];
0x000469        97730000                 r5 = r5 * r1 (frac);
0x00046A        E467006F                 r4 = MAX r5;

 <$M.audio_proc.volume_and_limit.apply_volume.get_next_channel>
0x00046B        01880005                 r6 = r6 + 5;
0x00046C        79990001                 M1 = M1 - 1;
0x00046D        DD10FFEB                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_loop;
0x00046E        51C00000                 L0 = Null + 0;
0x00046F        01500000                 r3 = Null + 0;
0x000470        D14A0006                 r2 = M[r8 + 6];
0x000471        2006004F                 Null = r4 - r2;
0x000472        DD400007                 if NEG jump $M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done;
0x000473        0016000F                 rMAC = r4 + Null;
0x000474        E1F00C1A                 call $math.log2_table;
0x000475        D15A0005                 r3 = M[r8 + 5];
0x000476        D13A0007                 r1 = M[r8 + 7];
0x000477        2025002F                 r0 = r3 - r0;
0x000478        9452003F                 r3 = r0 * r1 (frac);

 <$M.audio_proc.volume_and_limit.apply_volume.limiter_analysis_done>
0x000479        F128FFFF                 r0 = M[SP + -0x1];
0x00047A        FD0000EF 952263EF        r0 = r0 * -0.12976276874542236 (frac);
0x00047C        E1F00C68                 call $math.pow2_table;
0x00047D        FD00007F 6562FFFF        r4 = 8388607 - r0;
0x00047F        9432002F                 r1 = r0 * r0 (frac);
0x000480        97330000                 r1 = r1 * r1 (frac);
0x000481        9432003F                 r1 = r0 * r1 (frac);
0x000482        FD00007F 6543FFFF        r2 = 8388607 - r1;
0x000484        D12A0009                 r0 = M[r8 + 9];
0x000485        2075002F                 r5 = r3 - r0;
0x000486        00460005                 if POS r2 = r4 + Null;
0x000487        97740000                 r5 = r5 * r2 (frac);
0x000488        03270000                 r0 = r0 + r5;
0x000489        00200005                 if POS r0 = Null + Null;
0x00048A        2042005F                 r2 = r0 - r3;
0x00048B        20400044                 if NEG r2 = Null - r2;
0x00048C        21040054                 Null = r2 - 84;
0x00048D        00250004                 if NEG r0 = r3 + Null;
0x00048E        D52A0009                 M[r8 + 9] = r0;
0x00048F        E1F00C55                 call $math.pow2_table;
0x000490        D16A000A                 r4 = M[r8 + 10];
0x000491        D52A000A                 M[r8 + 10] = r0;
0x000492        018A000B                 r6 = r8 + 11;
0x000493        D12A0002                 r0 = M[r8 + 2];
0x000494        5090002F                 M1 = Null + r0;
0x000495        E420002F                 r0 = Null + 1;
0x000496        1920FE93                 M[0xfffe93] = r0 + Null;

 <$M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop>
0x000497        D1280000                 r0 = M[r6 + 0];
0x000498        E1F00D28                 call $frmbuffer.get_buffer;
0x000499        5000002F                 I0 = Null + r0;
0x00049A        50C0003F                 L0 = Null + r1;
0x00049B        D1280001                 r0 = M[r6 + 1];
0x00049C        E1F00D24                 call $frmbuffer.get_buffer;
0x00049D        5040002F                 I4 = Null + r0;
0x00049E        50E0003F                 L4 = Null + r1;
0x00049F        D1380003                 r1 = M[r6 + 3];
0x0004A0        D12A000A                 r0 = M[r8 + 10];
0x0004A1        9443002F                 r2 = r1 * r0 (frac);
0x0004A2        D1380004                 r1 = M[r6 + 4];
0x0004A3        23430000                 r2 = r2 - r1;
0x0004A4        91E40080                 rMAC = r2 ASHIFT 0 (LO);
0x0004A5        F1C8FFFE                 r10 = M[SP + -0x2];
0x0004A6        D90C0000                 Div = rMAC / r10;
0x0004A7        E4CC003F                 r10 = r10 - 1;
0x0004A8        01500004                 r3 = Null + 4;
0x0004A9        D9700001                 r5 = DivResult;
0x0004AA        03374100                 r1 = r1 + r5, r2 = M[I0,1];
0x0004AB        CC14003F                 rMAC = r2 * r1 (SS);
0x0004AC        E5F00004                 do $M.audio_proc.volume_and_limit.apply_volume.volume_loop;
0x0004AD        93154100                 rMAC = rMAC ASHIFT r3 (56bit), r2 = M[I0,1];
0x0004AE        03370000                 r1 = r1 + r5;
0x0004AF        CF430091                 rMAC = r2 * r1 (SS), M[I4,1] = rMAC;

 <$M.audio_proc.volume_and_limit.apply_volume.volume_loop>
0x0004B0        93150000                 rMAC = rMAC ASHIFT r3 (56bit);
0x0004B1        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x0004B2        D5380004                 M[r6 + 4] = r1;
0x0004B3        01880005                 r6 = r6 + 5;
0x0004B4        79990001                 M1 = M1 - 1;
0x0004B5        DD10FFE2                 if NE jump $M.audio_proc.volume_and_limit.apply_volume.apply_volume_loop;
0x0004B6        51C00000                 L0 = Null + 0;
0x0004B7        51E00000                 L4 = Null + 0;
0x0004B8        F3240000                 pop r0;
0x0004B9        F3240000                 pop r0;
0x0004BA        F3240000                 pop r0;
0x0004BB        1920FE93                 M[0xfffe93] = r0 + Null;
0x0004BC        DDF00D2F                 jump $pop_rLink_and_rts;

 <$cbops.rate_adjustment_and_shift.Limited_Process>
0x0004BD        F3D00000                 push rLink;
0x0004BE        F3700000                 push r5;
0x0004BF        D12A0000                 r0 = M[r8 + 0];
0x0004C0        E1F00CCB                 call $cbuffer.calc_amount_data;
0x0004C1        0072000F                 r5 = r0 + Null;
0x0004C2        D12A0001                 r0 = M[r8 + 1];
0x0004C3        E1F00CB8                 call $cbuffer.calc_amount_space;
0x0004C4        0092000F                 r7 = r0 + Null;
0x0004C5        D12A0002                 r0 = M[r8 + 2];
0x0004C6        E402002F                 Null = r0 + 1;
0x0004C7        DD000009                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.no_right_channel_l;
0x0004C8        D12A0002                 r0 = M[r8 + 2];
0x0004C9        E1F00CC2                 call $cbuffer.calc_amount_data;
0x0004CA        2007002F                 Null = r5 - r0;
0x0004CB        00720005                 if POS r5 = r0 + Null;
0x0004CC        D12A0003                 r0 = M[r8 + 3];
0x0004CD        E1F00CAE                 call $cbuffer.calc_amount_space;
0x0004CE        2009002F                 Null = r7 - r0;
0x0004CF        00920005                 if POS r7 = r0 + Null;

 <$M.cbops.rate_adjustment_and_shift.Process.no_right_channel_l>
0x0004D0        2007009F                 Null = r5 - r7;
0x0004D1        00790005                 if POS r5 = r7 + Null;
0x0004D2        E1F00074                 call $M.cbops.rate_adjustment_and_shift.Process.amount_to_use;
0x0004D3        F3640000                 pop r4;
0x0004D4        23760000                 r5 = r5 - r4;
0x0004D5        00760005                 if POS r5 = r4 + Null;
0x0004D6        DDF00016                 jump $M.cbops.rate_adjustment_and_shift.Process.limited_entry_point;

 <$cbops.rate_adjustment_and_shift.Process>
0x0004D7        F3D00000                 push rLink;
0x0004D8        D12A0000                 r0 = M[r8 + 0];
0x0004D9        E1F00CB2                 call $cbuffer.calc_amount_data;
0x0004DA        0072000F                 r5 = r0 + Null;
0x0004DB        D12A0001                 r0 = M[r8 + 1];
0x0004DC        E1F00C9F                 call $cbuffer.calc_amount_space;
0x0004DD        0092000F                 r7 = r0 + Null;
0x0004DE        D12A0002                 r0 = M[r8 + 2];
0x0004DF        E402002F                 Null = r0 + 1;
0x0004E0        DD000009                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.no_right_channel;
0x0004E1        D12A0002                 r0 = M[r8 + 2];
0x0004E2        E1F00CA9                 call $cbuffer.calc_amount_data;
0x0004E3        2007002F                 Null = r5 - r0;
0x0004E4        00720005                 if POS r5 = r0 + Null;
0x0004E5        D12A0003                 r0 = M[r8 + 3];
0x0004E6        E1F00C95                 call $cbuffer.calc_amount_space;
0x0004E7        2009002F                 Null = r7 - r0;
0x0004E8        00920005                 if POS r7 = r0 + Null;

 <$M.cbops.rate_adjustment_and_shift.Process.no_right_channel>
0x0004E9        2007009F                 Null = r5 - r7;
0x0004EA        00790005                 if POS r5 = r7 + Null;
0x0004EB        E1F0005B                 call $M.cbops.rate_adjustment_and_shift.Process.amount_to_use;

 <$M.cbops.rate_adjustment_and_shift.Process.limited_entry_point>
0x0004EC        00C7000F                 r10 = r5 + Null;
0x0004ED        DDD00CFE                 if LE jump $pop_rLink_and_rts;
0x0004EE        F1F00001                 pushm <FP(=SP)>, SP = SP + 0xf;
0x0004EF        F1070001                 FP = FP + 1;
0x0004F0        502000AF                 I2 = Null + r8;
0x0004F1        E1F0005D                 call $M.cbops.rate_adjustment_and_shift.Process.get_buffer_info;
0x0004F2        D19A0004                 r7 = M[r8 + 4];
0x0004F3        F19C0007                 M[FP + 0x7] = r7;
0x0004F4        D12A0006                 r0 = M[r8 + 6];
0x0004F5        5000002F                 I0 = Null + r0;
0x0004F6        0120000C                 r0 = Null + 12;
0x0004F7        D13A000B                 r1 = M[r8 + 11];
0x0004F8        00320000                 if EQ r1 = r0 + Null;
0x0004F9        50C0003F                 L0 = Null + r1;
0x0004FA        50D0003F                 L1 = Null + r1;
0x0004FB        D12A0005                 r0 = M[r8 + 5];
0x0004FC        99330015                 r1 = r1 * 21 (int);
0x0004FD        8D33007F                 r1 = r1 LSHIFT -1;
0x0004FE        5032003F                 I3 = r0 + r1;
0x0004FF        D12A0008                 r0 = M[r8 + 8];
0x000500        D062000F                 r4 = M[r0 + Null];
0x000501        D17A000C                 r5 = M[r8 + 12];
0x000502        E430002F                 r1 = Null + 1;
0x000503        2027006F                 r0 = r5 - r4;
0x000504        20200024                 if NEG r0 = Null - r0;
0x000505        FD000000 954220C5        r2 = r0 * 0.0010000467300415039 (frac);
0x000507        21023127                 Null = r0 - 12583;
0x000508        00430004                 if NEG r2 = r1 + Null;
0x000509        21340026                 r1 = r2 - 38;
0x00050A        20440035                 if POS r2 = r2 - r1;
0x00050B        0930FE71                 r1 = Null + M[0xfffe71];
0x00050C        D12A0012                 r0 = M[r8 + 18];
0x00050D        2053002F                 r3 = r1 - r0;
0x00050E        20500054                 if NEG r3 = Null - r3;
0x00050F        FD000000 2105C350        Null = r3 - 50000;
0x000511        DD500008                 if POS jump $M.cbops.rate_adjustment_and_shift.Process.update_last_time;
0x000512        215502EE                 r3 = r3 - 750;
0x000513        FD000000 955515D8        r3 = r3 * 0.00066661834716796875 (frac);
0x000515        00500004                 if NEG r3 = Null + Null;
0x000516        9B450000                 r2 = r2 * r3 (int);
0x000517        995505DC                 r3 = r3 * 1500 (int);
0x000518        0032005F                 r1 = r0 + r3;

 <$M.cbops.rate_adjustment_and_shift.Process.update_last_time>
0x000519        D53A0012                 M[r8 + 18] = r1;
0x00051A        2037006F                 r1 = r5 - r4;
0x00051B        2023004F                 r0 = r1 - r2;
0x00051C        20330025                 if POS r1 = r1 - r0;
0x00051D        0023004F                 r0 = r1 + r2;
0x00051E        20330024                 if NEG r1 = r1 - r0;
0x00051F        23730000                 r5 = r5 - r1;
0x000520        D57A000C                 M[r8 + 12] = r5;
0x000521        F1CC000C                 M[FP + 0xc] = r10;
0x000522        F10C000D                 M[FP + 0xd] = Null;
0x000523        51B00001                 M3 = Null + 1;

 <$M.cbops.rate_adjustment_and_shift.Process.sra_gen_main_loop>
0x000524        E1F0FB9D                 call $M.cbops.rate_adjustment_and_shift.main.sra_resample;
0x000525        509000CF                 M1 = Null + r10;
0x000526        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x000527        02000021                 Null = Null + Null, r0 = M[I4,M1];
0x000528        F138000D                 r1 = M[FP + 0xd];
0x000529        005A003F                 r3 = r8 + r1;
0x00052A        4430000F                 r1 = Null + I0;
0x00052B        D5350006                 M[r3 + 6] = r1;
0x00052C        F158000D                 r3 = M[FP + 0xd];
0x00052D        03550000                 r3 = r3 + r3;
0x00052E        01550000                 r3 = r3 + 0;
0x00052F        502A005F                 I2 = r8 + r3;
0x000530        E1F00028                 call $M.cbops.rate_adjustment_and_shift.Process.set_buffer_info;
0x000531        F108000D                 Null = M[FP + 0xd];
0x000532        DD10000B                 if NE jump $M.cbops.rate_adjustment_and_shift.Process.finished;
0x000533        D12A0002                 r0 = M[r8 + 2];
0x000534        E402002F                 Null = r0 + 1;
0x000535        DD000008                 if EQ jump $M.cbops.rate_adjustment_and_shift.Process.finished;
0x000536        512A0002                 I2 = r8 + 2;
0x000537        E1F00017                 call $M.cbops.rate_adjustment_and_shift.Process.get_buffer_info;
0x000538        D13A0007                 r1 = M[r8 + 7];
0x000539        5000003F                 I0 = Null + r1;
0x00053A        E430002F                 r1 = Null + 1;
0x00053B        F13C000D                 M[FP + 0xd] = r1;
0x00053C        DDF0FFE8                 jump $M.cbops.rate_adjustment_and_shift.Process.sra_gen_main_loop;

 <$M.cbops.rate_adjustment_and_shift.Process.finished>
0x00053D        D56A000D                 M[r8 + 13] = r4;
0x00053E        6420009F                 r0 = Null - M1;
0x00053F        D52A000E                 M[r8 + 14] = r0;
0x000540        51F00000                 L5 = Null + 0;
0x000541        51E00000                 L4 = Null + 0;
0x000542        51C00000                 L0 = Null + 0;
0x000543        51D00000                 L1 = Null + 0;
0x000544        F1F64000                 SP = SP - 0xf, popm <FP>;
0x000545        DDF00CA6                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.Process.amount_to_use>
0x000546        D12A000C                 r0 = M[r8 + 12];
0x000547        9462009F                 r4 = r0 * r7 (frac);
0x000548        2069006F                 r4 = r7 - r4;
0x000549        21660002                 r4 = r4 - 2;
0x00054A        00600004                 if NEG r4 = Null + Null;
0x00054B        2006007F                 Null = r4 - r5;
0x00054C        00760004                 if NEG r5 = r4 + Null;
0x00054D        DC0D000F                 rts;

 <$M.cbops.rate_adjustment_and_shift.Process.get_buffer_info>
0x00054E        F3D00000                 push rLink;
0x00054F        51800001                 M0 = Null + 1;
0x000550        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x000551        E1F00C60                 call $cbuffer.get_read_address_and_size;
0x000552        5040002F                 I4 = Null + r0;
0x000553        50E0283F                 L4 = Null + r1, r0 = M[I2,M0];
0x000554        E1F00C62                 call $cbuffer.get_write_address_and_size;
0x000555        5050002F                 I5 = Null + r0;
0x000556        50F0003F                 L5 = Null + r1;
0x000557        DDF00C94                 jump $pop_rLink_and_rts;

 <$M.cbops.rate_adjustment_and_shift.Process.set_buffer_info>
0x000558        F3D00000                 push rLink;
0x000559        51800001                 M0 = Null + 1;
0x00055A        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x00055B        4430004F                 r1 = Null + I4;
0x00055C        E1F00C69                 call $cbuffer.set_read_address;
0x00055D        02002800                 Null = Null + Null, r0 = M[I2,M0];
0x00055E        4430005F                 r1 = Null + I5;
0x00055F        E1F00C6A                 call $cbuffer.set_write_address;
0x000560        DDF00C8B                 jump $pop_rLink_and_rts;

 <$sra_tagtimes>
0x000561        F3D00000                 push rLink;
0x000562        09202530                 r0 = Null + M[0x2530];
0x000563        E1F00C28                 call $cbuffer.calc_amount_data;
0x000564        0072000F                 r5 = r0 + Null;
0x000565        09202531                 r0 = Null + M[0x2531];
0x000566        E1F00C25                 call $cbuffer.calc_amount_data;
0x000567        03720000                 r5 = r5 + r0;
0x000568        09772546                 r5 = r5 + M[0x2546];
0x000569        19702546                 M[0x2546] = r5 + Null;
0x00056A        09602545                 r4 = Null + M[0x2545];
0x00056B        E466002F                 r4 = r4 + 1;
0x00056C        19602545                 M[0x2545] = r4 + Null;
0x00056D        0930252F                 r1 = Null + M[$sra_struct];
0x00056E        95331000                 r1 = r1 * 0.125 (frac);
0x00056F        2006003F                 Null = r4 - r1;
0x000570        DD400030                 if NEG jump $M.sra_tagtimes.no_update_on_buf_level;
0x000571        19002545                 M[0x2545] = Null + Null;
0x000572        19002546                 M[0x2546] = Null + Null;
0x000573        09202531                 r0 = Null + M[0x2531];
0x000574        D3200000                 r0 = M[r0 + Null];
0x000575        9B260000                 r0 = r0 * r4 (int);
0x000576        91E7007F                 rMAC = r5 ASHIFT -1 (MI);
0x000577        D9020000                 Div = rMAC / r0;
0x000578        D9300001                 r1 = DivResult;
0x000579        0960254B                 r4 = Null + M[0x254b];
0x00057A        1930254B                 M[0x254b] = r1 + Null;
0x00057B        2063006F                 r4 = r1 - r4;
0x00057C        09202535                 r0 = Null + M[0x2535];
0x00057D        2043002F                 r2 = r1 - r0;
0x00057E        FD0000F9 9544999A        r2 = r2 * -0.04999995231628418 (frac);
0x000580        FD000000 2134A3D7        r1 = r2 - 41943;
0x000582        20440035                 if POS r2 = r2 - r1;
0x000583        013451EC                 r1 = r2 + 20972;
0x000584        20440034                 if NEG r2 = r2 - r1;
0x000585        01901062                 r7 = Null + 4194;
0x000586        09802547                 r6 = Null + M[0x2547];
0x000587        0024000F                 r0 = r2 + Null;

 <$M.sra_tagtimes.fix_rate>
0x000588        0038009F                 r1 = r6 + r7;
0x000589        2002003F                 Null = r0 - r1;
0x00058A        00230005                 if POS r0 = r1 + Null;
0x00058B        2038009F                 r1 = r6 - r7;
0x00058C        2002003F                 Null = r0 - r1;
0x00058D        00230004                 if NEG r0 = r1 + Null;
0x00058E        19202547                 M[0x2547] = r0 + Null;

 <$M.sra_tagtimes.set_final_rate>
0x00058F        09202548                 r0 = Null + M[0x2548];
0x000590        09222547                 r0 = r0 + M[0x2547];
0x000591        29322533                 r1 = r0 - M[0x2533];
0x000592        20220035                 if POS r0 = r0 - r1;
0x000593        09322533                 r1 = r0 + M[0x2533];
0x000594        20220034                 if NEG r0 = r0 - r1;
0x000595        FD000001 0132EB85        r1 = r0 + 125829;
0x000597        20220034                 if NEG r0 = r0 - r1;
0x000598        09802541                 r6 = Null + M[0x2541];
0x000599        0038009F                 r1 = r6 + r7;
0x00059A        2002003F                 Null = r0 - r1;
0x00059B        00230005                 if POS r0 = r1 + Null;
0x00059C        2038009F                 r1 = r6 - r7;
0x00059D        2002003F                 Null = r0 - r1;
0x00059E        00230004                 if NEG r0 = r1 + Null;
0x00059F        19202541                 M[0x2541] = r0 + Null;

 <$M.sra_tagtimes.no_update_on_buf_level>
0x0005A0        09202530                 r0 = Null + M[0x2530];
0x0005A1        E1F00BEA                 call $cbuffer.calc_amount_data;
0x0005A2        0052000F                 r3 = r0 + Null;
0x0005A3        09202537                 r0 = Null + M[0x2537];
0x0005A4        E422002F                 r0 = r0 + 1;
0x0005A5        0005000F                 Null = r3 + Null;
0x0005A6        00200001                 if NE r0 = Null + Null;
0x0005A7        19202537                 M[0x2537] = r0 + Null;
0x0005A8        2102001E                 Null = r0 - 30;
0x0005A9        DD400003                 if NEG jump $M.sra_tagtimes.no_reset_sra;
0x0005AA        19002547                 M[0x2547] = Null + Null;
0x0005AB        DDF00023                 jump $reset_sra;

 <$M.sra_tagtimes.no_reset_sra>
0x0005AC        09202538                 r0 = Null + M[0x2538];
0x0005AD        0130006E                 r1 = Null + 110;
0x0005AE        E422002F                 r0 = r0 + 1;
0x0005AF        2002003F                 Null = r0 - r1;
0x0005B0        00230005                 if POS r0 = r1 + Null;
0x0005B1        19202538                 M[0x2538] = r0 + Null;
0x0005B2        09202539                 r0 = Null + M[0x2539];
0x0005B3        FD0000FF D122371E        r0 = M[r0 + -51426];
0x0005B5        DC02000F                 jump r0;

 <$M.sra_tagtimes.idle>
0x0005B6        09202538                 r0 = Null + M[0x2538];
0x0005B7        21020064                 Null = r0 - 100;
0x0005B8        DD500002                 if POS jump $M.sra_tagtimes.start;
0x0005B9        DDF00014                 jump $M.sra_tagtimes.end;

 <$M.sra_tagtimes.start>
0x0005BA        09202531                 r0 = Null + M[0x2531];
0x0005BB        E1F00BFB                 call $cbuffer.get_write_address_and_size;
0x0005BC        1920253A                 M[0x253a] = r0 + Null;
0x0005BD        E420002F                 r0 = Null + 1;
0x0005BE        19202539                 M[0x2539] = r0 + Null;
0x0005BF        1900253C                 M[0x253c] = Null + Null;

 <$M.sra_tagtimes.counting>
0x0005C0        0920253C                 r0 = Null + M[0x253c];
0x0005C1        E422002F                 r0 = r0 + 1;
0x0005C2        1920253C                 M[0x253c] = r0 + Null;
0x0005C3        E422003F                 r0 = r0 - 1;
0x0005C4        2902252F                 Null = r0 - M[$sra_struct];
0x0005C5        DD400008                 if NEG jump $M.sra_tagtimes.end;
0x0005C6        0920253D                 r0 = Null + M[0x253d];
0x0005C7        21020002                 Null = r0 - 2;
0x0005C8        DD100006                 if NE jump $reset_sra;
0x0005C9        09202531                 r0 = Null + M[0x2531];
0x0005CA        E1F00BEC                 call $cbuffer.get_write_address_and_size;
0x0005CB        1920253B                 M[0x253b] = r0 + Null;
0x0005CC        DDF0FFEA                 jump $M.sra_tagtimes.idle;

 <$M.sra_tagtimes.end>
0x0005CD        DDF00C1E                 jump $pop_rLink_and_rts;

 <$reset_sra>
0x0005CE        19002538                 M[0x2538] = Null + Null;
0x0005CF        1900253D                 M[0x253d] = Null + Null;
0x0005D0        1900253B                 M[0x253b] = Null + Null;
0x0005D1        1900253A                 M[0x253a] = Null + Null;
0x0005D2        19002539                 M[0x2539] = Null + Null;
0x0005D3        DDF00C18                 jump $pop_rLink_and_rts;

 <$cbops.fir_resample.main>
0x0005D4        F3D00000                 push rLink;
0x0005D5        D12A0000                 r0 = M[r8 + 0];
0x0005D6        D038002F                 r1 = M[r6 + r0];
0x0005D7        5000003F                 I0 = Null + r1;
0x0005D8        D039002F                 r1 = M[r7 + r0];
0x0005D9        50C0003F                 L0 = Null + r1;
0x0005DA        D12A0001                 r0 = M[r8 + 1];
0x0005DB        D038002F                 r1 = M[r6 + r0];
0x0005DC        5040003F                 I4 = Null + r1;
0x0005DD        D039002F                 r1 = M[r7 + r0];
0x0005DE        50E0003F                 L4 = Null + r1;
0x0005DF        09302A63                 r1 = Null + M[$M.cbops.fir_resample.amount_used];
0x0005E0        00C30001                 if NE r10 = r1 + Null;
0x0005E1        19C02A63                 M[$M.cbops.fir_resample.amount_used] = r10 + Null;
0x0005E2        D10A000C                 Null = M[r8 + 12];
0x0005E3        DD10000C                 if NE jump $M.cbops.fir_resample.main.do_resample;
0x0005E4        D12A0006                 r0 = M[r8 + 6];
0x0005E5        D13A0007                 r1 = M[r8 + 7];
0x0005E6        2002003F                 Null = r0 - r1;
0x0005E7        DD100008                 if NE jump $M.cbops.fir_resample.main.do_resample;
0x0005E8        009C000F                 r7 = r10 + Null;
0x0005E9        E4CC003F                 r10 = r10 - 1;
0x0005EA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0005EB        E5F00002                 do $M.cbops.fir_resample.main.copy_loop;
0x0005EC        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.fir_resample.main.copy_loop>
0x0005ED        030000A1                 Null = Null + Null, M[I4,1] = r0;
0x0005EE        DDF00051                 jump $M.cbops.fir_resample.main.process_done;

 <$M.cbops.fir_resample.main.do_resample>
0x0005EF        51D0000D                 L1 = Null + 13;
0x0005F0        D12A0005                 r0 = M[r8 + 5];
0x0005F1        5010002F                 I1 = Null + r0;
0x0005F2        D17A0002                 r5 = M[r8 + 2];
0x0005F3        5137007E                 I3 = r5 + 126;
0x0005F4        D17A0009                 r5 = M[r8 + 9];
0x0005F5        D15A0008                 r3 = M[r8 + 8];
0x0005F6        5050005F                 I5 = Null + r3;
0x0005F7        D16A000A                 r4 = M[r8 + 10];
0x0005F8        D12A000B                 r0 = M[r8 + 11];
0x0005F9        5020002F                 I2 = Null + r0;
0x0005FA        51B00001                 M3 = Null + 1;
0x0005FB        01800015                 r6 = Null + 21;
0x0005FC        70A0008F                 M2 = Null - r6;
0x0005FD        5080008F                 M0 = Null + r6;
0x0005FE        01900000                 r7 = Null + 0;
0x0005FF        F3A00000                 push r8;
0x000600        E5F00039                 do $M.cbops.fir_resample.main.fractinal_gen_loop;
0x000601        03005100                 Null = Null + Null, r3 = M[I0,1];
0x000602        7F2BD500                 I2 = I2 - M3, M[I1,1] = r3;
0x000603        DD500035                 if POS jump $M.cbops.fir_resample.main.continue_reading;

 <$M.cbops.fir_resample.main.generate_output_loop>
0x000604        CC16008F                 rMAC = r4 * r6 (SS);
0x000605        8DA10018                 r8 = rMAC LSHIFT 24;
0x000606        8DAA007F                 r8 = r8 LSHIFT -1;
0x000607        8D410000                 r2 = rMAC LSHIFT 0;
0x000608        5863004F                 I6 = I3 + r2;
0x000609        6524FFEA                 r0 = -22 - r2;
0x00060A        7092004F                 M1 = r0 - r2;
0x00060B        5871000F                 I7 = I1 + Null;
0x00060C        2211273A                 rMAC = rMAC - rMAC, r0 = M[I1,M3], r1 = M[I6,M2];
0x00060D        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00060E        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x00060F        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000610        BE23273A                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000611        BE232739                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000612        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000613        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000614        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000615        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000616        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000617        BE232738                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000618        BC12273F                 rMAC = rMAC - r0 * r1 (SS), r0 = M[I1,M3];
0x000619        79990002                 M1 = M1 - 2;
0x00061A        474B0000                 r2 = r2 + M3;
0x00061B        DD400003                 if NEG jump $M.cbops.fir_resample.main.no_extra_load;
0x00061C        71980001                 M1 = r6 - 1;
0x00061D        2040378F                 r2 = Null - r6, r1 = M[I1,M3];

 <$M.cbops.fir_resample.main.no_extra_load>
0x00061E        5863004F                 I6 = I3 + r2;
0x00061F        0041000F                 r2 = rMAC + Null;
0x000620        469B273A                 r7 = r7 + M3, r0 = M[I1,M3], r1 = M[I6,M2];
0x000621        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000622        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000623        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000624        AE23273A                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M2];
0x000625        AE232739                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M1];
0x000626        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000627        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000628        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x000629        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00062A        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00062B        AE232738                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I1,M3], r1 = M[I6,M0];
0x00062C        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x00062D        5817000F                 I1 = I7 + Null;
0x00062E        CC1100AF                 rMAC = rMAC * r8 (SS);
0x00062F        FD00007F BD14FFFF        rMAC = rMAC - r2 * 0.99999988079071045 (SS);
0x000631        03670091                 r4 = r4 + r5, M[I4,1] = rMAC;
0x000632        DD400004                 if NEG jump $M.cbops.fir_resample.main.gen_done;
0x000633        59220001                 I2 = I2 + 1;
0x000634        FD00007F 2166FFFF        r4 = r4 - 8388607;

 <$M.cbops.fir_resample.main.gen_done>
0x000636        5F250000                 I2 = I2 + I5;
0x000637        DD40FFCD                 if NEG jump $M.cbops.fir_resample.main.generate_output_loop;

 <$M.cbops.fir_resample.main.continue_reading>
0x000638        03000000                 Null = Null + Null;

 <$M.cbops.fir_resample.main.fractinal_gen_loop>
0x000639        F3A40000                 pop r8;
0x00063A        4420001F                 r0 = Null + I1;
0x00063B        D52A0005                 M[r8 + 5] = r0;
0x00063C        4420002F                 r0 = Null + I2;
0x00063D        D52A000B                 M[r8 + 11] = r0;
0x00063E        D56A000A                 M[r8 + 10] = r4;

 <$M.cbops.fir_resample.main.process_done>
0x00063F        51E00000                 L4 = Null + 0;
0x000640        51D00000                 L1 = Null + 0;
0x000641        51C00000                 L0 = Null + 0;
0x000642        FD0000FF 19905A5D        M[$cbops.amount_written] = r7 + Null;
0x000644        09302A63                 r1 = Null + M[$M.cbops.fir_resample.amount_used];
0x000645        D12AFFFE                 r0 = M[r8 + -2];
0x000646        E402002F                 Null = r0 + 1;
0x000647        00930000                 if EQ r7 = r1 + Null;
0x000648        19902A5D                 M[$cbops.amount_to_use] = r7 + Null;
0x000649        DDF00BA2                 jump $pop_rLink_and_rts;

 <$MeloD_Expansion.process>
0x00064A        D1290005                 r0 = M[r7 + 5];
0x00064B        D1890006                 r6 = M[r7 + 6];
0x00064C        D1A90004                 r8 = M[r7 + 4];
0x00064D        D3A00000                 r8 = M[r8 + Null];
0x00064E        01703D5D                 r5 = Null + 15709;
0x00064F        832A0000                 r0 = r0 AND r8;
0x000650        DD000004                 if EQ jump $M.MeloD_Expansion_process.not_bypassed_in_music_manager;
0x000651        0008000F                 Null = r6 + Null;
0x000652        DD0007CF                 if EQ jump $M.audio_proc.stereo_copy.Process.func;
0x000653        2070007F                 r5 = Null - r5;

 <$M.MeloD_Expansion_process.not_bypassed_in_music_manager>
0x000654        F3D00000                 push rLink;
0x000655        0920FE93                 r0 = Null + M[0xfffe93];
0x000656        F3200000                 push r0;
0x000657        E420002F                 r0 = Null + 1;
0x000658        1920FE93                 M[0xfffe93] = r0 + Null;
0x000659        D1290000                 r0 = M[r7 + 0];
0x00065A        E1F00B66                 call $frmbuffer.get_buffer;
0x00065B        5000002F                 I0 = Null + r0;
0x00065C        50C0003F                 L0 = Null + r1;
0x00065D        D1290001                 r0 = M[r7 + 1];
0x00065E        E1F00B62                 call $frmbuffer.get_buffer;
0x00065F        5040002F                 I4 = Null + r0;
0x000660        50E0003F                 L4 = Null + r1;
0x000661        00C5000F                 r10 = r3 + Null;
0x000662        D1290002                 r0 = M[r7 + 2];
0x000663        005C000F                 r3 = r10 + Null;
0x000664        E1F00B85                 call $frmbuffer.set_frame_size;
0x000665        E1F00B5B                 call $frmbuffer.get_buffer;
0x000666        5010002F                 I1 = Null + r0;
0x000667        50D0003F                 L1 = Null + r1;
0x000668        D1290003                 r0 = M[r7 + 3];
0x000669        005C000F                 r3 = r10 + Null;
0x00066A        E1F00B7F                 call $frmbuffer.set_frame_size;
0x00066B        E1F00B55                 call $frmbuffer.get_buffer;
0x00066C        5050002F                 I5 = Null + r0;
0x00066D        50F0003F                 L5 = Null + r1;
0x00066E        51900001                 M1 = Null + 1;
0x00066F        51A0FFFE                 M2 = Null + -2;
0x000670        E5F00040                 do $M.MeloD_Expansion_process.widening_process_loop;
0x000671        D1290007                 r0 = M[r7 + 7];
0x000672        5020002F                 I2 = Null + r0;
0x000673        D1290008                 r0 = M[r7 + 8];
0x000674        5060002F                 I6 = Null + r0;
0x000675        03002030                 Null = Null + Null, r0 = M[I0,0], r1 = M[I4,0];
0x000676        9122007F                 r0 = r0 ASHIFT -1;
0x000677        9133007F                 r1 = r1 ASHIFT -1;
0x000678        2042003F                 r2 = r0 - r1;
0x000679        03322859                 r1 = r1 + r0, r0 = M[I2,0], r3 = M[I6,1];
0x00067A        CF25C959                 rMAC = r0 * r3 (SS), M[I2,1] = r2, r3 = M[I6,1];
0x00067B        AF452859                 rMAC = rMAC + r2 * r3 (SS), r0 = M[I2,0], r3 = M[I6,1];
0x00067C        BC12005F                 rMAC = rMAC - r0 * r3 (SS);
0x00067D        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x00067E        0041000F                 r2 = rMAC + Null;
0x00067F        0023C94F                 r0 = r1 + r2, M[I2,M1] = r2;
0x000680        23344959                 r1 = r1 - r2, r2 = M[I2,1], r3 = M[I6,1];
0x000681        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x000682        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x000683        AF264900                 rMAC = rMAC + r0 * r4 (SS), r2 = M[I2,1];
0x000684        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x000685        BF45A900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r0;
0x000686        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x000687        0021000F                 r0 = rMAC + Null;
0x000688        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x000689        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x00068A        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x00068B        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x00068C        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x00068D        AF264900                 rMAC = rMAC + r0 * r4 (SS), r2 = M[I2,1];
0x00068E        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x00068F        BF45A900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r0;
0x000690        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x000691        0021000F                 r0 = rMAC + Null;
0x000692        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x000693        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x000694        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x000695        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x000696        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x000697        AF364900                 rMAC = rMAC + r1 * r4 (SS), r2 = M[I2,1];
0x000698        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x000699        BF45B900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r1;
0x00069A        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x00069B        0031000F                 r1 = rMAC + Null;
0x00069C        0300C900                 Null = Null + Null, M[I2,1] = r2;
0x00069D        0300B900                 Null = Null + Null, M[I2,1] = r1;
0x00069E        03004959                 Null = Null + Null, r2 = M[I2,1], r3 = M[I6,1];
0x00069F        CF454B59                 rMAC = r2 * r3 (SS), r2 = M[I2,-1], r3 = M[I6,1];
0x0006A0        AF45CA69                 rMAC = rMAC + r2 * r3 (SS), M[I2,2] = r2, r4 = M[I6,1];
0x0006A1        AF364900                 rMAC = rMAC + r1 * r4 (SS), r2 = M[I2,1];
0x0006A2        BC144A6F                 rMAC = rMAC - r2 * r4 (SS), r2 = M[I2,M2];
0x0006A3        BF45B900                 rMAC = rMAC - r2 * r3 (SS), M[I2,1] = r1;
0x0006A4        91110001                 rMAC = rMAC ASHIFT 1 (56bit);
0x0006A5        0031000F                 r1 = rMAC + Null;
0x0006A6        0287C900                 r6 = r6 + r5, M[I2,M1] = r2;
0x0006A7        20880074                 if NEG r6 = r6 - r5;
0x0006A8        FD00007F 0160FFFF        r4 = Null + 8388607;
0x0006AA        2268B900                 r4 = r4 - r6, M[I2,M1] = r1;
0x0006AB        CC12418F                 rMAC = r0 * r6 (SS), r2 = M[I0,M1];
0x0006AC        AE460051                 rMAC = rMAC + r2 * r4 (SS), r3 = M[I4,M1];
0x0006AD        CC13958F                 rMAC = r1 * r6 (SS), M[I1,M1] = rMAC;
0x0006AE        AC15006F                 rMAC = rMAC + r3 * r4 (SS);
0x0006AF        02000095                 Null = Null + Null, M[I5,M1] = rMAC;

 <$M.MeloD_Expansion_process.widening_process_loop>
0x0006B0        D5890006                 M[r7 + 6] = r6;
0x0006B1        50C0000F                 L0 = Null + Null;
0x0006B2        50E0000F                 L4 = Null + Null;
0x0006B3        50D0000F                 L1 = Null + Null;
0x0006B4        50F0000F                 L5 = Null + Null;
0x0006B5        F3240000                 pop r0;
0x0006B6        1920FE93                 M[0xfffe93] = r0 + Null;
0x0006B7        DDF00B34                 jump $pop_rLink_and_rts;

 <$cmpd100.analysis>
0x0006B8        D12A0000                 r0 = M[r8 + 0];
0x0006B9        D13A0001                 r1 = M[r8 + 1];
0x0006BA        83320000                 r1 = r1 AND r0;
0x0006BB        DC0D0001                 if NE rts;
0x0006BC        F3D00000                 push rLink;
0x0006BD        D12A0002                 r0 = M[r8 + 2];
0x0006BE        E1F00B02                 call $frmbuffer.get_buffer;
0x0006BF        5000002F                 I0 = Null + r0;
0x0006C0        50C0003F                 L0 = Null + r1;
0x0006C1        D12A0003                 r0 = M[r8 + 3];
0x0006C2        E1F00AFE                 call $frmbuffer.get_buffer;
0x0006C3        5040002F                 I4 = Null + r0;
0x0006C4        50E0003F                 L4 = Null + r1;
0x0006C5        00C5000F                 r10 = r3 + Null;
0x0006C6        01400000                 r2 = Null + 0;
0x0006C7        E5F0000A                 do $M.cmpd100.analysis.loop_find_peak;
0x0006C8        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x0006C9        2002000F                 Null = r0 - Null;
0x0006CA        20200024                 if NEG r0 = Null - r0;
0x0006CB        2003000F                 Null = r1 - Null;
0x0006CC        20300034                 if NEG r1 = Null - r1;
0x0006CD        2002003F                 Null = r0 - r1;
0x0006CE        00230004                 if NEG r0 = r1 + Null;
0x0006CF        2004002F                 Null = r2 - r0;
0x0006D0        00420004                 if NEG r2 = r0 + Null;

 <$M.cmpd100.analysis.loop_find_peak>
0x0006D1        FD0000FF 19405A65        M[$M.cmpd100.analysis.MusicComp_Peak] = r2 + Null;
0x0006D3        0014000F                 rMAC = r2 + Null;
0x0006D4        E1F009BA                 call $math.log2_table;
0x0006D5        19202A66                 M[$M.cmpd100.analysis.MusicComp_Peak_log] = r0 + Null;
0x0006D6        D14A001D                 r2 = M[r8 + 29];
0x0006D7        0042004F                 r2 = r0 + r2;
0x0006D8        51C00000                 L0 = Null + 0;
0x0006D9        51E00000                 L4 = Null + 0;
0x0006DA        513A0008                 I3 = r8 + 8;
0x0006DB        514A0012                 I4 = r8 + 18;
0x0006DC        51900001                 M1 = Null + 1;
0x0006DD        D15A000D                 r3 = M[r8 + 13];
0x0006DE        D16A000C                 r4 = M[r8 + 12];
0x0006DF        D17A000B                 r5 = M[r8 + 11];
0x0006E0        D18A000A                 r6 = M[r8 + 10];
0x0006E1        2024005F                 r0 = r2 - r3;
0x0006E2        DD40000E                 if NEG jump $M.cmpd100.analysis.CompressComparison;
0x0006E3        D13A0011                 r1 = M[r8 + 17];
0x0006E4        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0006E5        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x0006E6        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x0006E7        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0006E8        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0006E9        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0006EA        510A001B                 I0 = r8 + 27;
0x0006EB        19102A67                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0006EC        01300005                 r1 = Null + 5;
0x0006ED        FD0000FF 19305A66        M[$M.cmpd100.analysis.region] = r1 + Null;
0x0006EF        DDF0002F                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.CompressComparison>
0x0006F0        2024006F                 r0 = r2 - r4;
0x0006F1        DD40000D                 if NEG jump $M.cmpd100.analysis.LinearComparison;
0x0006F2        D13A0010                 r1 = M[r8 + 16];
0x0006F3        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x0006F4        BF360031                 rMAC = rMAC - r1 * r4 (SS), r1 = M[I4,1];
0x0006F5        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x0006F6        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x0006F7        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x0006F8        510A0019                 I0 = r8 + 25;
0x0006F9        19102A67                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x0006FA        01300004                 r1 = Null + 4;
0x0006FB        FD0000FF 19305A66        M[$M.cmpd100.analysis.region] = r1 + Null;
0x0006FD        DDF00021                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.LinearComparison>
0x0006FE        2024007F                 r0 = r2 - r5;
0x0006FF        DD40000C                 if NEG jump $M.cmpd100.analysis.ExpandComparison;
0x000700        D13A000F                 r1 = M[r8 + 15];
0x000701        CF236D31                 rMAC = r0 * r1 (SS), r4 = M[I3,1], r1 = M[I4,1];
0x000702        BF366F00                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I3,-1];
0x000703        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000704        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000705        510A0017                 I0 = r8 + 23;
0x000706        19102A67                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000707        01300003                 r1 = Null + 3;
0x000708        FD0000FF 19305A66        M[$M.cmpd100.analysis.region] = r1 + Null;
0x00070A        DDF00014                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.ExpandComparison>
0x00070B        2024008F                 r0 = r2 - r6;
0x00070C        DD40000C                 if NEG jump $M.cmpd100.analysis.gain_one;
0x00070D        D13A000E                 r1 = M[r8 + 14];
0x00070E        03006D00                 Null = Null + Null, r4 = M[I3,1];
0x00070F        CF236F00                 rMAC = r0 * r1 (SS), r4 = M[I3,-1];
0x000710        AC18006F                 rMAC = rMAC + r6 * r4 (SS);
0x000711        BC14006F                 rMAC = rMAC - r2 * r4 (SS);
0x000712        510A0015                 I0 = r8 + 21;
0x000713        19102A67                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x000714        01300002                 r1 = Null + 2;
0x000715        FD0000FF 19305A66        M[$M.cmpd100.analysis.region] = r1 + Null;
0x000717        DDF00007                 jump $M.cmpd100.analysis.done_comparison;

 <$M.cmpd100.analysis.gain_one>
0x000718        510A0017                 I0 = r8 + 23;
0x000719        01100000                 rMAC = Null + 0;
0x00071A        19102A67                 M[$M.cmpd100.analysis.inst_gain] = rMAC + Null;
0x00071B        E430002F                 r1 = Null + 1;
0x00071C        FD0000FF 19305A66        M[$M.cmpd100.analysis.region] = r1 + Null;

 <$M.cmpd100.analysis.done_comparison>
0x00071E        D16A0007                 r4 = M[r8 + 7];
0x00071F        5040006F                 I4 = Null + r4;
0x000720        03004130                 Null = Null + Null, r2 = M[I0,1], r1 = M[I4,0];
0x000721        2021513F                 r0 = rMAC - r1, r3 = M[I0,M1];
0x000722        00540004                 if NEG r3 = r2 + Null;
0x000723        CF256C00                 rMAC = r0 * r3 (SS), r4 = M[I3,0];
0x000724        BC13006F                 rMAC = rMAC - r1 * r4 (SS);
0x000725        03000090                 Null = Null + Null, M[I4,0] = rMAC;
0x000726        DDF00AC5                 jump $pop_rLink_and_rts;

 <$sra_calcrate>
0x000727        F3D00000                 push rLink;
0x000728        09200390                 r0 = Null + M[0x390];
0x000729        DD00FEA5                 if EQ jump $reset_sra;
0x00072A        0920253D                 r0 = Null + M[0x253d];
0x00072B        FD0000FF D12259D9        r0 = M[r0 + -42535];
0x00072D        DC02000F                 jump r0;

 <$M.sra_calcrate.idle>
0x00072E        0920253A                 r0 = Null + M[0x253a];
0x00072F        DD00004E                 if EQ jump $M.sra_calcrate.end;
0x000730        E420002F                 r0 = Null + 1;
0x000731        1920253D                 M[0x253d] = r0 + Null;

 <$M.sra_calcrate.start>
0x000732        09202531                 r0 = Null + M[0x2531];
0x000733        E1F00A7E                 call $cbuffer.get_read_address_and_size;
0x000734        0930253E                 r1 = Null + M[0x253e];
0x000735        0940253A                 r2 = Null + M[0x253a];
0x000736        E1F0004E                 call $M.sra_calcrate.is_it_within_range;
0x000737        0005000F                 Null = r3 + Null;
0x000738        DD000045                 if EQ jump $M.sra_calcrate.end;
0x000739        1900253A                 M[0x253a] = Null + Null;
0x00073A        19002540                 M[0x2540] = Null + Null;
0x00073B        01200002                 r0 = Null + 2;
0x00073C        1920253D                 M[0x253d] = r0 + Null;
0x00073D        DDF00040                 jump $M.sra_calcrate.end;

 <$M.sra_calcrate.addup>
0x00073E        09202532                 r0 = Null + M[0x2532];
0x00073F        E1F00A77                 call $cbuffer.get_write_address_and_size;
0x000740        2942253F                 r2 = r0 - M[0x253f];
0x000741        00440034                 if NEG r2 = r2 + r1;
0x000742        09342540                 r1 = r2 + M[0x2540];
0x000743        19302540                 M[0x2540] = r1 + Null;
0x000744        0940253B                 r2 = Null + M[0x253b];
0x000745        DD000038                 if EQ jump $M.sra_calcrate.end;
0x000746        09202531                 r0 = Null + M[0x2531];
0x000747        E1F00A6A                 call $cbuffer.get_read_address_and_size;
0x000748        0930253E                 r1 = Null + M[0x253e];
0x000749        0940253B                 r2 = Null + M[0x253b];
0x00074A        E1F0003A                 call $M.sra_calcrate.is_it_within_range;
0x00074B        0005000F                 Null = r3 + Null;
0x00074C        DD000031                 if EQ jump $M.sra_calcrate.end;
0x00074D        1900253B                 M[0x253b] = Null + Null;
0x00074E        01200000                 r0 = Null + 0;
0x00074F        1920253D                 M[0x253d] = r0 + Null;
0x000750        09402534                 r2 = Null + M[0x2534];
0x000751        E450002F                 r3 = Null + 1;
0x000752        29342540                 r1 = r2 - M[0x2540];
0x000753        20500054                 if NEG r3 = Null - r3;
0x000754        9B350000                 r1 = r1 * r3 (int);
0x000755        09902533                 r7 = Null + M[0x2533];
0x000756        99990003                 r7 = r7 * 3 (int);
0x000757        97490000                 r2 = r2 * r7 (frac);
0x000758        2043004F                 r2 = r1 - r2;
0x000759        DD50FFD5                 if POS jump $M.sra_calcrate.idle;
0x00075A        9B350000                 r1 = r1 * r3 (int);
0x00075B        09202543                 r0 = Null + M[0x2543];
0x00075C        D532254C                 M[r0 + 9548] = r1;
0x00075D        E422002F                 r0 = r0 + 1;
0x00075E        8122001F                 r0 = r0 AND 0x1f;
0x00075F        19202543                 M[0x2543] = r0 + Null;
0x000760        DD100003                 if NE jump $M.sra_calcrate.init_phase_passed;
0x000761        E440002F                 r2 = Null + 1;
0x000762        19402544                 M[0x2544] = r2 + Null;

 <$M.sra_calcrate.init_phase_passed>
0x000763        01300020                 r1 = Null + 32;
0x000764        09002544                 Null = Null + M[0x2544];
0x000765        00230001                 if NE r0 = r1 + Null;

 <$M.sra_calcrate.calc_final_rate>
0x000766        E4C2003F                 r10 = r0 - 1;
0x000767        FD00007F 0150FFFF        r3 = Null + 8388607;
0x000769        5100254C                 I0 = Null + 9548;
0x00076A        23334100                 r1 = r1 - r1, r2 = M[I0,1];
0x00076B        E5F00002                 do $M.sra_calcrate.acc_loop;
0x00076C        03344100                 r1 = r1 + r2, r2 = M[I0,1];

 <$M.sra_calcrate.acc_loop>
0x00076D        03340000                 r1 = r1 + r2;
0x00076E        20500054                 if NEG r3 = Null - r3;
0x00076F        97350000                 r1 = r1 * r3 (frac);
0x000770        01100000                 rMAC = Null + 0;
0x000771        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x000772        D9020000                 Div = rMAC / r0;
0x000773        D9300001                 r1 = DivResult;
0x000774        91E3007F                 rMAC = r1 ASHIFT -1 (MI);
0x000775        09402534                 r2 = Null + M[0x2534];
0x000776        D9040000                 Div = rMAC / r2;
0x000777        D9300001                 r1 = DivResult;
0x000778        29432533                 r2 = r1 - M[0x2533];
0x000779        20330045                 if POS r1 = r1 - r2;
0x00077A        97350000                 r1 = r1 * r3 (frac);
0x00077B        19302548                 M[0x2548] = r1 + Null;
0x00077C        DDF0FFB2                 jump $M.sra_calcrate.idle;

 <$M.sra_calcrate.end>
0x00077D        09202531                 r0 = Null + M[0x2531];
0x00077E        E1F00A33                 call $cbuffer.get_read_address_and_size;
0x00077F        1920253E                 M[0x253e] = r0 + Null;
0x000780        09202532                 r0 = Null + M[0x2532];
0x000781        E1F00A35                 call $cbuffer.get_write_address_and_size;
0x000782        1920253F                 M[0x253f] = r0 + Null;

 <$M.sra_calcrate.exit>
0x000783        DDF00A68                 jump $pop_rLink_and_rts;

 <$M.sra_calcrate.is_it_within_range>
0x000784        E450002F                 r3 = Null + 1;
0x000785        2002003F                 Null = r0 - r1;
0x000786        DD400006                 if NEG jump $M.sra_calcrate.neg_part;

 <$M.sra_calcrate.pos_part>
0x000787        2004002F                 Null = r2 - r0;
0x000788        00500005                 if POS r3 = Null + Null;
0x000789        2004003F                 Null = r2 - r1;
0x00078A        00500004                 if NEG r3 = Null + Null;
0x00078B        DC0D000F                 rts;

 <$M.sra_calcrate.neg_part>
0x00078C        2004003F                 Null = r2 - r1;
0x00078D        DC0D0005                 if POS rts;
0x00078E        2004002F                 Null = r2 - r0;
0x00078F        00500005                 if POS r3 = Null + Null;
0x000790        DC0D000F                 rts;

 <$cbops.copy>
0x000791        F3D00000                 push rLink;
0x000792        51900001                 M1 = Null + 1;
0x000793        510A0001                 I0 = r8 + 1;
0x000794        01807FFF                 r6 = Null + 32767;
0x000795        0098210F                 r7 = r6 + Null, r0 = M[I0,M1];
0x000796        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x000797        FD0000FF 511049BB        I1 = Null + -46661;
0x000799        FD0000FF 19A05A5C        M[$cbops.struc_ptr] = r8 + Null;
0x00079B        E5F00005                 do $M.cbops.copy.min_amount_data_loop;
0x00079C        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x00079D        E1F009EE                 call $cbuffer.calc_amount_data;
0x00079E        2002008F                 Null = r0 - r6;
0x00079F        00822104                 if NEG r6 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_data_loop>
0x0007A0        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x0007A1        E5F00005                 do $M.cbops.copy.min_amount_space_loop;
0x0007A2        0200A500                 Null = Null + Null, M[I1,M1] = r0;
0x0007A3        E1F009D8                 call $cbuffer.calc_amount_space;
0x0007A4        2002009F                 Null = r0 - r7;
0x0007A5        00922104                 if NEG r7 = r0 + Null, r0 = M[I0,M1];

 <$M.cbops.copy.min_amount_space_loop>
0x0007A6        0078000F                 r5 = r6 + Null;
0x0007A7        2007009F                 Null = r5 - r7;
0x0007A8        00790005                 if POS r5 = r7 + Null;
0x0007A9        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.amount_to_use_loop>
0x0007AA        D12A0001                 r0 = M[r8 + 1];
0x0007AB        01AA0002                 r8 = r8 + 2;
0x0007AC        D1220001                 r0 = M[r0 + 1];
0x0007AD        E0020001                 if NE call r0;
0x0007AE        D1AAFFFE                 r8 = M[r8 + -2];
0x0007AF        E40A002F                 Null = r8 + 1;
0x0007B0        DD10FFFA                 if NE jump $M.cbops.copy.amount_to_use_loop;
0x0007B1        21270200                 r0 = r5 - 512;
0x0007B2        20770025                 if POS r5 = r5 - r0;
0x0007B3        FD0000FF 09A05A5C        r8 = Null + M[$cbops.struc_ptr];
0x0007B5        19702A5D                 M[$cbops.amount_to_use] = r5 + Null;
0x0007B6        DD000042                 if EQ jump $M.cbops.copy.done;
0x0007B7        FD0000FF 19705A5D        M[$cbops.amount_written] = r5 + Null;
0x0007B9        510A0001                 I0 = r8 + 1;
0x0007BA        5140281E                 I4 = Null + 10270;
0x0007BB        FD0000FF 511049AB        I1 = Null + -46677;
0x0007BD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0007BE        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x0007BF        E5F00004                 do $M.cbops.copy.get_read_address_and_size_loop;
0x0007C0        E1F009F1                 call $cbuffer.get_read_address_and_size;
0x0007C1        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x0007C2        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.cbops.copy.get_read_address_and_size_loop>
0x0007C3        00C2210F                 r10 = r0 + Null, r0 = M[I0,M1];
0x0007C4        E5F00004                 do $M.cbops.copy.get_write_address_and_size_loop;
0x0007C5        E1F009F1                 call $cbuffer.get_write_address_and_size;
0x0007C6        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x0007C7        0200B500                 Null = Null + Null, M[I1,M1] = r1;

 <$M.cbops.copy.get_write_address_and_size_loop>
0x0007C8        D1AA0000                 r8 = M[r8 + 0];

 <$M.cbops.copy.operator_functions_loop>
0x0007C9        0180281E                 r6 = Null + 10270;
0x0007CA        FD0000FF 019049AB        r7 = Null + -46677;
0x0007CC        09C02A5D                 r10 = Null + M[$cbops.amount_to_use];
0x0007CD        D12A0001                 r0 = M[r8 + 1];
0x0007CE        01AA0002                 r8 = r8 + 2;
0x0007CF        D1220002                 r0 = M[r0 + 2];
0x0007D0        E0020001                 if NE call r0;
0x0007D1        D1AAFFFE                 r8 = M[r8 + -2];
0x0007D2        E40A002F                 Null = r8 + 1;
0x0007D3        DD10FFF6                 if NE jump $M.cbops.copy.operator_functions_loop;
0x0007D4        FD0000FF 09A05A5C        r8 = Null + M[$cbops.struc_ptr];
0x0007D6        511A0001                 I1 = r8 + 1;
0x0007D7        5120281E                 I2 = Null + 10270;
0x0007D8        FD0000FF 513049AB        I3 = Null + -46677;
0x0007DA        51900001                 M1 = Null + 1;
0x0007DB        09202A5D                 r0 = Null + M[$cbops.amount_to_use];
0x0007DC        50A0002F                 M2 = Null + r0;
0x0007DD        FD0000FF 09205A5D        r0 = Null + M[$cbops.amount_written];
0x0007DF        50B0252F                 M3 = Null + r0, r0 = M[I1,M1];
0x0007E0        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_input_pointers_loop>
0x0007E1        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x0007E2        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x0007E3        DD000005                 if EQ jump $M.cbops.copy.input_is_a_port;
0x0007E4        5000003F                 I0 = Null + r1;
0x0007E5        50C0004F                 L0 = Null + r2;
0x0007E6        50C0320F                 L0 = Null + Null, r1 = M[I0,M2];
0x0007E7        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.input_is_a_port>
0x0007E8        E1F009DD                 call $cbuffer.set_read_address;
0x0007E9        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0007EA        79770001                 I7 = I7 - 1;
0x0007EB        DDC0FFF6                 if GT jump $M.cbops.copy.update_input_pointers_loop;
0x0007EC        5070252F                 I7 = Null + r0, r0 = M[I1,M1];

 <$M.cbops.copy.update_output_pointers_loop>
0x0007ED        03004D00                 Null = Null + Null, r2 = M[I3,1];
0x0007EE        6404399F                 Null = r2 - M1, r1 = M[I2,M1];
0x0007EF        DD000005                 if EQ jump $M.cbops.copy.output_is_a_port;
0x0007F0        5000003F                 I0 = Null + r1;
0x0007F1        50C0004F                 L0 = Null + r2;
0x0007F2        50C0330F                 L0 = Null + Null, r1 = M[I0,M3];
0x0007F3        4430000F                 r1 = Null + I0;

 <$M.cbops.copy.output_is_a_port>
0x0007F4        E1F009D5                 call $cbuffer.set_write_address;
0x0007F5        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0007F6        79770001                 I7 = I7 - 1;
0x0007F7        DDC0FFF6                 if GT jump $M.cbops.copy.update_output_pointers_loop;

 <$M.cbops.copy.done>
0x0007F8        DDF009F3                 jump $pop_rLink_and_rts;

 <$iir_resamplev2.Limited_Process>
0x0007F9        F3D00000                 push rLink;
0x0007FA        F3700000                 push r5;
0x0007FB        D12A0000                 r0 = M[r8 + 0];
0x0007FC        E1F0098F                 call $cbuffer.calc_amount_data;
0x0007FD        0082000F                 r6 = r0 + Null;
0x0007FE        D12A0001                 r0 = M[r8 + 1];
0x0007FF        E1F0097C                 call $cbuffer.calc_amount_space;
0x000800        0092000F                 r7 = r0 + Null;
0x000801        E1F00575                 call $iir_resamplev2.amount_to_use;
0x000802        F3640000                 pop r4;
0x000803        23760000                 r5 = r5 - r4;
0x000804        00760005                 if POS r5 = r4 + Null;
0x000805        DDF00009                 jump $M.iir_resamplev2.process.limit_entry_point;

 <$iir_resamplev2.Process>
0x000806        F3D00000                 push rLink;
0x000807        D12A0000                 r0 = M[r8 + 0];
0x000808        E1F00983                 call $cbuffer.calc_amount_data;
0x000809        0082000F                 r6 = r0 + Null;
0x00080A        D12A0001                 r0 = M[r8 + 1];
0x00080B        E1F00970                 call $cbuffer.calc_amount_space;
0x00080C        0092000F                 r7 = r0 + Null;
0x00080D        E1F00569                 call $iir_resamplev2.amount_to_use;

 <$M.iir_resamplev2.process.limit_entry_point>
0x00080E        00C7000F                 r10 = r5 + Null;
0x00080F        DDD009DC                 if LE jump $pop_rLink_and_rts;
0x000810        51800001                 M0 = Null + 1;
0x000811        FD00007F 01B0FFFF        r9 = Null + 8388607;
0x000813        500000AF                 I0 = Null + r8;
0x000814        F2A02000                 push r8, r0 = M[I0,M0];
0x000815        E1F0099C                 call $cbuffer.get_read_address_and_size;
0x000816        5010002F                 I1 = Null + r0;
0x000817        50D0203F                 L1 = Null + r1, r0 = M[I0,M0];
0x000818        E1F0099E                 call $cbuffer.get_write_address_and_size;
0x000819        50F0503F                 L5 = Null + r1, r3 = M[I0,M0];
0x00081A        5050402F                 I5 = Null + r0, r2 = M[I0,M0];
0x00081B        0005700F                 Null = r3 + Null, r5 = M[I0,M0];
0x00081C        DD000031                 if EQ jump $M.iir_resamplev2.process.jp_passthrough;
0x00081D        016A0010                 r4 = r8 + 16;
0x00081E        F3600000                 push r4;
0x00081F        F3E60000                 pop FP;
0x000820        512A000B                 I2 = r8 + 11;
0x000821        51350005                 I3 = r3 + 5;
0x000822        D1950004                 r7 = M[r3 + 4];
0x000823        DD000014                 if EQ jump $M.iir_resamplev2.process.Perform2ndStage;
0x000824        D12A0005                 r0 = M[r8 + 5];
0x000825        F1000084                 pushm <r0, r5>;
0x000826        F1018020                 pushm <I5, L5>;
0x000827        5050002F                 I5 = Null + r0;
0x000828        50F0000F                 L5 = Null + Null;
0x000829        0070000F                 r5 = Null + Null;
0x00082A        512A0007                 I2 = r8 + 7;
0x00082B        E009000F                 call r7;
0x00082C        50D0000F                 L1 = Null + Null;
0x00082D        00C96C0F                 r10 = r7 + Null, r4 = M[I3,M0];
0x00082E        4440001F                 r2 = Null + I1;
0x00082F        F1058020                 popm <I5, L5>;
0x000830        F1040084                 popm <r0, r5>;
0x000831        5010002F                 I1 = Null + r0;
0x000832        F3400000                 push r2;
0x000833        0040000F                 r2 = Null + Null;
0x000834        E006000F                 call r4;
0x000835        F3510000                 push I5;
0x000836        DDF00006                 jump $M.iir_resamplev2.process.jp_done;

 <$M.iir_resamplev2.process.Perform2ndStage>
0x000837        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000838        03000000                 Null = Null + Null;
0x000839        E002000F                 call r0;
0x00083A        F3110000                 push I1;
0x00083B        F3510000                 push I5;

 <$M.iir_resamplev2.process.jp_done>
0x00083C        F3550000                 pop I5;
0x00083D        F3150000                 pop I1;

 <$M.iir_resamplev2.process.jp_done2>
0x00083E        F3A40000                 pop r8;
0x00083F        50D0000F                 L1 = Null + Null;
0x000840        50F0000F                 L5 = Null + Null;
0x000841        F3000000                 push Null;
0x000842        F1AAFFFF                 B0 = M[SP + -0x1];
0x000843        F1BAFFFF                 B1 = M[SP + -0x1];
0x000844        F1CAFFFF                 B4 = M[SP + -0x1];
0x000845        F3D60000                 pop B5;
0x000846        D12A0001                 r0 = M[r8 + 1];
0x000847        4430005F                 r1 = Null + I5;
0x000848        E1F00981                 call $cbuffer.set_write_address;
0x000849        D12A0000                 r0 = M[r8 + 0];
0x00084A        4430001F                 r1 = Null + I1;
0x00084B        E1F0097A                 call $cbuffer.set_read_address;
0x00084C        DDF0099F                 jump $pop_rLink_and_rts;

 <$M.iir_resamplev2.process.jp_passthrough>
0x00084D        E5F00005                 do $M.iir_resamplev2.process.lp_copy;
0x00084E        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x00084F        93E40000                 rMAC = rMAC ASHIFT r2;
0x000850        93E70000                 rMAC = rMAC ASHIFT r5;
0x000851        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <$M.iir_resamplev2.process.lp_copy>
0x000852        DDF0FFEC                 jump $M.iir_resamplev2.process.jp_done2;

 <$pcm_sync_calc_rate>
0x000853        F3D00000                 push rLink;
0x000854        E1F0094F                 call $block_interrupts;
0x000855        0960FE71                 r4 = Null + M[0xfffe71];
0x000856        D13A0007                 r1 = M[r8 + 7];
0x000857        2046003F                 r2 = r4 - r1;
0x000858        20400044                 if NEG r2 = Null - r2;
0x000859        D15A0001                 r3 = M[r8 + 1];
0x00085A        2004005F                 Null = r2 - r3;
0x00085B        DD500003                 if POS jump $M.pcm_sync_calcrate.read_latency;
0x00085C        E1F00937                 call $interrupt.unblock;
0x00085D        DDF0098E                 jump $pop_rLink_and_rts;

 <$M.pcm_sync_calcrate.read_latency>
0x00085E        03350000                 r1 = r1 + r3;
0x00085F        2043006F                 r2 = r1 - r4;
0x000860        20400044                 if NEG r2 = Null - r2;
0x000861        2004005F                 Null = r2 - r3;
0x000862        00360005                 if POS r1 = r4 + Null;
0x000863        D53A0007                 M[r8 + 7] = r1;
0x000864        F3A00000                 push r8;
0x000865        D19A0002                 r7 = M[r8 + 2];
0x000866        E1F003E3                 call $latency.calc_pcm_latency;
0x000867        F3A40000                 pop r8;
0x000868        F3800000                 push r6;
0x000869        01800000                 r6 = Null + 0;
0x00086A        F3A00000                 push r8;
0x00086B        D19A0003                 r7 = M[r8 + 3];
0x00086C        E11003DD                 if NE call $latency.calc_pcm_latency;
0x00086D        F3A40000                 pop r8;
0x00086E        F3940000                 pop r7;
0x00086F        2058009F                 r3 = r6 - r7;
0x000870        E1F00923                 call $interrupt.unblock;
0x000871        D55A000D                 M[r8 + 13] = r3;
0x000872        D12A0006                 r0 = M[r8 + 6];
0x000873        23520000                 r3 = r3 - r0;
0x000874        01302710                 r1 = Null + 10000;
0x000875        E453005F                 r3 = MIN r1;
0x000876        0130D8F0                 r1 = Null + -10000;
0x000877        E453006F                 r3 = MAX r1;
0x000878        E445004F                 r2 = ABS r3;
0x000879        9D250190                 r0 = r3 * 400 (int) (sat);
0x00087A        9122007F                 r0 = r0 ASHIFT -1;
0x00087B        D10A000B                 Null = M[r8 + 11];
0x00087C        DD000009                 if EQ jump $M.pcm_sync_calcrate.not_converged;

 <$M.pcm_sync_calcrate.converged>
0x00087D        210401C2                 Null = r2 - 450;
0x00087E        DD500007                 if POS jump $M.pcm_sync_calcrate.not_converged;
0x00087F        99220005                 r0 = r0 * 5 (int);
0x000880        9482002F                 r6 = r0 * r0 (frac);
0x000881        97280000                 r0 = r0 * r6 (frac);
0x000882        E440002F                 r2 = Null + 1;
0x000883        D54A000B                 M[r8 + 11] = r2;
0x000884        DDF00007                 jump $M.pcm_sync_calcrate.converge_check_done;

 <$M.pcm_sync_calcrate.not_converged>
0x000885        21040096                 Null = r2 - 150;
0x000886        DD40FFF7                 if NEG jump $M.pcm_sync_calcrate.converged;
0x000887        91820018                 r6 = r0 ASHIFT 24;
0x000888        97220000                 r0 = r0 * r0 (frac);
0x000889        97280000                 r0 = r0 * r6 (frac);
0x00088A        D50A000B                 M[r8 + 11] = Null;

 <$M.pcm_sync_calcrate.converge_check_done>
0x00088B        FD000001 213247AE        r1 = r0 - 83886;
0x00088D        20220035                 if POS r0 = r0 - r1;
0x00088E        FD000001 013247AE        r1 = r0 + 83886;
0x000890        20220034                 if NEG r0 = r0 - r1;
0x000891        D52A0009                 M[r8 + 9] = r0;
0x000892        01100000                 rMAC = Null + 0;
0x000893        D12A0005                 r0 = M[r8 + 5];
0x000894        DD000014                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x000895        D3200000                 r0 = M[r0 + Null];
0x000896        DD000012                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x000897        D13A0004                 r1 = M[r8 + 4];
0x000898        D3300000                 r1 = M[r1 + Null];
0x000899        DD00000F                 if EQ jump $M.pcm_sync_calcrate.calc_rate_done;
0x00089A        2013002F                 rMAC = r1 - r0;
0x00089B        91E10003                 rMAC = rMAC ASHIFT 3 (MI);
0x00089C        D9020000                 Div = rMAC / r0;
0x00089D        D9100001                 rMAC = DivResult;
0x00089E        D10A000C                 Null = M[r8 + 12];
0x00089F        DD000008                 if EQ jump $M.pcm_sync_calcrate.update_rate_before_fix;
0x0008A0        E420002F                 r0 = Null + 1;
0x0008A1        D10A000C                 Null = M[r8 + 12];
0x0008A2        D16A000A                 r4 = M[r8 + 10];
0x0008A3        FD000001 CD1147AE        rMAC = rMAC * 0.0099999904632568359 (SS);
0x0008A5        FD00007E AD16B852        rMAC = rMAC + r4 * 0.99000000953674316 (SS);

 <$M.pcm_sync_calcrate.update_rate_before_fix>
0x0008A7        D51A000A                 M[r8 + 10] = rMAC;

 <$M.pcm_sync_calcrate.calc_rate_done>
0x0008A8        95610800                 r4 = rMAC * 0.0625 (frac);
0x0008A9        D15A0009                 r3 = M[r8 + 9];
0x0008AA        03650000                 r4 = r4 + r3;
0x0008AB        D12A0000                 r0 = M[r8 + 0];
0x0008AC        E462005F                 r4 = MIN r0;
0x0008AD        2020002F                 r0 = Null - r0;
0x0008AE        E462006F                 r4 = MAX r0;
0x0008AF        D56A0008                 M[r8 + 8] = r4;
0x0008B0        DDF0093B                 jump $pop_rLink_and_rts;

 <$cbops.dither_and_shift.main>
0x0008B1        F3D00000                 push rLink;
0x0008B2        D12A0000                 r0 = M[r8 + 0];
0x0008B3        D038002F                 r1 = M[r6 + r0];
0x0008B4        5000003F                 I0 = Null + r1;
0x0008B5        D039002F                 r1 = M[r7 + r0];
0x0008B6        50C0003F                 L0 = Null + r1;
0x0008B7        D12A0001                 r0 = M[r8 + 1];
0x0008B8        D038002F                 r1 = M[r6 + r0];
0x0008B9        5040003F                 I4 = Null + r1;
0x0008BA        D039002F                 r1 = M[r7 + r0];
0x0008BB        50E0003F                 L4 = Null + r1;
0x0008BC        09402A60                 r2 = Null + M[$M.cbops.dither_and_shift.main.rand_num];
0x0008BD        D15A0003                 r3 = M[r8 + 3];
0x0008BE        FD00007F 0170FFFF        r5 = Null + 8388607;
0x0008C0        D1252A04                 r0 = M[r3 + 10756];
0x0008C1        D19A0002                 r7 = M[r8 + 2];
0x0008C2        6589FFE8                 r6 = -24 - r7;
0x0008C3        9087008F                 r6 = r5 ASHIFT r6;
0x0008C4        51900011                 M1 = Null + 17;
0x0008C5        01603555                 r4 = Null + 13653;
0x0008C6        DC02000F                 jump r0;

 <$M.cbops.dither_and_shift.main.no_dither>
0x0008C7        FD00007F 0150FFFF        r3 = Null + 8388607;
0x0008C9        9065009F                 r4 = r3 ASHIFT r7;
0x0008CA        E4CC003F                 r10 = r10 - 1;
0x0008CB        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x0008CC        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x0008CD        E416005F                 rMAC = MIN r4;
0x0008CE        E5F00004                 do $M.cbops.dither_and_shift.main.just_shift_loop;
0x0008CF        03001191                 Null = Null + Null, rMAC = M[I0,1], M[I4,1] = rMAC;
0x0008D0        93190000                 rMAC = rMAC ASHIFT r7 (56bit);
0x0008D1        E416005F                 rMAC = MIN r4;

 <$M.cbops.dither_and_shift.main.just_shift_loop>
0x0008D2        03000091                 Null = Null + Null, M[I4,1] = rMAC;
0x0008D3        DDF00030                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.tpdf_dither>
0x0008D4        FD0000FF 515036F9        I5 = Null + -51463;
0x0008D6        03001100                 Null = Null + Null, rMAC = M[I0,1];
0x0008D7        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0008D8        E5F00009                 do $M.cbops.dither_and_shift.main.tpdf_dither_loop;
0x0008D9        9B460000                 r2 = r2 * r4 (int);
0x0008DA        47490000                 r2 = r2 + M1;
0x0008DB        AC14008F                 rMAC = rMAC + r2 * r6 (SS);
0x0008DC        AC17008F                 rMAC = rMAC + r5 * r6 (SS);
0x0008DD        9B460094                 r2 = r2 * r4 (int), M[I5,0] = rMAC;
0x0008DE        47490034                 r2 = r2 + M1, r1 = M[I5,0];
0x0008DF        93391100                 r1 = r1 ASHIFT r7, rMAC = M[I0,1];
0x0008E0        AF4800B1                 rMAC = rMAC + r2 * r6 (SS), M[I4,1] = r1;

 <$M.cbops.dither_and_shift.main.tpdf_dither_loop>
0x0008E1        03001300                 Null = Null + Null, rMAC = M[I0,-1];
0x0008E2        DDF00021                 jump $M.cbops.dither_and_shift.main.end;

 <$M.cbops.dither_and_shift.main.noiseshaped_dither>
0x0008E3        51D00005                 L1 = Null + 5;
0x0008E4        D12A0004                 r0 = M[r8 + 4];
0x0008E5        5010002F                 I1 = Null + r0;
0x0008E6        FD0000FF 515036F3        I5 = Null + -51469;
0x0008E8        5180FFFA                 M0 = Null + -6;
0x0008E9        FD0000FF 198036F9        M[0xff36f9] = r6 + Null;
0x0008EB        95886000                 r6 = r6 * 0.75 (frac);
0x0008EC        E450003F                 r3 = Null - 1;
0x0008ED        2020009F                 r0 = Null - r7;
0x0008EE        93523400                 r3 = r3 ASHIFT r0, r1 = M[I1,0];
0x0008EF        E5F00011                 do $M.cbops.dither_and_shift.main.shaped_dither_loop;
0x0008F0        9B461125                 r2 = r2 * r4 (int), rMAC = M[I0,1], r0 = M[I5,1];
0x0008F1        4749B700                 r2 = r2 + M1, M[I1,-1] = r1;
0x0008F2        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x0008F3        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x0008F4        BF323725                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,-1], r0 = M[I5,1];
0x0008F5        BF323425                 rMAC = rMAC - r1 * r0 (SS), r1 = M[I1,0], r0 = M[I5,1];
0x0008F6        BC13002F                 rMAC = rMAC - r1 * r0 (SS);
0x0008F7        AF480094                 rMAC = rMAC + r2 * r6 (SS), M[I5,0] = rMAC;
0x0008F8        9B460025                 r2 = r2 * r4 (int), r0 = M[I5,1];
0x0008F9        47490000                 r2 = r2 + M1;
0x0008FA        AE480034                 rMAC = rMAC + r2 * r6 (SS), r1 = M[I5,M0];
0x0008FB        AC17003F                 rMAC = rMAC + r5 * r1 (SS);
0x0008FC        8031005F                 r1 = rMAC AND r3;
0x0008FD        90E3009F                 rMAC = r1 ASHIFT r7;
0x0008FE        23320091                 r1 = r1 - r0, M[I4,1] = rMAC;
0x0008FF        9D330004                 r1 = r1 * 4 (int) (sat);

 <$M.cbops.dither_and_shift.main.shaped_dither_loop>
0x000900        7FDDB400                 L1 = L1 - L1, M[I1,0] = r1;
0x000901        4420001F                 r0 = Null + I1;
0x000902        D52A0004                 M[r8 + 4] = r0;

 <$M.cbops.dither_and_shift.main.end>
0x000903        51C00000                 L0 = Null + 0;
0x000904        51E00000                 L4 = Null + 0;
0x000905        19402A60                 M[$M.cbops.dither_and_shift.main.rand_num] = r2 + Null;
0x000906        DDF008E5                 jump $pop_rLink_and_rts;

 <$cmpd100.applygain>
0x000907        D12A0000                 r0 = M[r8 + 0];
0x000908        D13A0001                 r1 = M[r8 + 1];
0x000909        83320000                 r1 = r1 AND r0;
0x00090A        DC0D0001                 if NE rts;
0x00090B        F3D00000                 push rLink;
0x00090C        D12A0002                 r0 = M[r8 + 2];
0x00090D        E1F008B3                 call $frmbuffer.get_buffer;
0x00090E        5000002F                 I0 = Null + r0;
0x00090F        50C0003F                 L0 = Null + r1;
0x000910        D12A0003                 r0 = M[r8 + 3];
0x000911        E1F008AF                 call $frmbuffer.get_buffer;
0x000912        5040002F                 I4 = Null + r0;
0x000913        50E0003F                 L4 = Null + r1;
0x000914        00C5000F                 r10 = r3 + Null;
0x000915        D12A0004                 r0 = M[r8 + 4];
0x000916        E1F008D3                 call $frmbuffer.set_frame_size;
0x000917        E1F008A9                 call $frmbuffer.get_buffer;
0x000918        5010002F                 I1 = Null + r0;
0x000919        50D0003F                 L1 = Null + r1;
0x00091A        D12A0005                 r0 = M[r8 + 5];
0x00091B        005C000F                 r3 = r10 + Null;
0x00091C        E1F008CD                 call $frmbuffer.set_frame_size;
0x00091D        E1F008A3                 call $frmbuffer.get_buffer;
0x00091E        5050002F                 I5 = Null + r0;
0x00091F        50F0003F                 L5 = Null + r1;
0x000920        D14A0006                 r2 = M[r8 + 6];
0x000921        D15A0007                 r3 = M[r8 + 7];
0x000922        D025000F                 r0 = M[r3 + Null];
0x000923        91220004                 r0 = r0 ASHIFT 4;
0x000924        FD000003 21220000        r0 = r0 - 196608;
0x000926        E1F007BE                 call $math.pow2_table;
0x000927        FD0000FF 19205A67        M[$M.cmpd100.applygain.lin_gain] = r0 + Null;
0x000929        09502A68                 r3 = Null + M[$M.cmpd100.applygain.old_lin_gain];
0x00092A        2052005F                 r3 = r0 - r3;
0x00092B        9155007C                 r3 = r3 ASHIFT -4;
0x00092C        21CC0010                 r10 = r10 - 16;
0x00092D        FD0000FF 19C05A68        M[$M.cmpd100.applygain.remaninder_samples] = r10 + Null;
0x00092F        01C00010                 r10 = Null + 16;
0x000930        00B5000F                 r9 = r3 + Null;
0x000931        E5F0000B                 do $M.cmpd100.applygain.loop_ramped_gain_copy_data;
0x000932        09202A68                 r0 = Null + M[$M.cmpd100.applygain.old_lin_gain];
0x000933        032B0000                 r0 = r0 + r9;
0x000934        9462004F                 r4 = r0 * r2 (frac);
0x000935        03B50000                 r9 = r9 + r3;
0x000936        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000937        CC12006F                 rMAC = r0 * r4 (SS);
0x000938        91210007                 r0 = rMAC ASHIFT 7;
0x000939        9413006F                 rMAC = r1 * r4 (frac);
0x00093A        91310007                 r1 = rMAC ASHIFT 7;
0x00093B        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_ramped_gain_copy_data>
0x00093C        FD0000FF 09C05A68        r10 = Null + M[$M.cmpd100.applygain.remaninder_samples];
0x00093E        FD0000FF 09205A67        r0 = Null + M[$M.cmpd100.applygain.lin_gain];
0x000940        19202A68                 M[$M.cmpd100.applygain.old_lin_gain] = r0 + Null;
0x000941        9462004F                 r4 = r0 * r2 (frac);
0x000942        E5F00007                 do $M.cmpd100.applygain.loop_copy_data;
0x000943        03002131                 Null = Null + Null, r0 = M[I0,1], r1 = M[I4,1];
0x000944        CC12006F                 rMAC = r0 * r4 (SS);
0x000945        91210007                 r0 = rMAC ASHIFT 7;
0x000946        9413006F                 rMAC = r1 * r4 (frac);
0x000947        91310007                 r1 = rMAC ASHIFT 7;
0x000948        0300A5B5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r1;

 <$M.cmpd100.applygain.loop_copy_data>
0x000949        51C00000                 L0 = Null + 0;
0x00094A        51D00000                 L1 = Null + 0;
0x00094B        51E00000                 L4 = Null + 0;
0x00094C        51F00000                 L5 = Null + 0;
0x00094D        DDF0089E                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_downsample>
0x00094E        F3D00000                 push rLink;
0x00094F        5F380000                 I3 = I3 + M0;
0x000950        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000951        F3E20000                 push FP;
0x000952        F3A60000                 pop B0;
0x000953        F107000A                 FP = FP + 10;
0x000954        F3E20000                 push FP;
0x000955        F3C60000                 pop B4;
0x000956        F007003F                 FP = FP + r1;
0x000957        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000958        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000959        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x00095A        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x00095B        5060003F                 I6 = Null + r1;
0x00095C        F3210000                 push I2;
0x00095D        70A0386F                 M2 = Null - r4, r1 = M[I2,M0];
0x00095E        9946000A                 r2 = r4 * 10 (int);
0x00095F        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000960        5FB60000                 M3 = M3 + I6;
0x000961        5EB62800                 M3 = M3 + I6, r0 = M[I2,M0];
0x000962        5000282F                 I0 = Null + r0, r0 = M[I2,M0];
0x000963        5040002F                 I4 = Null + r0;
0x000964        51C0000A                 L0 = Null + 10;
0x000965        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x000966        2055005A                 if GE r3 = r3 - r3;
0x000967        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x000968        004400B4                 if NEG r2 = r2 + r9;
0x000969        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x00096A        4422008C                 if GT r0 = r0 + M0;
0x00096B        0003000F                 Null = r1 + Null;
0x00096C        00230001                 if NE r0 = r1 + Null;
0x00096D        23C20000                 r10 = r10 - r0;
0x00096E        DD40001E                 if NEG jump $M.iir_2ndStage_downsample.insufficient_data;

 <$M.iir_2ndStage_downsample.loop>
0x00096F        9434006F                 r1 = r2 * r4 (frac);
0x000970        5876003F                 I7 = I6 + r1;

 <$M.iir_2ndStage_downsample.read_input>
0x000971        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000972        E007000F                 call r5;
0x000973        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x000974        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input;
0x000975        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000976        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000977        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000978        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000979        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x00097A        7C7B007F                 I7 = M3 - I7;
0x00097B        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x00097C        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x00097D        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x00097E        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x00097F        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000980        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000981        903100AF                 r1 = rMAC ASHIFT r8;
0x000982        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000983        79330003                 I3 = I3 - 3;
0x000984        20057C6F                 Null = r3 - r4, r5 = M[I3,M0];
0x000985        2055005A                 if GE r3 = r3 - r3;
0x000986        98452C7F                 r2 = r3 * r5 (int), r0 = M[I3,M0];
0x000987        004400B4                 if NEG r2 = r2 + r9;
0x000988        20077C4F                 Null = r5 - r2, r5 = M[I3,M0];
0x000989        4422008C                 if GT r0 = r0 + M0;
0x00098A        23C20000                 r10 = r10 - r0;
0x00098B        DD50FFE4                 if POS jump $M.iir_2ndStage_downsample.loop;

 <$M.iir_2ndStage_downsample.insufficient_data>
0x00098C        006200CF                 r4 = r0 + r10;
0x00098D        DD000007                 if EQ jump $M.iir_2ndStage_downsample.done;
0x00098E        0026000F                 r0 = r4 + Null;
0x00098F        206000CF                 r4 = Null - r10;

 <$M.iir_2ndStage_downsample.read_input_end>
0x000990        5823140F                 I2 = I3 + Null, rMAC = M[I1,M0];
0x000991        E007000F                 call r5;
0x000992        66289090                 r0 = r0 - M0, M[I0,M0] = rMAC, M[I4,M0] = rMAC;
0x000993        DD10FFFD                 if NE jump $M.iir_2ndStage_downsample.read_input_end;

 <$M.iir_2ndStage_downsample.done>
0x000994        5832000F                 I3 = I2 + Null;
0x000995        F3250000                 pop I2;
0x000996        50C0E80F                 L0 = Null + Null, M[I2,M0] = r4;
0x000997        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000998        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000999        50E0A80F                 L4 = Null + Null, M[I2,M0] = r0;
0x00099A        DDF00851                 jump $pop_rLink_and_rts;

 <$audio_proc.hq_peq.process>
0x00099B        F3D00000                 push rLink;
0x00099C        D1290000                 r0 = M[r7 + 0];
0x00099D        E1F00823                 call $frmbuffer.get_buffer;
0x00099E        5040002F                 I4 = Null + r0;
0x00099F        50E0003F                 L4 = Null + r1;
0x0009A0        0065000F                 r4 = r3 + Null;
0x0009A1        D1290001                 r0 = M[r7 + 1];
0x0009A2        E1F00847                 call $frmbuffer.set_frame_size;
0x0009A3        E1F0081D                 call $frmbuffer.get_buffer;
0x0009A4        5000002F                 I0 = Null + r0;
0x0009A5        50C0003F                 L0 = Null + r1;
0x0009A6        F3D40000                 pop rLink;

 <$audio_proc.hq_peq.process_op>
0x0009A7        51900001                 M1 = Null + 1;
0x0009A8        51390003                 I3 = r7 + 3;
0x0009A9        5180FFFF                 M0 = Null + -1;
0x0009AA        00C02D0F                 r10 = Null + Null, r0 = M[I3,M1];
0x0009AB        54222D9F                 I2 = r0 + M1, r0 = M[I3,M1];
0x0009AC        F3200000                 push r0;
0x0009AD        F3D60000                 pop B5;
0x0009AE        50502D2F                 I5 = Null + r0, r0 = M[I3,M1];
0x0009AF        F3200000                 push r0;
0x0009B0        F3B60000                 pop B1;
0x0009B1        50103D2F                 I1 = Null + r0, r1 = M[I3,M1];
0x0009B2        50A03D3F                 M2 = Null + r1, r1 = M[I3,M1];
0x0009B3        50F03D3F                 L5 = Null + r1, r1 = M[I3,M1];
0x0009B4        50D0393F                 L1 = Null + r1, r1 = M[I2,M1];
0x0009B5        02007900                 Null = Null + Null, r5 = M[I2,M1];
0x0009B6        E483003F                 r6 = r1 - 1;
0x0009B7        D1490002                 r2 = M[r7 + 2];
0x0009B8        99440005                 r2 = r2 * 5 (int);
0x0009B9        5B240000                 I2 = I2 + r2;
0x0009BA        5F2A0000                 I2 = I2 + M2;
0x0009BB        74A000AF                 M2 = Null - M2;

 <$M.audio_proc.hq_peq.process.hq_peq_block_loop>
0x0009BC        F3600000                 push r4;
0x0009BD        66CA0021                 r10 = r10 - M2, r0 = M[I4,M1];
0x0009BE        CC122A7F                 rMAC = r0 * r5 (SS), r0 = M[I2,M2];
0x0009BF        9021008F                 r0 = rMAC ASHIFT r6;
0x0009C0        51B00003                 M3 = Null + 3;
0x0009C1        03000045                 Null = Null + Null, r2 = M[I5,1];
0x0009C2        03000035                 Null = Null + Null, r1 = M[I5,1];
0x0009C3        E5F0000C                 do $M.audio_proc.hq_peq.process.hq_biquad_loop;
0x0009C4        23116557                 rMAC = rMAC - rMAC, r4 = M[I1,1], r3 = M[I5,-1];
0x0009C5        8DE50280                 rMAC0 = r3 LSHIFT 0;
0x0009C6        AF4665A7                 rMAC = rMAC + r2 * r4 (SS), r4 = M[I1,1], M[I5,-1] = r0;
0x0009C7        AE3665B7                 rMAC = rMAC + r1 * r4 (SS), r4 = M[I1,M1], M[I5,M3] = r1;
0x0009C8        AF266545                 rMAC = rMAC + r0 * r4 (SS), r4 = M[I1,1], r2 = M[I5,1];
0x0009C9        BF466537                 rMAC = rMAC - r2 * r4 (SS), r4 = M[I1,1], r1 = M[I5,-1];
0x0009CA        BF366947                 rMAC = rMAC - r1 * r4 (SS), r4 = M[I2,1], r2 = M[I5,-1];
0x0009CB        8D510018                 r3 = rMAC LSHIFT 24;
0x0009CC        8DE00280                 rMAC0 = Null LSHIFT 0;
0x0009CD        9021006F                 r0 = rMAC ASHIFT r4;
0x0009CE        020000D7                 Null = Null + Null, M[I5,M3] = r3;

 <$M.audio_proc.hq_peq.process.hq_biquad_loop>
0x0009CF        03000057                 Null = Null + Null, r3 = M[I5,-1];
0x0009D0        03000057                 Null = Null + Null, r3 = M[I5,-1];
0x0009D1        030000B5                 Null = Null + Null, M[I5,1] = r1;
0x0009D2        030000A5                 Null = Null + Null, M[I5,1] = r0;
0x0009D3        91220001                 r0 = r0 ASHIFT 1;
0x0009D4        F3640000                 pop r4;
0x0009D5        6669A100                 r4 = r4 - M1, M[I0,M1] = r0;
0x0009D6        DD10FFE6                 if NE jump $M.audio_proc.hq_peq.process.hq_peq_block_loop;
0x0009D7        50C0000F                 L0 = Null + Null;
0x0009D8        50E0000F                 L4 = Null + Null;
0x0009D9        50D0000F                 L1 = Null + Null;
0x0009DA        50F0000F                 L5 = Null + Null;
0x0009DB        F3000000                 push Null;
0x0009DC        F1BAFFFF                 B1 = M[SP + -0x1];
0x0009DD        F3D60000                 pop B5;
0x0009DE        DC0D000F                 rts;

 <$message.received_service_routine>
0x0009DF        F3D00000                 push rLink;
0x0009E0        51800000                 M0 = Null + 0;
0x0009E1        0920FE1D                 r0 = Null + M[0xfffe1d];
0x0009E2        8132FFF0                 r1 = r0 AND 0xfff0;
0x0009E3        8903FFF0                 Null = r1 XOR 0xfff0;
0x0009E4        DD10001B                 if NE jump $M.message.received_service_routine.non_long_message;
0x0009E5        81020001                 Null = r0 AND 0x1;
0x0009E6        DD000002                 if EQ jump $M.message.received_service_routine.not_initial_packet;
0x0009E7        19002A59                 M[$message.long_message_size] = Null + Null;

 <$M.message.received_service_routine.not_initial_packet>
0x0009E8        09302A59                 r1 = Null + M[$message.long_message_size];
0x0009E9        21030052                 Null = r1 - 82;
0x0009EA        DD400002                 if NEG jump $M.message.received_service_routine.message_not_too_long;
0x0009EB        21330004                 r1 = r1 - 4;

 <$M.message.received_service_routine.message_not_too_long>
0x0009EC        0940E006                 r2 = Null + M[0xffe006];
0x0009ED        D5431704                 M[r1 + 5892] = r2;
0x0009EE        0940E007                 r2 = Null + M[0xffe007];
0x0009EF        D5431705                 M[r1 + 5893] = r2;
0x0009F0        0940E008                 r2 = Null + M[0xffe008];
0x0009F1        D5431706                 M[r1 + 5894] = r2;
0x0009F2        0940E009                 r2 = Null + M[0xffe009];
0x0009F3        D5431707                 M[r1 + 5895] = r2;
0x0009F4        01330004                 r1 = r1 + 4;
0x0009F5        19302A59                 M[$message.long_message_size] = r1 + Null;
0x0009F6        81020002                 Null = r0 AND 0x2;
0x0009F7        DD100005                 if NE jump $M.message.received_service_routine.final_packet;

 <$M.message.received_service_routine.not_final_packet>
0x0009F8        0970E001                 r5 = Null + M[0xffe001];
0x0009F9        E477002F                 r5 = r5 + 1;
0x0009FA        1970E001                 M[0xffe001] = r5 + Null;
0x0009FB        DDF007F0                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.final_packet>
0x0009FC        09201704                 r0 = Null + M[$message.long_message_data];
0x0009FD        8122FFFF                 r0 = r0 AND 0xffff;
0x0009FE        51800001                 M0 = Null + 1;

 <$M.message.received_service_routine.non_long_message>
0x0009FF        01C00032                 r10 = Null + 50;
0x000A00        09302A57                 r1 = Null + M[$message.last_addr];
0x000A01        E5F00009                 do $M.message.received_service_routine.loop;
0x000A02        E403002F                 Null = r1 + 1;
0x000A03        DD000008                 if EQ jump $M.message.received_service_routine.no_handler;
0x000A04        D1430003                 r2 = M[r1 + 3];
0x000A05        8052004F                 r3 = r0 AND r2;
0x000A06        D1430001                 r2 = M[r1 + 1];
0x000A07        2005004F                 Null = r3 - r2;
0x000A08        DD000007                 if EQ jump $M.message.received_service_routine.found;
0x000A09        D1330000                 r1 = M[r1 + 0];

 <$M.message.received_service_routine.loop>
0x000A0A        E1F01660                 call $error;

 <$M.message.received_service_routine.no_handler>
0x000A0B        0970E001                 r5 = Null + M[0xffe001];
0x000A0C        E477002F                 r5 = r5 + 1;
0x000A0D        1970E001                 M[0xffe001] = r5 + Null;
0x000A0E        DDF007DD                 jump $pop_rLink_and_rts;

 <$M.message.received_service_routine.found>
0x000A0F        D1D30002                 rLink = M[r1 + 2];
0x000A10        47080000                 Null = Null + M0;
0x000A11        DD000006                 if EQ jump $M.message.received_service_routine.short_message_mode;
0x000A12        0032000F                 r1 = r0 + Null;
0x000A13        09401705                 r2 = Null + M[0x1705];
0x000A14        01501706                 r3 = Null + 5894;
0x000A15        0120FFFE                 r0 = Null + -2;
0x000A16        DDF00005                 jump $M.message.received_service_routine.message_mode_done;

 <$M.message.received_service_routine.short_message_mode>
0x000A17        0930E006                 r1 = Null + M[0xffe006];
0x000A18        0940E007                 r2 = Null + M[0xffe007];
0x000A19        0950E008                 r3 = Null + M[0xffe008];
0x000A1A        0960E009                 r4 = Null + M[0xffe009];

 <$M.message.received_service_routine.message_mode_done>
0x000A1B        0970E001                 r5 = Null + M[0xffe001];
0x000A1C        E477002F                 r5 = r5 + 1;
0x000A1D        1970E001                 M[0xffe001] = r5 + Null;
0x000A1E        E00D000F                 call rLink;
0x000A1F        DDF007CC                 jump $pop_rLink_and_rts;

 <$cbops.iir_resamplev2.main>
0x000A20        F3D00000                 push rLink;
0x000A21        F3E20000                 push FP;
0x000A22        51800001                 M0 = Null + 1;
0x000A23        FD00007F 01B0FFFF        r9 = Null + 8388607;
0x000A25        500000AF                 I0 = Null + r8;
0x000A26        F2A02000                 push r8, r0 = M[I0,M0];
0x000A27        D038002F                 r1 = M[r6 + r0];
0x000A28        5010603F                 I1 = Null + r1, r4 = M[I0,M0];
0x000A29        D039002F                 r1 = M[r7 + r0];
0x000A2A        50D0503F                 L1 = Null + r1, r3 = M[I0,M0];
0x000A2B        D038006F                 r1 = M[r6 + r4];
0x000A2C        5050403F                 I5 = Null + r1, r2 = M[I0,M0];
0x000A2D        D039006F                 r1 = M[r7 + r4];
0x000A2E        50F0003F                 L5 = Null + r1;
0x000A2F        09302A62                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x000A30        00C37001                 if NE r10 = r1 + Null, r5 = M[I0,M0];
0x000A31        19C02A62                 M[$M.cbops.iir_resamplev2.amount_used] = r10 + Null;
0x000A32        0005000F                 Null = r3 + Null;
0x000A33        DD00002A                 if EQ jump $M.cbops_iir_resamplev2.main.jp_passthrough;
0x000A34        016A0010                 r4 = r8 + 16;
0x000A35        F3600000                 push r4;
0x000A36        F3E60000                 pop FP;
0x000A37        512A000B                 I2 = r8 + 11;
0x000A38        51350005                 I3 = r3 + 5;
0x000A39        D1950004                 r7 = M[r3 + 4];
0x000A3A        DD00000F                 if EQ jump $M.cbops_iir_resamplev2.main.Perform2ndStage;
0x000A3B        D12A0005                 r0 = M[r8 + 5];
0x000A3C        F1000084                 pushm <r0, r5>;
0x000A3D        F1018020                 pushm <I5, L5>;
0x000A3E        5050002F                 I5 = Null + r0;
0x000A3F        50F0000F                 L5 = Null + Null;
0x000A40        0070000F                 r5 = Null + Null;
0x000A41        512A0007                 I2 = r8 + 7;
0x000A42        E009000F                 call r7;
0x000A43        50D0000F                 L1 = Null + Null;
0x000A44        00C9000F                 r10 = r7 + Null;
0x000A45        0040000F                 r2 = Null + Null;
0x000A46        F1058020                 popm <I5, L5>;
0x000A47        F1040084                 popm <r0, r5>;
0x000A48        5010002F                 I1 = Null + r0;

 <$M.cbops_iir_resamplev2.main.Perform2ndStage>
0x000A49        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000A4A        03000000                 Null = Null + Null;
0x000A4B        E002000F                 call r0;
0x000A4C        FD0000FF 19905A5D        M[$cbops.amount_written] = r7 + Null;

 <$M.cbops_iir_resamplev2.main.jp_done>
0x000A4E        F3A40000                 pop r8;
0x000A4F        50D0000F                 L1 = Null + Null;
0x000A50        50F0000F                 L5 = Null + Null;
0x000A51        F3000000                 push Null;
0x000A52        F1AAFFFF                 B0 = M[SP + -0x1];
0x000A53        F1BAFFFF                 B1 = M[SP + -0x1];
0x000A54        F1CAFFFF                 B4 = M[SP + -0x1];
0x000A55        F3D60000                 pop B5;
0x000A56        09302A62                 r1 = Null + M[$M.cbops.iir_resamplev2.amount_used];
0x000A57        D12AFFFE                 r0 = M[r8 + -2];
0x000A58        E402002F                 Null = r0 + 1;
0x000A59        00930000                 if EQ r7 = r1 + Null;
0x000A5A        19902A5D                 M[$cbops.amount_to_use] = r7 + Null;
0x000A5B        F3E60000                 pop FP;
0x000A5C        DDF0078F                 jump $pop_rLink_and_rts;

 <$M.cbops_iir_resamplev2.main.jp_passthrough>
0x000A5D        009C000F                 r7 = r10 + Null;
0x000A5E        E5F00005                 do $M.cbops_iir_resamplev2.main.lp_copy;
0x000A5F        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000A60        93E40000                 rMAC = rMAC ASHIFT r2;
0x000A61        93E70000                 rMAC = rMAC ASHIFT r5;
0x000A62        02000094                 Null = Null + Null, M[I5,M0] = rMAC;

 <$M.cbops_iir_resamplev2.main.lp_copy>
0x000A63        DDF0FFEB                 jump $M.cbops_iir_resamplev2.main.jp_done;

 <$cbuffer.configure_port_message_handler>
0x000A64        F3D00000                 push rLink;
0x000A65        2103000C                 Null = r1 - 12;
0x000A66        E150001E                 if POS call $M.cbuffer.configure_port_message_handler.write_port;

 <$M.cbuffer.configure_port_message_handler.read_port>
0x000A67        D5532707                 M[r1 + 9991] = r3;
0x000A68        D54326EF                 M[r1 + 9967] = r2;
0x000A69        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.read_port_connect;
0x000A6A        09202A54                 r0 = Null + M[$cbuffer.read_port_disconnect_address];
0x000A6B        E0020001                 if NE call r0;
0x000A6C        DDF0077F                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.read_port_connect>
0x000A6D        0023000F                 r0 = r1 + Null;
0x000A6E        D144FFFF                 r2 = M[r2 + -1];
0x000A6F        01300040                 r1 = Null + 64;
0x000A70        8D440078                 r2 = r2 LSHIFT -8;
0x000A71        8C43004F                 r2 = r1 LSHIFT r2;
0x000A72        D54226D7                 M[r0 + 9943] = r2;
0x000A73        E430002F                 r1 = Null + 1;
0x000A74        0140000D                 r2 = Null + 13;
0x000A75        2105F000                 Null = r3 - -4096;
0x000A76        00340004                 if NEG r1 = r2 + Null;
0x000A77        F3200000                 push r0;
0x000A78        F3400000                 push r2;
0x000A79        01400062                 r2 = Null + 98;
0x000A7A        65020007                 Null = 7 - r0;
0x000A7B        00220044                 if NEG r0 = r0 + r2;
0x000A7C        D532FE7B                 M[r0 + -389] = r1;
0x000A7D        F3440000                 pop r2;
0x000A7E        F3240000                 pop r0;
0x000A7F        0032000F                 r1 = r0 + Null;
0x000A80        FD0000FF 09205A53        r0 = Null + M[$cbuffer.read_port_connect_address];
0x000A82        E0020001                 if NE call r0;
0x000A83        DDF00768                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port>
0x000A84        D5532707                 M[r1 + 9991] = r3;
0x000A85        D54326EF                 M[r1 + 9967] = r2;
0x000A86        DD100004                 if NE jump $M.cbuffer.configure_port_message_handler.write_port_connect;
0x000A87        09202A53                 r0 = Null + M[$cbuffer.write_port_disconnect_address];
0x000A88        E0020001                 if NE call r0;
0x000A89        DDF00762                 jump $pop_rLink_and_rts;

 <$M.cbuffer.configure_port_message_handler.write_port_connect>
0x000A8A        0023000F                 r0 = r1 + Null;
0x000A8B        D144FFFF                 r2 = M[r2 + -1];
0x000A8C        01300040                 r1 = Null + 64;
0x000A8D        8D440078                 r2 = r2 LSHIFT -8;
0x000A8E        8C43004F                 r2 = r1 LSHIFT r2;
0x000A8F        D54226D7                 M[r0 + 9943] = r2;
0x000A90        01300009                 r1 = Null + 9;
0x000A91        01400005                 r2 = Null + 5;
0x000A92        2105F000                 Null = r3 - -4096;
0x000A93        00340004                 if NEG r1 = r2 + Null;
0x000A94        F3200000                 push r0;
0x000A95        F3400000                 push r2;
0x000A96        2122000C                 r0 = r0 - 12;
0x000A97        01400066                 r2 = Null + 102;
0x000A98        65020007                 Null = 7 - r0;
0x000A99        00220044                 if NEG r0 = r0 + r2;
0x000A9A        D532FE73                 M[r0 + -397] = r1;
0x000A9B        F3440000                 pop r2;
0x000A9C        F3240000                 pop r0;
0x000A9D        0032000F                 r1 = r0 + Null;
0x000A9E        FD0000FF 09205A52        r0 = Null + M[$cbuffer.write_port_connect_address];
0x000AA0        E0020001                 if NE call r0;
0x000AA1        DDF0074A                 jump $pop_rLink_and_rts;

 <$codec_copy_handler>
0x000AA2        F3D00000                 push rLink;
0x000AA3        E1F0FABE                 call $sra_tagtimes;
0x000AA4        0120006D                 r0 = Null + 109;
0x000AA5        E1F006E6                 call $cbuffer.calc_amount_data;
0x000AA6        29C22A2F                 r10 = r0 - M[$monitor_level];
0x000AA7        DD400024                 if NEG jump $M.codec_copy_handler.no_need_to_discard;
0x000AA8        FD0000FF 012059D6        r0 = Null + -42538;
0x000AAA        E1F006D1                 call $cbuffer.calc_amount_space;
0x000AAB        21C20040                 r10 = r0 - 64;
0x000AAC        DD50001F                 if POS jump $M.codec_copy_handler.no_need_to_discard;
0x000AAD        012000AD                 r0 = Null + 173;
0x000AAE        E1F006CD                 call $cbuffer.calc_amount_space;
0x000AAF        21C20040                 r10 = r0 - 64;
0x000AB0        DD50001B                 if POS jump $M.codec_copy_handler.no_need_to_discard;
0x000AB1        FD0000FF 09205A2E        r0 = Null + M[$glob_counter_removeframe];
0x000AB3        E422002F                 r0 = r0 + 1;
0x000AB4        FD0000FF 19205A2E        M[$glob_counter_removeframe] = r0 + Null;
0x000AB6        FD0000FF 012059D6        r0 = Null + -42538;
0x000AB8        E1F006F9                 call $cbuffer.get_read_address_and_size;
0x000AB9        5000002F                 I0 = Null + r0;
0x000ABA        50C0003F                 L0 = Null + r1;
0x000ABB        51800080                 M0 = Null + 128;
0x000ABC        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x000ABD        FD0000FF 012059D6        r0 = Null + -42538;
0x000ABF        4430000F                 r1 = Null + I0;
0x000AC0        E1F00705                 call $cbuffer.set_read_address;
0x000AC1        012000AD                 r0 = Null + 173;
0x000AC2        E1F006EF                 call $cbuffer.get_read_address_and_size;
0x000AC3        5000002F                 I0 = Null + r0;
0x000AC4        50C0003F                 L0 = Null + r1;
0x000AC5        51800080                 M0 = Null + 128;
0x000AC6        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x000AC7        012000AD                 r0 = Null + 173;
0x000AC8        4430000F                 r1 = Null + I0;
0x000AC9        E1F006FC                 call $cbuffer.set_read_address;
0x000ACA        51C00000                 L0 = Null + 0;

 <$M.codec_copy_handler.no_need_to_discard>
0x000ACB        FD0000FF 01A05973        r8 = Null + -42637;
0x000ACD        E1F0FCC4                 call $cbops.copy;
0x000ACE        FD0000FF 09205A4E        r0 = Null + M[$chain0_hw_warp_enable];
0x000AD0        09222A4F                 r0 = r0 + M[$chain1_hw_warp_enable];
0x000AD1        E1100043                 if NE call $apply_hardware_warp_rate;
0x000AD2        0130017C                 r1 = Null + 380;
0x000AD3        09402A2D                 r2 = Null + M[$tmr_period_con_copy];
0x000AD4        01500AA2                 r3 = Null + 2722;
0x000AD5        E1F00706                 call $timer.schedule_event_in_period;
0x000AD6        DDF00715                 jump $pop_rLink_and_rts;

 <$iir_2ndStage_upsample>
0x000AD7        F3D00000                 push rLink;
0x000AD8        5F380000                 I3 = I3 + M0;
0x000AD9        22993C00                 r7 = r7 - r7, r1 = M[I3,M0];
0x000ADA        F3E20000                 push FP;
0x000ADB        F3A60000                 pop B0;
0x000ADC        F107000A                 FP = FP + 10;
0x000ADD        F3E20000                 push FP;
0x000ADE        F3C60000                 pop B4;
0x000ADF        F007003F                 FP = FP + r1;
0x000AE0        50E06C3F                 L4 = Null + r1, r4 = M[I3,M0];
0x000AE1        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000AE2        00833C4F                 r6 = r1 + r2, r1 = M[I3,M0];
0x000AE3        00A33C7F                 r8 = r1 + r5, r1 = M[I3,M0];
0x000AE4        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000AE5        70A0286F                 M2 = Null - r4, r0 = M[I2,M0];
0x000AE6        9946000A                 r2 = r4 * 10 (int);
0x000AE7        F3210000                 push I2;
0x000AE8        74B4588F                 M3 = r2 - M0, r3 = M[I2,M0];
0x000AE9        5EB63800                 M3 = M3 + I6, r1 = M[I2,M0];
0x000AEA        5EB64800                 M3 = M3 + I6, r2 = M[I2,M0];
0x000AEB        50002C3F                 I0 = Null + r1, r0 = M[I3,M0];
0x000AEC        50402C4F                 I4 = Null + r2, r0 = M[I3,M0];
0x000AED        51C0000A                 L0 = Null + 10;
0x000AEE        9845007F                 r2 = r3 * r5 (int);
0x000AEF        004400B4                 if NEG r2 = r2 + r9;
0x000AF0        9434006F                 r1 = r2 * r4 (frac);
0x000AF1        E5F0001C                 do $M.iir_2ndStage_upsample.loop;
0x000AF2        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000AF3        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_2ndStage_upsample.loop_rpt>
0x000AF4        5876003F                 I7 = I6 + r1;
0x000AF5        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000AF6        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000AF7        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000AF8        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000AF9        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000AFA        7C7B007F                 I7 = M3 - I7;
0x000AFB        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AFC        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AFD        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AFE        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000AFF        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000B00        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000B01        5823000F                 I2 = I3 + Null;
0x000B02        E002000F                 call r0;
0x000B03        92EA0090                 rMAC = rMAC ASHIFT r8, M[I4,M0] = rMAC;
0x000B04        46980094                 r7 = r7 + M0, M[I5,M0] = rMAC;
0x000B05        2005006F                 Null = r3 - r4;
0x000B06        2055005A                 if GE r3 = r3 - r3;
0x000B07        9845007F                 r2 = r3 * r5 (int);
0x000B08        004400B4                 if NEG r2 = r2 + r9;
0x000B09        9434006F                 r1 = r2 * r4 (frac);
0x000B0A        2007004F                 Null = r5 - r2;
0x000B0B        DDD0FFE9                 if LE jump $M.iir_2ndStage_upsample.loop_rpt;
0x000B0C        03000000                 Null = Null + Null;

 <$M.iir_2ndStage_upsample.loop>
0x000B0D        5832000F                 I3 = I2 + Null;
0x000B0E        F3250000                 pop I2;
0x000B0F        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000B10        4420A84F                 r0 = Null + I4, M[I2,M0] = r0;
0x000B11        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000B12        50E0000F                 L4 = Null + Null;
0x000B13        DDF006D8                 jump $pop_rLink_and_rts;

 <$apply_hardware_warp_rate>
0x000B14        F3D00000                 push rLink;
0x000B15        0920FE71                 r0 = Null + M[0xfffe71];
0x000B16        FD0000FF 0930597B        r1 = Null + M[0xff597b];
0x000B18        2042003F                 r2 = r0 - r1;
0x000B19        20400044                 if NEG r2 = Null - r2;
0x000B1A        FD0000FF 09505978        r3 = Null + M[$hw_warp_struct];
0x000B1C        2004005F                 Null = r2 - r3;
0x000B1D        DD4006CE                 if NEG jump $pop_rLink_and_rts;
0x000B1E        03350000                 r1 = r1 + r3;
0x000B1F        2043002F                 r2 = r1 - r0;
0x000B20        20400044                 if NEG r2 = Null - r2;
0x000B21        210407D0                 Null = r2 - 2000;
0x000B22        00320005                 if POS r1 = r0 + Null;
0x000B23        FD0000FF 1930597B        M[0xff597b] = r1 + Null;
0x000B25        FD0000FF 09605979        r4 = Null + M[0xff5979];
0x000B27        FD0000FF 0970597C        r5 = Null + M[0xff597c];
0x000B29        D3600000                 r4 = M[r4 + Null];
0x000B2A        2027006F                 r0 = r5 - r4;
0x000B2B        DD0006C0                 if EQ jump $pop_rLink_and_rts;
0x000B2C        20200024                 if NEG r0 = Null - r0;
0x000B2D        FD0000FF 0930597A        r1 = Null + M[0xff597a];
0x000B2F        FD000004 CD1531BE        rMAC = r3 * 0.032768011093139648 (SS);
0x000B31        91510008                 r3 = rMAC ASHIFT 8;
0x000B32        9442005F                 r2 = r0 * r3 (frac);
0x000B33        21023127                 Null = r0 - 12583;
0x000B34        00430004                 if NEG r2 = r1 + Null;
0x000B35        99530014                 r3 = r1 * 20 (int);
0x000B36        2034005F                 r1 = r2 - r3;
0x000B37        20440035                 if POS r2 = r2 - r1;
0x000B38        2037006F                 r1 = r5 - r4;
0x000B39        2023004F                 r0 = r1 - r2;
0x000B3A        20330025                 if POS r1 = r1 - r0;
0x000B3B        0023004F                 r0 = r1 + r2;
0x000B3C        20330024                 if NEG r1 = r1 - r0;
0x000B3D        23730000                 r5 = r5 - r1;
0x000B3E        9167007A                 r4 = r5 ASHIFT -6;
0x000B3F        91760006                 r5 = r4 ASHIFT 6;
0x000B40        FD0000FF 0920597C        r0 = Null + M[0xff597c];
0x000B42        2037002F                 r1 = r5 - r0;
0x000B43        DD000008                 if EQ jump $M.apply_hardware_warp_rate.end_hw_rate_apply;
0x000B44        FD0000FF 1970597C        M[0xff597c] = r5 + Null;
0x000B46        2060006F                 r4 = Null - r4;
0x000B47        FD000000 01408004        r2 = Null + 32772;
0x000B49        01500003                 r3 = Null + 3;
0x000B4A        E1F004E6                 call $message.send_short;

 <$M.apply_hardware_warp_rate.end_hw_rate_apply>
0x000B4B        DDF006A0                 jump $pop_rLink_and_rts;

 <$spkr_ctrl_system.initialize>
0x000B4C        F3D00000                 push rLink;
0x000B4D        F3900000                 push r7;
0x000B4E        D1490000                 r2 = M[r7 + 0];
0x000B4F        D144000B                 r2 = M[r2 + 11];
0x000B50        D1440000                 r2 = M[r2 + 0];
0x000B51        D1A90002                 r8 = M[r7 + 2];
0x000B52        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcPriEqCoefs;
0x000B53        D1990001                 r7 = M[r7 + 1];
0x000B54        D1290004                 r0 = M[r7 + 4];
0x000B55        D1390005                 r1 = M[r7 + 5];
0x000B56        03A40000                 r8 = r8 + r2;
0x000B57        D3A00000                 r8 = M[r8 + Null];
0x000B58        E1F024DB                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcPriEqCoefs>
0x000B59        F198FFFF                 r7 = M[SP + -0x1];
0x000B5A        D1490000                 r2 = M[r7 + 0];
0x000B5B        D144000B                 r2 = M[r2 + 11];
0x000B5C        D1440000                 r2 = M[r2 + 0];
0x000B5D        D1A90004                 r8 = M[r7 + 4];
0x000B5E        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcSecEqCoefs;
0x000B5F        D1990003                 r7 = M[r7 + 3];
0x000B60        D1290004                 r0 = M[r7 + 4];
0x000B61        D1390005                 r1 = M[r7 + 5];
0x000B62        03A40000                 r8 = r8 + r2;
0x000B63        D3A00000                 r8 = M[r8 + Null];
0x000B64        E1F024CF                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcSecEqCoefs>
0x000B65        F198FFFF                 r7 = M[SP + -0x1];
0x000B66        D1490000                 r2 = M[r7 + 0];
0x000B67        D144000B                 r2 = M[r2 + 11];
0x000B68        D1440000                 r2 = M[r2 + 0];
0x000B69        D1A90006                 r8 = M[r7 + 6];
0x000B6A        DD000007                 if EQ jump $M.spkr_ctrl_system.initialisation.dontCalcBassEqCoefs;
0x000B6B        D1990005                 r7 = M[r7 + 5];
0x000B6C        D1290004                 r0 = M[r7 + 4];
0x000B6D        D1390005                 r1 = M[r7 + 5];
0x000B6E        03A40000                 r8 = r8 + r2;
0x000B6F        D3A00000                 r8 = M[r8 + Null];
0x000B70        E1F024C3                 call $user_eq.calcBankCoefs.call_entry;

 <$M.spkr_ctrl_system.initialisation.dontCalcBassEqCoefs>
0x000B71        F198FFFF                 r7 = M[SP + -0x1];
0x000B72        D1490000                 r2 = M[r7 + 0];
0x000B73        D144000B                 r2 = M[r2 + 11];
0x000B74        D1340000                 r1 = M[r2 + 0];
0x000B75        0054003F                 r3 = r2 + r1;
0x000B76        D1250006                 r0 = M[r3 + 6];
0x000B77        D5240006                 M[r2 + 6] = r0;
0x000B78        F3940000                 pop r7;
0x000B79        F3D40000                 pop rLink;
0x000B7A        DC0D000F                 rts;

 <$spkr_ctrl_system.zero_data>
0x000B7B        F3D00000                 push rLink;
0x000B7C        0009000F                 Null = r7 + Null;
0x000B7D        DD000006                 if EQ jump $M.spkr_ctrl_system.initialisation.clear_buffer;
0x000B7E        00CA000F                 r10 = r8 + Null;
0x000B7F        5000009F                 I0 = Null + r7;
0x000B80        01200000                 r0 = Null + 0;
0x000B81        E5F00002                 do $M.spkr_ctrl_system.initialisation.clear_buffer;
0x000B82        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.spkr_ctrl_system.initialisation.clear_buffer>
0x000B83        F3D40000                 pop rLink;
0x000B84        DC0D000F                 rts;

 <$tone_copy_handler>
0x000B85        F3D00000                 push rLink;
0x000B86        09002A51                 Null = Null + M[$stereo_tone];
0x000B87        DD000007                 if EQ jump $M.tone_copy_handler.mono_tone;
0x000B88        FD0000FF 01A0596D        r8 = Null + -42643;
0x000B8A        E1F0FC07                 call $cbops.copy;
0x000B8B        01A0293D                 r8 = Null + 10557;
0x000B8C        E1F0FC05                 call $cbops.copy;
0x000B8D        DDF00005                 jump $M.tone_copy_handler.resample_done;

 <$M.tone_copy_handler.mono_tone>
0x000B8E        01A029C7                 r8 = Null + 10695;
0x000B8F        E1F0FC02                 call $cbops.copy;
0x000B90        01A029B6                 r8 = Null + 10678;
0x000B91        E1F0FC00                 call $cbops.copy;

 <$M.tone_copy_handler.resample_done>
0x000B92        E1F0024E                 call $detect_end_of_aux_stream;
0x000B93        013029E9                 r1 = Null + 10729;
0x000B94        FD0000FF 09405A51        r2 = Null + M[$tmr_period_tone_copy];
0x000B96        01500B85                 r3 = Null + 2949;
0x000B97        E1F00644                 call $timer.schedule_event_in_period;
0x000B98        DDF00653                 jump $pop_rLink_and_rts;

 <$tone_copy_extra>
0x000B99        F3D00000                 push rLink;
0x000B9A        E1F02B3D                 call $multi_chan_tones_active;
0x000B9B        0002000F                 Null = r0 + Null;
0x000B9C        DD00064F                 if EQ jump $pop_rLink_and_rts;
0x000B9D        FD0000FF 012059F4        r0 = Null + -42508;
0x000B9F        E1F005EC                 call $cbuffer.calc_amount_data;
0x000BA0        FD0000FF 09405A50        r2 = Null + M[$current_tone_sampling_rate];
0x000BA2        FD0000FF 09305A2D        r1 = Null + M[$tmr_period_audio_copy];
0x000BA4        CC14003F                 rMAC = r2 * r1 (SS);
0x000BA5        9141000D                 r2 = rMAC ASHIFT 13;
0x000BA6        FD000000 95443255        r2 = r2 * 0.0015360116958618164 (frac);
0x000BA8        2002004F                 Null = r0 - r2;
0x000BA9        DD500642                 if POS jump $pop_rLink_and_rts;
0x000BAA        01A029C7                 r8 = Null + 10695;
0x000BAB        FD0000FF 0190596D        r7 = Null + -42643;
0x000BAD        09002A51                 Null = Null + M[$stereo_tone];
0x000BAE        00A90001                 if NE r8 = r7 + Null;
0x000BAF        E1F0FBE2                 call $cbops.copy;
0x000BB0        DDF0063B                 jump $pop_rLink_and_rts;

 <$M.audio_proc.stream_gain.Process.func>
0x000BB1        F3D00000                 push rLink;
0x000BB2        D1290000                 r0 = M[r7 + 0];
0x000BB3        E1F0060D                 call $frmbuffer.get_buffer;
0x000BB4        5000002F                 I0 = Null + r0;
0x000BB5        50C0003F                 L0 = Null + r1;
0x000BB6        00C5000F                 r10 = r3 + Null;
0x000BB7        D1290001                 r0 = M[r7 + 1];
0x000BB8        E1F00631                 call $frmbuffer.set_frame_size;
0x000BB9        E1F00607                 call $frmbuffer.get_buffer;
0x000BBA        5040002F                 I4 = Null + r0;
0x000BBB        50E0003F                 L4 = Null + r1;
0x000BBC        F3D40000                 pop rLink;
0x000BBD        D1390002                 r1 = M[r7 + 2];
0x000BBE        D1490003                 r2 = M[r7 + 3];
0x000BBF        D3300000                 r1 = M[r1 + Null];
0x000BC0        D3400000                 r2 = M[r2 + Null];
0x000BC1        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000BC2        210A0000                 Null = r8 - 0;
0x000BC3        DD00001D                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;
0x000BC4        D15A0002                 r3 = M[r8 + 2];
0x000BC5        D16A0003                 r4 = M[r8 + 3];
0x000BC6        2003005F                 Null = r1 - r3;
0x000BC7        DD100003                 if NE jump $M.audio_proc.stream_gain.Process.apply_ramp;
0x000BC8        2004006F                 Null = r2 - r4;
0x000BC9        DD000017                 if EQ jump $M.audio_proc.stream_gain.Process.adjust_gain;

 <$M.audio_proc.stream_gain.Process.apply_ramp>
0x000BCA        D17A0001                 r5 = M[r8 + 1];
0x000BCB        E5F00010                 do $M.audio_proc.stream_gain.Process.lp_ramp_copy;
0x000BCC        D18A0000                 r6 = M[r8 + 0];
0x000BCD        03780000                 r5 = r5 + r6;
0x000BCE        FD00007F 2107FFFF        Null = r5 - 8388607;
0x000BD0        DD50000D                 if POS jump $M.audio_proc.stream_gain.Process.complete;
0x000BD1        CC12003F                 rMAC = r0 * r1 (SS);
0x000BD2        9081004F                 r6 = rMAC ASHIFT r2;
0x000BD3        97870000                 r6 = r6 * r5 (frac);
0x000BD4        FD00007F 6597FFFF        r7 = 8388607 - r5;
0x000BD6        CC12005F                 rMAC = r0 * r3 (SS);
0x000BD7        9021006F                 r0 = rMAC ASHIFT r4;
0x000BD8        97290000                 r0 = r0 * r7 (frac);
0x000BD9        03280000                 r0 = r0 + r6;
0x000BDA        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.audio_proc.stream_gain.Process.lp_ramp_copy>
0x000BDB        D57A0001                 M[r8 + 1] = r5;
0x000BDC        DDF00008                 jump $M.audio_proc.stream_gain.Process.exit;

 <$M.audio_proc.stream_gain.Process.complete>
0x000BDD        D53A0002                 M[r8 + 2] = r1;
0x000BDE        D54A0003                 M[r8 + 3] = r2;
0x000BDF        D50A0001                 M[r8 + 1] = Null;

 <$M.audio_proc.stream_gain.Process.adjust_gain>
0x000BE0        E5F00004                 do $M.audio_proc.stream_gain.Process.exit;
0x000BE1        CC12003F                 rMAC = r0 * r1 (SS);
0x000BE2        93140000                 rMAC = rMAC ASHIFT r2 (56bit);
0x000BE3        03002191                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = rMAC;

 <$M.audio_proc.stream_gain.Process.exit>
0x000BE4        50C0000F                 L0 = Null + Null;
0x000BE5        50E0000F                 L4 = Null + Null;
0x000BE6        DC0D000F                 rts;

 <$M.mips_profile.mainstart>
0x000BE7        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000BE8        D52A0001                 M[r8 + 1] = r0;
0x000BE9        D50A0005                 M[r8 + 5] = Null;
0x000BEA        D12A0000                 r0 = M[r8 + 0];
0x000BEB        DD000002                 if EQ jump $M.mips_profile.init;
0x000BEC        DC0D000F                 rts;

 <$M.mips_profile.init>
0x000BED        0920FE71                 r0 = Null + M[0xfffe71];
0x000BEE        D52A0009                 M[r8 + 9] = r0;
0x000BEF        E420002F                 r0 = Null + 1;
0x000BF0        D52A0000                 M[r8 + 0] = r0;
0x000BF1        D50A0002                 M[r8 + 2] = Null;
0x000BF2        D50A0004                 M[r8 + 4] = Null;
0x000BF3        DC0D000F                 rts;

 <$M.mips_profile.mainend>
0x000BF4        D12A0000                 r0 = M[r8 + 0];
0x000BF5        DC0D0000                 if EQ rts;
0x000BF6        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000BF7        D13A0001                 r1 = M[r8 + 1];
0x000BF8        23230000                 r0 = r0 - r1;
0x000BF9        D13A0005                 r1 = M[r8 + 5];
0x000BFA        23230000                 r0 = r0 - r1;
0x000BFB        D13A0002                 r1 = M[r8 + 2];
0x000BFC        03230000                 r0 = r0 + r1;
0x000BFD        D52A0002                 M[r8 + 2] = r0;
0x000BFE        0920FE71                 r0 = Null + M[0xfffe71];
0x000BFF        D13A0009                 r1 = M[r8 + 9];
0x000C00        23230000                 r0 = r0 - r1;
0x000C01        FD0000FF 093037FF        r1 = Null + M[$M.mips_profile.evalinterval_us];
0x000C03        2002003F                 Null = r0 - r1;
0x000C04        DC0D0004                 if NEG rts;
0x000C05        D12A0002                 r0 = M[r8 + 2];
0x000C06        D52A0006                 M[r8 + 6] = r0;
0x000C07        D13A0004                 r1 = M[r8 + 4];
0x000C08        D53A0007                 M[r8 + 7] = r1;
0x000C09        03230000                 r0 = r0 + r1;
0x000C0A        D52A0008                 M[r8 + 8] = r0;
0x000C0B        D50A0000                 M[r8 + 0] = Null;
0x000C0C        DC0D000F                 rts;

 <$M.mips_profile.intstart>
0x000C0D        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000C0E        D52A0003                 M[r8 + 3] = r0;
0x000C0F        DC0D000F                 rts;

 <$M.mips_profile.intend>
0x000C10        0920FE6C                 r0 = Null + M[0xfffe6c];
0x000C11        D13A0003                 r1 = M[r8 + 3];
0x000C12        23230000                 r0 = r0 - r1;
0x000C13        D13A0004                 r1 = M[r8 + 4];
0x000C14        0032003F                 r1 = r0 + r1;
0x000C15        D53A0004                 M[r8 + 4] = r1;
0x000C16        D13A0005                 r1 = M[r8 + 5];
0x000C17        0032003F                 r1 = r0 + r1;
0x000C18        D53A0005                 M[r8 + 5] = r1;
0x000C19        DC0D000F                 rts;

 <$flash.copy_to_dm_24>
0x000C1A        F3D00000                 push rLink;
0x000C1B        0082000F                 r6 = r0 + Null;
0x000C1C        81730001                 r5 = r1 AND 0x1;
0x000C1D        9163007F                 r4 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.page_loop>
0x000C1E        0028000F                 r0 = r6 + Null;
0x000C1F        99360003                 r1 = r4 * 3 (int);
0x000C20        F3300000                 push r1;
0x000C21        E1F0057A                 call $flash.map_page_into_dm;
0x000C22        5010002F                 I1 = Null + r0;
0x000C23        00C6000F                 r10 = r4 + Null;
0x000C24        F3240000                 pop r0;
0x000C25        2002003F                 Null = r0 - r1;
0x000C26        DD000005                 if EQ jump $M.flash.copy_to_dm_24.read_values;
0x000C27        99330002                 r1 = r1 * 2 (int);
0x000C28        FD00002A 9533AAAB        r1 = r1 * 0.33333337306976318 (frac);
0x000C2A        91C3007F                 r10 = r1 ASHIFT -1;

 <$M.flash.copy_to_dm_24.read_values>
0x000C2B        236C0000                 r4 = r4 - r10;
0x000C2C        992C0003                 r0 = r10 * 3 (int);
0x000C2D        03820000                 r6 = r6 + r0;
0x000C2E        E5F0000B                 do $M.flash.copy_to_dm_24.loop;
0x000C2F        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000C30        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000C31        8D220008                 r0 = r0 LSHIFT 8;
0x000C32        8D530078                 r3 = r1 LSHIFT -8;
0x000C33        815500FF                 r3 = r3 AND 0xff;
0x000C34        87522500                 r3 = r3 OR r0, r0 = M[I1,1];
0x000C35        8122FFFF                 r0 = r0 AND 0xffff;
0x000C36        8D330010                 r1 = r1 LSHIFT 16;
0x000C37        0323D100                 r0 = r0 + r1, M[I0,1] = r3;
0x000C38        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm_24.loop>
0x000C39        0006000F                 Null = r4 + Null;
0x000C3A        DD10FFE4                 if NE jump $M.flash.copy_to_dm_24.page_loop;
0x000C3B        0007000F                 Null = r5 + Null;
0x000C3C        DD0005AF                 if EQ jump $pop_rLink_and_rts;
0x000C3D        0028000F                 r0 = r6 + Null;
0x000C3E        01300002                 r1 = Null + 2;
0x000C3F        E1F0055C                 call $flash.map_page_into_dm;
0x000C40        5010002F                 I1 = Null + r0;
0x000C41        03002500                 Null = Null + Null, r0 = M[I1,1];
0x000C42        03003500                 Null = Null + Null, r1 = M[I1,1];
0x000C43        8D220008                 r0 = r0 LSHIFT 8;
0x000C44        8D330078                 r1 = r1 LSHIFT -8;
0x000C45        813300FF                 r1 = r1 AND 0xff;
0x000C46        8423002F                 r0 = r1 OR r0;
0x000C47        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x000C48        DDF005A3                 jump $pop_rLink_and_rts;

 <$latency.calc_pcm_latency>
0x000C49        F3D00000                 push rLink;
0x000C4A        E1F00559                 call $block_interrupts;
0x000C4B        D1A90000                 r8 = M[r7 + 0];
0x000C4C        01800000                 r6 = Null + 0;

 <$M.latency_measure.calc_pcm_latency.proc_loop_buffers>
0x000C4D        D02A000F                 r0 = M[r8 + Null];
0x000C4E        DD000010                 if EQ jump $M.latency_measure.calc_pcm_latency.done_with_proc_loop;
0x000C4F        D802000F                 Null = SIGNDET r0;
0x000C50        DD10000A                 if NE jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000C51        0900FE33                 Null = Null + M[0xfffe33];
0x000C52        8132001F                 r1 = r0 AND 0x1f;
0x000C53        2103000C                 Null = r1 - 12;
0x000C54        DD400006                 if NEG jump $M.latency_measure.calc_pcm_latency.is_buf;
0x000C55        E1F00526                 call $cbuffer.calc_amount_space;
0x000C56        E422002F                 r0 = r0 + 1;
0x000C57        9144007F                 r2 = r2 ASHIFT -1;
0x000C58        2024002F                 r0 = r2 - r0;
0x000C59        DDF00002                 jump $M.latency_measure.calc_pcm_latency.calculate_latency;

 <$M.latency_measure.calc_pcm_latency.is_buf>
0x000C5A        E1F00531                 call $cbuffer.calc_amount_data;

 <$M.latency_measure.calc_pcm_latency.calculate_latency>
0x000C5B        E1F0000C                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000C5C        01AA0003                 r8 = r8 + 3;
0x000C5D        DDF0FFF0                 jump $M.latency_measure.calc_pcm_latency.proc_loop_buffers;

 <$M.latency_measure.calc_pcm_latency.done_with_proc_loop>
0x000C5E        D1A90001                 r8 = M[r7 + 1];
0x000C5F        DD000006                 if EQ jump $M.latency_measure.calc_pcm_latency.done;

 <$M.latency_measure.calc_pcm_latency.proc_loop_samples>
0x000C60        D02A000F                 r0 = M[r8 + Null];
0x000C61        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.done;
0x000C62        E1F00005                 call $M.latency_measure.calc_pcm_latency.calc_and_accum_latency;
0x000C63        01AA0003                 r8 = r8 + 3;
0x000C64        DDF0FFFC                 jump $M.latency_measure.calc_pcm_latency.proc_loop_samples;

 <$M.latency_measure.calc_pcm_latency.done>
0x000C65        E1F0052E                 call $interrupt.unblock;
0x000C66        DDF00585                 jump $pop_rLink_and_rts;

 <$M.latency_measure.calc_pcm_latency.calc_and_accum_latency>
0x000C67        D13A0001                 r1 = M[r8 + 1];
0x000C68        D3300000                 r1 = M[r1 + Null];
0x000C69        D14A0002                 r2 = M[r8 + 2];
0x000C6A        DD000004                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000C6B        D3400000                 r2 = M[r2 + Null];
0x000C6C        DD000002                 if EQ jump $M.latency_measure.calc_pcm_latency.no_warp;
0x000C6D        D3400000                 r2 = M[r2 + Null];

 <$M.latency_measure.calc_pcm_latency.no_warp>
0x000C6E        9453004F                 r3 = r1 * r2 (frac);
0x000C6F        9445004F                 r2 = r3 * r2 (frac);
0x000C70        0053005F                 r3 = r1 + r3;
0x000C71        0035004F                 r1 = r3 + r2;
0x000C72        CC12003F                 rMAC = r0 * r1 (SS);
0x000C73        91E10007                 rMAC = rMAC ASHIFT 7 (MI);
0x000C74        8D310000                 r1 = rMAC LSHIFT 0;
0x000C75        03830000                 r6 = r6 + r1;
0x000C76        DC0D000F                 rts;

 <$wall_clock.message_handler>
0x000C77        F3D00000                 push rLink;
0x000C78        E455002F                 r3 = r3 + 1;
0x000C79        01C00007                 r10 = Null + 7;
0x000C7A        09802A5C                 r6 = Null + M[$wall_clock.last_addr];
0x000C7B        E5F00014                 do $M.wall_clock.message_handler.loop;
0x000C7C        E408002F                 Null = r6 + 1;
0x000C7D        DD000013                 if EQ jump $M.wall_clock.message_handler.no_handler;
0x000C7E        D1280001                 r0 = M[r6 + 1];
0x000C7F        D135FFFF                 r1 = M[r3 + -1];
0x000C80        813300FF                 r1 = r1 AND 0xff;
0x000C81        2002003F                 Null = r0 - r1;
0x000C82        DD10000C                 if NE jump $M.wall_clock.message_handler.no_match;
0x000C83        D1280002                 r0 = M[r6 + 2];
0x000C84        2802005F                 Null = r0 - M[r3];
0x000C85        DD100009                 if NE jump $M.wall_clock.message_handler.no_match;
0x000C86        D1280003                 r0 = M[r6 + 3];
0x000C87        D1350001                 r1 = M[r3 + 1];
0x000C88        2002003F                 Null = r0 - r1;
0x000C89        DD100005                 if NE jump $M.wall_clock.message_handler.no_match;
0x000C8A        D1280004                 r0 = M[r6 + 4];
0x000C8B        D1350002                 r1 = M[r3 + 2];
0x000C8C        2002003F                 Null = r0 - r1;
0x000C8D        DD000004                 if EQ jump $M.wall_clock.message_handler.found;

 <$M.wall_clock.message_handler.no_match>
0x000C8E        D1880000                 r6 = M[r6 + 0];

 <$M.wall_clock.message_handler.loop>
0x000C8F        E1F013DB                 call $error;

 <$M.wall_clock.message_handler.no_handler>
0x000C90        DC0D000F                 rts;

 <$M.wall_clock.message_handler.found>
0x000C91        D1350003                 r1 = M[r3 + 3];
0x000C92        D1450004                 r2 = M[r3 + 4];
0x000C93        8DE30078                 rMAC = r1 LSHIFT -8 (MI);
0x000C94        811100FF                 rMAC = rMAC AND 0xff;
0x000C95        991104E2                 rMAC = rMAC * 1250 (int);
0x000C96        8D330010                 r1 = r1 LSHIFT 16;
0x000C97        8144FFFF                 r2 = r2 AND 0xffff;
0x000C98        03430000                 r2 = r2 + r1;
0x000C99        FD000000 A1140271        rMAC = rMAC + r2 * 3.7252902984619141e-005 (UU);
0x000C9B        8D410016                 r2 = rMAC LSHIFT 22;
0x000C9C        D1650006                 r4 = M[r3 + 6];
0x000C9D        D1550005                 r3 = M[r3 + 5];
0x000C9E        8D550010                 r3 = r3 LSHIFT 16;
0x000C9F        8166FFFF                 r4 = r4 AND 0xffff;
0x000CA0        03650000                 r4 = r4 + r3;
0x000CA1        23460000                 r2 = r2 - r4;
0x000CA2        D5480005                 M[r6 + 5] = r2;
0x000CA3        D1280006                 r0 = M[r6 + 6];
0x000CA4        E0020001                 if NE call r0;
0x000CA5        DDF00546                 jump $pop_rLink_and_rts;

 <$message.private.try_to_send_message>
0x000CA6        F3D00000                 push rLink;
0x000CA7        E1F004FC                 call $block_interrupts;
0x000CA8        0920E000                 r0 = Null + M[0xffe000];
0x000CA9        FD0000FF 29225A58        r0 = r0 - M[$message.last_seq_sent];
0x000CAB        8102FFFF                 Null = r0 AND 0xffff;
0x000CAC        DD100019                 if NE jump $M.message.private.try_to_send_message.queue_not_empty;
0x000CAD        FD0000FF 09305A57        r1 = Null + M[$message.queue_read_ptr];
0x000CAF        D1230F09                 r0 = M[r1 + 3849];
0x000CB0        1920E002                 M[0xffe002] = r0 + Null;
0x000CB1        D1230F0A                 r0 = M[r1 + 3850];
0x000CB2        1920E003                 M[0xffe003] = r0 + Null;
0x000CB3        D1230F0B                 r0 = M[r1 + 3851];
0x000CB4        1920E004                 M[0xffe004] = r0 + Null;
0x000CB5        D1230F0C                 r0 = M[r1 + 3852];
0x000CB6        1920E005                 M[0xffe005] = r0 + Null;
0x000CB7        FD0000FF 09205A58        r0 = Null + M[$message.last_seq_sent];
0x000CB9        E422002F                 r0 = r0 + 1;
0x000CBA        FD0000FF 19205A58        M[$message.last_seq_sent] = r0 + Null;
0x000CBC        D1230F08                 r0 = M[r1 + 3848];
0x000CBD        1920FE1B                 M[0xfffe1b] = r0 + Null;
0x000CBE        01330005                 r1 = r1 + 5;
0x000CBF        2103006E                 Null = r1 - 110;
0x000CC0        00300000                 if EQ r1 = Null + Null;
0x000CC1        FD0000FF 19305A57        M[$message.queue_read_ptr] = r1 + Null;
0x000CC3        29032A58                 Null = r1 - M[$message.queue_write_ptr];
0x000CC4        DD000009                 if EQ jump $M.message.private.try_to_send_message.all_done;

 <$M.message.private.try_to_send_message.queue_not_empty>
0x000CC5        FD0000FF 094059C9        r2 = Null + M[0xff59c9];
0x000CC7        E1F002E5                 call $timer.cancel_event;
0x000CC8        FD0000FF 013059C6        r1 = Null + -42554;
0x000CCA        014003E8                 r2 = Null + 1000;
0x000CCB        01500CA6                 r3 = Null + 3238;
0x000CCC        E1F00512                 call $timer.schedule_event_in;

 <$M.message.private.try_to_send_message.all_done>
0x000CCD        E1F004C6                 call $interrupt.unblock;
0x000CCE        DDF0051D                 jump $pop_rLink_and_rts;

 <$iir_1stStage_upsample>
0x000CCF        59330002                 I3 = I3 + 2;
0x000CD0        22996C00                 r7 = r7 - r7, r4 = M[I3,M0];
0x000CD1        50903C6F                 M1 = Null + r4, r1 = M[I3,M0];
0x000CD2        00A33C4F                 r8 = r1 + r2, r1 = M[I3,M0];
0x000CD3        50607C3F                 I6 = Null + r1, r5 = M[I3,M0];
0x000CD4        70A0006F                 M2 = Null - r4;
0x000CD5        99460006                 r2 = r4 * 6 (int);
0x000CD6        74B4288F                 M3 = r2 - M0, r0 = M[I2,M0];
0x000CD7        5EB65800                 M3 = M3 + I6, r3 = M[I2,M0];
0x000CD8        5FB62B00                 M3 = M3 + I6, r0 = M[I2,-1];
0x000CD9        5000002F                 I0 = Null + r0;
0x000CDA        51C00006                 L0 = Null + 6;
0x000CDB        F3E20000                 push FP;
0x000CDC        F3A60000                 pop B0;
0x000CDD        F1070006                 FP = FP + 6;
0x000CDE        9845007F                 r2 = r3 * r5 (int);
0x000CDF        004400B4                 if NEG r2 = r2 + r9;
0x000CE0        9434006F                 r1 = r2 * r4 (frac);
0x000CE1        E5F00016                 do $M.iir_1stStage_upsample.loop;
0x000CE2        02001400                 Null = Null + Null, rMAC = M[I1,M0];
0x000CE3        02009000                 Null = Null + Null, M[I0,M0] = rMAC;

 <$M.iir_1stStage_upsample.loop_rpt>
0x000CE4        5876003F                 I7 = I6 + r1;
0x000CE5        4658403D                 r3 = r3 + M0, r2 = M[I0,M0], r1 = M[I7,M1];
0x000CE6        CE34403D                 rMAC = r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000CE7        AE34403D                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M1];
0x000CE8        7C7B007F                 I7 = M3 - I7;
0x000CE9        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CEA        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CEB        AE34403E                 rMAC = rMAC + r1 * r2 (SS), r2 = M[I0,M0], r1 = M[I7,M2];
0x000CEC        AC13004F                 rMAC = rMAC + r1 * r2 (SS);
0x000CED        903100AF                 r1 = rMAC ASHIFT r8;
0x000CEE        469800B4                 r7 = r7 + M0, M[I5,M0] = r1;
0x000CEF        2005006F                 Null = r3 - r4;
0x000CF0        2055005A                 if GE r3 = r3 - r3;
0x000CF1        9845007F                 r2 = r3 * r5 (int);
0x000CF2        004400B4                 if NEG r2 = r2 + r9;
0x000CF3        9434006F                 r1 = r2 * r4 (frac);
0x000CF4        2007004F                 Null = r5 - r2;
0x000CF5        DDD0FFEF                 if LE jump $M.iir_1stStage_upsample.loop_rpt;
0x000CF6        03000000                 Null = Null + Null;

 <$M.iir_1stStage_upsample.loop>
0x000CF7        4420D80F                 r0 = Null + I0, M[I2,M0] = r3;
0x000CF8        50C0A80F                 L0 = Null + Null, M[I2,M0] = r0;
0x000CF9        5F280000                 I2 = I2 + M0;
0x000CFA        DC0D000F                 rts;

 <$message.send_long>
0x000CFB        F3D00000                 push rLink;
0x000CFC        E1F004A7                 call $block_interrupts;
0x000CFD        0140FFFE                 r2 = Null + -2;
0x000CFE        01C60005                 r10 = r4 + 5;
0x000CFF        8DCC007E                 r10 = r10 LSHIFT -2;
0x000D00        09302A58                 r1 = Null + M[$message.queue_write_ptr];
0x000D01        8580FFF1                 r6 = Null OR 0xfff1;
0x000D02        E5F0001C                 do $M.message.send_long.long_message_loop;
0x000D03        01230005                 r0 = r1 + 5;
0x000D04        2102006E                 Null = r0 - 110;
0x000D05        00200000                 if EQ r0 = Null + Null;
0x000D06        FD0000FF 29025A57        Null = r0 - M[$message.queue_read_ptr];
0x000D08        DD000018                 if EQ jump $M.message.send_long.all_done;
0x000D09        E40C003F                 Null = r10 - 1;
0x000D0A        DD100002                 if NE jump $M.message.send_long.not_last_packet;
0x000D0B        85880002                 r6 = r6 OR 0x2;

 <$M.message.send_long.not_last_packet>
0x000D0C        D5830F08                 M[r1 + 3848] = r6;
0x000D0D        81080001                 Null = r6 AND 0x1;
0x000D0E        DD000006                 if EQ jump $M.message.send_long.not_first_message;
0x000D0F        E488003F                 r6 = r6 - 1;
0x000D10        D5530F09                 M[r1 + 3849] = r3;
0x000D11        D5630F0A                 M[r1 + 3850] = r4;
0x000D12        21770002                 r5 = r5 - 2;
0x000D13        DDF00005                 jump $M.message.send_long.last_two_words;

 <$M.message.send_long.not_first_message>
0x000D14        D047000F                 r2 = M[r5 + Null];
0x000D15        D5430F09                 M[r1 + 3849] = r2;
0x000D16        D1470001                 r2 = M[r5 + 1];
0x000D17        D5430F0A                 M[r1 + 3850] = r2;

 <$M.message.send_long.last_two_words>
0x000D18        D1470002                 r2 = M[r5 + 2];
0x000D19        D5430F0B                 M[r1 + 3851] = r2;
0x000D1A        D1470003                 r2 = M[r5 + 3];
0x000D1B        D5430F0C                 M[r1 + 3852] = r2;
0x000D1C        01770004                 r5 = r5 + 4;
0x000D1D        0032000F                 r1 = r0 + Null;

 <$M.message.send_long.long_message_loop>
0x000D1E        19202A58                 M[$message.queue_write_ptr] = r0 + Null;
0x000D1F        E1F0FF87                 call $message.private.try_to_send_message;

 <$M.message.send_long.all_done>
0x000D20        E1F00473                 call $interrupt.unblock;
0x000D21        DDF004CA                 jump $pop_rLink_and_rts;

 <$cbuffer.get_write_address_and_size.its_a_port>
0x000D22        8132001F                 r1 = r0 AND 0x1f;
0x000D23        2133000C                 r1 = r1 - 12;
0x000D24        19402A20                 M[$cbuffer.tmp] = r2 + Null;
0x000D25        FD000033 8102FC00        Null = r0 AND 0x33fc00;
0x000D27        DD00001C                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing;
0x000D28        19502A21                 M[0x2a21] = r3 + Null;
0x000D29        01400066                 r2 = Null + 102;
0x000D2A        65030007                 Null = 7 - r1;
0x000D2B        00330044                 if NEG r1 = r1 + r2;
0x000D2C        D153FE73                 r3 = M[r1 + -397];
0x000D2D        FD000030 81420000        r2 = r0 AND 0x300000;
0x000D2F        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian;
0x000D30        8155FFFB                 r3 = r3 AND 0xfffb;
0x000D31        8D44006B                 r2 = r2 LSHIFT -21;
0x000D32        8D440002                 r2 = r2 LSHIFT 2;
0x000D33        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_endian>
0x000D34        FD000003 81428000        r2 = r0 AND 0x38000;
0x000D36        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth;
0x000D37        8155FFFC                 r3 = r3 AND 0xfffc;
0x000D38        8D440070                 r2 = r2 LSHIFT -16;
0x000D39        8D440000                 r2 = r2 LSHIFT 0;
0x000D3A        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_bitwidth>
0x000D3B        81426000                 r2 = r0 AND 0x6000;
0x000D3C        DD000005                 if EQ jump $M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate;
0x000D3D        8155FFF7                 r3 = r3 AND 0xfff7;
0x000D3E        8D440072                 r2 = r2 LSHIFT -14;
0x000D3F        8D440003                 r2 = r2 LSHIFT 3;
0x000D40        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing_saturate>
0x000D41        D553FE73                 M[r1 + -397] = r3;
0x000D42        09502A21                 r3 = Null + M[0x2a21];

 <$M.cbuffer.get_write_address_and_size.its_a_port.no_forcing>
0x000D43        8132001F                 r1 = r0 AND 0x1f;
0x000D44        2133000C                 r1 = r1 - 12;
0x000D45        01400009                 r2 = Null + 9;
0x000D46        65030007                 Null = 7 - r1;
0x000D47        00330044                 if NEG r1 = r1 + r2;
0x000D48        09402A20                 r2 = Null + M[$cbuffer.tmp];
0x000D49        0123FE23                 r0 = r1 + -477;
0x000D4A        E430002F                 r1 = Null + 1;
0x000D4B        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size.its_a_port>
0x000D4C        8132001F                 r1 = r0 AND 0x1f;
0x000D4D        FD00003F 81029C00        Null = r0 AND 0x3f9c00;
0x000D4F        DD00001F                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing;
0x000D50        19402A20                 M[$cbuffer.tmp] = r2 + Null;
0x000D51        19502A21                 M[0x2a21] = r3 + Null;
0x000D52        01400062                 r2 = Null + 98;
0x000D53        65030007                 Null = 7 - r1;
0x000D54        00330044                 if NEG r1 = r1 + r2;
0x000D55        D153FE7B                 r3 = M[r1 + -389];
0x000D56        FD000030 81420000        r2 = r0 AND 0x300000;
0x000D58        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian;
0x000D59        8155FFFB                 r3 = r3 AND 0xfffb;
0x000D5A        8D44006B                 r2 = r2 LSHIFT -21;
0x000D5B        8D440002                 r2 = r2 LSHIFT 2;
0x000D5C        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_endian>
0x000D5D        FD00000C 81420000        r2 = r0 AND 0xc0000;
0x000D5F        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend;
0x000D60        8155FFF7                 r3 = r3 AND 0xfff7;
0x000D61        8D44006D                 r2 = r2 LSHIFT -19;
0x000D62        8D440003                 r2 = r2 LSHIFT 3;
0x000D63        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_sign_extend>
0x000D64        FD000003 81428000        r2 = r0 AND 0x38000;
0x000D66        DD000005                 if EQ jump $M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth;
0x000D67        8155FFFC                 r3 = r3 AND 0xfffc;
0x000D68        8D440070                 r2 = r2 LSHIFT -16;
0x000D69        8D440000                 r2 = r2 LSHIFT 0;
0x000D6A        87540000                 r3 = r3 OR r2;

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing_bitwidth>
0x000D6B        D553FE7B                 M[r1 + -389] = r3;
0x000D6C        09402A20                 r2 = Null + M[$cbuffer.tmp];
0x000D6D        09502A21                 r3 = Null + M[0x2a21];

 <$M.cbuffer.get_read_address_and_size.its_a_port.no_forcing>
0x000D6E        8122001F                 r0 = r0 AND 0x1f;
0x000D6F        01300005                 r1 = Null + 5;
0x000D70        65020007                 Null = 7 - r0;
0x000D71        00220034                 if NEG r0 = r0 + r1;
0x000D72        0122FE2B                 r0 = r0 + -469;
0x000D73        E430002F                 r1 = Null + 1;
0x000D74        DC0D000F                 rts;

 <$cbops.iir_resamplev2.amount_to_use>
0x000D75        19002A62                 M[$M.cbops.iir_resamplev2.amount_used] = Null + Null;

 <$iir_resamplev2.amount_to_use>
0x000D76        D14A0002                 r2 = M[r8 + 2];
0x000D77        DC0D0000                 if EQ rts;
0x000D78        0078000F                 r5 = r6 + Null;
0x000D79        51800001                 M0 = Null + 1;
0x000D7A        5020004F                 I2 = Null + r2;
0x000D7B        22442800                 r2 = r2 - r2, r0 = M[I2,M0];
0x000D7C        9812389F                 rMAC = r0 * r7 (int), r1 = M[I2,M0];
0x000D7D        AC13009F                 rMAC = rMAC + r1 * r7 (SS);
0x000D7E        67180000                 rMAC = rMAC - M0;
0x000D7F        00100004                 if NEG rMAC = Null + Null;
0x000D80        2007281F                 Null = r5 - rMAC, r0 = M[I2,M0];
0x000D81        00710005                 if POS r5 = rMAC + Null;
0x000D82        D16A0006                 r4 = M[r8 + 6];
0x000D83        9812386F                 rMAC = r0 * r4 (int), r1 = M[I2,M0];
0x000D84        AC13006F                 rMAC = rMAC + r1 * r4 (SS);
0x000D85        DD000005                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.jp_done;
0x000D86        67180000                 rMAC = rMAC - M0;
0x000D87        00100004                 if NEG rMAC = Null + Null;
0x000D88        2007001F                 Null = r5 - rMAC;
0x000D89        00710005                 if POS r5 = rMAC + Null;

 <$M.cbops_iir_resamplev2.amount_to_use.jp_done>
0x000D8A        D10A000F                 Null = M[r8 + 15];
0x000D8B        DC0D0001                 if NE rts;
0x000D8C        F3D00000                 push rLink;
0x000D8D        D15A0002                 r3 = M[r8 + 2];
0x000D8E        D55A000F                 M[r8 + 15] = r3;
0x000D8F        016A0010                 r4 = r8 + 16;
0x000D90        512A000B                 I2 = r8 + 11;
0x000D91        51350005                 I3 = r3 + 5;
0x000D92        D1050004                 Null = M[r3 + 4];
0x000D93        DD000003                 if EQ jump $M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage;
0x000D94        512A0007                 I2 = r8 + 7;
0x000D95        E1F0022C                 call $reset_iir_resampler;

 <$M.cbops_iir_resamplev2.amount_to_use.Reset2ndStage>
0x000D96        5F380000                 I3 = I3 + M0;
0x000D97        E1F0022A                 call $reset_iir_resampler;
0x000D98        50C0000F                 L0 = Null + Null;
0x000D99        DDF00452                 jump $pop_rLink_and_rts;

 <$cbops.fir_resample.amount_to_use>
0x000D9A        19002A63                 M[$M.cbops.fir_resample.amount_used] = Null + Null;
0x000D9B        FD000000 0150BB80        r3 = Null + 48000;
0x000D9D        01601F40                 r4 = Null + 8000;
0x000D9E        D13A0003                 r1 = M[r8 + 3];
0x000D9F        D0330001                 if NE r1 = M[r1 + Null];
0x000DA0        00360000                 if EQ r1 = r4 + Null;
0x000DA1        D14A0004                 r2 = M[r8 + 4];
0x000DA2        D0440001                 if NE r2 = M[r2 + Null];
0x000DA3        00450000                 if EQ r2 = r3 + Null;
0x000DA4        D12A0007                 r0 = M[r8 + 7];
0x000DA5        2002003F                 Null = r0 - r1;
0x000DA6        DD100004                 if NE jump $M.cbops.fir_resample.amount_to_use.do_set_up;
0x000DA7        D12A0006                 r0 = M[r8 + 6];
0x000DA8        2002004F                 Null = r0 - r2;
0x000DA9        DD000010                 if EQ jump $M.cbops.fir_resample.amount_to_use.set_up_done;

 <$M.cbops.fir_resample.amount_to_use.do_set_up>
0x000DAA        D53A0007                 M[r8 + 7] = r1;
0x000DAB        D54A0006                 M[r8 + 6] = r2;
0x000DAC        01100000                 rMAC = Null + 0;
0x000DAD        8DE30280                 rMAC0 = r1 LSHIFT 0;
0x000DAE        D9040000                 Div = rMAC / r2;
0x000DAF        D9200001                 r0 = DivResult;
0x000DB0        D52A0008                 M[r8 + 8] = r0;
0x000DB1        9B240000                 r0 = r0 * r2 (int);
0x000DB2        8DE40280                 rMAC0 = r2 LSHIFT 0;
0x000DB3        23320000                 r1 = r1 - r0;
0x000DB4        8DE30200                 rMAC12 = r1 LSHIFT 0;
0x000DB5        91440001                 r2 = r2 ASHIFT 1;
0x000DB6        D9040000                 Div = rMAC / r2;
0x000DB7        D9200001                 r0 = DivResult;
0x000DB8        D52A0009                 M[r8 + 9] = r0;

 <$M.cbops.fir_resample.amount_to_use.set_up_done>
0x000DB9        D16A0009                 r4 = M[r8 + 9];
0x000DBA        D15A0008                 r3 = M[r8 + 8];
0x000DBB        9B590000                 r3 = r3 * r7 (int);
0x000DBC        9439006F                 r1 = r7 * r4 (frac);
0x000DBD        03350000                 r1 = r1 + r3;
0x000DBE        21330002                 r1 = r1 - 2;
0x000DBF        00300004                 if NEG r1 = Null + Null;
0x000DC0        E473005F                 r5 = MIN r1;
0x000DC1        DC0D000F                 rts;

 <$audio_out_copy_handler>
0x000DC2        F3D00000                 push rLink;
0x000DC3        FD0000FF 19005A64        M[$frame_sync.sync_flag] = Null + Null;
0x000DC5        FD0000FF 01A05874        r8 = Null + -42892;
0x000DC7        E1F00E71                 call $calc_actual_port_rate;
0x000DC8        FD0000FF 0920587C        r0 = Null + M[0xff587c];
0x000DCA        E110297C                 if NE call $apply_sra_resampling_adjustment;
0x000DCB        FD0000FF 01A0587F        r8 = Null + -42881;
0x000DCD        FD0000FF 09005A44        Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x000DCF        E1100E69                 if NE call $calc_actual_port_rate;
0x000DD0        E1F027BF                 call $multi_chan_clone_tone_cbuffers;
0x000DD1        01A02773                 r8 = Null + 10099;
0x000DD2        09002A44                 Null = Null + M[$M.multi_chan_output.num_chain0_channels];
0x000DD3        E1100B9D                 if NE call $cbops.dac_av_copy_m;
0x000DD4        01A028B8                 r8 = Null + 10424;
0x000DD5        FD0000FF 09005A44        Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x000DD7        E1100B99                 if NE call $cbops.dac_av_copy_m;
0x000DD8        E1F02608                 call $multi_chan_adjust_tone_cbuffers;
0x000DD9        FD0000FF 013059A2        r1 = Null + -42590;
0x000DDB        FD0000FF 09405A2D        r2 = Null + M[$tmr_period_audio_copy];
0x000DDD        01500DC2                 r3 = Null + 3522;
0x000DDE        E1F003FD                 call $timer.schedule_event_in_period;
0x000DDF        DDF0040C                 jump $pop_rLink_and_rts;

 <$detect_end_of_aux_stream>
0x000DE0        F3D00000                 push rLink;
0x000DE1        09502A2B                 r3 = Null + M[$aux_input_stream_available];
0x000DE2        DD000409                 if EQ jump $pop_rLink_and_rts;
0x000DE3        FD0000FF 012059F4        r0 = Null + -42508;
0x000DE5        E1F003A6                 call $cbuffer.calc_amount_data;
0x000DE6        81050002                 Null = r3 AND 0x2;
0x000DE7        DD100007                 if NE jump $M.detect_end_of_aux_stream.input_has_received;
0x000DE8        0002000F                 Null = r0 + Null;
0x000DE9        DD000402                 if EQ jump $pop_rLink_and_rts;
0x000DEA        85550002                 r3 = r3 OR 0x2;
0x000DEB        19502A2B                 M[$aux_input_stream_available] = r3 + Null;
0x000DEC        19002A52                 M[$no_tone_timer] = Null + Null;
0x000DED        DDF003FE                 jump $pop_rLink_and_rts;

 <$M.detect_end_of_aux_stream.input_has_received>
0x000DEE        09302A52                 r1 = Null + M[$no_tone_timer];
0x000DEF        FD0000FF 09335A51        r1 = r1 + M[$tmr_period_tone_copy];
0x000DF1        0002000F                 Null = r0 + Null;
0x000DF2        00300001                 if NE r1 = Null + Null;
0x000DF3        19302A52                 M[$no_tone_timer] = r1 + Null;
0x000DF4        21037530                 Null = r1 - 30000;
0x000DF5        DD4003F6                 if NEG jump $pop_rLink_and_rts;
0x000DF6        01401080                 r2 = Null + 4224;
0x000DF7        01500000                 r3 = Null + 0;
0x000DF8        01600000                 r4 = Null + 0;
0x000DF9        01700000                 r5 = Null + 0;
0x000DFA        01800000                 r6 = Null + 0;
0x000DFB        E1F00235                 call $message.send_short;
0x000DFC        19002A2B                 M[$aux_input_stream_available] = Null + Null;
0x000DFD        19002A52                 M[$no_tone_timer] = Null + Null;
0x000DFE        DDF003ED                 jump $pop_rLink_and_rts;

 <$timer.schedule_event_at>
0x000DFF        F3D00000                 push rLink;
0x000E00        E1F003A3                 call $block_interrupts;
0x000E01        01C00032                 r10 = Null + 50;
0x000E02        FD0000FF 01605A5B        r4 = Null + -42405;
0x000E04        FD0000FF 09205A5B        r0 = Null + M[$timer.last_addr];
0x000E06        E5F00008                 do $M.timer.schedule_event_at.loop;
0x000E07        E402002F                 Null = r0 + 1;
0x000E08        DD000007                 if EQ jump $M.timer.schedule_event_at.insert_here;
0x000E09        D1720001                 r5 = M[r0 + 1];
0x000E0A        2004007F                 Null = r2 - r5;
0x000E0B        DD400004                 if NEG jump $M.timer.schedule_event_at.insert_here;
0x000E0C        0062000F                 r4 = r0 + Null;
0x000E0D        D1220000                 r0 = M[r0 + 0];

 <$M.timer.schedule_event_at.loop>
0x000E0E        E1F0125C                 call $error;

 <$M.timer.schedule_event_at.insert_here>
0x000E0F        D5360000                 M[r4 + 0] = r1;
0x000E10        D5230000                 M[r1 + 0] = r0;
0x000E11        D5430001                 M[r1 + 1] = r2;
0x000E12        D5530002                 M[r1 + 2] = r3;
0x000E13        09502A5B                 r3 = Null + M[$timer.id];
0x000E14        D5530003                 M[r1 + 3] = r3;
0x000E15        E425002F                 r0 = r3 + 1;
0x000E16        20200050                 if EQ r0 = Null - r3;
0x000E17        19202A5B                 M[$timer.id] = r0 + Null;
0x000E18        0900FE1F                 Null = Null + M[0xfffe1f];
0x000E19        DD000003                 if EQ jump $M.timer.schedule_event_at.no_current_timer_set;
0x000E1A        2904FE21                 Null = r2 - M[0xfffe21];
0x000E1B        DD500004                 if POS jump $M.timer.schedule_event_at.done;

 <$M.timer.schedule_event_at.no_current_timer_set>
0x000E1C        1940FE21                 M[0xfffe21] = r2 + Null;
0x000E1D        E420002F                 r0 = Null + 1;
0x000E1E        1920FE1F                 M[0xfffe1f] = r0 + Null;

 <$M.timer.schedule_event_at.done>
0x000E1F        E1F00374                 call $interrupt.unblock;
0x000E20        DDF003CB                 jump $pop_rLink_and_rts;

 <$M.audio_proc.stereo_copy.Process.func>
0x000E21        F3D00000                 push rLink;
0x000E22        D1290000                 r0 = M[r7 + 0];
0x000E23        E1F0039D                 call $frmbuffer.get_buffer;
0x000E24        5000002F                 I0 = Null + r0;
0x000E25        50C0003F                 L0 = Null + r1;
0x000E26        D1290001                 r0 = M[r7 + 1];
0x000E27        E1F00399                 call $frmbuffer.get_buffer;
0x000E28        5040002F                 I4 = Null + r0;
0x000E29        50E0003F                 L4 = Null + r1;
0x000E2A        00C5000F                 r10 = r3 + Null;
0x000E2B        D1290002                 r0 = M[r7 + 2];
0x000E2C        E1F003BD                 call $frmbuffer.set_frame_size;
0x000E2D        E1F00393                 call $frmbuffer.get_buffer;
0x000E2E        5010002F                 I1 = Null + r0;
0x000E2F        50D0003F                 L1 = Null + r1;
0x000E30        005C000F                 r3 = r10 + Null;
0x000E31        D1290003                 r0 = M[r7 + 3];
0x000E32        E1F003B7                 call $frmbuffer.set_frame_size;
0x000E33        E1F0038D                 call $frmbuffer.get_buffer;
0x000E34        5050002F                 I5 = Null + r0;
0x000E35        50F0003F                 L5 = Null + r1;
0x000E36        F3D40000                 pop rLink;
0x000E37        E5F00003                 do $M.audio_proc.stereo_copy.Process.loop_copy_data;
0x000E38        03002141                 Null = Null + Null, r0 = M[I0,1], r2 = M[I4,1];
0x000E39        0300A5C5                 Null = Null + Null, M[I1,1] = r0, M[I5,1] = r2;

 <$M.audio_proc.stereo_copy.Process.loop_copy_data>
0x000E3A        50C0000F                 L0 = Null + Null;
0x000E3B        50D0000F                 L1 = Null + Null;
0x000E3C        50E0000F                 L4 = Null + Null;
0x000E3D        50F0000F                 L5 = Null + Null;
0x000E3E        DC0D000F                 rts;

 <$cbuffer.calc_amount_space.its_a_port>
0x000E3F        8132001F                 r1 = r0 AND 0x1f;
0x000E40        2133000C                 r1 = r1 - 12;
0x000E41        D1432713                 r2 = M[r1 + 10003];
0x000E42        00200000                 if EQ r0 = Null + Null;
0x000E43        DC0D0000                 if EQ rts;
0x000E44        19502A20                 M[$cbuffer.tmp] = r3 + Null;
0x000E45        D054000F                 r3 = M[r2 + Null];
0x000E46        D14326FB                 r2 = M[r1 + 9979];
0x000E47        D3400000                 r2 = M[r2 + Null];
0x000E48        23540000                 r3 = r3 - r2;
0x000E49        D14326E3                 r2 = M[r1 + 9955];
0x000E4A        E434003F                 r1 = r2 - 1;
0x000E4B        8035003F                 r1 = r3 AND r1;
0x000E4C        00340000                 if EQ r1 = r2 + Null;
0x000E4D        E433003F                 r1 = r1 - 1;
0x000E4E        09502A20                 r3 = Null + M[$cbuffer.tmp];
0x000E4F        FD000003 81228000        r0 = r0 AND 0x38000;
0x000E51        DD00000F                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x000E52        FD000001 21028000        Null = r0 - 98304;
0x000E54        DD00000C                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_16bit;
0x000E55        DD400009                 if NEG jump $M.cbuffer.calc_amount_space.its_a_port.port_width_8bit;
0x000E56        FD000002 21028000        Null = r0 - 163840;
0x000E58        DD000003                 if EQ jump $M.cbuffer.calc_amount_space.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_32bit>
0x000E59        9123007E                 r0 = r1 ASHIFT -2;
0x000E5A        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_24bit>
0x000E5B        E423003F                 r0 = r1 - 1;
0x000E5C        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000E5D        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_8bit>
0x000E5E        0023000F                 r0 = r1 + Null;
0x000E5F        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_space.its_a_port.port_width_16bit>
0x000E60        9123007F                 r0 = r1 ASHIFT -1;
0x000E61        DC0D000F                 rts;

 <$set_tone_rate_from_vm>
0x000E62        F3D00000                 push rLink;
0x000E63        8133FFFF                 r1 = r1 AND 0xffff;
0x000E64        011005DC                 rMAC = Null + 1500;
0x000E65        FD000000 CD111F40        rMAC = rMAC * 0.00095367431640625 (SS);
0x000E67        D9030000                 Div = rMAC / r1;
0x000E68        FD0000FF 19305A50        M[$current_tone_sampling_rate] = r1 + Null;
0x000E6A        01200003                 r0 = Null + 3;
0x000E6B        81040002                 Null = r2 AND 0x2;
0x000E6C        00200001                 if NE r0 = Null + Null;
0x000E6D        01220008                 r0 = r0 + 8;
0x000E6E        FD0000FF 19205981        M[0xff5981] = r0 + Null;
0x000E70        192029C1                 M[0x29c1] = r0 + Null;
0x000E71        D9500001                 r3 = DivResult;
0x000E72        81240001                 r0 = r2 AND 0x1;
0x000E73        00550050                 if EQ r3 = r3 + r3;
0x000E74        FD0000FF 19505A51        M[$tmr_period_tone_copy] = r3 + Null;
0x000E76        19202A51                 M[$stereo_tone] = r0 + Null;
0x000E77        E1F0278C                 call $multi_chan_config_tone_mixing;
0x000E78        FD0000FF 092059F6        r0 = Null + M[0xff59f6];
0x000E7A        FD0000FF 192059F5        M[0xff59f5] = r0 + Null;
0x000E7C        092006FF                 r0 = Null + M[0x6ff];
0x000E7D        192006FE                 M[0x6fe] = r0 + Null;
0x000E7E        E420002F                 r0 = Null + 1;
0x000E7F        19202A2B                 M[$aux_input_stream_available] = r0 + Null;
0x000E80        DDF0036B                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data.its_a_port>
0x000E81        8132001F                 r1 = r0 AND 0x1f;
0x000E82        D1432707                 r2 = M[r1 + 9991];
0x000E83        00200000                 if EQ r0 = Null + Null;
0x000E84        DC0D0000                 if EQ rts;
0x000E85        D3400000                 r2 = M[r2 + Null];
0x000E86        19502A20                 M[$cbuffer.tmp] = r3 + Null;
0x000E87        D15326EF                 r3 = M[r1 + 9967];
0x000E88        D3500000                 r3 = M[r3 + Null];
0x000E89        2054005F                 r3 = r2 - r3;
0x000E8A        D14326D7                 r2 = M[r1 + 9943];
0x000E8B        E434003F                 r1 = r2 - 1;
0x000E8C        8035003F                 r1 = r3 AND r1;
0x000E8D        09502A20                 r3 = Null + M[$cbuffer.tmp];
0x000E8E        FD000003 81228000        r0 = r0 AND 0x38000;
0x000E90        DD00000F                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x000E91        FD000001 21028000        Null = r0 - 98304;
0x000E93        DD00000C                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_16bit;
0x000E94        DD400009                 if NEG jump $M.cbuffer.calc_amount_data.its_a_port.port_width_8bit;
0x000E95        FD000002 21028000        Null = r0 - 163840;
0x000E97        DD000003                 if EQ jump $M.cbuffer.calc_amount_data.its_a_port.port_width_24bit;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_32bit>
0x000E98        9123007E                 r0 = r1 ASHIFT -2;
0x000E99        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_24bit>
0x000E9A        E423003F                 r0 = r1 - 1;
0x000E9B        95222AAB                 r0 = r0 * 0.333343505859375 (frac);
0x000E9C        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_8bit>
0x000E9D        0023000F                 r0 = r1 + Null;
0x000E9E        DC0D000F                 rts;

 <$M.cbuffer.calc_amount_data.its_a_port.port_width_16bit>
0x000E9F        9123007F                 r0 = r1 ASHIFT -1;
0x000EA0        DC0D000F                 rts;

 <$M.audio_proc.stream_mixer.Process.func>
0x000EA1        5020009F                 I2 = Null + r7;
0x000EA2        51900001                 M1 = Null + 1;
0x000EA3        F3D00000                 push rLink;
0x000EA4        02002900                 Null = Null + Null, r0 = M[I2,M1];
0x000EA5        E1F0031B                 call $frmbuffer.get_buffer;
0x000EA6        5000002F                 I0 = Null + r0;
0x000EA7        50C0293F                 L0 = Null + r1, r0 = M[I2,M1];
0x000EA8        E1F00318                 call $frmbuffer.get_buffer;
0x000EA9        5010002F                 I1 = Null + r0;
0x000EAA        50D0003F                 L1 = Null + r1;
0x000EAB        00C5290F                 r10 = r3 + Null, r0 = M[I2,M1];
0x000EAC        E1F0033D                 call $frmbuffer.set_frame_size;
0x000EAD        E1F00313                 call $frmbuffer.get_buffer;
0x000EAE        5040292F                 I4 = Null + r0, r0 = M[I2,M1];
0x000EAF        50E0793F                 L4 = Null + r1, r5 = M[I2,M1];
0x000EB0        F3D40000                 pop rLink;
0x000EB1        D062490F                 r4 = M[r0 + Null], r2 = M[I2,M1];
0x000EB2        D2702100                 r5 = M[r5 + Null], r0 = M[I0,M1];
0x000EB3        D084350F                 r6 = M[r2 + Null], r1 = M[I1,M1];
0x000EB4        E5F00005                 do $M.audio_proc.stream_mixer.Process.lp_stream_copy;
0x000EB5        CC12216F                 rMAC = r0 * r4 (SS), r0 = M[I0,M1];
0x000EB6        AC13357F                 rMAC = rMAC + r1 * r5 (SS), r1 = M[I1,M1];
0x000EB7        9041008F                 r2 = rMAC ASHIFT r6;
0x000EB8        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.audio_proc.stream_mixer.Process.lp_stream_copy>
0x000EB9        51C00000                 L0 = Null + 0;
0x000EBA        51D00000                 L1 = Null + 0;
0x000EBB        51E00000                 L4 = Null + 0;
0x000EBC        DC0D000F                 rts;

 <$pskey.result_message_handler>
0x000EBD        FD000000 21028008        Null = r0 - 32776;
0x000EBF        DD000003                 if EQ jump $M.pskey.result_message_handler.failure;
0x000EC0        D035000F                 r1 = M[r3 + Null];
0x000EC1        DDF00002                 jump $M.pskey.result_message_handler.ready;

 <$M.pskey.result_message_handler.failure>
0x000EC2        E440003F                 r2 = Null - 1;

 <$M.pskey.result_message_handler.ready>
0x000EC3        19002A5A                 M[$pskey.request_in_progress] = Null + Null;
0x000EC4        FD0000FF 01705A5A        r5 = Null + -42406;
0x000EC6        FD0000FF 09205A5A        r0 = Null + M[$pskey.last_addr];

 <$M.pskey.result_message_handler.find_structure_loop>
0x000EC8        D1620001                 r4 = M[r0 + 1];
0x000EC9        2003006F                 Null = r1 - r4;
0x000ECA        DD000006                 if EQ jump $M.pskey.result_message_handler.structure_found;
0x000ECB        0072000F                 r5 = r0 + Null;
0x000ECC        D1220000                 r0 = M[r0 + 0];
0x000ECD        E402002F                 Null = r0 + 1;
0x000ECE        DD10FFFA                 if NE jump $M.pskey.result_message_handler.find_structure_loop;
0x000ECF        DC0D000F                 rts;

 <$M.pskey.result_message_handler.structure_found>
0x000ED0        F3D00000                 push rLink;
0x000ED1        D1620000                 r4 = M[r0 + 0];
0x000ED2        D5670000                 M[r5 + 0] = r4;
0x000ED3        D1220002                 r0 = M[r0 + 2];
0x000ED4        E002000F                 call r0;
0x000ED5        FD0000FF 09305A5A        r1 = Null + M[$pskey.last_addr];
0x000ED7        E403002F                 Null = r1 + 1;
0x000ED8        E110003E                 if NE call $pskey.private.send_request;
0x000ED9        DDF00312                 jump $pop_rLink_and_rts;

 <$cbops.dc_remove.main>
0x000EDA        D12A0000                 r0 = M[r8 + 0];
0x000EDB        D038002F                 r1 = M[r6 + r0];
0x000EDC        5000003F                 I0 = Null + r1;
0x000EDD        D039002F                 r1 = M[r7 + r0];
0x000EDE        50C0003F                 L0 = Null + r1;
0x000EDF        D12A0001                 r0 = M[r8 + 1];
0x000EE0        D038002F                 r1 = M[r6 + r0];
0x000EE1        5040003F                 I4 = Null + r1;
0x000EE2        D039002F                 r1 = M[r7 + r0];
0x000EE3        50E0003F                 L4 = Null + r1;
0x000EE4        013009D5                 r1 = Null + 2517;
0x000EE5        FD000080 01500000        r3 = Null + -8388608;
0x000EE7        2045003F                 r2 = r3 - r1;
0x000EE8        D16A0002                 r4 = M[r8 + 2];
0x000EE9        D17A0003                 r5 = M[r8 + 3];
0x000EEA        C814007F                 rMAC = r2 * r5 (SU);
0x000EEB        E5F00008                 do $M.cbops.dc_remove.main.loop;
0x000EEC        91110068                 rMAC = rMAC ASHIFT -24 (56bit);
0x000EED        AF462100                 rMAC = rMAC + r2 * r4 (SS), r0 = M[I0,1];
0x000EEE        BC12003F                 rMAC = rMAC - r0 * r1 (SS);
0x000EEF        8D610000                 r4 = rMAC LSHIFT 0;
0x000EF0        8D710018                 r5 = rMAC LSHIFT 24;
0x000EF1        BC12005F                 rMAC = rMAC - r0 * r3 (SS);
0x000EF2        CB470091                 rMAC = r2 * r5 (SU), M[I4,1] = rMAC;

 <$M.cbops.dc_remove.main.loop>
0x000EF3        51C00000                 L0 = Null + 0;
0x000EF4        51E00000                 L4 = Null + 0;
0x000EF5        D56A0002                 M[r8 + 2] = r4;
0x000EF6        D57A0003                 M[r8 + 3] = r5;
0x000EF7        DC0D000F                 rts;

 <$cbops.deinterleave.main>
0x000EF8        D12A0000                 r0 = M[r8 + 0];
0x000EF9        D038002F                 r1 = M[r6 + r0];
0x000EFA        5000003F                 I0 = Null + r1;
0x000EFB        D039002F                 r1 = M[r7 + r0];
0x000EFC        50C0003F                 L0 = Null + r1;
0x000EFD        D12A0001                 r0 = M[r8 + 1];
0x000EFE        D038002F                 r1 = M[r6 + r0];
0x000EFF        5040003F                 I4 = Null + r1;
0x000F00        D039002F                 r1 = M[r7 + r0];
0x000F01        50E0003F                 L4 = Null + r1;
0x000F02        D12A0002                 r0 = M[r8 + 2];
0x000F03        D038002F                 r1 = M[r6 + r0];
0x000F04        5050003F                 I5 = Null + r1;
0x000F05        D039002F                 r1 = M[r7 + r0];
0x000F06        50F0003F                 L5 = Null + r1;
0x000F07        D14A0003                 r2 = M[r8 + 3];
0x000F08        8DCC007F                 r10 = r10 LSHIFT -1;
0x000F09        FD0000FF 19C05A5D        M[$cbops.amount_written] = r10 + Null;
0x000F0B        E4CC003F                 r10 = r10 - 1;
0x000F0C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x000F0D        E5F00004                 do $M.cbops.deinterleave.main.interleave_loop;
0x000F0E        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x000F0F        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x000F10        030021B5                 Null = Null + Null, r0 = M[I0,1], M[I5,1] = r1;

 <$M.cbops.deinterleave.main.interleave_loop>
0x000F11        93243100                 r0 = r0 ASHIFT r2, r1 = M[I0,1];
0x000F12        933400A1                 r1 = r1 ASHIFT r2, M[I4,1] = r0;
0x000F13        7FEE00B5                 L4 = L4 - L4, M[I5,1] = r1;
0x000F14        51F00000                 L5 = Null + 0;
0x000F15        DC0D000F                 rts;

 <$pskey.private.send_request>
0x000F16        09002A5A                 Null = Null + M[$pskey.request_in_progress];
0x000F17        DC0D0001                 if NE rts;
0x000F18        F3D00000                 push rLink;
0x000F19        FD0000FF 094059D1        r2 = Null + M[0xff59d1];
0x000F1B        E1F00091                 call $timer.cancel_event;
0x000F1C        E1F0028E                 call $message.send_queue_space;
0x000F1D        21020005                 Null = r0 - 5;
0x000F1E        DD400009                 if NEG jump $M.pskey.private.send_request.try_to_send_later;
0x000F1F        FD0000FF 09305A5A        r1 = Null + M[$pskey.last_addr];
0x000F21        85408006                 r2 = Null OR 0x8006;
0x000F22        D1530001                 r3 = M[r1 + 1];
0x000F23        E1F0010D                 call $message.send_short;
0x000F24        E420002F                 r0 = Null + 1;
0x000F25        19202A5A                 M[$pskey.request_in_progress] = r0 + Null;
0x000F26        DDF002C5                 jump $pop_rLink_and_rts;

 <$M.pskey.private.send_request.try_to_send_later>
0x000F27        FD0000FF 013059CE        r1 = Null + -42546;
0x000F29        01402710                 r2 = Null + 10000;
0x000F2A        01500F16                 r3 = Null + 3862;
0x000F2B        E1F002B3                 call $timer.schedule_event_in;
0x000F2C        DDF002BF                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_19_s3.count>
0x000F2D        01300019                 r1 = Null + 25;
0x000F2E        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s3>
0x000F2F        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000F30        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F31        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F32        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F33        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F34        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F35        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F36        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F37        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F38        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F39        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F3A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F3B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F3C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F3D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F3E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F3F        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F40        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F41        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F42        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F43        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F44        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F45        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F46        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F47        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000F48        93E30000                 rMAC = rMAC ASHIFT r1;
0x000F49        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s2.count>
0x000F4A        01300017                 r1 = Null + 23;
0x000F4B        DC0D000F                 rts;

 <$iir_resamplerv2.iir_19_s2>
0x000F4C        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000F4D        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F4E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F4F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F50        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F51        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F52        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F53        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F54        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F55        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F56        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F57        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F58        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F59        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F5A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5D        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5E        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F5F        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F60        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F61        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F62        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000F63        93E30000                 rMAC = rMAC ASHIFT r1;
0x000F64        DC0D000F                 rts;

 <$timer.service_routine>
0x000F65        F3D00000                 push rLink;

 <$M.timer.service_routine.search_again>
0x000F66        FD0000FF 09305A5B        r1 = Null + M[$timer.last_addr];
0x000F68        E403002F                 Null = r1 + 1;
0x000F69        DD000012                 if EQ jump $M.timer.service_routine.no_more_timers;
0x000F6A        D1230001                 r0 = M[r1 + 1];
0x000F6B        2942FE71                 r2 = r0 - M[0xfffe71];
0x000F6C        21040000                 Null = r2 - 0;
0x000F6D        DDC00009                 if GT jump $M.timer.service_routine.setup_a_new_hardware_timer;
0x000F6E        D1D30002                 rLink = M[r1 + 2];
0x000F6F        D1230003                 r0 = M[r1 + 3];
0x000F70        D5030003                 M[r1 + 3] = Null;
0x000F71        D1430000                 r2 = M[r1 + 0];
0x000F72        FD0000FF 19405A5B        M[$timer.last_addr] = r2 + Null;
0x000F74        E00D000F                 call rLink;
0x000F75        DDF0FFF1                 jump $M.timer.service_routine.search_again;

 <$M.timer.service_routine.setup_a_new_hardware_timer>
0x000F76        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000F77        1920FE21                 M[0xfffe21] = r0 + Null;
0x000F78        E450002F                 r3 = Null + 1;
0x000F79        1950FE1F                 M[0xfffe1f] = r3 + Null;
0x000F7A        DDF00271                 jump $pop_rLink_and_rts;

 <$M.timer.service_routine.no_more_timers>
0x000F7B        1900FE1F                 M[0xfffe1f] = Null + Null;
0x000F7C        DDF0026F                 jump $pop_rLink_and_rts;

 <$iir_resamplerv2.iir_15_s3.count>
0x000F7D        01300015                 r1 = Null + 21;
0x000F7E        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s3>
0x000F7F        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000F80        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F81        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F82        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F83        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F84        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F85        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F86        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F87        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F88        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F89        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8A        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8B        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8C        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F8D        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000F8E        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000F8F        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000F90        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F91        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F92        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000F93        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x000F94        93E30000                 rMAC = rMAC ASHIFT r1;
0x000F95        DC0D000F                 rts;

 <$frame_sync.update_streams_ind>
0x000F96        F3D00000                 push rLink;
0x000F97        51900001                 M1 = Null + 1;
0x000F98        E1F0020B                 call $block_interrupts;

 <$M.frame_sync.update_streams_ind.jp_next_stream>
0x000F99        D0B9000F                 r9 = M[r7 + Null];
0x000F9A        DD00000F                 if EQ jump $M.frame_sync.update_streams_ind.jp_stream_done;
0x000F9B        D14B0006                 r2 = M[r9 + 6];
0x000F9C        D12B0000                 r0 = M[r9 + 0];
0x000F9D        D1320000                 r1 = M[r0 + 0];
0x000F9E        D16B0003                 r4 = M[r9 + 3];
0x000F9F        50D0003F                 L1 = Null + r1;
0x000FA0        E004000F                 call r2;
0x000FA1        5080006F                 M0 = Null + r4;
0x000FA2        D042000F                 r2 = M[r0 + Null];
0x000FA3        5010004F                 I1 = Null + r2;
0x000FA4        02003400                 Null = Null + Null, r1 = M[I1,M0];
0x000FA5        4440001F                 r2 = Null + I1;
0x000FA6        1824000F                 M[r0] = r2 + Null;
0x000FA7        E499002F                 r7 = r7 + 1;
0x000FA8        DDF0FFF1                 jump $M.frame_sync.update_streams_ind.jp_next_stream;

 <$M.frame_sync.update_streams_ind.jp_stream_done>
0x000FA9        E1F001EA                 call $interrupt.unblock;
0x000FAA        50D0000F                 L1 = Null + Null;
0x000FAB        DDF00240                 jump $pop_rLink_and_rts;

 <$timer.cancel_event>
0x000FAC        F3D00000                 push rLink;
0x000FAD        E1F001F6                 call $block_interrupts;
0x000FAE        01C00032                 r10 = Null + 50;
0x000FAF        FD0000FF 01605A5B        r4 = Null + -42405;
0x000FB1        FD0000FF 09205A5B        r0 = Null + M[$timer.last_addr];
0x000FB3        E5F00008                 do $M.timer.cancel_event.loop;
0x000FB4        E402002F                 Null = r0 + 1;
0x000FB5        DD000006                 if EQ jump $M.timer.cancel_event.loop;
0x000FB6        D1720003                 r5 = M[r0 + 3];
0x000FB7        2004007F                 Null = r2 - r5;
0x000FB8        DD000004                 if EQ jump $M.timer.cancel_event.delete_this_entry;
0x000FB9        0062000F                 r4 = r0 + Null;
0x000FBA        D1220000                 r0 = M[r0 + 0];

 <$M.timer.cancel_event.loop>
0x000FBB        DDF00004                 jump $M.timer.cancel_event.done;

 <$M.timer.cancel_event.delete_this_entry>
0x000FBC        D1320000                 r1 = M[r0 + 0];
0x000FBD        D5360000                 M[r4 + 0] = r1;
0x000FBE        D5020003                 M[r0 + 3] = Null;

 <$M.timer.cancel_event.done>
0x000FBF        E1F001D4                 call $interrupt.unblock;
0x000FC0        DDF0022B                 jump $pop_rLink_and_rts;

 <$reset_iir_resampler>
0x000FC1        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x000FC2        02005C00                 Null = Null + Null, r3 = M[I3,M0];
0x000FC3        02002C00                 Null = Null + Null, r0 = M[I3,M0];
0x000FC4        0200C800                 Null = Null + Null, M[I2,M0] = r2;
0x000FC5        0200E800                 Null = Null + Null, M[I2,M0] = r4;
0x000FC6        5000006F                 I0 = Null + r4;
0x000FC7        00C5000F                 r10 = r3 + Null;
0x000FC8        03650000                 r4 = r4 + r3;
0x000FC9        0036E80F                 r1 = r4 + Null, M[I2,M0] = r4;
0x000FCA        03620000                 r4 = r4 + r0;
0x000FCB        E5F00002                 do $M.reset_iir_resampler.clr_fir_loop;
0x000FCC        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_fir_loop>
0x000FCD        59330004                 I3 = I3 + 4;
0x000FCE        00C2000F                 r10 = r0 + Null;
0x000FCF        DC0D0000                 if EQ rts;
0x000FD0        59330002                 I3 = I3 + 2;
0x000FD1        F2D03C00                 push rLink, r1 = M[I3,M0];
0x000FD2        21330002                 r1 = r1 - 2;
0x000FD3        E003000F                 call r1;
0x000FD4        5B330000                 I3 = I3 + r1;
0x000FD5        E5F00002                 do $M.reset_iir_resampler.clr_loop;
0x000FD6        0300C100                 Null = Null + Null, M[I0,1] = r2;

 <$M.reset_iir_resampler.clr_loop>
0x000FD7        DDF00214                 jump $pop_rLink_and_rts;

 <$frame_sync.analyze_stream_ind>
0x000FD8        D5CB0008                 M[r9 + 8] = r10;
0x000FD9        D14B000A                 r2 = M[r9 + 10];
0x000FDA        200400CF                 Null = r2 - r10;
0x000FDB        004C0005                 if POS r2 = r10 + Null;
0x000FDC        D15B000B                 r3 = M[r9 + 11];
0x000FDD        200500CF                 Null = r3 - r10;
0x000FDE        005C0004                 if NEG r3 = r10 + Null;
0x000FDF        D1CB0007                 r10 = M[r9 + 7];
0x000FE0        67C90000                 r10 = r10 - M1;
0x000FE1        DDD00005                 if LE jump $M.frame_sync.analyze_stream_ind.jp_threshold_reset;
0x000FE2        D54B000A                 M[r9 + 10] = r2;
0x000FE3        D55B000B                 M[r9 + 11] = r3;
0x000FE4        D5CB0007                 M[r9 + 7] = r10;
0x000FE5        DC0D000F                 rts;

 <$M.frame_sync.analyze_stream_ind.jp_threshold_reset>
0x000FE6        D50B000B                 M[r9 + 11] = Null;
0x000FE7        D56B000A                 M[r9 + 10] = r4;
0x000FE8        D1CB0004                 r10 = M[r9 + 4];
0x000FE9        23540000                 r3 = r3 - r2;
0x000FEA        035C0000                 r3 = r3 + r10;
0x000FEB        00500004                 if NEG r3 = Null + Null;
0x000FEC        D55B0009                 M[r9 + 9] = r3;
0x000FED        01C00078                 r10 = Null + 120;
0x000FEE        D5CB0007                 M[r9 + 7] = r10;
0x000FEF        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s2.count>
0x000FF0        01300013                 r1 = Null + 19;
0x000FF1        DC0D000F                 rts;

 <$iir_resamplerv2.iir_15_s2>
0x000FF2        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x000FF3        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FF4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FF5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FF6        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FF7        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FF8        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FF9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FFA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FFB        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x000FFC        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x000FFD        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x000FFE        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x000FFF        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001000        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001001        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001002        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001003        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x001004        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x001005        93E30000                 rMAC = rMAC ASHIFT r1;
0x001006        DC0D000F                 rts;

 <$frame_sync.distribute_streams_ind>
0x001007        F3D00000                 push rLink;
0x001008        E1F0019B                 call $block_interrupts;
0x001009        51900001                 M1 = Null + 1;

 <$M.frame_sync.distribute_streams_ind.jp_next_stream>
0x00100A        D0B9000F                 r9 = M[r7 + Null];
0x00100B        DD00000D                 if EQ jump $M.frame_sync.distribute_streams_ind.jp_stream_done;
0x00100C        D15B0005                 r3 = M[r9 + 5];
0x00100D        D12B0000                 r0 = M[r9 + 0];
0x00100E        D1320000                 r1 = M[r0 + 0];
0x00100F        D1820001                 r6 = M[r0 + 1];
0x001010        D1A20002                 r8 = M[r0 + 2];
0x001011        50D0003F                 L1 = Null + r1;
0x001012        D16B0003                 r4 = M[r9 + 3];
0x001013        D56B0002                 M[r9 + 2] = r4;
0x001014        E005000F                 call r3;
0x001015        D58B0001                 M[r9 + 1] = r6;
0x001016        E499002F                 r7 = r7 + 1;
0x001017        DDF0FFF3                 jump $M.frame_sync.distribute_streams_ind.jp_next_stream;

 <$M.frame_sync.distribute_streams_ind.jp_stream_done>
0x001018        E1F0017B                 call $interrupt.unblock;
0x001019        50D0000F                 L1 = Null + Null;
0x00101A        DDF001D1                 jump $pop_rLink_and_rts;

 <$frame_sync.update_output_streams_ind>
0x00101B        F3D00000                 push rLink;
0x00101C        D1820002                 r6 = M[r0 + 2];
0x00101D        D1A20001                 r8 = M[r0 + 1];
0x00101E        20C800AF                 r10 = r6 - r8;
0x00101F        00CC0034                 if NEG r10 = r10 + r1;
0x001020        E1F0FFB8                 call $frame_sync.analyze_stream_ind;
0x001021        D15B0008                 r3 = M[r9 + 8];
0x001022        D14B0009                 r2 = M[r9 + 9];
0x001023        23540000                 r3 = r3 - r2;
0x001024        DD40000A                 if NEG jump $M.frame_sync.update_output_streams_ind.done;
0x001025        D14B0004                 r2 = M[r9 + 4];
0x001026        9144007F                 r2 = r2 ASHIFT -1;
0x001027        03540000                 r3 = r3 + r2;
0x001028        2006005F                 Null = r4 - r3;
0x001029        00560004                 if NEG r3 = r4 + Null;
0x00102A        D14B000C                 r2 = M[r9 + 12];
0x00102B        23450000                 r2 = r2 - r3;
0x00102C        D54B000C                 M[r9 + 12] = r2;
0x00102D        23650000                 r4 = r4 - r3;

 <$M.frame_sync.update_output_streams_ind.done>
0x00102E        01220002                 r0 = r0 + 2;
0x00102F        DDF001BC                 jump $pop_rLink_and_rts;

 <$message.send_short>
0x001030        F3D00000                 push rLink;
0x001031        E1F00172                 call $block_interrupts;
0x001032        09302A58                 r1 = Null + M[$message.queue_write_ptr];
0x001033        01230005                 r0 = r1 + 5;
0x001034        2102006E                 Null = r0 - 110;
0x001035        00200000                 if EQ r0 = Null + Null;
0x001036        FD0000FF 29025A57        Null = r0 - M[$message.queue_read_ptr];
0x001038        DD000008                 if EQ jump $M.message.send_short.all_done;
0x001039        19202A58                 M[$message.queue_write_ptr] = r0 + Null;
0x00103A        D5430F08                 M[r1 + 3848] = r2;
0x00103B        D5530F09                 M[r1 + 3849] = r3;
0x00103C        D5630F0A                 M[r1 + 3850] = r4;
0x00103D        D5730F0B                 M[r1 + 3851] = r5;
0x00103E        D5830F0C                 M[r1 + 3852] = r6;
0x00103F        E1F0FC67                 call $message.private.try_to_send_message;

 <$M.message.send_short.all_done>
0x001040        E1F00153                 call $interrupt.unblock;
0x001041        DDF001AA                 jump $pop_rLink_and_rts;

 <$pskey.read_key>
0x001042        F3D00000                 push rLink;
0x001043        E1F00160                 call $block_interrupts;
0x001044        D5430001                 M[r1 + 1] = r2;
0x001045        D5530002                 M[r1 + 2] = r3;
0x001046        E450003F                 r3 = Null - 1;
0x001047        D5530000                 M[r1 + 0] = r3;
0x001048        FD0000FF 01205A5A        r0 = Null + -42406;

 <$M.pskey.read_key.find_end_of_list>
0x00104A        0042000F                 r2 = r0 + Null;
0x00104B        D1240000                 r0 = M[r2 + 0];
0x00104C        E402002F                 Null = r0 + 1;
0x00104D        DD10FFFD                 if NE jump $M.pskey.read_key.find_end_of_list;
0x00104E        D5340000                 M[r2 + 0] = r1;
0x00104F        FD0000FF 21045A5A        Null = r2 - -42406;
0x001051        E100FEC5                 if EQ call $pskey.private.send_request;
0x001052        E1F00141                 call $interrupt.unblock;
0x001053        DDF00198                 jump $pop_rLink_and_rts;

 <$cbuffer.empty_buffer>
0x001054        F3D00000                 push rLink;
0x001055        0052000F                 r3 = r0 + Null;
0x001056        D802000F                 Null = SIGNDET r0;
0x001057        DD000004                 if EQ jump $M.cbuffer.empty_buffer.its_a_port;
0x001058        E1F0015E                 call $cbuffer.get_write_address_and_size;
0x001059        0032000F                 r1 = r0 + Null;
0x00105A        DDF00007                 jump $M.cbuffer.empty_buffer.empty_port_loop;

 <$M.cbuffer.empty_buffer.its_a_port>
0x00105B        E1F00130                 call $cbuffer.calc_amount_data;
0x00105C        00C2000F                 r10 = r0 + Null;
0x00105D        0025000F                 r0 = r3 + Null;
0x00105E        E1F00153                 call $cbuffer.get_read_address_and_size;
0x00105F        E5F00002                 do $M.cbuffer.empty_buffer.empty_port_loop;
0x001060        D002000F                 Null = M[r0 + Null];

 <$M.cbuffer.empty_buffer.empty_port_loop>
0x001061        0025000F                 r0 = r3 + Null;
0x001062        E1F00163                 call $cbuffer.set_read_address;
0x001063        DDF00188                 jump $pop_rLink_and_rts;

 <$cbops.shift.main>
0x001064        D12A0000                 r0 = M[r8 + 0];
0x001065        D038002F                 r1 = M[r6 + r0];
0x001066        5000003F                 I0 = Null + r1;
0x001067        D039002F                 r1 = M[r7 + r0];
0x001068        50C0003F                 L0 = Null + r1;
0x001069        D12A0001                 r0 = M[r8 + 1];
0x00106A        D038002F                 r1 = M[r6 + r0];
0x00106B        5040003F                 I4 = Null + r1;
0x00106C        D039002F                 r1 = M[r7 + r0];
0x00106D        50E0003F                 L4 = Null + r1;
0x00106E        D14A0002                 r2 = M[r8 + 2];
0x00106F        E4CC003F                 r10 = r10 - 1;
0x001070        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001071        93240000                 r0 = r0 ASHIFT r2;
0x001072        E5F00003                 do $M.cbops.shift.main.loop;
0x001073        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;
0x001074        93240000                 r0 = r0 ASHIFT r2;

 <$M.cbops.shift.main.loop>
0x001075        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x001076        51E00000                 L4 = Null + 0;
0x001077        DC0D000F                 rts;

 <$cbops.switch_op.helper>
0x001078        E440002F                 r2 = Null + 1;
0x001079        D12A0000                 r0 = M[r8 + 0];
0x00107A        D13A0002                 r1 = M[r8 + 2];
0x00107B        00340000                 if EQ r1 = r2 + Null;
0x00107C        D3200000                 r0 = M[r0 + Null];
0x00107D        D14A0003                 r2 = M[r8 + 3];
0x00107E        88220031                 if NE r0 = r0 XOR r1;
0x00107F        83230000                 r0 = r0 AND r1;
0x001080        DD100009                 if NE jump $M.cbops.switch_op.helper.exit;
0x001081        D12A0001                 r0 = M[r8 + 1];
0x001082        DD000003                 if EQ jump $M.cbops.switch_op.helper.bypass;
0x001083        21AAFFFD                 r8 = r8 - -3;
0x001084        DDF00005                 jump $M.cbops.switch_op.helper.exit;

 <$M.cbops.switch_op.helper.bypass>
0x001085        D12AFFFE                 r0 = M[r8 + -2];
0x001086        E402002F                 Null = r0 + 1;
0x001087        DD000002                 if EQ jump $M.cbops.switch_op.helper.exit;
0x001088        01A20002                 r8 = r0 + 2;

 <$M.cbops.switch_op.helper.exit>
0x001089        DC0D000F                 rts;

 <$math.log2_abs_table>
0x00108A        D881000F                 r6 = SIGNDET rMAC;
0x00108B        93E80000                 rMAC = rMAC ASHIFT r6;
0x00108C        20100014                 if NEG rMAC = Null - rMAC;
0x00108D        DDF00003                 jump $M.math.log2_table.continue_jp;

 <$math.log2_table>
0x00108E        D881000F                 r6 = SIGNDET rMAC;
0x00108F        93E80000                 rMAC = rMAC ASHIFT r6;

 <$M.math.log2_table.continue_jp>
0x001090        E488002F                 r6 = r6 + 1;
0x001091        91880010                 r6 = r6 ASHIFT 16;
0x001092        8D310002                 r1 = rMAC LSHIFT 2;
0x001093        8D33006D                 r1 = r1 LSHIFT -19;
0x001094        8D210007                 r0 = rMAC LSHIFT 7;
0x001095        8D22007F                 r0 = r0 LSHIFT -1;
0x001096        D113033D                 rMAC = M[r1 + 829];
0x001097        D133033E                 r1 = M[r1 + 830];
0x001098        23310000                 r1 = r1 - rMAC;
0x001099        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x00109A        2021008F                 r0 = rMAC - r6;
0x00109B        DC0D000F                 rts;

 <$math.pow2_taylor>
0x00109C        F3010000                 push I0;
0x00109D        510003D4                 I0 = Null + 980;
0x00109E        91920070                 r7 = r0 ASHIFT -16;
0x00109F        8D820008                 r6 = r0 LSHIFT 8;
0x0010A0        8D88007F                 r6 = r6 LSHIFT -1;
0x0010A1        F3913100                 push M1, r1 = M[I0,1];
0x0010A2        51900001                 M1 = Null + 1;
0x0010A3        46992100                 r7 = r7 + M1, r0 = M[I0,M1];
0x0010A4        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010A5        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x0010A6        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010A7        AC32218F                 r1 = r1 + r0 * r6 (SS), r0 = M[I0,M1];
0x0010A8        AC23318F                 r0 = r0 + r1 * r6 (SS), r1 = M[I0,M1];
0x0010A9        AC32008F                 r1 = r1 + r0 * r6 (SS);
0x0010AA        9023009F                 r0 = r1 ASHIFT r7;
0x0010AB        F3950000                 pop M1;
0x0010AC        F3050000                 pop I0;
0x0010AD        DC0D000F                 rts;

 <$flash.copy_to_dm>
0x0010AE        F3D00000                 push rLink;
0x0010AF        0062000F                 r4 = r0 + Null;
0x0010B0        0073000F                 r5 = r1 + Null;

 <$M.flash.copy_to_dm.page_loop>
0x0010B1        0026000F                 r0 = r4 + Null;
0x0010B2        0037000F                 r1 = r5 + Null;
0x0010B3        E1F000E8                 call $flash.map_page_into_dm;
0x0010B4        00C3000F                 r10 = r1 + Null;
0x0010B5        5010002F                 I1 = Null + r0;
0x0010B6        E5F00003                 do $M.flash.copy_to_dm.loop;
0x0010B7        03002500                 Null = Null + Null, r0 = M[I1,1];
0x0010B8        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.flash.copy_to_dm.loop>
0x0010B9        03630000                 r4 = r4 + r1;
0x0010BA        23730000                 r5 = r5 - r1;
0x0010BB        DD10FFF6                 if NE jump $M.flash.copy_to_dm.page_loop;
0x0010BC        DDF0012F                 jump $pop_rLink_and_rts;

 <$cbops.copy_op.main>
0x0010BD        D12A0000                 r0 = M[r8 + 0];
0x0010BE        D038002F                 r1 = M[r6 + r0];
0x0010BF        5000003F                 I0 = Null + r1;
0x0010C0        D039002F                 r1 = M[r7 + r0];
0x0010C1        50C0003F                 L0 = Null + r1;
0x0010C2        D12A0001                 r0 = M[r8 + 1];
0x0010C3        D038002F                 r1 = M[r6 + r0];
0x0010C4        5040003F                 I4 = Null + r1;
0x0010C5        D039002F                 r1 = M[r7 + r0];
0x0010C6        50E0003F                 L4 = Null + r1;
0x0010C7        E4CC003F                 r10 = r10 - 1;
0x0010C8        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0010C9        E5F00002                 do $M.cbops.copy_op.main.loop;
0x0010CA        030021A1                 Null = Null + Null, r0 = M[I0,1], M[I4,1] = r0;

 <$M.cbops.copy_op.main.loop>
0x0010CB        7FCC00A1                 L0 = L0 - L0, M[I4,1] = r0;
0x0010CC        51E00000                 L4 = Null + 0;
0x0010CD        DC0D000F                 rts;

 <$iir_resamplerv2.iir_9_s2.count>
0x0010CE        0130000D                 r1 = Null + 13;
0x0010CF        DC0D000F                 rts;

 <$iir_resamplerv2.iir_9_s2>
0x0010D0        9041388F                 r2 = rMAC ASHIFT r6, r1 = M[I2,M0];
0x0010D1        CF433941                 rMAC = r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0010D2        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0010D3        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0010D4        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0010D5        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0010D6        BF433940                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,0];
0x0010D7        92E33800                 rMAC = rMAC ASHIFT r1, r1 = M[I2,M0];
0x0010D8        CF133991                 rMAC = rMAC * r1 (SS), r1 = M[I2,1], M[I4,1] = rMAC;
0x0010D9        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0010DA        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0010DB        BF433941                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1], r2 = M[I4,1];
0x0010DC        BF433900                 rMAC = rMAC - r2 * r1 (SS), r1 = M[I2,1];
0x0010DD        93E30000                 rMAC = rMAC ASHIFT r1;
0x0010DE        DC0D000F                 rts;

 <$math.pow2_sat_table>
0x0010DF        91820070                 r6 = r0 ASHIFT -16;
0x0010E0        DD400005                 if NEG jump $M.math.pow2_table.continue_jp;
0x0010E1        FD00007F 0120FFFE        r0 = Null + 8388606;
0x0010E3        DC0D000F                 rts;

 <$math.pow2_table>
0x0010E4        91820070                 r6 = r0 ASHIFT -16;

 <$M.math.pow2_table.continue_jp>
0x0010E5        8D920008                 r7 = r0 LSHIFT 8;
0x0010E6        8D99006D                 r7 = r7 LSHIFT -19;
0x0010E7        E488002F                 r6 = r6 + 1;
0x0010E8        D139035E                 r1 = M[r7 + 862];
0x0010E9        D199035F                 r7 = M[r7 + 863];
0x0010EA        23930000                 r7 = r7 - r1;
0x0010EB        8D22000D                 r0 = r0 LSHIFT 13;
0x0010EC        8D22007F                 r0 = r0 LSHIFT -1;
0x0010ED        AC39002F                 r1 = r1 + r7 * r0 (SS);
0x0010EE        9023008F                 r0 = r1 ASHIFT r6;
0x0010EF        DC0D000F                 rts;

 <$cbuffer.set_write_address.its_a_port>
0x0010F0        F3D00000                 push rLink;
0x0010F1        8122001F                 r0 = r0 AND 0x1f;
0x0010F2        2122000C                 r0 = r0 - 12;
0x0010F3        0900FE33                 Null = Null + M[0xfffe33];
0x0010F4        FD0000FF 09005A54        Null = Null + M[$cbuffer.auto_mcu_message];
0x0010F6        DD000007                 if EQ jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x0010F7        D1322713                 r1 = M[r0 + 10003];
0x0010F8        2103F000                 Null = r1 - -4096;
0x0010F9        DD500004                 if POS jump $M.cbuffer.set_write_address.its_a_port.dont_message_send;
0x0010FA        85408003                 r2 = Null OR 0x8003;
0x0010FB        ED520001                 r3 = 0x1 ASHIFT r0;
0x0010FC        E1F0FF34                 call $message.send_short;

 <$M.cbuffer.set_write_address.its_a_port.dont_message_send>
0x0010FD        DDF000EE                 jump $pop_rLink_and_rts;

 <$M.audio_proc.peak_monitor.Process.func>
0x0010FE        F3D00000                 push rLink;
0x0010FF        D1290000                 r0 = M[r7 + 0];
0x001100        E1F000C0                 call $frmbuffer.get_buffer;
0x001101        5000002F                 I0 = Null + r0;
0x001102        50C0003F                 L0 = Null + r1;
0x001103        F3D40000                 pop rLink;
0x001104        51900001                 M1 = Null + 1;
0x001105        00C5610F                 r10 = r3 + Null, r4 = M[I0,M1];
0x001106        D1590001                 r3 = M[r7 + 1];
0x001107        E5F00003                 do $M.audio_proc.peak_monitor.Process.lp_calc_peak;
0x001108        E466004F                 r4 = ABS r4;
0x001109        E456616F                 r3 = MAX r4, r4 = M[I0,M1];

 <$M.audio_proc.peak_monitor.Process.lp_calc_peak>
0x00110A        50C0000F                 L0 = Null + Null;
0x00110B        D5590001                 M[r7 + 1] = r3;
0x00110C        DC0D000F                 rts;

 <$cbuffer.set_read_address.its_a_port>
0x00110D        F3D00000                 push rLink;
0x00110E        8122001F                 r0 = r0 AND 0x1f;
0x00110F        0900FE33                 Null = Null + M[0xfffe33];
0x001110        FD0000FF 09005A54        Null = Null + M[$cbuffer.auto_mcu_message];
0x001112        DD000007                 if EQ jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x001113        D1322707                 r1 = M[r0 + 9991];
0x001114        2103F000                 Null = r1 - -4096;
0x001115        DD500004                 if POS jump $M.cbuffer.set_read_address.its_a_port.dont_message_send;
0x001116        85408002                 r2 = Null OR 0x8002;
0x001117        ED520001                 r3 = 0x1 ASHIFT r0;
0x001118        E1F0FF18                 call $message.send_short;

 <$M.cbuffer.set_read_address.its_a_port.dont_message_send>
0x001119        DDF000D2                 jump $pop_rLink_and_rts;

 <$cbuffer.advance_read_ptr>
0x00111A        F3D00000                 push rLink;
0x00111B        F3200000                 push r0;
0x00111C        E1F00095                 call $cbuffer.get_read_address_and_size;
0x00111D        5000002F                 I0 = Null + r0;
0x00111E        50C0003F                 L0 = Null + r1;
0x00111F        50B000CF                 M3 = Null + r10;
0x001120        02002300                 Null = Null + Null, r0 = M[I0,M3];
0x001121        F3240000                 pop r0;
0x001122        4430000F                 r1 = Null + I0;
0x001123        E1F000A2                 call $cbuffer.set_read_address;
0x001124        51C00000                 L0 = Null + 0;
0x001125        DDF000C6                 jump $pop_rLink_and_rts;

 <$frame_sync.distribute_read_insert_ind>
0x001126        20C000CF                 r10 = Null - r10;
0x001127        D14B0004                 r2 = M[r9 + 4];
0x001128        9144007F                 r2 = r2 ASHIFT -1;
0x001129        03C40000                 r10 = r10 + r2;
0x00112A        D14B000C                 r2 = M[r9 + 12];
0x00112B        034C0000                 r2 = r2 + r10;
0x00112C        D54B000C                 M[r9 + 12] = r2;
0x00112D        5010008F                 I1 = Null + r6;
0x00112E        03004700                 Null = Null + Null, r2 = M[I1,-1];
0x00112F        E5F00002                 do $M.frame_sync.distribute_read_insert_ind.lp_repeat;
0x001130        0300C700                 Null = Null + Null, M[I1,-1] = r2;

 <$M.frame_sync.distribute_read_insert_ind.lp_repeat>
0x001131        03004500                 Null = Null + Null, r2 = M[I1,1];
0x001132        4480001F                 r6 = Null + I1;
0x001133        D5820001                 M[r0 + 1] = r6;
0x001134        DC0D000F                 rts;

 <$frame_sync.update_input_streams_ind>
0x001135        D15B0008                 r3 = M[r9 + 8];
0x001136        D14B0009                 r2 = M[r9 + 9];
0x001137        23540000                 r3 = r3 - r2;
0x001138        DD400008                 if NEG jump $M.frame_sync.update_input_streams_ind.done;
0x001139        D14B0004                 r2 = M[r9 + 4];
0x00113A        9144007F                 r2 = r2 ASHIFT -1;
0x00113B        03540000                 r3 = r3 + r2;
0x00113C        D14B000C                 r2 = M[r9 + 12];
0x00113D        23450000                 r2 = r2 - r3;
0x00113E        D54B000C                 M[r9 + 12] = r2;
0x00113F        03650000                 r4 = r4 + r3;

 <$M.frame_sync.update_input_streams_ind.done>
0x001140        E422002F                 r0 = r0 + 1;
0x001141        DC0D000F                 rts;

 <$cbops.rate_adjustment_and_shift.amount_to_use>
0x001142        D12A000C                 r0 = M[r8 + 12];
0x001143        9462009F                 r4 = r0 * r7 (frac);
0x001144        2069006F                 r4 = r7 - r4;
0x001145        D10A0009                 Null = M[r8 + 9];
0x001146        DD000003                 if EQ jump $M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit;
0x001147        2126005F                 r0 = r4 - 95;
0x001148        20660025                 if POS r4 = r4 - r0;

 <$M.cbops.rate_adjustment_and_shift.amount_to_use.no_limit>
0x001149        21660002                 r4 = r4 - 2;
0x00114A        00600004                 if NEG r4 = Null + Null;
0x00114B        2006007F                 Null = r4 - r5;
0x00114C        00760004                 if NEG r5 = r4 + Null;
0x00114D        DC0D000F                 rts;

 <$frame_sync.register_handlers>
0x00114E        F3D00000                 push rLink;

 <$M.frame_sync.handlers.lp_proc_loop>
0x00114F        D036000F                 r1 = M[r4 + Null];
0x001150        DD00009B                 if EQ jump $pop_rLink_and_rts;
0x001151        D1460001                 r2 = M[r4 + 1];
0x001152        D1560002                 r3 = M[r4 + 2];
0x001153        D1260003                 r0 = M[r4 + 3];
0x001154        01660004                 r4 = r4 + 4;
0x001155        19602A65                 M[$M.frame_sync.handlers.LOOP_COUNT] = r4 + Null;
0x001156        E002000F                 call r0;
0x001157        09602A65                 r4 = Null + M[$M.frame_sync.handlers.LOOP_COUNT];
0x001158        DDF0FFF7                 jump $M.frame_sync.handlers.lp_proc_loop;

 <$frame_sync.distribute_output_stream_ind>
0x001159        501000AF                 I1 = Null + r8;
0x00115A        238A0000                 r6 = r6 - r8;
0x00115B        0088003D                 if LE r6 = r6 + r1;
0x00115C        67890000                 r6 = r6 - M1;
0x00115D        70A8006F                 M2 = r6 - r4;
0x00115E        DD500004                 if POS jump $M.frame_sync.distribute_output_stream_ind.done;
0x00115F        444000AF                 r2 = Null + M2;
0x001160        D54B000C                 M[r9 + 12] = r2;
0x001161        02004600                 Null = Null + Null, r2 = M[I1,M2];

 <$M.frame_sync.distribute_output_stream_ind.done>
0x001162        4480001F                 r6 = Null + I1;
0x001163        D5820002                 M[r0 + 2] = r6;
0x001164        DC0D000F                 rts;

 <$volume_and_limit.initialize>
0x001165        D1C90002                 r10 = M[r7 + 2];
0x001166        0189000B                 r6 = r7 + 11;
0x001167        D1590004                 r3 = M[r7 + 4];
0x001168        E5F00007                 do $M.audio_proc.volume_and_limit.reset.volume_reset_loop;
0x001169        D1280002                 r0 = M[r6 + 2];
0x00116A        CC15002F                 rMAC = r3 * r0 (SS);
0x00116B        91110004                 rMAC = rMAC ASHIFT 4 (56bit);
0x00116C        D5180003                 M[r6 + 3] = rMAC;
0x00116D        D5180004                 M[r6 + 4] = rMAC;
0x00116E        01880005                 r6 = r6 + 5;

 <$M.audio_proc.volume_and_limit.reset.volume_reset_loop>
0x00116F        D5090009                 M[r7 + 9] = Null;
0x001170        DC0D000F                 rts;

 <$frame_sync.run_function_table>
0x001171        F3D00000                 push rLink;

 <$M.frame_sync.run_function_table.lp_proc_loop>
0x001172        D076000F                 r5 = M[r4 + Null];
0x001173        DD000078                 if EQ jump $pop_rLink_and_rts;
0x001174        D1960001                 r7 = M[r4 + 1];
0x001175        D1A60002                 r8 = M[r4 + 2];
0x001176        01660003                 r4 = r4 + 3;
0x001177        F3600000                 push r4;
0x001178        E007000F                 call r5;
0x001179        F3640000                 pop r4;
0x00117A        DDF0FFF8                 jump $M.frame_sync.run_function_table.lp_proc_loop;

 <$cbuffer.calc_amount_space>
0x00117B        D802000F                 Null = SIGNDET r0;
0x00117C        DD00FCC3                 if EQ jump $cbuffer.calc_amount_space.its_a_port;

 <$M.cbuffer.calc_amount_space.its_a_cbuffer>
0x00117D        D1420000                 r2 = M[r0 + 0];
0x00117E        D1320002                 r1 = M[r0 + 2];
0x00117F        D1220001                 r0 = M[r0 + 1];
0x001180        23230000                 r0 = r0 - r1;
0x001181        0022004D                 if LE r0 = r0 + r2;
0x001182        E422003F                 r0 = r0 - 1;
0x001183        DC0D000F                 rts;

 <$frame_sync.distribute_input_stream_ind>
0x001184        F3D00000                 push rLink;
0x001185        23A80000                 r8 = r8 - r6;
0x001186        00AA0034                 if NEG r8 = r8 + r1;
0x001187        20CA006F                 r10 = r8 - r4;
0x001188        E140FF9E                 if NEG call $frame_sync.distribute_read_insert_ind;
0x001189        E1F0FE4F                 call $frame_sync.analyze_stream_ind;
0x00118A        DDF00061                 jump $pop_rLink_and_rts;

 <$cbuffer.calc_amount_data>
0x00118B        D802000F                 Null = SIGNDET r0;
0x00118C        DD00FCF5                 if EQ jump $cbuffer.calc_amount_data.its_a_port;

 <$M.cbuffer.calc_amount_data.its_a_cbuffer>
0x00118D        D1420000                 r2 = M[r0 + 0];
0x00118E        D1320002                 r1 = M[r0 + 2];
0x00118F        D1220001                 r0 = M[r0 + 1];
0x001190        2023002F                 r0 = r1 - r0;
0x001191        00220044                 if NEG r0 = r0 + r2;
0x001192        DC0D000F                 rts;

 <$interrupt.unblock>
0x001193        09202A56                 r0 = Null + M[$interrupt.block_count];
0x001194        E1000ED6                 if EQ call $error;
0x001195        E422003F                 r0 = r0 - 1;
0x001196        19202A56                 M[$interrupt.block_count] = r0 + Null;
0x001197        DC0D0001                 if NE rts;
0x001198        E420002F                 r0 = Null + 1;
0x001199        1920FE12                 M[0xfffe12] = r0 + Null;
0x00119A        DC0D000F                 rts;

 <$flash.map_page_into_dm>
0x00119B        9152007F                 r3 = r0 ASHIFT -1;
0x00119C        1945FE5D                 M[0xfffe5d] = r2 + r3;
0x00119D        81520001                 r3 = r0 AND 0x1;
0x00119E        65251000                 r0 = 4096 - r3;
0x00119F        2023002F                 r0 = r1 - r0;
0x0011A0        20330025                 if POS r1 = r1 - r0;
0x0011A1        0125D000                 r0 = r3 + -12288;
0x0011A2        DC0D000F                 rts;

 <$block_interrupts>
0x0011A3        09202A56                 r0 = Null + M[$interrupt.block_count];
0x0011A4        E422002F                 r0 = r0 + 1;
0x0011A5        19202A56                 M[$interrupt.block_count] = r0 + Null;
0x0011A6        1900FE12                 M[0xfffe12] = Null + Null;
0x0011A7        03000000                 Null = Null + Null;
0x0011A8        03000000                 Null = Null + Null;
0x0011A9        DC0D000F                 rts;

 <$message.send_queue_space>
0x0011AA        FD0000FF 09205A57        r0 = Null + M[$message.queue_read_ptr];
0x0011AC        29222A58                 r0 = r0 - M[$message.queue_write_ptr];
0x0011AD        E422003F                 r0 = r0 - 1;
0x0011AE        DC0D0005                 if POS rts;
0x0011AF        0122006E                 r0 = r0 + 110;
0x0011B0        DC0D000F                 rts;

 <$cbuffer.get_read_address_and_size>
0x0011B1        D802000F                 Null = SIGNDET r0;
0x0011B2        DD00FB9A                 if EQ jump $cbuffer.get_read_address_and_size.its_a_port;

 <$M.cbuffer.get_read_address_and_size.its_a_cbuffer>
0x0011B3        D1320000                 r1 = M[r0 + 0];
0x0011B4        D1220001                 r0 = M[r0 + 1];
0x0011B5        DC0D000F                 rts;

 <$cbuffer.get_write_address_and_size>
0x0011B6        D802000F                 Null = SIGNDET r0;
0x0011B7        DD00FB6B                 if EQ jump $cbuffer.get_write_address_and_size.its_a_port;

 <$M.cbuffer.get_write_address_and_size.its_a_cbuffer>
0x0011B8        D1320000                 r1 = M[r0 + 0];
0x0011B9        D1220002                 r0 = M[r0 + 2];
0x0011BA        DC0D000F                 rts;

 <$cbuffer.is_it_enabled>
0x0011BB        D802000F                 Null = SIGNDET r0;
0x0011BC        DC0D0001                 if NE rts;
0x0011BD        8122001F                 r0 = r0 AND 0x1f;
0x0011BE        D10226EF                 Null = M[r0 + 9967];
0x0011BF        DC0D000F                 rts;

 <$frmbuffer.get_buffer>
0x0011C0        D1520002                 r3 = M[r0 + 2];
0x0011C1        D1420000                 r2 = M[r0 + 0];
0x0011C2        D1220001                 r0 = M[r0 + 1];
0x0011C3        D1340000                 r1 = M[r2 + 0];
0x0011C4        DC0D000F                 rts;

 <$cbuffer.set_read_address>
0x0011C5        D802000F                 Null = SIGNDET r0;
0x0011C6        DD00FF47                 if EQ jump $cbuffer.set_read_address.its_a_port;

 <$M.cbuffer.set_read_address.its_a_cbuffer>
0x0011C7        D5320001                 M[r0 + 1] = r1;
0x0011C8        DC0D000F                 rts;

 <$cbuffer.set_write_address>
0x0011C9        D802000F                 Null = SIGNDET r0;
0x0011CA        DD00FF26                 if EQ jump $cbuffer.set_write_address.its_a_port;

 <$M.cbuffer.set_write_address.its_a_cbuffer>
0x0011CB        D5320002                 M[r0 + 2] = r1;
0x0011CC        DC0D000F                 rts;

 <$cbops.deinterleave.amount_to_use>
0x0011CD        8D77007F                 r5 = r5 LSHIFT -1;
0x0011CE        2007009F                 Null = r5 - r7;
0x0011CF        00790005                 if POS r5 = r7 + Null;
0x0011D0        8D770001                 r5 = r5 LSHIFT 1;
0x0011D1        DC0D000F                 rts;

 <$latency.calc_inv_fs>
0x0011D2        8D220002                 r0 = r0 LSHIFT 2;
0x0011D3        01103D09                 rMAC = Null + 15625;
0x0011D4        D9020000                 Div = rMAC / r0;
0x0011D5        D9200001                 r0 = DivResult;
0x0011D6        DC0D000F                 rts;

 <$cbuffer.buffer_configure>
0x0011D7        D5320002                 M[r0 + 2] = r1;
0x0011D8        D5320001                 M[r0 + 1] = r1;
0x0011D9        D5420000                 M[r0 + 0] = r2;
0x0011DA        DC0D000F                 rts;

 <$timer.schedule_event_in_period>
0x0011DB        D1230001                 r0 = M[r1 + 1];
0x0011DC        03420000                 r2 = r2 + r0;
0x0011DD        DDF0FC22                 jump $timer.schedule_event_at;

 <$timer.schedule_event_in>
0x0011DE        0944FE71                 r2 = r2 + M[0xfffe71];
0x0011DF        DDF0FC20                 jump $timer.schedule_event_at;

 <$cbops.switch_op.reset>
0x0011E0        01500000                 r3 = Null + 0;
0x0011E1        DDF0FE97                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.amount_to_use>
0x0011E2        E450002F                 r3 = Null + 1;
0x0011E3        DDF0FE95                 jump $cbops.switch_op.helper;

 <$cbops.switch_op.main>
0x0011E4        01500002                 r3 = Null + 2;
0x0011E5        DDF0FE93                 jump $cbops.switch_op.helper;

 <$cbops.fir_resample.complete>
0x0011E6        09602A63                 r4 = Null + M[$M.cbops.fir_resample.amount_used];
0x0011E7        19602A5D                 M[$cbops.amount_to_use] = r4 + Null;
0x0011E8        DC0D000F                 rts;

 <$frmbuffer.set_frame_size>
0x0011E9        D5520002                 M[r0 + 2] = r3;
0x0011EA        DC0D000F                 rts;

 <$pop_rLink_and_rts>
0x0011EB        F3D40000                 pop rLink;
0x0011EC        DC0D000F                 rts;

 <$cbops.dc_remove.reset>
0x0011ED        D50A0002                 M[r8 + 2] = Null;
0x0011EE        DC0D000F                 rts;

 <$wall_clock.message_handler_failed>
0x0011EF        DC0D000F                 rts;

 <$kal_filter_coef_lib.__warp>
0x0011F0        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__warp.jump_entry>
0x0011F1        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x0011F2        F3010000                 push I0;
0x0011F3        5100286A                 I0 = Null + 10346;
0x0011F4        E1F00657                 call $kal_float_lib.div;
0x0011F5        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0011F6        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0011F7        E1F00622                 call $kal_float_lib.mul;
0x0011F8        0042000F                 r2 = r0 + Null;
0x0011F9        0053000F                 r3 = r1 + Null;
0x0011FA        0062000F                 r4 = r0 + Null;
0x0011FB        0073000F                 r5 = r1 + Null;
0x0011FC        E1F0061D                 call $kal_float_lib.mul;
0x0011FD        0082000F                 r6 = r0 + Null;
0x0011FE        0093000F                 r7 = r1 + Null;
0x0011FF        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001200        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001201        01C00005                 r10 = Null + 5;
0x001202        E5F00007                 do $kal_filter_coef_lib.__warp.tangent_loop;
0x001203        0048000F                 r2 = r6 + Null;
0x001204        0059000F                 r3 = r7 + Null;
0x001205        E1F00614                 call $kal_float_lib.mul;
0x001206        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001207        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001208        E1F005FF                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__warp.tangent_loop>
0x001209        0046000F                 r2 = r4 + Null;
0x00120A        0057000F                 r3 = r5 + Null;
0x00120B        E1F0060E                 call $kal_float_lib.mul;
0x00120C        F3050000                 pop I0;
0x00120D        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x00120E        F3D40000                 pop rLink;
0x00120F        DC0D000F                 rts;

 <$kal_filter_coef_lib.__db2lin>
0x001210        F3D00000                 push rLink;

 <$kal_filter_coef_lib.__db2lin.jump_entry>
0x001211        F10011F0                 pushm <r2, r3, r4, r5, r6, r10>;
0x001212        F3010000                 push I0;
0x001213        FD0000FF 5100588A        I0 = Null + -42870;
0x001215        0062000F                 r4 = r0 + Null;
0x001216        0073000F                 r5 = r1 + Null;
0x001217        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001218        03005300                 Null = Null + Null, r3 = M[I0,-1];
0x001219        E1F00632                 call $kal_float_lib.div;
0x00121A        0042000F                 r2 = r0 + Null;
0x00121B        0053000F                 r3 = r1 + Null;
0x00121C        E1F005DE                 call $kal_float_lib.float_to_int;
0x00121D        0082000F                 r6 = r0 + Null;
0x00121E        E1F005D6                 call $kal_float_lib.int_to_float;
0x00121F        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001220        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001221        E1F005F8                 call $kal_float_lib.mul;
0x001222        0042000F                 r2 = r0 + Null;
0x001223        0053000F                 r3 = r1 + Null;
0x001224        0026000F                 r0 = r4 + Null;
0x001225        0037000F                 r1 = r5 + Null;
0x001226        E1F005EA                 call $kal_float_lib.sub;
0x001227        0062000F                 r4 = r0 + Null;
0x001228        0073000F                 r5 = r1 + Null;
0x001229        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00122A        03003100                 Null = Null + Null, r1 = M[I0,1];
0x00122B        01C00003                 r10 = Null + 3;
0x00122C        E5F00007                 do $kal_filter_coef_lib.__db2lin.power_series_loop;
0x00122D        0046000F                 r2 = r4 + Null;
0x00122E        0057000F                 r3 = r5 + Null;
0x00122F        E1F005EA                 call $kal_float_lib.mul;
0x001230        03004100                 Null = Null + Null, r2 = M[I0,1];
0x001231        03005100                 Null = Null + Null, r3 = M[I0,1];
0x001232        E1F005D5                 call $kal_float_lib.add;

 <$kal_filter_coef_lib.__db2lin.power_series_loop>
0x001233        03280000                 r0 = r0 + r6;
0x001234        F3050000                 pop I0;
0x001235        F10411F0                 popm <r2, r3, r4, r5, r6, r10>;
0x001236        F3D40000                 pop rLink;
0x001237        DC0D000F                 rts;

 <$kal_filter_coef_lib.__scale_coefficients>
0x001238        F1002001                 pushm <FP(=SP), rLink>;
0x001239        012000FF                 r0 = Null + 255;
0x00123A        F1387FF6                 r1 = M[FP + -0xa];
0x00123B        83320000                 r1 = r1 AND r0;
0x00123C        F1487FF8                 r2 = M[FP + -0x8];
0x00123D        83420000                 r2 = r2 AND r0;
0x00123E        E434006F                 r1 = MAX r2;
0x00123F        F1487FFA                 r2 = M[FP + -0x6];
0x001240        83420000                 r2 = r2 AND r0;
0x001241        E434006F                 r1 = MAX r2;
0x001242        F1487FFC                 r2 = M[FP + -0x4];
0x001243        83420000                 r2 = r2 AND r0;
0x001244        E434006F                 r1 = MAX r2;
0x001245        F1487FFE                 r2 = M[FP + -0x2];
0x001246        83420000                 r2 = r2 AND r0;
0x001247        E434006F                 r1 = MAX r2;
0x001248        2143007F                 r2 = r1 - 127;
0x001249        F1287FF6                 r0 = M[FP + -0xa];
0x00124A        F1387FF7                 r1 = M[FP + -0x9];
0x00124B        23240000                 r0 = r0 - r2;
0x00124C        E1F005B3                 call $kal_float_lib.float_to_frac;
0x00124D        F12C7FF0                 M[FP + -0x10] = r0;
0x00124E        F1287FF8                 r0 = M[FP + -0x8];
0x00124F        F1387FF9                 r1 = M[FP + -0x7];
0x001250        23240000                 r0 = r0 - r2;
0x001251        E1F005AE                 call $kal_float_lib.float_to_frac;
0x001252        F12C7FF1                 M[FP + -0xf] = r0;
0x001253        F1287FFA                 r0 = M[FP + -0x6];
0x001254        F1387FFB                 r1 = M[FP + -0x5];
0x001255        23240000                 r0 = r0 - r2;
0x001256        E1F005A9                 call $kal_float_lib.float_to_frac;
0x001257        F12C7FF2                 M[FP + -0xe] = r0;
0x001258        F1287FFC                 r0 = M[FP + -0x4];
0x001259        F1387FFD                 r1 = M[FP + -0x3];
0x00125A        23240000                 r0 = r0 - r2;
0x00125B        E1F005A4                 call $kal_float_lib.float_to_frac;
0x00125C        F12C7FF3                 M[FP + -0xd] = r0;
0x00125D        F1287FFE                 r0 = M[FP + -0x2];
0x00125E        F1387FFF                 r1 = M[FP + -0x1];
0x00125F        23240000                 r0 = r0 - r2;
0x001260        E1F0059F                 call $kal_float_lib.float_to_frac;
0x001261        F12C7FF4                 M[FP + -0xc] = r0;
0x001262        F14C7FF5                 M[FP + -0xb] = r2;
0x001263        F1042001                 popm <FP, rLink>;
0x001264        F103FFF6                 SP = SP + -10;
0x001265        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_bypass>
0x001266        F1002005                 pushm <FP(=SP), r0, rLink>;
0x001267        E420002F                 r0 = Null + 1;
0x001268        F12C7FFA                 M[FP + -0x6] = r0;
0x001269        01200000                 r0 = Null + 0;
0x00126A        F12C7FFC                 M[FP + -0x4] = r0;
0x00126B        F12C7FFB                 M[FP + -0x5] = r0;
0x00126C        F12C7FFF                 M[FP + -0x1] = r0;
0x00126D        F12C7FFE                 M[FP + -0x2] = r0;
0x00126E        FD000040 01200000        r0 = Null + 4194304;
0x001270        F12C7FFD                 M[FP + -0x3] = r0;
0x001271        F1042005                 popm <FP, r0, rLink>;
0x001272        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_1st>
0x001273        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001274        F1287FFC                 r0 = M[FP + -0x4];
0x001275        F1387FFD                 r1 = M[FP + -0x3];
0x001276        F1487FFE                 r2 = M[FP + -0x2];
0x001277        F1587FFF                 r3 = M[FP + -0x1];
0x001278        E1F0FF78                 call $kal_filter_coef_lib.__warp;
0x001279        0062000F                 r4 = r0 + Null;
0x00127A        0073000F                 r5 = r1 + Null;
0x00127B        01400080                 r2 = Null + 128;
0x00127C        FD000080 01500000        r3 = Null + -8388608;
0x00127E        E1F00589                 call $kal_float_lib.add;
0x00127F        E1F005AF                 call $kal_float_lib.recip;
0x001280        0082000F                 r6 = r0 + Null;
0x001281        0093000F                 r7 = r1 + Null;
0x001282        0046000F                 r2 = r4 + Null;
0x001283        0057000F                 r3 = r5 + Null;
0x001284        E1F00595                 call $kal_float_lib.mul;
0x001285        F1030006                 SP = SP + 6;
0x001286        F100000C                 pushm <r0, r1>;
0x001287        F100000C                 pushm <r0, r1>;
0x001288        01200000                 r0 = Null + 0;
0x001289        01300000                 r1 = Null + 0;
0x00128A        F100000C                 pushm <r0, r1>;
0x00128B        0026000F                 r0 = r4 + Null;
0x00128C        0037000F                 r1 = r5 + Null;
0x00128D        01400080                 r2 = Null + 128;
0x00128E        FD000080 01500000        r3 = Null + -8388608;
0x001290        E1F00580                 call $kal_float_lib.sub;
0x001291        0048000F                 r2 = r6 + Null;
0x001292        0059000F                 r3 = r7 + Null;
0x001293        E1F00586                 call $kal_float_lib.mul;
0x001294        F100000C                 pushm <r0, r1>;
0x001295        01200000                 r0 = Null + 0;
0x001296        01300000                 r1 = Null + 0;
0x001297        F100000C                 pushm <r0, r1>;
0x001298        E1F0FFA0                 call $kal_filter_coef_lib.__scale_coefficients;
0x001299        F3240000                 pop r0;
0x00129A        F12C7FF6                 M[FP + -0xa] = r0;
0x00129B        F3240000                 pop r0;
0x00129C        F12C7FF8                 M[FP + -0x8] = r0;
0x00129D        F3240000                 pop r0;
0x00129E        F12C7FF7                 M[FP + -0x9] = r0;
0x00129F        F3240000                 pop r0;
0x0012A0        F12C7FFB                 M[FP + -0x5] = r0;
0x0012A1        F3240000                 pop r0;
0x0012A2        F12C7FFA                 M[FP + -0x6] = r0;
0x0012A3        F3240000                 pop r0;
0x0012A4        F12C7FF9                 M[FP + -0x7] = r0;
0x0012A5        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012A6        F103FFFC                 SP = SP + -4;
0x0012A7        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_1st>
0x0012A8        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012A9        F1287FFC                 r0 = M[FP + -0x4];
0x0012AA        F1387FFD                 r1 = M[FP + -0x3];
0x0012AB        F1487FFE                 r2 = M[FP + -0x2];
0x0012AC        F1587FFF                 r3 = M[FP + -0x1];
0x0012AD        E1F0FF43                 call $kal_filter_coef_lib.__warp;
0x0012AE        0062000F                 r4 = r0 + Null;
0x0012AF        0073000F                 r5 = r1 + Null;
0x0012B0        01400080                 r2 = Null + 128;
0x0012B1        FD000080 01500000        r3 = Null + -8388608;
0x0012B3        E1F00554                 call $kal_float_lib.add;
0x0012B4        E1F0057A                 call $kal_float_lib.recip;
0x0012B5        0082000F                 r6 = r0 + Null;
0x0012B6        0093000F                 r7 = r1 + Null;
0x0012B7        F1030006                 SP = SP + 6;
0x0012B8        F100000C                 pushm <r0, r1>;
0x0012B9        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0012BB        F100000C                 pushm <r0, r1>;
0x0012BC        01200000                 r0 = Null + 0;
0x0012BD        01300000                 r1 = Null + 0;
0x0012BE        F100000C                 pushm <r0, r1>;
0x0012BF        0026000F                 r0 = r4 + Null;
0x0012C0        0037000F                 r1 = r5 + Null;
0x0012C1        01400080                 r2 = Null + 128;
0x0012C2        FD000080 01500000        r3 = Null + -8388608;
0x0012C4        E1F0054C                 call $kal_float_lib.sub;
0x0012C5        0048000F                 r2 = r6 + Null;
0x0012C6        0059000F                 r3 = r7 + Null;
0x0012C7        E1F00552                 call $kal_float_lib.mul;
0x0012C8        F100000C                 pushm <r0, r1>;
0x0012C9        01200000                 r0 = Null + 0;
0x0012CA        01300000                 r1 = Null + 0;
0x0012CB        F100000C                 pushm <r0, r1>;
0x0012CC        E1F0FF6C                 call $kal_filter_coef_lib.__scale_coefficients;
0x0012CD        F3240000                 pop r0;
0x0012CE        F12C7FF6                 M[FP + -0xa] = r0;
0x0012CF        F3240000                 pop r0;
0x0012D0        F12C7FF8                 M[FP + -0x8] = r0;
0x0012D1        F3240000                 pop r0;
0x0012D2        F12C7FF7                 M[FP + -0x9] = r0;
0x0012D3        F3240000                 pop r0;
0x0012D4        F12C7FFB                 M[FP + -0x5] = r0;
0x0012D5        F3240000                 pop r0;
0x0012D6        F12C7FFA                 M[FP + -0x6] = r0;
0x0012D7        F3240000                 pop r0;
0x0012D8        F12C7FF9                 M[FP + -0x7] = r0;
0x0012D9        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012DA        F103FFFC                 SP = SP + -4;
0x0012DB        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_1st>
0x0012DC        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0012DD        F1287FFC                 r0 = M[FP + -0x4];
0x0012DE        F1387FFD                 r1 = M[FP + -0x3];
0x0012DF        F1487FFE                 r2 = M[FP + -0x2];
0x0012E0        F1587FFF                 r3 = M[FP + -0x1];
0x0012E1        E1F0FF0F                 call $kal_filter_coef_lib.__warp;
0x0012E2        0062000F                 r4 = r0 + Null;
0x0012E3        0073000F                 r5 = r1 + Null;
0x0012E4        01400080                 r2 = Null + 128;
0x0012E5        FD000080 01500000        r3 = Null + -8388608;
0x0012E7        E1F00520                 call $kal_float_lib.add;
0x0012E8        E1F00546                 call $kal_float_lib.recip;
0x0012E9        0082000F                 r6 = r0 + Null;
0x0012EA        0093000F                 r7 = r1 + Null;
0x0012EB        F1030006                 SP = SP + 6;
0x0012EC        01200080                 r0 = Null + 128;
0x0012ED        FD000080 01300000        r1 = Null + -8388608;
0x0012EF        0046000F                 r2 = r4 + Null;
0x0012F0        0057000F                 r3 = r5 + Null;
0x0012F1        E1F0051F                 call $kal_float_lib.sub;
0x0012F2        0048000F                 r2 = r6 + Null;
0x0012F3        0059000F                 r3 = r7 + Null;
0x0012F4        E1F00525                 call $kal_float_lib.mul;
0x0012F5        F100000C                 pushm <r0, r1>;
0x0012F6        0042000F                 r2 = r0 + Null;
0x0012F7        0053000F                 r3 = r1 + Null;
0x0012F8        01200080                 r0 = Null + 128;
0x0012F9        FD000080 01300000        r1 = Null + -8388608;
0x0012FB        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0012FD        F100000C                 pushm <r0, r1>;
0x0012FE        01200000                 r0 = Null + 0;
0x0012FF        01300000                 r1 = Null + 0;
0x001300        F100000C                 pushm <r0, r1>;
0x001301        0024000F                 r0 = r2 + Null;
0x001302        0035000F                 r1 = r3 + Null;
0x001303        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001305        F100000C                 pushm <r0, r1>;
0x001306        01200000                 r0 = Null + 0;
0x001307        01300000                 r1 = Null + 0;
0x001308        F100000C                 pushm <r0, r1>;
0x001309        E1F0FF2F                 call $kal_filter_coef_lib.__scale_coefficients;
0x00130A        F3240000                 pop r0;
0x00130B        F12C7FF6                 M[FP + -0xa] = r0;
0x00130C        F3240000                 pop r0;
0x00130D        F12C7FF8                 M[FP + -0x8] = r0;
0x00130E        F3240000                 pop r0;
0x00130F        F12C7FF7                 M[FP + -0x9] = r0;
0x001310        F3240000                 pop r0;
0x001311        F12C7FFB                 M[FP + -0x5] = r0;
0x001312        F3240000                 pop r0;
0x001313        F12C7FFA                 M[FP + -0x6] = r0;
0x001314        F3240000                 pop r0;
0x001315        F12C7FF9                 M[FP + -0x7] = r0;
0x001316        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001317        F103FFFC                 SP = SP + -4;
0x001318        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_1st>
0x001319        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00131A        F1030004                 SP = SP + 4;
0x00131B        F1287FF8                 r0 = M[FP + -0x8];
0x00131C        F1387FF9                 r1 = M[FP + -0x7];
0x00131D        F1487FFE                 r2 = M[FP + -0x2];
0x00131E        F1587FFF                 r3 = M[FP + -0x1];
0x00131F        E1F0FED1                 call $kal_filter_coef_lib.__warp;
0x001320        0062000F                 r4 = r0 + Null;
0x001321        0073000F                 r5 = r1 + Null;
0x001322        F1287FFC                 r0 = M[FP + -0x4];
0x001323        F1387FFD                 r1 = M[FP + -0x3];
0x001324        E1F0FEEC                 call $kal_filter_coef_lib.__db2lin;
0x001325        F12C000C                 M[FP + 0xc] = r0;
0x001326        F13C000D                 M[FP + 0xd] = r1;
0x001327        F1287FFA                 r0 = M[FP + -0x6];
0x001328        F1387FFB                 r1 = M[FP + -0x5];
0x001329        E422003F                 r0 = r0 - 1;
0x00132A        E1F0FEE6                 call $kal_filter_coef_lib.__db2lin;
0x00132B        0042000F                 r2 = r0 + Null;
0x00132C        0053000F                 r3 = r1 + Null;
0x00132D        0026000F                 r0 = r4 + Null;
0x00132E        0037000F                 r1 = r5 + Null;
0x00132F        E1F0051C                 call $kal_float_lib.div;
0x001330        0082000F                 r6 = r0 + Null;
0x001331        0093000F                 r7 = r1 + Null;
0x001332        0026000F                 r0 = r4 + Null;
0x001333        0037000F                 r1 = r5 + Null;
0x001334        E1F004E5                 call $kal_float_lib.mul;
0x001335        0062000F                 r4 = r0 + Null;
0x001336        0073000F                 r5 = r1 + Null;
0x001337        0028000F                 r0 = r6 + Null;
0x001338        0039000F                 r1 = r7 + Null;
0x001339        01400080                 r2 = Null + 128;
0x00133A        FD000080 01500000        r3 = Null + -8388608;
0x00133C        E1F004CB                 call $kal_float_lib.add;
0x00133D        E1F004F1                 call $kal_float_lib.recip;
0x00133E        F12C000A                 M[FP + 0xa] = r0;
0x00133F        F13C000B                 M[FP + 0xb] = r1;
0x001340        F1030006                 SP = SP + 6;
0x001341        0026000F                 r0 = r4 + Null;
0x001342        0037000F                 r1 = r5 + Null;
0x001343        01400080                 r2 = Null + 128;
0x001344        FD000080 01500000        r3 = Null + -8388608;
0x001346        E1F004C1                 call $kal_float_lib.add;
0x001347        F148000A                 r2 = M[FP + 0xa];
0x001348        F158000B                 r3 = M[FP + 0xb];
0x001349        E1F004D0                 call $kal_float_lib.mul;
0x00134A        F148000C                 r2 = M[FP + 0xc];
0x00134B        F158000D                 r3 = M[FP + 0xd];
0x00134C        E1F004CD                 call $kal_float_lib.mul;
0x00134D        F100000C                 pushm <r0, r1>;
0x00134E        0026000F                 r0 = r4 + Null;
0x00134F        0037000F                 r1 = r5 + Null;
0x001350        01400080                 r2 = Null + 128;
0x001351        FD000080 01500000        r3 = Null + -8388608;
0x001353        E1F004BD                 call $kal_float_lib.sub;
0x001354        F148000A                 r2 = M[FP + 0xa];
0x001355        F158000B                 r3 = M[FP + 0xb];
0x001356        E1F004C3                 call $kal_float_lib.mul;
0x001357        F148000C                 r2 = M[FP + 0xc];
0x001358        F158000D                 r3 = M[FP + 0xd];
0x001359        E1F004C0                 call $kal_float_lib.mul;
0x00135A        F100000C                 pushm <r0, r1>;
0x00135B        01200000                 r0 = Null + 0;
0x00135C        01300000                 r1 = Null + 0;
0x00135D        F100000C                 pushm <r0, r1>;
0x00135E        0028000F                 r0 = r6 + Null;
0x00135F        0039000F                 r1 = r7 + Null;
0x001360        01400080                 r2 = Null + 128;
0x001361        FD000080 01500000        r3 = Null + -8388608;
0x001363        E1F004AD                 call $kal_float_lib.sub;
0x001364        F148000A                 r2 = M[FP + 0xa];
0x001365        F158000B                 r3 = M[FP + 0xb];
0x001366        E1F004B3                 call $kal_float_lib.mul;
0x001367        F100000C                 pushm <r0, r1>;
0x001368        01200000                 r0 = Null + 0;
0x001369        01300000                 r1 = Null + 0;
0x00136A        F100000C                 pushm <r0, r1>;
0x00136B        E1F0FECD                 call $kal_filter_coef_lib.__scale_coefficients;
0x00136C        F3240000                 pop r0;
0x00136D        F12C7FF7                 M[FP + -0x9] = r0;
0x00136E        F3240000                 pop r0;
0x00136F        F12C7FF6                 M[FP + -0xa] = r0;
0x001370        F3240000                 pop r0;
0x001371        F12C7FF5                 M[FP + -0xb] = r0;
0x001372        F3240000                 pop r0;
0x001373        F12C7FF4                 M[FP + -0xc] = r0;
0x001374        F3240000                 pop r0;
0x001375        F12C7FF3                 M[FP + -0xd] = r0;
0x001376        F3240000                 pop r0;
0x001377        F12C7FF2                 M[FP + -0xe] = r0;
0x001378        F103FFFC                 SP = SP + -4;
0x001379        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00137A        F103FFF8                 SP = SP + -8;
0x00137B        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_1st>
0x00137C        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x00137D        F1030006                 SP = SP + 6;
0x00137E        F1287FFA                 r0 = M[FP + -0x6];
0x00137F        F1387FFB                 r1 = M[FP + -0x5];
0x001380        F100000C                 pushm <r0, r1>;
0x001381        F1287FFC                 r0 = M[FP + -0x4];
0x001382        F1387FFD                 r1 = M[FP + -0x3];
0x001383        F100000C                 pushm <r0, r1>;
0x001384        01200000                 r0 = Null + 0;
0x001385        01300000                 r1 = Null + 0;
0x001386        F100000C                 pushm <r0, r1>;
0x001387        F1287FFE                 r0 = M[FP + -0x2];
0x001388        F1387FFF                 r1 = M[FP + -0x1];
0x001389        F100000C                 pushm <r0, r1>;
0x00138A        E1F0FF8F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x00138B        F3240000                 pop r0;
0x00138C        F12C7FF4                 M[FP + -0xc] = r0;
0x00138D        F3240000                 pop r0;
0x00138E        F12C7FF6                 M[FP + -0xa] = r0;
0x00138F        F3240000                 pop r0;
0x001390        F12C7FF5                 M[FP + -0xb] = r0;
0x001391        F3240000                 pop r0;
0x001392        F12C7FF9                 M[FP + -0x7] = r0;
0x001393        F3240000                 pop r0;
0x001394        F12C7FF8                 M[FP + -0x8] = r0;
0x001395        F3240000                 pop r0;
0x001396        F12C7FF7                 M[FP + -0x9] = r0;
0x001397        F104200D                 popm <FP, r0, r1, rLink>;
0x001398        F103FFFA                 SP = SP + -6;
0x001399        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_1st>
0x00139A        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x00139B        F1030006                 SP = SP + 6;
0x00139C        F1287FFA                 r0 = M[FP + -0x6];
0x00139D        F1387FFB                 r1 = M[FP + -0x5];
0x00139E        F100000C                 pushm <r0, r1>;
0x00139F        F1287FFC                 r0 = M[FP + -0x4];
0x0013A0        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013A2        F1387FFD                 r1 = M[FP + -0x3];
0x0013A3        F100000C                 pushm <r0, r1>;
0x0013A4        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013A6        F100000C                 pushm <r0, r1>;
0x0013A7        F1287FFE                 r0 = M[FP + -0x2];
0x0013A8        F1387FFF                 r1 = M[FP + -0x1];
0x0013A9        F100000C                 pushm <r0, r1>;
0x0013AA        E1F0FF6F                 call $kal_filter_coef_lib.calc_shelf_1st;
0x0013AB        F3240000                 pop r0;
0x0013AC        F12C7FF4                 M[FP + -0xc] = r0;
0x0013AD        F3240000                 pop r0;
0x0013AE        F12C7FF6                 M[FP + -0xa] = r0;
0x0013AF        F3240000                 pop r0;
0x0013B0        F12C7FF5                 M[FP + -0xb] = r0;
0x0013B1        F3240000                 pop r0;
0x0013B2        F12C7FF9                 M[FP + -0x7] = r0;
0x0013B3        F3240000                 pop r0;
0x0013B4        F12C7FF8                 M[FP + -0x8] = r0;
0x0013B5        F3240000                 pop r0;
0x0013B6        F12C7FF7                 M[FP + -0x9] = r0;
0x0013B7        F104200D                 popm <FP, r0, r1, rLink>;
0x0013B8        F103FFFA                 SP = SP + -6;
0x0013B9        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_1st>
0x0013BA        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0013BB        F1030006                 SP = SP + 6;
0x0013BC        F1287FFA                 r0 = M[FP + -0x6];
0x0013BD        F1387FFB                 r1 = M[FP + -0x5];
0x0013BE        F100000C                 pushm <r0, r1>;
0x0013BF        F1287FFC                 r0 = M[FP + -0x4];
0x0013C0        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013C2        F1387FFD                 r1 = M[FP + -0x3];
0x0013C3        F100000C                 pushm <r0, r1>;
0x0013C4        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0013C6        E422003F                 r0 = r0 - 1;
0x0013C7        F100000C                 pushm <r0, r1>;
0x0013C8        F1287FFE                 r0 = M[FP + -0x2];
0x0013C9        F1387FFF                 r1 = M[FP + -0x1];
0x0013CA        F100000C                 pushm <r0, r1>;
0x0013CB        E1F0FF4E                 call $kal_filter_coef_lib.calc_shelf_1st;
0x0013CC        F3240000                 pop r0;
0x0013CD        F12C7FF4                 M[FP + -0xc] = r0;
0x0013CE        F3240000                 pop r0;
0x0013CF        F12C7FF6                 M[FP + -0xa] = r0;
0x0013D0        F3240000                 pop r0;
0x0013D1        F12C7FF5                 M[FP + -0xb] = r0;
0x0013D2        F3240000                 pop r0;
0x0013D3        F12C7FF9                 M[FP + -0x7] = r0;
0x0013D4        F3240000                 pop r0;
0x0013D5        F12C7FF8                 M[FP + -0x8] = r0;
0x0013D6        F3240000                 pop r0;
0x0013D7        F12C7FF7                 M[FP + -0x9] = r0;
0x0013D8        F104200D                 popm <FP, r0, r1, rLink>;
0x0013D9        F103FFFA                 SP = SP + -6;
0x0013DA        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_pass_2nd>
0x0013DB        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0013DC        F1030002                 SP = SP + 2;
0x0013DD        F1287FFA                 r0 = M[FP + -0x6];
0x0013DE        F1387FFB                 r1 = M[FP + -0x5];
0x0013DF        F1487FFE                 r2 = M[FP + -0x2];
0x0013E0        F1587FFF                 r3 = M[FP + -0x1];
0x0013E1        E1F0FE0F                 call $kal_filter_coef_lib.__warp;
0x0013E2        0042000F                 r2 = r0 + Null;
0x0013E3        0053000F                 r3 = r1 + Null;
0x0013E4        E1F00435                 call $kal_float_lib.mul;
0x0013E5        0082000F                 r6 = r0 + Null;
0x0013E6        0093000F                 r7 = r1 + Null;
0x0013E7        0024000F                 r0 = r2 + Null;
0x0013E8        0035000F                 r1 = r3 + Null;
0x0013E9        F1487FFC                 r2 = M[FP + -0x4];
0x0013EA        F1587FFD                 r3 = M[FP + -0x3];
0x0013EB        E1F00460                 call $kal_float_lib.div;
0x0013EC        0062000F                 r4 = r0 + Null;
0x0013ED        0073000F                 r5 = r1 + Null;
0x0013EE        0048000F                 r2 = r6 + Null;
0x0013EF        0059000F                 r3 = r7 + Null;
0x0013F0        E1F00417                 call $kal_float_lib.add;
0x0013F1        01400080                 r2 = Null + 128;
0x0013F2        FD000080 01500000        r3 = Null + -8388608;
0x0013F4        E1F00413                 call $kal_float_lib.add;
0x0013F5        E1F00439                 call $kal_float_lib.recip;
0x0013F6        F12C000A                 M[FP + 0xa] = r0;
0x0013F7        F13C000B                 M[FP + 0xb] = r1;
0x0013F8        F1030006                 SP = SP + 6;
0x0013F9        0028000F                 r0 = r6 + Null;
0x0013FA        0039000F                 r1 = r7 + Null;
0x0013FB        F148000A                 r2 = M[FP + 0xa];
0x0013FC        F158000B                 r3 = M[FP + 0xb];
0x0013FD        E1F0041C                 call $kal_float_lib.mul;
0x0013FE        F100000C                 pushm <r0, r1>;
0x0013FF        E422002F                 r0 = r0 + 1;
0x001400        F100000C                 pushm <r0, r1>;
0x001401        E422003F                 r0 = r0 - 1;
0x001402        F100000C                 pushm <r0, r1>;
0x001403        0028000F                 r0 = r6 + Null;
0x001404        0039000F                 r1 = r7 + Null;
0x001405        01400081                 r2 = Null + 129;
0x001406        FD000080 01500000        r3 = Null + -8388608;
0x001408        E1F00411                 call $kal_float_lib.mul;
0x001409        E1F00407                 call $kal_float_lib.sub;
0x00140A        F148000A                 r2 = M[FP + 0xa];
0x00140B        F158000B                 r3 = M[FP + 0xb];
0x00140C        E1F0040D                 call $kal_float_lib.mul;
0x00140D        F100000C                 pushm <r0, r1>;
0x00140E        0028000F                 r0 = r6 + Null;
0x00140F        0039000F                 r1 = r7 + Null;
0x001410        0046000F                 r2 = r4 + Null;
0x001411        0057000F                 r3 = r5 + Null;
0x001412        E1F003FE                 call $kal_float_lib.sub;
0x001413        01400080                 r2 = Null + 128;
0x001414        FD000080 01500000        r3 = Null + -8388608;
0x001416        E1F003F1                 call $kal_float_lib.add;
0x001417        F148000A                 r2 = M[FP + 0xa];
0x001418        F158000B                 r3 = M[FP + 0xb];
0x001419        E1F00400                 call $kal_float_lib.mul;
0x00141A        F100000C                 pushm <r0, r1>;
0x00141B        E1F0FE1D                 call $kal_filter_coef_lib.__scale_coefficients;
0x00141C        F3240000                 pop r0;
0x00141D        F12C7FF4                 M[FP + -0xc] = r0;
0x00141E        F3240000                 pop r0;
0x00141F        F12C7FF6                 M[FP + -0xa] = r0;
0x001420        F3240000                 pop r0;
0x001421        F12C7FF5                 M[FP + -0xb] = r0;
0x001422        F3240000                 pop r0;
0x001423        F12C7FF9                 M[FP + -0x7] = r0;
0x001424        F3240000                 pop r0;
0x001425        F12C7FF8                 M[FP + -0x8] = r0;
0x001426        F3240000                 pop r0;
0x001427        F12C7FF7                 M[FP + -0x9] = r0;
0x001428        F103FFFE                 SP = SP + -2;
0x001429        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00142A        F103FFFA                 SP = SP + -6;
0x00142B        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_pass_2nd>
0x00142C        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00142D        F1030002                 SP = SP + 2;
0x00142E        F1287FFA                 r0 = M[FP + -0x6];
0x00142F        F1387FFB                 r1 = M[FP + -0x5];
0x001430        F1487FFE                 r2 = M[FP + -0x2];
0x001431        F1587FFF                 r3 = M[FP + -0x1];
0x001432        E1F0FDBE                 call $kal_filter_coef_lib.__warp;
0x001433        0042000F                 r2 = r0 + Null;
0x001434        0053000F                 r3 = r1 + Null;
0x001435        E1F003E4                 call $kal_float_lib.mul;
0x001436        0082000F                 r6 = r0 + Null;
0x001437        0093000F                 r7 = r1 + Null;
0x001438        0024000F                 r0 = r2 + Null;
0x001439        0035000F                 r1 = r3 + Null;
0x00143A        F1487FFC                 r2 = M[FP + -0x4];
0x00143B        F1587FFD                 r3 = M[FP + -0x3];
0x00143C        E1F0040F                 call $kal_float_lib.div;
0x00143D        0062000F                 r4 = r0 + Null;
0x00143E        0073000F                 r5 = r1 + Null;
0x00143F        0048000F                 r2 = r6 + Null;
0x001440        0059000F                 r3 = r7 + Null;
0x001441        E1F003C6                 call $kal_float_lib.add;
0x001442        01400080                 r2 = Null + 128;
0x001443        FD000080 01500000        r3 = Null + -8388608;
0x001445        E1F003C2                 call $kal_float_lib.add;
0x001446        E1F003E8                 call $kal_float_lib.recip;
0x001447        F12C000A                 M[FP + 0xa] = r0;
0x001448        F13C000B                 M[FP + 0xb] = r1;
0x001449        F1030006                 SP = SP + 6;
0x00144A        F100000C                 pushm <r0, r1>;
0x00144B        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00144D        E422002F                 r0 = r0 + 1;
0x00144E        F100000C                 pushm <r0, r1>;
0x00144F        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001451        E422003F                 r0 = r0 - 1;
0x001452        F100000C                 pushm <r0, r1>;
0x001453        0028000F                 r0 = r6 + Null;
0x001454        0039000F                 r1 = r7 + Null;
0x001455        01400081                 r2 = Null + 129;
0x001456        FD000080 01500000        r3 = Null + -8388608;
0x001458        E1F003C1                 call $kal_float_lib.mul;
0x001459        E1F003B7                 call $kal_float_lib.sub;
0x00145A        F148000A                 r2 = M[FP + 0xa];
0x00145B        F158000B                 r3 = M[FP + 0xb];
0x00145C        E1F003BD                 call $kal_float_lib.mul;
0x00145D        F100000C                 pushm <r0, r1>;
0x00145E        0028000F                 r0 = r6 + Null;
0x00145F        0039000F                 r1 = r7 + Null;
0x001460        0046000F                 r2 = r4 + Null;
0x001461        0057000F                 r3 = r5 + Null;
0x001462        E1F003AE                 call $kal_float_lib.sub;
0x001463        01400080                 r2 = Null + 128;
0x001464        FD000080 01500000        r3 = Null + -8388608;
0x001466        E1F003A1                 call $kal_float_lib.add;
0x001467        F148000A                 r2 = M[FP + 0xa];
0x001468        F158000B                 r3 = M[FP + 0xb];
0x001469        E1F003B0                 call $kal_float_lib.mul;
0x00146A        F100000C                 pushm <r0, r1>;
0x00146B        E1F0FDCD                 call $kal_filter_coef_lib.__scale_coefficients;
0x00146C        F3240000                 pop r0;
0x00146D        F12C7FF4                 M[FP + -0xc] = r0;
0x00146E        F3240000                 pop r0;
0x00146F        F12C7FF6                 M[FP + -0xa] = r0;
0x001470        F3240000                 pop r0;
0x001471        F12C7FF5                 M[FP + -0xb] = r0;
0x001472        F3240000                 pop r0;
0x001473        F12C7FF9                 M[FP + -0x7] = r0;
0x001474        F3240000                 pop r0;
0x001475        F12C7FF8                 M[FP + -0x8] = r0;
0x001476        F3240000                 pop r0;
0x001477        F12C7FF7                 M[FP + -0x9] = r0;
0x001478        F103FFFE                 SP = SP + -2;
0x001479        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00147A        F103FFFA                 SP = SP + -6;
0x00147B        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_all_pass_2nd>
0x00147C        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x00147D        F1030002                 SP = SP + 2;
0x00147E        F1287FFA                 r0 = M[FP + -0x6];
0x00147F        F1387FFB                 r1 = M[FP + -0x5];
0x001480        F1487FFE                 r2 = M[FP + -0x2];
0x001481        F1587FFF                 r3 = M[FP + -0x1];
0x001482        E1F0FD6E                 call $kal_filter_coef_lib.__warp;
0x001483        0042000F                 r2 = r0 + Null;
0x001484        0053000F                 r3 = r1 + Null;
0x001485        E1F00394                 call $kal_float_lib.mul;
0x001486        0082000F                 r6 = r0 + Null;
0x001487        0093000F                 r7 = r1 + Null;
0x001488        0024000F                 r0 = r2 + Null;
0x001489        0035000F                 r1 = r3 + Null;
0x00148A        F1487FFC                 r2 = M[FP + -0x4];
0x00148B        F1587FFD                 r3 = M[FP + -0x3];
0x00148C        E1F003BF                 call $kal_float_lib.div;
0x00148D        0062000F                 r4 = r0 + Null;
0x00148E        0073000F                 r5 = r1 + Null;
0x00148F        0048000F                 r2 = r6 + Null;
0x001490        0059000F                 r3 = r7 + Null;
0x001491        E1F00376                 call $kal_float_lib.add;
0x001492        01400080                 r2 = Null + 128;
0x001493        FD000080 01500000        r3 = Null + -8388608;
0x001495        E1F00372                 call $kal_float_lib.add;
0x001496        E1F00398                 call $kal_float_lib.recip;
0x001497        F12C000A                 M[FP + 0xa] = r0;
0x001498        F13C000B                 M[FP + 0xb] = r1;
0x001499        F1030006                 SP = SP + 6;
0x00149A        0028000F                 r0 = r6 + Null;
0x00149B        0039000F                 r1 = r7 + Null;
0x00149C        0046000F                 r2 = r4 + Null;
0x00149D        0057000F                 r3 = r5 + Null;
0x00149E        E1F00372                 call $kal_float_lib.sub;
0x00149F        01400080                 r2 = Null + 128;
0x0014A0        FD000080 01500000        r3 = Null + -8388608;
0x0014A2        E1F00365                 call $kal_float_lib.add;
0x0014A3        F148000A                 r2 = M[FP + 0xa];
0x0014A4        F158000B                 r3 = M[FP + 0xb];
0x0014A5        E1F00374                 call $kal_float_lib.mul;
0x0014A6        F100000C                 pushm <r0, r1>;
0x0014A7        0062000F                 r4 = r0 + Null;
0x0014A8        0073000F                 r5 = r1 + Null;
0x0014A9        0028000F                 r0 = r6 + Null;
0x0014AA        0039000F                 r1 = r7 + Null;
0x0014AB        01400081                 r2 = Null + 129;
0x0014AC        FD000080 01500000        r3 = Null + -8388608;
0x0014AE        E1F0036B                 call $kal_float_lib.mul;
0x0014AF        E1F00361                 call $kal_float_lib.sub;
0x0014B0        F148000A                 r2 = M[FP + 0xa];
0x0014B1        F158000B                 r3 = M[FP + 0xb];
0x0014B2        E1F00367                 call $kal_float_lib.mul;
0x0014B3        F100000C                 pushm <r0, r1>;
0x0014B4        0082000F                 r6 = r0 + Null;
0x0014B5        0093000F                 r7 = r1 + Null;
0x0014B6        01200080                 r0 = Null + 128;
0x0014B7        FD000080 01300000        r1 = Null + -8388608;
0x0014B9        F100000C                 pushm <r0, r1>;
0x0014BA        F1000300                 pushm <r6, r7>;
0x0014BB        F10000C0                 pushm <r4, r5>;
0x0014BC        E1F0FD7C                 call $kal_filter_coef_lib.__scale_coefficients;
0x0014BD        F3240000                 pop r0;
0x0014BE        F12C7FF4                 M[FP + -0xc] = r0;
0x0014BF        F3240000                 pop r0;
0x0014C0        F12C7FF6                 M[FP + -0xa] = r0;
0x0014C1        F3240000                 pop r0;
0x0014C2        F12C7FF5                 M[FP + -0xb] = r0;
0x0014C3        F3240000                 pop r0;
0x0014C4        F12C7FF9                 M[FP + -0x7] = r0;
0x0014C5        F3240000                 pop r0;
0x0014C6        F12C7FF8                 M[FP + -0x8] = r0;
0x0014C7        F3240000                 pop r0;
0x0014C8        F12C7FF7                 M[FP + -0x9] = r0;
0x0014C9        F103FFFE                 SP = SP + -2;
0x0014CA        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0014CB        F103FFFA                 SP = SP + -6;
0x0014CC        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_shelf_2nd>
0x0014CD        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0014CE        F1030008                 SP = SP + 8;
0x0014CF        F1287FF6                 r0 = M[FP + -0xa];
0x0014D0        F1387FF7                 r1 = M[FP + -0x9];
0x0014D1        F1487FFE                 r2 = M[FP + -0x2];
0x0014D2        F1587FFF                 r3 = M[FP + -0x1];
0x0014D3        E1F0FD1D                 call $kal_filter_coef_lib.__warp;
0x0014D4        0062000F                 r4 = r0 + Null;
0x0014D5        0073000F                 r5 = r1 + Null;
0x0014D6        F1287FFC                 r0 = M[FP + -0x4];
0x0014D7        F1387FFD                 r1 = M[FP + -0x3];
0x0014D8        E1F0FD38                 call $kal_filter_coef_lib.__db2lin;
0x0014D9        F12C000C                 M[FP + 0xc] = r0;
0x0014DA        F13C000D                 M[FP + 0xd] = r1;
0x0014DB        F1287FF8                 r0 = M[FP + -0x8];
0x0014DC        F1387FF9                 r1 = M[FP + -0x7];
0x0014DD        21220002                 r0 = r0 - 2;
0x0014DE        E1F0FD32                 call $kal_filter_coef_lib.__db2lin;
0x0014DF        0042000F                 r2 = r0 + Null;
0x0014E0        0053000F                 r3 = r1 + Null;
0x0014E1        0026000F                 r0 = r4 + Null;
0x0014E2        0037000F                 r1 = r5 + Null;
0x0014E3        E1F00368                 call $kal_float_lib.div;
0x0014E4        0082000F                 r6 = r0 + Null;
0x0014E5        0093000F                 r7 = r1 + Null;
0x0014E6        0026000F                 r0 = r4 + Null;
0x0014E7        0037000F                 r1 = r5 + Null;
0x0014E8        E1F00331                 call $kal_float_lib.mul;
0x0014E9        0062000F                 r4 = r0 + Null;
0x0014EA        0073000F                 r5 = r1 + Null;
0x0014EB        F1487FFA                 r2 = M[FP + -0x6];
0x0014EC        F1587FFB                 r3 = M[FP + -0x5];
0x0014ED        E1F0035E                 call $kal_float_lib.div;
0x0014EE        F12C000E                 M[FP + 0xe] = r0;
0x0014EF        F13C000F                 M[FP + 0xf] = r1;
0x0014F0        0028000F                 r0 = r6 + Null;
0x0014F1        0039000F                 r1 = r7 + Null;
0x0014F2        E1F00359                 call $kal_float_lib.div;
0x0014F3        F12C0010                 M[FP + 0x10] = r0;
0x0014F4        F13C0011                 M[FP + 0x11] = r1;
0x0014F5        0028000F                 r0 = r6 + Null;
0x0014F6        0039000F                 r1 = r7 + Null;
0x0014F7        0048000F                 r2 = r6 + Null;
0x0014F8        0059000F                 r3 = r7 + Null;
0x0014F9        E1F00320                 call $kal_float_lib.mul;
0x0014FA        0082000F                 r6 = r0 + Null;
0x0014FB        0093000F                 r7 = r1 + Null;
0x0014FC        F1480010                 r2 = M[FP + 0x10];
0x0014FD        F1580011                 r3 = M[FP + 0x11];
0x0014FE        E1F00309                 call $kal_float_lib.add;
0x0014FF        01400080                 r2 = Null + 128;
0x001500        FD000080 01500000        r3 = Null + -8388608;
0x001502        E1F00305                 call $kal_float_lib.add;
0x001503        E1F0032B                 call $kal_float_lib.recip;
0x001504        F12C000A                 M[FP + 0xa] = r0;
0x001505        F13C000B                 M[FP + 0xb] = r1;
0x001506        F1030006                 SP = SP + 6;
0x001507        0026000F                 r0 = r4 + Null;
0x001508        0037000F                 r1 = r5 + Null;
0x001509        0046000F                 r2 = r4 + Null;
0x00150A        0057000F                 r3 = r5 + Null;
0x00150B        E1F0030E                 call $kal_float_lib.mul;
0x00150C        0062000F                 r4 = r0 + Null;
0x00150D        0073000F                 r5 = r1 + Null;
0x00150E        F148000E                 r2 = M[FP + 0xe];
0x00150F        F158000F                 r3 = M[FP + 0xf];
0x001510        E1F002F7                 call $kal_float_lib.add;
0x001511        01400080                 r2 = Null + 128;
0x001512        FD000080 01500000        r3 = Null + -8388608;
0x001514        E1F002F3                 call $kal_float_lib.add;
0x001515        F148000A                 r2 = M[FP + 0xa];
0x001516        F158000B                 r3 = M[FP + 0xb];
0x001517        E1F00302                 call $kal_float_lib.mul;
0x001518        F148000C                 r2 = M[FP + 0xc];
0x001519        F158000D                 r3 = M[FP + 0xd];
0x00151A        E1F002FF                 call $kal_float_lib.mul;
0x00151B        F100000C                 pushm <r0, r1>;
0x00151C        0026000F                 r0 = r4 + Null;
0x00151D        0037000F                 r1 = r5 + Null;
0x00151E        01400081                 r2 = Null + 129;
0x00151F        FD000080 01500000        r3 = Null + -8388608;
0x001521        E1F002F8                 call $kal_float_lib.mul;
0x001522        E1F002EE                 call $kal_float_lib.sub;
0x001523        F148000A                 r2 = M[FP + 0xa];
0x001524        F158000B                 r3 = M[FP + 0xb];
0x001525        E1F002F4                 call $kal_float_lib.mul;
0x001526        F148000C                 r2 = M[FP + 0xc];
0x001527        F158000D                 r3 = M[FP + 0xd];
0x001528        E1F002F1                 call $kal_float_lib.mul;
0x001529        F100000C                 pushm <r0, r1>;
0x00152A        0026000F                 r0 = r4 + Null;
0x00152B        0037000F                 r1 = r5 + Null;
0x00152C        F148000E                 r2 = M[FP + 0xe];
0x00152D        F158000F                 r3 = M[FP + 0xf];
0x00152E        E1F002E2                 call $kal_float_lib.sub;
0x00152F        01400080                 r2 = Null + 128;
0x001530        FD000080 01500000        r3 = Null + -8388608;
0x001532        E1F002D5                 call $kal_float_lib.add;
0x001533        F148000A                 r2 = M[FP + 0xa];
0x001534        F158000B                 r3 = M[FP + 0xb];
0x001535        E1F002E4                 call $kal_float_lib.mul;
0x001536        F148000C                 r2 = M[FP + 0xc];
0x001537        F158000D                 r3 = M[FP + 0xd];
0x001538        E1F002E1                 call $kal_float_lib.mul;
0x001539        F100000C                 pushm <r0, r1>;
0x00153A        0028000F                 r0 = r6 + Null;
0x00153B        0039000F                 r1 = r7 + Null;
0x00153C        01400081                 r2 = Null + 129;
0x00153D        FD000080 01500000        r3 = Null + -8388608;
0x00153F        E1F002DA                 call $kal_float_lib.mul;
0x001540        E1F002D0                 call $kal_float_lib.sub;
0x001541        F148000A                 r2 = M[FP + 0xa];
0x001542        F158000B                 r3 = M[FP + 0xb];
0x001543        E1F002D6                 call $kal_float_lib.mul;
0x001544        F100000C                 pushm <r0, r1>;
0x001545        0028000F                 r0 = r6 + Null;
0x001546        0039000F                 r1 = r7 + Null;
0x001547        F1480010                 r2 = M[FP + 0x10];
0x001548        F1580011                 r3 = M[FP + 0x11];
0x001549        E1F002C7                 call $kal_float_lib.sub;
0x00154A        01400080                 r2 = Null + 128;
0x00154B        FD000080 01500000        r3 = Null + -8388608;
0x00154D        E1F002BA                 call $kal_float_lib.add;
0x00154E        F148000A                 r2 = M[FP + 0xa];
0x00154F        F158000B                 r3 = M[FP + 0xb];
0x001550        E1F002C9                 call $kal_float_lib.mul;
0x001551        F100000C                 pushm <r0, r1>;
0x001552        E1F0FCE6                 call $kal_filter_coef_lib.__scale_coefficients;
0x001553        F3240000                 pop r0;
0x001554        F12C7FF5                 M[FP + -0xb] = r0;
0x001555        F3240000                 pop r0;
0x001556        F12C7FF4                 M[FP + -0xc] = r0;
0x001557        F3240000                 pop r0;
0x001558        F12C7FF3                 M[FP + -0xd] = r0;
0x001559        F3240000                 pop r0;
0x00155A        F12C7FF2                 M[FP + -0xe] = r0;
0x00155B        F3240000                 pop r0;
0x00155C        F12C7FF1                 M[FP + -0xf] = r0;
0x00155D        F3240000                 pop r0;
0x00155E        F12C7FF0                 M[FP + -0x10] = r0;
0x00155F        F103FFF8                 SP = SP + -8;
0x001560        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001561        F103FFF6                 SP = SP + -10;
0x001562        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_low_shelf_2nd>
0x001563        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001564        F1030006                 SP = SP + 6;
0x001565        F1287FF8                 r0 = M[FP + -0x8];
0x001566        F1387FF9                 r1 = M[FP + -0x7];
0x001567        F100000C                 pushm <r0, r1>;
0x001568        F1287FFA                 r0 = M[FP + -0x6];
0x001569        F1387FFB                 r1 = M[FP + -0x5];
0x00156A        F100000C                 pushm <r0, r1>;
0x00156B        F1287FFC                 r0 = M[FP + -0x4];
0x00156C        F1387FFD                 r1 = M[FP + -0x3];
0x00156D        F100000C                 pushm <r0, r1>;
0x00156E        01200000                 r0 = Null + 0;
0x00156F        01300000                 r1 = Null + 0;
0x001570        F100000C                 pushm <r0, r1>;
0x001571        F1287FFE                 r0 = M[FP + -0x2];
0x001572        F1387FFF                 r1 = M[FP + -0x1];
0x001573        F100000C                 pushm <r0, r1>;
0x001574        E1F0FF59                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001575        F3240000                 pop r0;
0x001576        F12C7FF2                 M[FP + -0xe] = r0;
0x001577        F3240000                 pop r0;
0x001578        F12C7FF4                 M[FP + -0xc] = r0;
0x001579        F3240000                 pop r0;
0x00157A        F12C7FF3                 M[FP + -0xd] = r0;
0x00157B        F3240000                 pop r0;
0x00157C        F12C7FF7                 M[FP + -0x9] = r0;
0x00157D        F3240000                 pop r0;
0x00157E        F12C7FF6                 M[FP + -0xa] = r0;
0x00157F        F3240000                 pop r0;
0x001580        F12C7FF5                 M[FP + -0xb] = r0;
0x001581        F104200D                 popm <FP, r0, r1, rLink>;
0x001582        F103FFF8                 SP = SP + -8;
0x001583        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_high_shelf_2nd>
0x001584        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x001585        F1030006                 SP = SP + 6;
0x001586        F1287FF8                 r0 = M[FP + -0x8];
0x001587        F1387FF9                 r1 = M[FP + -0x7];
0x001588        F100000C                 pushm <r0, r1>;
0x001589        F1287FFA                 r0 = M[FP + -0x6];
0x00158A        FD000080 89220000        r0 = r0 XOR 0x800000;
0x00158C        F1387FFB                 r1 = M[FP + -0x5];
0x00158D        F100000C                 pushm <r0, r1>;
0x00158E        F1287FFC                 r0 = M[FP + -0x4];
0x00158F        F1387FFD                 r1 = M[FP + -0x3];
0x001590        F100000C                 pushm <r0, r1>;
0x001591        F1287FFA                 r0 = M[FP + -0x6];
0x001592        F1387FFB                 r1 = M[FP + -0x5];
0x001593        F100000C                 pushm <r0, r1>;
0x001594        F1287FFE                 r0 = M[FP + -0x2];
0x001595        F1387FFF                 r1 = M[FP + -0x1];
0x001596        F100000C                 pushm <r0, r1>;
0x001597        E1F0FF36                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x001598        F3240000                 pop r0;
0x001599        F12C7FF2                 M[FP + -0xe] = r0;
0x00159A        F3240000                 pop r0;
0x00159B        F12C7FF4                 M[FP + -0xc] = r0;
0x00159C        F3240000                 pop r0;
0x00159D        F12C7FF3                 M[FP + -0xd] = r0;
0x00159E        F3240000                 pop r0;
0x00159F        F12C7FF7                 M[FP + -0x9] = r0;
0x0015A0        F3240000                 pop r0;
0x0015A1        F12C7FF6                 M[FP + -0xa] = r0;
0x0015A2        F3240000                 pop r0;
0x0015A3        F12C7FF5                 M[FP + -0xb] = r0;
0x0015A4        F104200D                 popm <FP, r0, r1, rLink>;
0x0015A5        F103FFF8                 SP = SP + -8;
0x0015A6        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_tilt_2nd>
0x0015A7        F100200D                 pushm <FP(=SP), r0, r1, rLink>;
0x0015A8        F1030006                 SP = SP + 6;
0x0015A9        F1287FF8                 r0 = M[FP + -0x8];
0x0015AA        F1387FF9                 r1 = M[FP + -0x7];
0x0015AB        F100000C                 pushm <r0, r1>;
0x0015AC        F1287FFA                 r0 = M[FP + -0x6];
0x0015AD        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0015AF        F1387FFB                 r1 = M[FP + -0x5];
0x0015B0        F100000C                 pushm <r0, r1>;
0x0015B1        F1287FFC                 r0 = M[FP + -0x4];
0x0015B2        F1387FFD                 r1 = M[FP + -0x3];
0x0015B3        F100000C                 pushm <r0, r1>;
0x0015B4        F1287FFA                 r0 = M[FP + -0x6];
0x0015B5        E422003F                 r0 = r0 - 1;
0x0015B6        F1387FFB                 r1 = M[FP + -0x5];
0x0015B7        F100000C                 pushm <r0, r1>;
0x0015B8        F1287FFE                 r0 = M[FP + -0x2];
0x0015B9        F1387FFF                 r1 = M[FP + -0x1];
0x0015BA        F100000C                 pushm <r0, r1>;
0x0015BB        E1F0FF12                 call $kal_filter_coef_lib.calc_shelf_2nd;
0x0015BC        F3240000                 pop r0;
0x0015BD        F12C7FF2                 M[FP + -0xe] = r0;
0x0015BE        F3240000                 pop r0;
0x0015BF        F12C7FF4                 M[FP + -0xc] = r0;
0x0015C0        F3240000                 pop r0;
0x0015C1        F12C7FF3                 M[FP + -0xd] = r0;
0x0015C2        F3240000                 pop r0;
0x0015C3        F12C7FF7                 M[FP + -0x9] = r0;
0x0015C4        F3240000                 pop r0;
0x0015C5        F12C7FF6                 M[FP + -0xa] = r0;
0x0015C6        F3240000                 pop r0;
0x0015C7        F12C7FF5                 M[FP + -0xb] = r0;
0x0015C8        F104200D                 popm <FP, r0, r1, rLink>;
0x0015C9        F103FFF8                 SP = SP + -8;
0x0015CA        DC0D000F                 rts;

 <$kal_filter_coef_lib.calc_peq>
0x0015CB        F10023FD                 pushm <FP(=SP), r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x0015CC        F1030004                 SP = SP + 4;
0x0015CD        F1287FFC                 r0 = M[FP + -0x4];
0x0015CE        E422002F                 r0 = r0 + 1;
0x0015CF        F1387FFD                 r1 = M[FP + -0x3];
0x0015D0        E1F0025E                 call $kal_float_lib.recip;
0x0015D1        FD000080 85220000        r0 = r0 OR 0x800000;
0x0015D3        0042000F                 r2 = r0 + Null;
0x0015D4        0053000F                 r3 = r1 + Null;
0x0015D5        0062000F                 r4 = r0 + Null;
0x0015D6        0073000F                 r5 = r1 + Null;
0x0015D7        E1F00242                 call $kal_float_lib.mul;
0x0015D8        01400080                 r2 = Null + 128;
0x0015D9        FD000080 01500000        r3 = Null + -8388608;
0x0015DB        E1F0022C                 call $kal_float_lib.add;
0x0015DC        E1F0027B                 call $kal_float_lib.rsqrt;
0x0015DD        E1F00251                 call $kal_float_lib.recip;
0x0015DE        0046000F                 r2 = r4 + Null;
0x0015DF        0057000F                 r3 = r5 + Null;
0x0015E0        E1F00227                 call $kal_float_lib.add;
0x0015E1        F1487FF8                 r2 = M[FP + -0x8];
0x0015E2        F1587FF9                 r3 = M[FP + -0x7];
0x0015E3        E1F00236                 call $kal_float_lib.mul;
0x0015E4        F1487FFE                 r2 = M[FP + -0x2];
0x0015E5        F1587FFF                 r3 = M[FP + -0x1];
0x0015E6        E1F0FC0A                 call $kal_filter_coef_lib.__warp;
0x0015E7        0062000F                 r4 = r0 + Null;
0x0015E8        0073000F                 r5 = r1 + Null;
0x0015E9        F1287FF8                 r0 = M[FP + -0x8];
0x0015EA        F1387FF9                 r1 = M[FP + -0x7];
0x0015EB        E1F0FC05                 call $kal_filter_coef_lib.__warp;
0x0015EC        F12C000A                 M[FP + 0xa] = r0;
0x0015ED        F13C000B                 M[FP + 0xb] = r1;
0x0015EE        0042000F                 r2 = r0 + Null;
0x0015EF        0053000F                 r3 = r1 + Null;
0x0015F0        E1F00229                 call $kal_float_lib.mul;
0x0015F1        F1000030                 pushm <r2, r3>;
0x0015F2        F100000C                 pushm <r0, r1>;
0x0015F3        0026000F                 r0 = r4 + Null;
0x0015F4        0037000F                 r1 = r5 + Null;
0x0015F5        0046000F                 r2 = r4 + Null;
0x0015F6        0057000F                 r3 = r5 + Null;
0x0015F7        E1F00222                 call $kal_float_lib.mul;
0x0015F8        F1040030                 popm <r2, r3>;
0x0015F9        E1F00217                 call $kal_float_lib.sub;
0x0015FA        FD000080 89220000        r0 = r0 XOR 0x800000;
0x0015FC        E1F00232                 call $kal_float_lib.recip;
0x0015FD        F1040030                 popm <r2, r3>;
0x0015FE        E1F0021B                 call $kal_float_lib.mul;
0x0015FF        0046000F                 r2 = r4 + Null;
0x001600        0057000F                 r3 = r5 + Null;
0x001601        E1F00218                 call $kal_float_lib.mul;
0x001602        0062000F                 r4 = r0 + Null;
0x001603        0073000F                 r5 = r1 + Null;
0x001604        F1287FFA                 r0 = M[FP + -0x6];
0x001605        F1387FFB                 r1 = M[FP + -0x5];
0x001606        0140007F                 r2 = Null + 127;
0x001607        FD000080 01500000        r3 = Null + -8388608;
0x001609        E1F00210                 call $kal_float_lib.mul;
0x00160A        E1F0FC06                 call $kal_filter_coef_lib.__db2lin;
0x00160B        0042000F                 r2 = r0 + Null;
0x00160C        0053000F                 r3 = r1 + Null;
0x00160D        0026000F                 r0 = r4 + Null;
0x00160E        0037000F                 r1 = r5 + Null;
0x00160F        E1F0020A                 call $kal_float_lib.mul;
0x001610        0082000F                 r6 = r0 + Null;
0x001611        0093000F                 r7 = r1 + Null;
0x001612        0026000F                 r0 = r4 + Null;
0x001613        0037000F                 r1 = r5 + Null;
0x001614        E1F00237                 call $kal_float_lib.div;
0x001615        0042000F                 r2 = r0 + Null;
0x001616        0053000F                 r3 = r1 + Null;
0x001617        F128000A                 r0 = M[FP + 0xa];
0x001618        F138000B                 r1 = M[FP + 0xb];
0x001619        E1F00232                 call $kal_float_lib.div;
0x00161A        0062000F                 r4 = r0 + Null;
0x00161B        0073000F                 r5 = r1 + Null;
0x00161C        F128000A                 r0 = M[FP + 0xa];
0x00161D        F138000B                 r1 = M[FP + 0xb];
0x00161E        0048000F                 r2 = r6 + Null;
0x00161F        0059000F                 r3 = r7 + Null;
0x001620        E1F0022B                 call $kal_float_lib.div;
0x001621        0082000F                 r6 = r0 + Null;
0x001622        0093000F                 r7 = r1 + Null;
0x001623        F128000A                 r0 = M[FP + 0xa];
0x001624        F138000B                 r1 = M[FP + 0xb];
0x001625        0042000F                 r2 = r0 + Null;
0x001626        0053000F                 r3 = r1 + Null;
0x001627        E1F001F2                 call $kal_float_lib.mul;
0x001628        F12C000A                 M[FP + 0xa] = r0;
0x001629        F13C000B                 M[FP + 0xb] = r1;
0x00162A        0048000F                 r2 = r6 + Null;
0x00162B        0059000F                 r3 = r7 + Null;
0x00162C        E1F001DB                 call $kal_float_lib.add;
0x00162D        01400080                 r2 = Null + 128;
0x00162E        FD000080 01500000        r3 = Null + -8388608;
0x001630        E1F001D7                 call $kal_float_lib.add;
0x001631        E1F001FD                 call $kal_float_lib.recip;
0x001632        F12C000C                 M[FP + 0xc] = r0;
0x001633        F13C000D                 M[FP + 0xd] = r1;
0x001634        F1030006                 SP = SP + 6;
0x001635        F128000A                 r0 = M[FP + 0xa];
0x001636        F138000B                 r1 = M[FP + 0xb];
0x001637        0046000F                 r2 = r4 + Null;
0x001638        0057000F                 r3 = r5 + Null;
0x001639        E1F001CE                 call $kal_float_lib.add;
0x00163A        01400080                 r2 = Null + 128;
0x00163B        FD000080 01500000        r3 = Null + -8388608;
0x00163D        E1F001CA                 call $kal_float_lib.add;
0x00163E        F148000C                 r2 = M[FP + 0xc];
0x00163F        F158000D                 r3 = M[FP + 0xd];
0x001640        E1F001D9                 call $kal_float_lib.mul;
0x001641        F100000C                 pushm <r0, r1>;
0x001642        F128000A                 r0 = M[FP + 0xa];
0x001643        F138000B                 r1 = M[FP + 0xb];
0x001644        01400081                 r2 = Null + 129;
0x001645        FD000080 01500000        r3 = Null + -8388608;
0x001647        E1F001D2                 call $kal_float_lib.mul;
0x001648        E1F001C8                 call $kal_float_lib.sub;
0x001649        F148000C                 r2 = M[FP + 0xc];
0x00164A        F158000D                 r3 = M[FP + 0xd];
0x00164B        E1F001CE                 call $kal_float_lib.mul;
0x00164C        F100000C                 pushm <r0, r1>;
0x00164D        F128000A                 r0 = M[FP + 0xa];
0x00164E        F138000B                 r1 = M[FP + 0xb];
0x00164F        0046000F                 r2 = r4 + Null;
0x001650        0057000F                 r3 = r5 + Null;
0x001651        E1F001BF                 call $kal_float_lib.sub;
0x001652        01400080                 r2 = Null + 128;
0x001653        FD000080 01500000        r3 = Null + -8388608;
0x001655        E1F001B2                 call $kal_float_lib.add;
0x001656        F148000C                 r2 = M[FP + 0xc];
0x001657        F158000D                 r3 = M[FP + 0xd];
0x001658        E1F001C1                 call $kal_float_lib.mul;
0x001659        F100000C                 pushm <r0, r1>;
0x00165A        F128000A                 r0 = M[FP + 0xa];
0x00165B        F138000B                 r1 = M[FP + 0xb];
0x00165C        01400081                 r2 = Null + 129;
0x00165D        FD000080 01500000        r3 = Null + -8388608;
0x00165F        E1F001BA                 call $kal_float_lib.mul;
0x001660        E1F001B0                 call $kal_float_lib.sub;
0x001661        F148000C                 r2 = M[FP + 0xc];
0x001662        F158000D                 r3 = M[FP + 0xd];
0x001663        E1F001B6                 call $kal_float_lib.mul;
0x001664        F100000C                 pushm <r0, r1>;
0x001665        F128000A                 r0 = M[FP + 0xa];
0x001666        F138000B                 r1 = M[FP + 0xb];
0x001667        0048000F                 r2 = r6 + Null;
0x001668        0059000F                 r3 = r7 + Null;
0x001669        E1F001A7                 call $kal_float_lib.sub;
0x00166A        01400080                 r2 = Null + 128;
0x00166B        FD000080 01500000        r3 = Null + -8388608;
0x00166D        E1F0019A                 call $kal_float_lib.add;
0x00166E        F148000C                 r2 = M[FP + 0xc];
0x00166F        F158000D                 r3 = M[FP + 0xd];
0x001670        E1F001A9                 call $kal_float_lib.mul;
0x001671        F100000C                 pushm <r0, r1>;
0x001672        E1F0FBC6                 call $kal_filter_coef_lib.__scale_coefficients;
0x001673        F3240000                 pop r0;
0x001674        F12C7FF2                 M[FP + -0xe] = r0;
0x001675        F3240000                 pop r0;
0x001676        F12C7FF4                 M[FP + -0xc] = r0;
0x001677        F3240000                 pop r0;
0x001678        F12C7FF3                 M[FP + -0xd] = r0;
0x001679        F3240000                 pop r0;
0x00167A        F12C7FF7                 M[FP + -0x9] = r0;
0x00167B        F3240000                 pop r0;
0x00167C        F12C7FF6                 M[FP + -0xa] = r0;
0x00167D        F3240000                 pop r0;
0x00167E        F12C7FF5                 M[FP + -0xb] = r0;
0x00167F        F103FFFC                 SP = SP + -4;
0x001680        F10423FD                 popm <FP, r0, r1, r2, r3, r4, r5, r6, r7, rLink>;
0x001681        F103FFF8                 SP = SP + -8;
0x001682        DC0D000F                 rts;

 <$sbc.calc_bit_allocation>
0x001683        F3D00000                 push rLink;
0x001684        51900001                 M1 = Null + 1;
0x001685        D12B001E                 r0 = M[r9 + 30];
0x001686        81220002                 r0 = r0 AND 0x2;
0x001687        DD10005E                 if NE jump $M.sbc.calc_bit_allocation.stereo_joint;
0x001688        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_chan_loop>
0x001689        D13B0020                 r1 = M[r9 + 32];
0x00168A        DD00000C                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness;
0x00168B        D1CB0021                 r10 = M[r9 + 33];
0x00168C        983200CF                 r1 = r0 * r10 (int);
0x00168D        D1CB0018                 r10 = M[r9 + 24];
0x00168E        501300CF                 I1 = r1 + r10;
0x00168F        D1CB001A                 r10 = M[r9 + 26];
0x001690        502300CF                 I2 = r1 + r10;
0x001691        D1CB0021                 r10 = M[r9 + 33];
0x001692        E5F00003                 do $M.sbc.calc_bit_allocation.md_snr_loop;
0x001693        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001694        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.md_snr_loop>
0x001695        DDF00017                 jump $M.sbc.calc_bit_allocation.md_loudness_loop;

 <$M.sbc.calc_bit_allocation.md_loudness>
0x001696        D1CB0021                 r10 = M[r9 + 33];
0x001697        983200CF                 r1 = r0 * r10 (int);
0x001698        D16B0018                 r4 = M[r9 + 24];
0x001699        5013006F                 I1 = r1 + r4;
0x00169A        D16B001A                 r4 = M[r9 + 26];
0x00169B        5023006F                 I2 = r1 + r4;
0x00169C        E460003F                 r4 = Null - 1;
0x00169D        D13B001C                 r1 = M[r9 + 28];
0x00169E        9B3C0000                 r1 = r1 * r10 (int);
0x00169F        D14B0017                 r2 = M[r9 + 23];
0x0016A0        5033004F                 I3 = r1 + r2;
0x0016A1        51440010                 I4 = r2 + 16;
0x0016A2        210C0008                 Null = r10 - 8;
0x0016A3        54330040                 if EQ I3 = r1 + I4;
0x0016A4        E5F00008                 do $M.sbc.calc_bit_allocation.md_loudness_loop;
0x0016A5        0140FFFB                 r2 = Null + -5;
0x0016A6        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0016A7        03035D00                 Null = Null + r1, r3 = M[I3,1];
0x0016A8        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.md_loudness_endif;
0x0016A9        2043005F                 r2 = r1 - r3;
0x0016AA        90440065                 if POS r2 = r2 ASHIFT r4;

 <$M.sbc.calc_bit_allocation.md_loudness_endif>
0x0016AB        0300C900                 Null = Null + Null, M[I2,1] = r2;

 <$M.sbc.calc_bit_allocation.md_loudness_loop>
0x0016AC        D1CB0021                 r10 = M[r9 + 33];
0x0016AD        983200CF                 r1 = r0 * r10 (int);
0x0016AE        D14B001A                 r2 = M[r9 + 26];
0x0016AF        5023004F                 I2 = r1 + r2;
0x0016B0        E1F0009B                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.md_findbitslice_loop1>
0x0016B1        D1CB0021                 r10 = M[r9 + 33];
0x0016B2        983200CF                 r1 = r0 * r10 (int);
0x0016B3        D17B001A                 r5 = M[r9 + 26];
0x0016B4        5023007F                 I2 = r1 + r5;
0x0016B5        E1F0009F                 call $M.sbc.calc_bit_allocation.share_code_2;
0x0016B6        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.md_findbitslice_loop1;
0x0016B7        D1CB0021                 r10 = M[r9 + 33];
0x0016B8        983200CF                 r1 = r0 * r10 (int);
0x0016B9        D1CB001B                 r10 = M[r9 + 27];
0x0016BA        501300CF                 I1 = r1 + r10;
0x0016BB        D1CB001A                 r10 = M[r9 + 26];
0x0016BC        502300CF                 I2 = r1 + r10;
0x0016BD        D1CB0021                 r10 = M[r9 + 33];
0x0016BE        E1F000A9                 call $M.sbc.calc_bit_allocation.share_code_3;
0x0016BF        D1CB0021                 r10 = M[r9 + 33];
0x0016C0        983200CF                 r1 = r0 * r10 (int);
0x0016C1        D16B001B                 r4 = M[r9 + 27];
0x0016C2        5013006F                 I1 = r1 + r4;
0x0016C3        D16B001A                 r4 = M[r9 + 26];
0x0016C4        5023006F                 I2 = r1 + r4;
0x0016C5        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_loop>
0x0016C6        D13B0022                 r1 = M[r9 + 34];
0x0016C7        2005003F                 Null = r3 - r1;
0x0016C8        DD500005                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_end;
0x0016C9        E1F000AE                 call $M.sbc.calc_bit_allocation.share_code_4;
0x0016CA        E466002F                 r4 = r4 + 1;
0x0016CB        200600CF                 Null = r4 - r10;
0x0016CC        DD10FFFA                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_end>
0x0016CD        983200CF                 r1 = r0 * r10 (int);
0x0016CE        D16B001B                 r4 = M[r9 + 27];
0x0016CF        5013006F                 I1 = r1 + r4;
0x0016D0        D16B001A                 r4 = M[r9 + 26];
0x0016D1        5023006F                 I2 = r1 + r4;
0x0016D2        01600000                 r4 = Null + 0;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_loop>
0x0016D3        D13B0022                 r1 = M[r9 + 34];
0x0016D4        2005003F                 Null = r3 - r1;
0x0016D5        DD50000B                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_end;
0x0016D6        03003400                 Null = Null + Null, r1 = M[I1,0];
0x0016D7        03007900                 Null = Null + Null, r5 = M[I2,1];
0x0016D8        21030010                 Null = r1 - 16;
0x0016D9        DD500003                 if POS jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_endif;
0x0016DA        E433002F                 r1 = r1 + 1;
0x0016DB        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_endif>
0x0016DC        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x0016DD        E466002F                 r4 = r4 + 1;
0x0016DE        200600CF                 Null = r4 - r10;
0x0016DF        DD10FFF4                 if NE jump $M.sbc.calc_bit_allocation.md_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.md_remainingbits_extra_end>
0x0016E0        E422002F                 r0 = r0 + 1;
0x0016E1        D13B001F                 r1 = M[r9 + 31];
0x0016E2        2002003F                 Null = r0 - r1;
0x0016E3        DD10FFA6                 if NE jump $M.sbc.calc_bit_allocation.md_chan_loop;
0x0016E4        DDF0FB07                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.stereo_joint>
0x0016E5        D13B0020                 r1 = M[r9 + 32];
0x0016E6        DD00000B                 if EQ jump $M.sbc.calc_bit_allocation.sj_loudness;
0x0016E7        D1CB0021                 r10 = M[r9 + 33];
0x0016E8        99CC0002                 r10 = r10 * 2 (int);
0x0016E9        D13B0018                 r1 = M[r9 + 24];
0x0016EA        5010003F                 I1 = Null + r1;
0x0016EB        D13B001A                 r1 = M[r9 + 26];
0x0016EC        5020003F                 I2 = Null + r1;
0x0016ED        E5F00003                 do $M.sbc.calc_bit_allocation.sj_snr_loop2;
0x0016EE        03003500                 Null = Null + Null, r1 = M[I1,1];
0x0016EF        0300B900                 Null = Null + Null, M[I2,1] = r1;

 <$M.sbc.calc_bit_allocation.sj_snr_loop2>
0x0016F0        DDF0001B                 jump $M.sbc.calc_bit_allocation.sj_maxbitneedindex;

 <$M.sbc.calc_bit_allocation.sj_loudness>
0x0016F1        D12B0021                 r0 = M[r9 + 33];
0x0016F2        E460003F                 r4 = Null - 1;
0x0016F3        D13B0018                 r1 = M[r9 + 24];
0x0016F4        5010003F                 I1 = Null + r1;
0x0016F5        D13B001A                 r1 = M[r9 + 26];
0x0016F6        5020003F                 I2 = Null + r1;
0x0016F7        D13B001C                 r1 = M[r9 + 28];
0x0016F8        9B320000                 r1 = r1 * r0 (int);
0x0016F9        D14B0017                 r2 = M[r9 + 23];
0x0016FA        5043004F                 I4 = r1 + r2;
0x0016FB        51340010                 I3 = r2 + 16;
0x0016FC        21020008                 Null = r0 - 8;
0x0016FD        54430030                 if EQ I4 = r1 + I3;
0x0016FE        01200002                 r0 = Null + 2;
0x0016FF        0170FFF6                 r5 = Null + -10;
0x001700        0047350F                 r2 = r5 + Null, r1 = M[I1,M1];

 <$M.sbc.calc_bit_allocation.sj_loudness_chan_loop>
0x001701        D1CB0021                 r10 = M[r9 + 33];
0x001702        59340001                 I3 = I4 + 1;
0x001703        03000050                 Null = Null + Null, r3 = M[I4,0];
0x001704        E5F00005                 do $M.sbc.calc_bit_allocation.sj_loudness_sb_loop;
0x001705        0003000F                 Null = r1 + Null;
0x001706        20433551                 if NE r2 = r1 - r3, r1 = M[I1,M1];
0x001707        90445D65                 if POS r2 = r2 ASHIFT r4, r3 = M[I3,M1];
0x001708        0047C90F                 r2 = r5 + Null, M[I2,M1] = r2;

 <$M.sbc.calc_bit_allocation.sj_loudness_sb_loop>
0x001709        E422003F                 r0 = r0 - 1;
0x00170A        DD10FFF7                 if NE jump $M.sbc.calc_bit_allocation.sj_loudness_chan_loop;

 <$M.sbc.calc_bit_allocation.sj_maxbitneedindex>
0x00170B        D1CB0021                 r10 = M[r9 + 33];
0x00170C        99CC0002                 r10 = r10 * 2 (int);
0x00170D        D14B001A                 r2 = M[r9 + 26];
0x00170E        5020004F                 I2 = Null + r2;
0x00170F        E1F0003C                 call $M.sbc.calc_bit_allocation.share_code_1;

 <$M.sbc.calc_bit_allocation.sj_findbitslice_loop1>
0x001710        D1CB0021                 r10 = M[r9 + 33];
0x001711        99CC0002                 r10 = r10 * 2 (int);
0x001712        D17B001A                 r5 = M[r9 + 26];
0x001713        5020007F                 I2 = Null + r5;
0x001714        E1F00040                 call $M.sbc.calc_bit_allocation.share_code_2;
0x001715        DD40FFFB                 if NEG jump $M.sbc.calc_bit_allocation.sj_findbitslice_loop1;
0x001716        D1CB001B                 r10 = M[r9 + 27];
0x001717        501000CF                 I1 = Null + r10;
0x001718        D1CB001A                 r10 = M[r9 + 26];
0x001719        502000CF                 I2 = Null + r10;
0x00171A        D1CB0021                 r10 = M[r9 + 33];
0x00171B        99CC0002                 r10 = r10 * 2 (int);
0x00171C        E1F0004B                 call $M.sbc.calc_bit_allocation.share_code_3;
0x00171D        D1CB0021                 r10 = M[r9 + 33];
0x00171E        01600000                 r4 = Null + 0;
0x00171F        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_loop>
0x001720        5022006F                 I2 = r0 + r4;
0x001721        D13B001B                 r1 = M[r9 + 27];
0x001722        5812003F                 I1 = I2 + r1;
0x001723        D13B001A                 r1 = M[r9 + 26];
0x001724        5B230000                 I2 = I2 + r1;
0x001725        D13B0022                 r1 = M[r9 + 34];
0x001726        2005003F                 Null = r3 - r1;
0x001727        DD50000A                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_end;
0x001728        E1F0004F                 call $M.sbc.calc_bit_allocation.share_code_4;
0x001729        200200CF                 Null = r0 - r10;
0x00172A        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_chanchange;
0x00172B        002C000F                 r0 = r10 + Null;
0x00172C        DDF0FFF4                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_chanchange>
0x00172D        01200000                 r0 = Null + 0;
0x00172E        E466002F                 r4 = r4 + 1;
0x00172F        200600CF                 Null = r4 - r10;
0x001730        DD10FFF0                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_end>
0x001731        01600000                 r4 = Null + 0;
0x001732        01200000                 r0 = Null + 0;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop>
0x001733        5022006F                 I2 = r0 + r4;
0x001734        D13B001B                 r1 = M[r9 + 27];
0x001735        5812003F                 I1 = I2 + r1;
0x001736        D13B001A                 r1 = M[r9 + 26];
0x001737        5B230000                 I2 = I2 + r1;
0x001738        D13B0022                 r1 = M[r9 + 34];
0x001739        2005003F                 Null = r3 - r1;
0x00173A        DD500010                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_end;
0x00173B        03003400                 Null = Null + Null, r1 = M[I1,0];
0x00173C        03007800                 Null = Null + Null, r5 = M[I2,0];
0x00173D        21030010                 Null = r1 - 16;
0x00173E        DD500003                 if POS jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif;
0x00173F        E433002F                 r1 = r1 + 1;
0x001740        E455002F                 r3 = r3 + 1;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_endif>
0x001741        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001742        200200CF                 Null = r0 - r10;
0x001743        DD000003                 if EQ jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange;
0x001744        002C000F                 r0 = r10 + Null;
0x001745        DDF0FFEE                 jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_chanchange>
0x001746        01200000                 r0 = Null + 0;
0x001747        E466002F                 r4 = r4 + 1;
0x001748        200600CF                 Null = r4 - r10;
0x001749        DD10FFEA                 if NE jump $M.sbc.calc_bit_allocation.sj_remainingbits_extra_loop;

 <$M.sbc.calc_bit_allocation.sj_remainingbits_extra_end>
0x00174A        DDF0FAA1                 jump $pop_rLink_and_rts;

 <$M.sbc.calc_bit_allocation.share_code_1>
0x00174B        01400000                 r2 = Null + 0;
0x00174C        E5F00004                 do $M.sbc.calc_bit_allocation.maxbitneed_loop;
0x00174D        03003900                 Null = Null + Null, r1 = M[I2,1];
0x00174E        2004003F                 Null = r2 - r1;
0x00174F        00430004                 if NEG r2 = r1 + Null;

 <$M.sbc.calc_bit_allocation.maxbitneed_loop>
0x001750        01500000                 r3 = Null + 0;
0x001751        01600000                 r4 = Null + 0;
0x001752        E444002F                 r2 = r2 + 1;
0x001753        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_2>
0x001754        E444003F                 r2 = r2 - 1;
0x001755        03560000                 r3 = r3 + r4;
0x001756        01600000                 r4 = Null + 0;
0x001757        E5F0000C                 do $M.sbc.calc_bit_allocation.findbitslice_loop2;
0x001758        03003900                 Null = Null + Null, r1 = M[I2,1];
0x001759        2073004F                 r5 = r1 - r2;
0x00175A        21070002                 Null = r5 - 2;
0x00175B        DD400004                 if NEG jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x00175C        21070010                 Null = r5 - 16;
0x00175D        DD500002                 if POS jump $M.sbc.calc_bit_allocation.findbitslice_elseif1;
0x00175E        E466002F                 r4 = r4 + 1;

 <$M.sbc.calc_bit_allocation.findbitslice_elseif1>
0x00175F        E407003F                 Null = r5 - 1;
0x001760        DD100002                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif1;
0x001761        01660002                 r4 = r4 + 2;

 <$M.sbc.calc_bit_allocation.findbitslice_endif1>
0x001762        03000000                 Null = Null + Null;

 <$M.sbc.calc_bit_allocation.findbitslice_loop2>
0x001763        0075006F                 r5 = r3 + r4;
0x001764        D1CB0022                 r10 = M[r9 + 34];
0x001765        200700CF                 Null = r5 - r10;
0x001766        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_3>
0x001767        D13B0022                 r1 = M[r9 + 34];
0x001768        2007003F                 Null = r5 - r1;
0x001769        DD100003                 if NE jump $M.sbc.calc_bit_allocation.findbitslice_endif2;
0x00176A        03560000                 r3 = r3 + r4;
0x00176B        E444003F                 r2 = r2 - 1;

 <$M.sbc.calc_bit_allocation.findbitslice_endif2>
0x00176C        E5F0000A                 do $M.sbc.calc_bit_allocation.distbits_loop;
0x00176D        03003900                 Null = Null + Null, r1 = M[I2,1];
0x00176E        2073004F                 r5 = r1 - r2;
0x00176F        01300000                 r1 = Null + 0;
0x001770        21070002                 Null = r5 - 2;
0x001771        00370005                 if POS r1 = r5 + Null;
0x001772        01700010                 r5 = Null + 16;
0x001773        21030010                 Null = r1 - 16;
0x001774        00370005                 if POS r1 = r5 + Null;
0x001775        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbc.calc_bit_allocation.distbits_loop>
0x001776        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.share_code_4>
0x001777        03003400                 Null = Null + Null, r1 = M[I1,0];
0x001778        03007900                 Null = Null + Null, r5 = M[I2,1];
0x001779        21030002                 Null = r1 - 2;
0x00177A        DD400006                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x00177B        21030010                 Null = r1 - 16;
0x00177C        DD500004                 if POS jump $M.sbc.calc_bit_allocation.remainingbits_elseif;
0x00177D        E433002F                 r1 = r1 + 1;
0x00177E        E455002F                 r3 = r3 + 1;
0x00177F        DDF0000A                 jump $M.sbc.calc_bit_allocation.remainingbits_endif;

 <$M.sbc.calc_bit_allocation.remainingbits_elseif>
0x001780        23740000                 r5 = r5 - r2;
0x001781        E407003F                 Null = r5 - 1;
0x001782        DD100007                 if NE jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001783        D17B0022                 r5 = M[r9 + 34];
0x001784        23750000                 r5 = r5 - r3;
0x001785        21070002                 Null = r5 - 2;
0x001786        DD400003                 if NEG jump $M.sbc.calc_bit_allocation.remainingbits_endif;
0x001787        01300002                 r1 = Null + 2;
0x001788        01550002                 r3 = r3 + 2;

 <$M.sbc.calc_bit_allocation.remainingbits_endif>
0x001789        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x00178A        DC0D000F                 rts;

 <$M.sbc.calc_bit_allocation.corrupt_frame_error>
0x00178B        E420002F                 r0 = Null + 1;
0x00178C        D52B0036                 M[r9 + 54] = r0;
0x00178D        DDF0FA5E                 jump $pop_rLink_and_rts;

 <$kal_float_lib.__zero.call_entry>
0x00178E        F3D00000                 push rLink;

 <$kal_float_lib.__zero.jump_entry>
0x00178F        01200000                 r0 = Null + 0;
0x001790        01300000                 r1 = Null + 0;
0x001791        F3D40000                 pop rLink;
0x001792        DC0D000F                 rts;

 <$kal_float_lib.__renorm.call_entry>
0x001793        F3D00000                 push rLink;

 <$kal_float_lib.__renorm.jump_entry>
0x001794        0003000F                 Null = r1 + Null;
0x001795        DD00FFFA                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x001796        F3600000                 push r4;
0x001797        816200FF                 r4 = r0 AND 0xff;
0x001798        FD000080 81220000        r0 = r0 AND 0x800000;
0x00179A        0003000F                 Null = r1 + Null;
0x00179B        DD400004                 if NEG jump $kal_float_lib.__renorm_rebuild_and_exit;

 <$kal_float_lib.__renorm_loop>
0x00179C        E466003F                 r4 = r4 - 1;
0x00179D        8D330001                 r1 = r1 LSHIFT 1;
0x00179E        DD50FFFE                 if POS jump $kal_float_lib.__renorm_loop;

 <$kal_float_lib.__renorm_rebuild_and_exit>
0x00179F        816600FF                 r4 = r4 AND 0xff;
0x0017A0        87260000                 r0 = r0 OR r4;
0x0017A1        F3640000                 pop r4;
0x0017A2        F3D40000                 pop rLink;
0x0017A3        DC0D000F                 rts;

 <$kal_float_lib.__add.jump_entry>
0x0017A4        F1000330                 pushm <r2, r3, r6, r7>;
0x0017A5        0003000F                 Null = r1 + Null;
0x0017A6        00240000                 if EQ r0 = r2 + Null;
0x0017A7        0005000F                 Null = r3 + Null;
0x0017A8        00420000                 if EQ r2 = r0 + Null;
0x0017A9        817200FF                 r5 = r0 AND 0xff;
0x0017AA        818400FF                 r6 = r2 AND 0xff;
0x0017AB        2097008F                 r7 = r5 - r6;
0x0017AC        DD400005                 if NEG jump $kal_float_lib.__add_shift_op1;
0x0017AD        2090009F                 r7 = Null - r7;
0x0017AE        8F590000                 r3 = r3 LSHIFT r7;
0x0017AF        E427002F                 r0 = r5 + 1;
0x0017B0        DDF00003                 jump $kal_float_lib.__add_add_and_exit;

 <$kal_float_lib.__add_shift_op1>
0x0017B1        8F390000                 r1 = r1 LSHIFT r7;
0x0017B2        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__add_add_and_exit>
0x0017B3        8D33007F                 r1 = r1 LSHIFT -1;
0x0017B4        8D55007F                 r3 = r3 LSHIFT -1;
0x0017B5        03350000                 r1 = r1 + r3;
0x0017B6        87260000                 r0 = r0 OR r4;
0x0017B7        F1040330                 popm <r2, r3, r6, r7>;
0x0017B8        F10400C0                 popm <r4, r5>;
0x0017B9        DDF0FFDB                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub.jump_entry>
0x0017BA        F1000330                 pushm <r2, r3, r6, r7>;
0x0017BB        0003000F                 Null = r1 + Null;
0x0017BC        00240000                 if EQ r0 = r2 + Null;
0x0017BD        0005000F                 Null = r3 + Null;
0x0017BE        00420000                 if EQ r2 = r0 + Null;
0x0017BF        817200FF                 r5 = r0 AND 0xff;
0x0017C0        818400FF                 r6 = r2 AND 0xff;
0x0017C1        2097008F                 r7 = r5 - r6;
0x0017C2        DD400005                 if NEG jump $kal_float_lib.__sub_shift_op1;
0x0017C3        2090009F                 r7 = Null - r7;
0x0017C4        8F590000                 r3 = r3 LSHIFT r7;
0x0017C5        E427002F                 r0 = r5 + 1;
0x0017C6        DDF00003                 jump $kal_float_lib.__sub_sub_and_exit;

 <$kal_float_lib.__sub_shift_op1>
0x0017C7        8F390000                 r1 = r1 LSHIFT r7;
0x0017C8        E428002F                 r0 = r6 + 1;

 <$kal_float_lib.__sub_sub_and_exit>
0x0017C9        8D33007F                 r1 = r1 LSHIFT -1;
0x0017CA        8D55007F                 r3 = r3 LSHIFT -1;
0x0017CB        2003005F                 Null = r1 - r3;
0x0017CC        DD400006                 if NEG jump $kal_float_lib.__sub_sub_a_from_b;
0x0017CD        23350000                 r1 = r1 - r3;
0x0017CE        87260000                 r0 = r0 OR r4;
0x0017CF        F1040330                 popm <r2, r3, r6, r7>;
0x0017D0        F10400C0                 popm <r4, r5>;
0x0017D1        DDF0FFC3                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.__sub_sub_a_from_b>
0x0017D2        2035003F                 r1 = r3 - r1;
0x0017D3        FD000080 89660000        r4 = r4 XOR 0x800000;
0x0017D5        87260000                 r0 = r0 OR r4;
0x0017D6        F1040330                 popm <r2, r3, r6, r7>;
0x0017D7        F10400C0                 popm <r4, r5>;
0x0017D8        DDF0FFBC                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.q_to_float>
0x0017D9        F3D00000                 push rLink;

 <$kal_float_lib.q_to_float.jump_entry>
0x0017DA        0002000F                 Null = r0 + Null;
0x0017DB        DD00FFB4                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x0017DC        F1000050                 pushm <r2, r4>;
0x0017DD        0042000F                 r2 = r0 + Null;
0x0017DE        FD000080 81620000        r4 = r0 AND 0x800000;
0x0017E0        20400041                 if NE r2 = Null - r2;
0x0017E1        0123007F                 r0 = r1 + 127;
0x0017E2        87260000                 r0 = r0 OR r4;
0x0017E3        0034000F                 r1 = r2 + Null;
0x0017E4        F1040050                 popm <r2, r4>;
0x0017E5        DDF0FFAF                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.float_to_q>
0x0017E6        F3D00000                 push rLink;

 <$kal_float_lib.float_to_q.jump_entry>
0x0017E7        F1000060                 pushm <r3, r4>;
0x0017E8        8D33007F                 r1 = r1 LSHIFT -1;
0x0017E9        815200FF                 r3 = r0 AND 0xff;
0x0017EA        E455003F                 r3 = r3 - 1;
0x0017EB        FD000080 81620000        r4 = r0 AND 0x800000;
0x0017ED        20300031                 if NE r1 = Null - r1;
0x0017EE        21550097                 r3 = r3 - 151;
0x0017EF        03540000                 r3 = r3 + r2;
0x0017F0        9023005F                 r0 = r1 ASHIFT r3;
0x0017F1        F1040060                 popm <r3, r4>;
0x0017F2        F3D40000                 pop rLink;
0x0017F3        DC0D000F                 rts;

 <$kal_float_lib.int_to_float>
0x0017F4        F3D00000                 push rLink;
0x0017F5        01300018                 r1 = Null + 24;
0x0017F6        DDF0FFE4                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.frac_to_float>
0x0017F7        F3D00000                 push rLink;
0x0017F8        E430002F                 r1 = Null + 1;
0x0017F9        DDF0FFE1                 jump $kal_float_lib.q_to_float.jump_entry;

 <$kal_float_lib.float_to_int>
0x0017FA        F1002010                 pushm <r2, rLink>;
0x0017FB        01400002                 r2 = Null + 2;
0x0017FC        E1F0FFEA                 call $kal_float_lib.float_to_q;
0x0017FD        F1042010                 popm <r2, rLink>;
0x0017FE        DC0D000F                 rts;

 <$kal_float_lib.float_to_frac>
0x0017FF        F1002010                 pushm <r2, rLink>;
0x001800        01400019                 r2 = Null + 25;
0x001801        E1F0FFE5                 call $kal_float_lib.float_to_q;
0x001802        F1042010                 popm <r2, rLink>;
0x001803        DC0D000F                 rts;

 <$kal_float_lib.neg>
0x001804        FD000080 89220000        r0 = r0 XOR 0x800000;
0x001806        DC0D000F                 rts;

 <$kal_float_lib.add>
0x001807        F3D00000                 push rLink;
0x001808        F10000C0                 pushm <r4, r5>;
0x001809        FD000080 81620000        r4 = r0 AND 0x800000;
0x00180B        FD000080 81740000        r5 = r2 AND 0x800000;
0x00180D        2006007F                 Null = r4 - r5;
0x00180E        DD00FF96                 if EQ jump $kal_float_lib.__add.jump_entry;
0x00180F        DDF0FFAB                 jump $kal_float_lib.__sub.jump_entry;

 <$kal_float_lib.sub>
0x001810        F3D00000                 push rLink;
0x001811        F10000C0                 pushm <r4, r5>;
0x001812        FD000080 81620000        r4 = r0 AND 0x800000;
0x001814        FD000080 81740000        r5 = r2 AND 0x800000;
0x001816        2006007F                 Null = r4 - r5;
0x001817        DD00FFA3                 if EQ jump $kal_float_lib.__sub.jump_entry;
0x001818        DDF0FF8C                 jump $kal_float_lib.__add.jump_entry;

 <$kal_float_lib.mul>
0x001819        F3D00000                 push rLink;
0x00181A        0003000F                 Null = r1 + Null;
0x00181B        DD00FF74                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x00181C        0005000F                 Null = r3 + Null;
0x00181D        DD00FF72                 if EQ jump $kal_float_lib.__zero.jump_entry;
0x00181E        F10000E0                 pushm <r3, r4, r5>;
0x00181F        816200FF                 r4 = r0 AND 0xff;
0x001820        817400FF                 r5 = r2 AND 0xff;
0x001821        03670000                 r4 = r4 + r5;
0x001822        2166007F                 r4 = r4 - 127;
0x001823        8872004F                 r5 = r0 XOR r2;
0x001824        FD000080 81770000        r5 = r5 AND 0x800000;
0x001826        8426007F                 r0 = r4 OR r5;
0x001827        8D33007F                 r1 = r1 LSHIFT -1;
0x001828        8D55007F                 r3 = r3 LSHIFT -1;
0x001829        CC13005F                 rMAC = r1 * r3 (SS);
0x00182A        0031000F                 r1 = rMAC + Null;
0x00182B        8D330001                 r1 = r1 LSHIFT 1;
0x00182C        F10400E0                 popm <r3, r4, r5>;
0x00182D        DDF0FF67                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.recip>
0x00182E        F3D00000                 push rLink;
0x00182F        F10010F0                 pushm <r2, r3, r4, r5, r10>;
0x001830        654200FF                 r2 = 255 - r0;
0x001831        91530017                 r3 = r1 ASHIFT 23;
0x001832        F100000C                 pushm <r0, r1>;
0x001833        01C00006                 r10 = Null + 6;
0x001834        E5F00012                 do $kal_float_lib._recip_iteration_loop;
0x001835        F104000C                 popm <r0, r1>;
0x001836        F100000C                 pushm <r0, r1>;
0x001837        E1F0FFE2                 call $kal_float_lib.mul;
0x001838        F100003C                 pushm <r0, r1, r2, r3>;
0x001839        F10400F0                 popm <r2, r3, r4, r5>;
0x00183A        01200080                 r0 = Null + 128;
0x00183B        FD000080 01300000        r1 = Null + -8388608;
0x00183D        E1F0FFD3                 call $kal_float_lib.sub;
0x00183E        0046000F                 r2 = r4 + Null;
0x00183F        0057000F                 r3 = r5 + Null;
0x001840        E1F0FFD9                 call $kal_float_lib.mul;
0x001841        0046000F                 r2 = r4 + Null;
0x001842        0057000F                 r3 = r5 + Null;
0x001843        E1F0FFC4                 call $kal_float_lib.add;
0x001844        0042000F                 r2 = r0 + Null;
0x001845        0053000F                 r3 = r1 + Null;

 <$kal_float_lib._recip_iteration_loop>
0x001846        F104000C                 popm <r0, r1>;
0x001847        0024000F                 r0 = r2 + Null;
0x001848        0035000F                 r1 = r3 + Null;
0x001849        F10410F0                 popm <r2, r3, r4, r5, r10>;
0x00184A        DDF0FF4A                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.div>
0x00184B        F3D00000                 push rLink;
0x00184C        F1000030                 pushm <r2, r3>;
0x00184D        F100000C                 pushm <r0, r1>;
0x00184E        0024000F                 r0 = r2 + Null;
0x00184F        0035000F                 r1 = r3 + Null;
0x001850        E1F0FFDE                 call $kal_float_lib.recip;
0x001851        0042000F                 r2 = r0 + Null;
0x001852        0053000F                 r3 = r1 + Null;
0x001853        F104000C                 popm <r0, r1>;
0x001854        E1F0FFC5                 call $kal_float_lib.mul;
0x001855        F1040030                 popm <r2, r3>;
0x001856        DDF0FF3E                 jump $kal_float_lib.__renorm.jump_entry;

 <$kal_float_lib.rsqrt>
0x001857        F3D00000                 push rLink;
0x001858        0002000F                 Null = r0 + Null;
0x001859        DD40FF36                 if NEG jump $kal_float_lib.__zero.jump_entry;
0x00185A        F10013F0                 pushm <r2, r3, r4, r5, r6, r7, r10>;
0x00185B        0062000F                 r4 = r0 + Null;
0x00185C        0073000F                 r5 = r1 + Null;
0x00185D        E482003F                 r6 = r0 - 1;
0x00185E        0093000F                 r7 = r1 + Null;
0x00185F        E466003F                 r4 = r4 - 1;
0x001860        FD00007F 8177FFFF        r5 = r5 AND 0x7fffff;
0x001862        8D66000E                 r4 = r4 LSHIFT 14;
0x001863        8D770077                 r5 = r5 LSHIFT -9;
0x001864        87670000                 r4 = r4 OR r5;
0x001865        FD00005F 01703759        r5 = Null + 6240089;
0x001867        2067006F                 r4 = r5 - r4;
0x001868        8D760008                 r5 = r4 LSHIFT 8;
0x001869        FD000080 85770000        r5 = r5 OR 0x800000;
0x00186B        8D660071                 r4 = r4 LSHIFT -15;
0x00186C        E466002F                 r4 = r4 + 1;
0x00186D        01C00003                 r10 = Null + 3;
0x00186E        E5F00014                 do $kal_float_lib._rsqrt_iteration_loop;
0x00186F        0026000F                 r0 = r4 + Null;
0x001870        0037000F                 r1 = r5 + Null;
0x001871        0046000F                 r2 = r4 + Null;
0x001872        0057000F                 r3 = r5 + Null;
0x001873        E1F0FFA6                 call $kal_float_lib.mul;
0x001874        0048000F                 r2 = r6 + Null;
0x001875        0059000F                 r3 = r7 + Null;
0x001876        E1F0FFA3                 call $kal_float_lib.mul;
0x001877        0042000F                 r2 = r0 + Null;
0x001878        0053000F                 r3 = r1 + Null;
0x001879        01200080                 r0 = Null + 128;
0x00187A        FD0000C0 01300000        r1 = Null + -4194304;
0x00187C        E1F0FF94                 call $kal_float_lib.sub;
0x00187D        0046000F                 r2 = r4 + Null;
0x00187E        0057000F                 r3 = r5 + Null;
0x00187F        E1F0FF9A                 call $kal_float_lib.mul;
0x001880        0062000F                 r4 = r0 + Null;
0x001881        0073000F                 r5 = r1 + Null;

 <$kal_float_lib._rsqrt_iteration_loop>
0x001882        F10413F0                 popm <r2, r3, r4, r5, r6, r7, r10>;
0x001883        DDF0FF11                 jump $kal_float_lib.__renorm.jump_entry;

 <$M.frame_proc_stream_configure.func>
0x001884        F3D00000                 push rLink;
0x001885        19502A43                 M[$M.frame_proc_stream_configure.if_struc_temp] = r3 + Null;
0x001886        D1250000                 r0 = M[r3 + 0];
0x001887        0070000F                 r5 = Null + Null;
0x001888        01550001                 r3 = r3 + 1;
0x001889        D035000F                 r1 = M[r3 + Null];
0x00188A        83320000                 r1 = r1 AND r0;
0x00188B        01400004                 r2 = Null + 4;
0x00188C        01600004                 r4 = Null + 4;
0x00188D        8004003F                 Null = r2 AND r1;
0x00188E        00600000                 if EQ r4 = Null + Null;
0x00188F        87760000                 r5 = r5 OR r4;
0x001890        01400001                 r2 = Null + 1;
0x001891        E460002F                 r4 = Null + 1;
0x001892        8004003F                 Null = r2 AND r1;
0x001893        00600000                 if EQ r4 = Null + Null;
0x001894        87760000                 r5 = r5 OR r4;
0x001895        01400040                 r2 = Null + 64;
0x001896        01600040                 r4 = Null + 64;
0x001897        8004003F                 Null = r2 AND r1;
0x001898        00600000                 if EQ r4 = Null + Null;
0x001899        87760000                 r5 = r5 OR r4;
0x00189A        01400008                 r2 = Null + 8;
0x00189B        01600008                 r4 = Null + 8;
0x00189C        8004003F                 Null = r2 AND r1;
0x00189D        00600000                 if EQ r4 = Null + Null;
0x00189E        87760000                 r5 = r5 OR r4;
0x00189F        01400002                 r2 = Null + 2;
0x0018A0        01600002                 r4 = Null + 2;
0x0018A1        8004003F                 Null = r2 AND r1;
0x0018A2        00600000                 if EQ r4 = Null + Null;
0x0018A3        87760000                 r5 = r5 OR r4;
0x0018A4        FD0000FF 19705A38        M[$music_example.DAC_IF_Connections] = r5 + Null;
0x0018A6        0070000F                 r5 = Null + Null;
0x0018A7        D035000F                 r1 = M[r3 + Null];
0x0018A8        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x0018AA        83320000                 r1 = r1 AND r0;
0x0018AB        01400004                 r2 = Null + 4;
0x0018AC        01600004                 r4 = Null + 4;
0x0018AD        8004003F                 Null = r2 AND r1;
0x0018AE        00600000                 if EQ r4 = Null + Null;
0x0018AF        87760000                 r5 = r5 OR r4;
0x0018B0        01400001                 r2 = Null + 1;
0x0018B1        E460002F                 r4 = Null + 1;
0x0018B2        8004003F                 Null = r2 AND r1;
0x0018B3        00600000                 if EQ r4 = Null + Null;
0x0018B4        87760000                 r5 = r5 OR r4;
0x0018B5        01400010                 r2 = Null + 16;
0x0018B6        01600010                 r4 = Null + 16;
0x0018B7        8004003F                 Null = r2 AND r1;
0x0018B8        00600000                 if EQ r4 = Null + Null;
0x0018B9        87760000                 r5 = r5 OR r4;
0x0018BA        01400040                 r2 = Null + 64;
0x0018BB        01600040                 r4 = Null + 64;
0x0018BC        8004003F                 Null = r2 AND r1;
0x0018BD        00600000                 if EQ r4 = Null + Null;
0x0018BE        87760000                 r5 = r5 OR r4;
0x0018BF        01400008                 r2 = Null + 8;
0x0018C0        01600008                 r4 = Null + 8;
0x0018C1        8004003F                 Null = r2 AND r1;
0x0018C2        00600000                 if EQ r4 = Null + Null;
0x0018C3        87760000                 r5 = r5 OR r4;
0x0018C4        01400002                 r2 = Null + 2;
0x0018C5        01600002                 r4 = Null + 2;
0x0018C6        8004003F                 Null = r2 AND r1;
0x0018C7        00600000                 if EQ r4 = Null + Null;
0x0018C8        87760000                 r5 = r5 OR r4;
0x0018C9        01400020                 r2 = Null + 32;
0x0018CA        01600020                 r4 = Null + 32;
0x0018CB        8004003F                 Null = r2 AND r1;
0x0018CC        00600000                 if EQ r4 = Null + Null;
0x0018CD        87760000                 r5 = r5 OR r4;
0x0018CE        FD0000FF 19705A39        M[$music_example.I2S_IF_Connections] = r5 + Null;
0x0018D0        0070000F                 r5 = Null + Null;
0x0018D1        09502A43                 r3 = Null + M[$M.frame_proc_stream_configure.if_struc_temp];
0x0018D2        01550003                 r3 = r3 + 3;
0x0018D3        D035000F                 r1 = M[r3 + Null];
0x0018D4        83320000                 r1 = r1 AND r0;
0x0018D5        01400004                 r2 = Null + 4;
0x0018D6        01600004                 r4 = Null + 4;
0x0018D7        8004003F                 Null = r2 AND r1;
0x0018D8        00600000                 if EQ r4 = Null + Null;
0x0018D9        87760000                 r5 = r5 OR r4;
0x0018DA        01400001                 r2 = Null + 1;
0x0018DB        E460002F                 r4 = Null + 1;
0x0018DC        8004003F                 Null = r2 AND r1;
0x0018DD        00600000                 if EQ r4 = Null + Null;
0x0018DE        87760000                 r5 = r5 OR r4;
0x0018DF        01400040                 r2 = Null + 64;
0x0018E0        01600040                 r4 = Null + 64;
0x0018E1        8004003F                 Null = r2 AND r1;
0x0018E2        00600000                 if EQ r4 = Null + Null;
0x0018E3        87760000                 r5 = r5 OR r4;
0x0018E4        01400008                 r2 = Null + 8;
0x0018E5        01600008                 r4 = Null + 8;
0x0018E6        8004003F                 Null = r2 AND r1;
0x0018E7        00600000                 if EQ r4 = Null + Null;
0x0018E8        87760000                 r5 = r5 OR r4;
0x0018E9        01400002                 r2 = Null + 2;
0x0018EA        01600002                 r4 = Null + 2;
0x0018EB        8004003F                 Null = r2 AND r1;
0x0018EC        00600000                 if EQ r4 = Null + Null;
0x0018ED        87760000                 r5 = r5 OR r4;
0x0018EE        19702A39                 M[$music_example.SPDIF_IF_Connections] = r5 + Null;
0x0018EF        09502A43                 r3 = Null + M[$M.frame_proc_stream_configure.if_struc_temp];
0x0018F0        01550001                 r3 = r3 + 1;
0x0018F1        D035000F                 r1 = M[r3 + Null];
0x0018F2        01400004                 r2 = Null + 4;
0x0018F3        85440008                 r2 = r2 OR 0x8;
0x0018F4        E460002F                 r4 = Null + 1;
0x0018F5        8004003F                 Null = r2 AND r1;
0x0018F6        00600000                 if EQ r4 = Null + Null;
0x0018F7        FD0000FF 19605A42        M[$DAC_conn_aux] = r4 + Null;
0x0018F9        01400001                 r2 = Null + 1;
0x0018FA        85440002                 r2 = r2 OR 0x2;
0x0018FB        85440040                 r2 = r2 OR 0x40;
0x0018FC        E460002F                 r4 = Null + 1;
0x0018FD        8004003F                 Null = r2 AND r1;
0x0018FE        00600000                 if EQ r4 = Null + Null;
0x0018FF        19602A42                 M[$DAC_conn_main] = r4 + Null;
0x001900        01400001                 r2 = Null + 1;
0x001901        8002004F                 Null = r0 AND r2;
0x001902        DD000005                 if EQ jump $M.frame_proc_stream_configure.no_pri_left;
0x001903        FD0000FF 01305840        r1 = Null + -42944;
0x001905        193028AE                 M[0x28ae] = r1 + Null;
0x001906        DDF00003                 jump $M.frame_proc_stream_configure.check_pri_right;

 <$M.frame_proc_stream_configure.no_pri_left>
0x001907        190028AE                 M[0x28ae] = Null + Null;
0x001908        19002A17                 M[0x2a17] = Null + Null;

 <$M.frame_proc_stream_configure.check_pri_right>
0x001909        01400002                 r2 = Null + 2;
0x00190A        8002004F                 Null = r0 AND r2;
0x00190B        DD000004                 if EQ jump $M.frame_proc_stream_configure.no_pri_right;
0x00190C        01302885                 r1 = Null + 10373;
0x00190D        193028AF                 M[0x28af] = r1 + Null;
0x00190E        DDF00004                 jump $M.frame_proc_stream_configure.xover_config;

 <$M.frame_proc_stream_configure.no_pri_right>
0x00190F        190028AF                 M[0x28af] = Null + Null;
0x001910        FD0000FF 19005A19        M[0xff5a19] = Null + Null;

 <$M.frame_proc_stream_configure.xover_config>
0x001912        01400010                 r2 = Null + 16;
0x001913        8002004F                 Null = r0 AND r2;
0x001914        DD00000E                 if EQ jump $M.frame_proc_stream_configure.no_sec_left;
0x001915        FD0000FF 0130584D        r1 = Null + -42931;
0x001917        193028B0                 M[0x28b0] = r1 + Null;
0x001918        FD0000FF 01305901        r1 = Null + -42751;
0x00191A        19300FFC                 M[0xffc] = r1 + Null;
0x00191B        FD0000FF 01303704        r1 = Null + -51452;
0x00191D        19300FFD                 M[0xffd] = r1 + Null;
0x00191E        FD0000FF 013035EC        r1 = Null + -51732;
0x001920        193028E5                 M[0x28e5] = r1 + Null;
0x001921        DDF00007                 jump $M.frame_proc_stream_configure.check_sec_right;

 <$M.frame_proc_stream_configure.no_sec_left>
0x001922        190028B0                 M[0x28b0] = Null + Null;
0x001923        19000FFC                 M[0xffc] = Null + Null;
0x001924        19000FFD                 M[0xffd] = Null + Null;
0x001925        190028E5                 M[0x28e5] = Null + Null;
0x001926        FD0000FF 19005A1B        M[0xff5a1b] = Null + Null;

 <$M.frame_proc_stream_configure.check_sec_right>
0x001928        01400020                 r2 = Null + 32;
0x001929        8002004F                 Null = r0 AND r2;
0x00192A        DD00000D                 if EQ jump $M.frame_proc_stream_configure.no_sec_right;
0x00192B        01302892                 r1 = Null + 10386;
0x00192C        193028B1                 M[0x28b1] = r1 + Null;
0x00192D        FD0000FF 01305901        r1 = Null + -42751;
0x00192F        19300FFC                 M[0xffc] = r1 + Null;
0x001930        FD0000FF 01303704        r1 = Null + -51452;
0x001932        19300FFD                 M[0xffd] = r1 + Null;
0x001933        FD0000FF 0130360C        r1 = Null + -51700;
0x001935        193028E6                 M[0x28e6] = r1 + Null;
0x001936        DDF00006                 jump $M.frame_proc_stream_configure.aux_config;

 <$M.frame_proc_stream_configure.no_sec_right>
0x001937        190028B1                 M[0x28b1] = Null + Null;
0x001938        19000FFC                 M[0xffc] = Null + Null;
0x001939        19000FFD                 M[0xffd] = Null + Null;
0x00193A        190028E6                 M[0x28e6] = Null + Null;
0x00193B        19002A1B                 M[0x2a1b] = Null + Null;

 <$M.frame_proc_stream_configure.aux_config>
0x00193C        01400004                 r2 = Null + 4;
0x00193D        85440008                 r2 = r2 OR 0x8;
0x00193E        8034002F                 r1 = r2 AND r0;
0x00193F        DD00001B                 if EQ jump $M.frame_proc_stream_configure.no_aux;
0x001940        E450002F                 r3 = Null + 1;
0x001941        19502A3E                 M[$M.system_config.data.uses_aux_out] = r3 + Null;
0x001942        01600004                 r4 = Null + 4;
0x001943        2060006F                 r4 = Null - r4;
0x001944        8F460000                 r2 = r2 LSHIFT r4;
0x001945        8F360000                 r1 = r1 LSHIFT r4;
0x001946        2034003F                 r1 = r2 - r1;
0x001947        DD100004                 if NE jump $M.frame_proc_stream_configure.check_left_aux;
0x001948        FD0000FF 19005A3E        M[$M.system_config.data.aux_downmix] = Null + Null;
0x00194A        DDF00014                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.check_left_aux>
0x00194B        E403003F                 Null = r1 - 1;
0x00194C        DD100008                 if NE jump $M.frame_proc_stream_configure.check_right_aux;
0x00194D        FD0000FF 19505A3E        M[$M.system_config.data.aux_downmix] = r3 + Null;
0x00194F        FD0000FF 0130585A        r1 = Null + -42918;
0x001951        FD0000FF 19305909        M[0xff5909] = r1 + Null;
0x001953        DDF0000B                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.check_right_aux>
0x001954        FD0000FF 19505A3E        M[$M.system_config.data.aux_downmix] = r3 + Null;
0x001956        0130289F                 r1 = Null + 10399;
0x001957        FD0000FF 19305909        M[0xff5909] = r1 + Null;
0x001959        DDF00005                 jump $M.frame_proc_stream_configure.wired_sub_config;

 <$M.frame_proc_stream_configure.no_aux>
0x00195A        19002A3E                 M[$M.system_config.data.uses_aux_out] = Null + Null;
0x00195B        FD0000FF 19005A1D        M[0xff5a1d] = Null + Null;
0x00195D        19002A1D                 M[0x2a1d] = Null + Null;

 <$M.frame_proc_stream_configure.wired_sub_config>
0x00195E        01400040                 r2 = Null + 64;
0x00195F        8004002F                 Null = r2 AND r0;
0x001960        DD00000B                 if EQ jump $M.frame_proc_stream_configure.no_wired_sub;
0x001961        FD0000FF 01305867        r1 = Null + -42905;
0x001963        193028B3                 M[0x28b3] = r1 + Null;
0x001964        19302615                 M[$M.system_config.data.wired_sub_channel_vol_struc] = r1 + Null;
0x001965        19302616                 M[0x2616] = r1 + Null;
0x001966        E450002F                 r3 = Null + 1;
0x001967        19502A3F                 M[$M.system_config.data.uses_wired_sub] = r3 + Null;
0x001968        01500002                 r3 = Null + 2;
0x001969        195028E2                 M[$M.system_config.data.spkr_ctrl_coefs] = r3 + Null;
0x00196A        DDF00005                 jump $M.frame_proc_stream_configure.done;

 <$M.frame_proc_stream_configure.no_wired_sub>
0x00196B        19002615                 M[$M.system_config.data.wired_sub_channel_vol_struc] = Null + Null;
0x00196C        19002616                 M[0x2616] = Null + Null;
0x00196D        19002A3F                 M[$M.system_config.data.uses_wired_sub] = Null + Null;
0x00196E        19002A19                 M[0x2a19] = Null + Null;

 <$M.frame_proc_stream_configure.done>
0x00196F        DDF0F87C                 jump $pop_rLink_and_rts;

 <$cbops.dac_av_copy_m>
0x001970        E480002F                 r6 = Null + 1;
0x001971        DDF00002                 jump $M.cbops.dac_av_copy.func;

 <$cbops.dac_av_copy>
0x001972        01800000                 r6 = Null + 0;

 <$M.cbops.dac_av_copy.func>
0x001973        F3D00000                 push rLink;
0x001974        512A0001                 I2 = r8 + 1;
0x001975        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001976        03003800                 Null = Null + Null, r1 = M[I2,0];
0x001977        FD0000FF 19305A5E        M[$M.cbops.av_copy.control_cbuffer] = r1 + Null;
0x001979        5B220000                 I2 = I2 + r0;
0x00197A        03002900                 Null = Null + Null, r0 = M[I2,1];
0x00197B        03003800                 Null = Null + Null, r1 = M[I2,0];
0x00197C        19302A5E                 M[$M.cbops.av_copy.control_port] = r1 + Null;
0x00197D        017029CC                 r5 = Null + 10700;
0x00197E        0008000F                 Null = r6 + Null;
0x00197F        DD000002                 if EQ jump $M.cbops.dac_av_copy.init_done;
0x001980        4872002F                 r5 = I2 + r0;

 <$M.cbops.dac_av_copy.init_done>
0x001981        FD0000FF 19705A5F        M[$M.cbops.dac_av_copy.dac_av_struct] = r5 + Null;
0x001983        09202A5E                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x001984        E1F0F837                 call $cbuffer.is_it_enabled;
0x001985        DD000019                 if EQ jump $M.cbops.dac_av_copy.end_of_averaging;
0x001986        FD0000FF 09205A5E        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x001988        E1F0F803                 call $cbuffer.calc_amount_data;
0x001989        19202A5F                 M[$M.cbops.dac_av_copy.buffer_level] = r0 + Null;
0x00198A        09202A5E                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x00198B        E1F0F7F0                 call $cbuffer.calc_amount_space;
0x00198C        9144007F                 r2 = r2 ASHIFT -1;
0x00198D        D1370001                 r1 = M[r5 + 1];
0x00198E        2032003F                 r1 = r0 - r1;
0x00198F        D5270001                 M[r5 + 1] = r0;
0x001990        D1270004                 r0 = M[r5 + 4];
0x001991        03320000                 r1 = r1 + r0;
0x001992        00330044                 if NEG r1 = r1 + r2;
0x001993        DD40000B                 if NEG jump $M.cbops.dac_av_copy.end_of_averaging;
0x001994        91230008                 r0 = r1 ASHIFT 8;
0x001995        D1370000                 r1 = M[r5 + 0];
0x001996        00320000                 if EQ r1 = r0 + Null;
0x001997        FD000006 95226666        r0 = r0 * 0.04999995231628418 (frac);
0x001999        FD000079 9533999A        r1 = r1 * 0.95000004768371582 (frac);
0x00199B        03320000                 r1 = r1 + r0;
0x00199C        D5370000                 M[r5 + 0] = r1;
0x00199D        DDF00001                 jump $M.cbops.dac_av_copy.end_of_averaging;

 <$M.cbops.dac_av_copy.end_of_averaging>
0x00199E        FD0000FF 19005A5D        M[$cbops.amount_written] = Null + Null;
0x0019A0        E1F0EDF1                 call $cbops.copy;
0x0019A1        FD0000FF 09705A5F        r5 = Null + M[$M.cbops.dac_av_copy.dac_av_struct];
0x0019A3        FD0000FF 09205A5D        r0 = Null + M[$cbops.amount_written];
0x0019A5        D5270004                 M[r5 + 4] = r0;
0x0019A6        09202A5E                 r0 = Null + M[$M.cbops.av_copy.control_port];
0x0019A7        E1F0F7D4                 call $cbuffer.calc_amount_space;
0x0019A8        9144007F                 r2 = r2 ASHIFT -1;
0x0019A9        2024002F                 r0 = r2 - r0;
0x0019AA        D1170000                 rMAC = M[r5 + 0];
0x0019AB        91110078                 rMAC = rMAC ASHIFT -8 (56bit);
0x0019AC        09002A5F                 Null = Null + M[$M.cbops.dac_av_copy.buffer_level];
0x0019AD        DD000005                 if EQ jump $M.cbops.dac_av_copy.zero_input_level;
0x0019AE        2091002F                 r7 = rMAC - r0;
0x0019AF        DDB0000F                 if LT jump $M.cbops.dac_av_copy.No_need_to_insert;
0x0019B0        0091000F                 r7 = rMAC + Null;
0x0019B1        DDF00003                 jump $M.cbops.dac_av_copy.update_silence_buf;

 <$M.cbops.dac_av_copy.zero_input_level>
0x0019B2        6592006E                 r7 = 110 - r0;
0x0019B3        DD40000B                 if NEG jump $M.cbops.dac_av_copy.No_need_to_insert;

 <$M.cbops.dac_av_copy.update_silence_buf>
0x0019B4        E1F00035                 call $M.cbops.dac_av_copy.fill_input_buffers_with_silence;
0x0019B5        FD0000FF 19005A5D        M[$cbops.amount_written] = Null + Null;
0x0019B7        E1F0EDDA                 call $cbops.copy;
0x0019B8        FD0000FF 09705A5F        r5 = Null + M[$M.cbops.dac_av_copy.dac_av_struct];
0x0019BA        D1270004                 r0 = M[r5 + 4];
0x0019BB        FD0000FF 09225A5D        r0 = r0 + M[$cbops.amount_written];
0x0019BD        D5270004                 M[r5 + 4] = r0;

 <$M.cbops.dac_av_copy.No_need_to_insert>
0x0019BE        FD0000FF 09205A5E        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x0019C0        E1F0F7CB                 call $cbuffer.calc_amount_data;
0x0019C1        0082000F                 r6 = r0 + Null;
0x0019C2        FD0000FF 09205A5E        r0 = Null + M[$M.cbops.av_copy.control_cbuffer];
0x0019C4        E1F0F7ED                 call $cbuffer.get_read_address_and_size;
0x0019C5        0092000F                 r7 = r0 + Null;
0x0019C6        D1570003                 r3 = M[r5 + 3];
0x0019C7        2105000A                 Null = r3 - 10;
0x0019C8        DD00000C                 if EQ jump $M.cbops.dac_av_copy.check_read_pointer_only;
0x0019C9        01500000                 r3 = Null + 0;
0x0019CA        D1470002                 r2 = M[r5 + 2];
0x0019CB        2049004F                 r2 = r7 - r2;
0x0019CC        DD100006                 if NE jump $M.cbops.dac_av_copy.reset_counter;
0x0019CD        8D43007F                 r2 = r1 LSHIFT -1;
0x0019CE        2008004F                 Null = r6 - r2;
0x0019CF        DD400003                 if NEG jump $M.cbops.dac_av_copy.reset_counter;
0x0019D0        D1570003                 r3 = M[r5 + 3];
0x0019D1        E455002F                 r3 = r3 + 1;

 <$M.cbops.dac_av_copy.reset_counter>
0x0019D2        D5570003                 M[r5 + 3] = r3;
0x0019D3        DDF00014                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.check_read_pointer_only>
0x0019D4        D1470002                 r2 = M[r5 + 2];
0x0019D5        2049004F                 r2 = r7 - r2;
0x0019D6        DD000003                 if EQ jump $M.cbops.dac_av_copy.remove_samples_from_cbuffer;
0x0019D7        D5070003                 M[r5 + 3] = Null;
0x0019D8        DDF0000F                 jump $M.cbops.dac_av_copy.remove_end;

 <$M.cbops.dac_av_copy.remove_samples_from_cbuffer>
0x0019D9        D1CA0001                 r10 = M[r8 + 1];
0x0019DA        512A0002                 I2 = r8 + 2;
0x0019DB        E5F00004                 do $M.cbops.dac_av_copy.find_amount_to_discard_loop;
0x0019DC        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0019DD        E1F0F7AE                 call $cbuffer.calc_amount_data;
0x0019DE        E482005F                 r6 = MIN r0;

 <$M.cbops.dac_av_copy.find_amount_to_discard_loop>
0x0019DF        D1BA0001                 r9 = M[r8 + 1];
0x0019E0        512A0002                 I2 = r8 + 2;

 <$M.cbops.dac_av_copy.discard_loop>
0x0019E1        E4BB003F                 r9 = r9 - 1;
0x0019E2        DD400005                 if NEG jump $M.cbops.dac_av_copy.remove_end;
0x0019E3        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0019E4        00C8000F                 r10 = r6 + Null;
0x0019E5        E1F0F735                 call $cbuffer.advance_read_ptr;
0x0019E6        DDF0FFFB                 jump $M.cbops.dac_av_copy.discard_loop;

 <$M.cbops.dac_av_copy.remove_end>
0x0019E7        D5970002                 M[r5 + 2] = r7;
0x0019E8        DDF0F803                 jump $pop_rLink_and_rts;

 <$M.cbops.dac_av_copy.fill_input_buffers_with_silence>
0x0019E9        F3D00000                 push rLink;
0x0019EA        D1CA0001                 r10 = M[r8 + 1];
0x0019EB        512A0002                 I2 = r8 + 2;
0x0019EC        E5F00006                 do $M.cbops.dac_av_copy.find_min_space_loop;
0x0019ED        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0019EE        E1F0F79D                 call $cbuffer.calc_amount_data;
0x0019EF        65220078                 r0 = 120 - r0;
0x0019F0        00200004                 if NEG r0 = Null + Null;
0x0019F1        E492005F                 r7 = MIN r0;

 <$M.cbops.dac_av_copy.find_min_space_loop>
0x0019F2        0009000F                 Null = r7 + Null;
0x0019F3        DD00F7F8                 if EQ jump $pop_rLink_and_rts;
0x0019F4        D16A0001                 r4 = M[r8 + 1];
0x0019F5        512A0002                 I2 = r8 + 2;

 <$M.cbops.dac_av_copy.silence_insert_loop>
0x0019F6        03002800                 Null = Null + Null, r0 = M[I2,0];
0x0019F7        E1F0F7BA                 call $cbuffer.get_read_address_and_size;
0x0019F8        5000002F                 I0 = Null + r0;
0x0019F9        50C0003F                 L0 = Null + r1;
0x0019FA        E4C9003F                 r10 = r7 - 1;
0x0019FB        03002300                 Null = Null + Null, r0 = M[I0,-1];
0x0019FC        01200000                 r0 = Null + 0;
0x0019FD        E5F00002                 do $M.cbops.dac_av_copy.insert_silence_loop;
0x0019FE        0300A300                 Null = Null + Null, M[I0,-1] = r0;

 <$M.cbops.dac_av_copy.insert_silence_loop>
0x0019FF        0300A000                 Null = Null + Null, M[I0,0] = r0;
0x001A00        03002900                 Null = Null + Null, r0 = M[I2,1];
0x001A01        4430000F                 r1 = Null + I0;
0x001A02        E1F0F7C3                 call $cbuffer.set_read_address;
0x001A03        E466003F                 r4 = r4 - 1;
0x001A04        DDC0FFF2                 if GT jump $M.cbops.dac_av_copy.silence_insert_loop;
0x001A05        51C00000                 L0 = Null + 0;
0x001A06        DDF0F7E5                 jump $pop_rLink_and_rts;

 <$sbcdec.frame_decode>
0x001A07        F3D00000                 push rLink;
0x001A08        1970004B                 M[$sbcdec.codec_struc] = r5 + Null;
0x001A09        D1B70005                 r9 = M[r5 + 5];

 <$M.sbcdec.frame_decode.reattempt_decode>
0x001A0A        0970004B                 r5 = Null + M[$sbcdec.codec_struc];
0x001A0B        D1270000                 r0 = M[r5 + 0];
0x001A0C        E1F0F7A5                 call $cbuffer.get_read_address_and_size;
0x001A0D        5000002F                 I0 = Null + r0;
0x001A0E        50C0003F                 L0 = Null + r1;
0x001A0F        D1270000                 r0 = M[r5 + 0];
0x001A10        E1F0F77B                 call $cbuffer.calc_amount_data;
0x001A11        00C2002F                 r10 = r0 + r0;
0x001A12        21CC0002                 r10 = r10 - 2;
0x001A13        DDD0001D                 if LE jump $M.sbcdec.frame_decode.buffer_underflow;
0x001A14        006C000F                 r4 = r10 + Null;
0x001A15        E1F004EE                 call $sbcdec.find_sync;
0x001A16        21080063                 Null = r6 - 99;
0x001A17        DD000019                 if EQ jump $M.sbcdec.frame_decode.buffer_underflow;
0x001A18        236C0000                 r4 = r4 - r10;
0x001A19        D1270003                 r0 = M[r5 + 3];
0x001A1A        21020002                 Null = r0 - 2;
0x001A1B        DD00000F                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x001A1C        D1270001                 r0 = M[r5 + 1];
0x001A1D        DD000005                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001A1E        E1F0F75D                 call $cbuffer.calc_amount_space;
0x001A1F        21020080                 Null = r0 - 128;
0x001A20        DD500002                 if POS jump $M.sbcdec.frame_decode.enough_output_space_left;
0x001A21        DDF00006                 jump $M.sbcdec.frame_decode.not_enough_data_exit;

 <$M.sbcdec.frame_decode.enough_output_space_left>
0x001A22        D1270002                 r0 = M[r5 + 2];
0x001A23        DD000007                 if EQ jump $M.sbcdec.frame_decode.enough_output_space_right;
0x001A24        E1F0F757                 call $cbuffer.calc_amount_space;
0x001A25        21020080                 Null = r0 - 128;
0x001A26        DD500004                 if POS jump $M.sbcdec.frame_decode.enough_output_space_right;

 <$M.sbcdec.frame_decode.not_enough_data_exit>
0x001A27        01200002                 r0 = Null + 2;
0x001A28        D5270003                 M[r5 + 3] = r0;
0x001A29        DDF00058                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.enough_output_space_right>
0x001A2A        D1270000                 r0 = M[r5 + 0];
0x001A2B        E1F0F760                 call $cbuffer.calc_amount_data;
0x001A2C        03220000                 r0 = r0 + r0;
0x001A2D        23260000                 r0 = r0 - r4;
0x001A2E        21020016                 Null = r0 - 22;
0x001A2F        DD500008                 if POS jump $M.sbcdec.frame_decode.no_buffer_underflow;

 <$M.sbcdec.frame_decode.buffer_underflow>
0x001A30        0970004B                 r5 = Null + M[$sbcdec.codec_struc];
0x001A31        E420002F                 r0 = Null + 1;
0x001A32        D5270003                 M[r5 + 3] = r0;
0x001A33        D1270000                 r0 = M[r5 + 0];
0x001A34        4430000F                 r1 = Null + I0;
0x001A35        E1F0F790                 call $cbuffer.set_read_address;
0x001A36        DDF0004B                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.no_buffer_underflow>
0x001A37        D52B0037                 M[r9 + 55] = r0;
0x001A38        E1F0016C                 call $sbcdec.read_frame_header;
0x001A39        D12B0039                 r0 = M[r9 + 57];
0x001A3A        D13B0037                 r1 = M[r9 + 55];
0x001A3B        2002003F                 Null = r0 - r1;
0x001A3C        DDD00004                 if LE jump $M.sbcdec.frame_decode.enough_frame_data;
0x001A3D        5802000F                 I0 = I2 + Null;
0x001A3E        D58B003B                 M[r9 + 59] = r6;
0x001A3F        DDF0FFF1                 jump $M.sbcdec.frame_decode.buffer_underflow;

 <$M.sbcdec.frame_decode.enough_frame_data>
0x001A40        D10B0036                 Null = M[r9 + 54];
0x001A41        DD100007                 if NE jump $M.sbcdec.frame_decode.crc_fail_or_corrupt;
0x001A42        E1F00514                 call $sbcdec.read_scale_factors;
0x001A43        D12B0023                 r0 = M[r9 + 35];
0x001A44        D13B0024                 r1 = M[r9 + 36];
0x001A45        23230000                 r0 = r0 - r1;
0x001A46        812200FF                 r0 = r0 AND 0xff;
0x001A47        DD00000B                 if EQ jump $M.sbcdec.frame_decode.crc_correct;

 <$M.sbcdec.frame_decode.crc_fail_or_corrupt>
0x001A48        0970004B                 r5 = Null + M[$sbcdec.codec_struc];
0x001A49        4430000F                 r1 = Null + I0;
0x001A4A        D1270000                 r0 = M[r5 + 0];
0x001A4B        E1F0F77A                 call $cbuffer.set_read_address;
0x001A4C        51C00000                 L0 = Null + 0;
0x001A4D        D12B003A                 r0 = M[r9 + 58];
0x001A4E        DD00FFBC                 if EQ jump $M.sbcdec.frame_decode.reattempt_decode;
0x001A4F        01200005                 r0 = Null + 5;
0x001A50        D5270003                 M[r5 + 3] = r0;
0x001A51        DDF00030                 jump $M.sbcdec.frame_decode.exit;

 <$M.sbcdec.frame_decode.crc_correct>
0x001A52        E1F0FC31                 call $sbc.calc_bit_allocation;
0x001A53        E1F0048B                 call $sbcdec.read_audio_samples;
0x001A54        E1F0054C                 call $sbcdec.byte_align;
0x001A55        0970004B                 r5 = Null + M[$sbcdec.codec_struc];
0x001A56        4430000F                 r1 = Null + I0;
0x001A57        D1270000                 r0 = M[r5 + 0];
0x001A58        E1F0F76D                 call $cbuffer.set_read_address;
0x001A59        51C00000                 L0 = Null + 0;
0x001A5A        D1270003                 r0 = M[r5 + 3];
0x001A5B        21020000                 Null = r0 - 0;
0x001A5C        DD10001F                 if NE jump $M.sbcdec.frame_decode.all_done;
0x001A5D        E1F0029E                 call $sbcdec.sample_reconstruction;
0x001A5E        D12B001E                 r0 = M[r9 + 30];
0x001A5F        21020003                 Null = r0 - 3;
0x001A60        E10003B4                 if EQ call $sbcdec.joint_stereo_decode;
0x001A61        0970004B                 r5 = Null + M[$sbcdec.codec_struc];
0x001A62        D1270001                 r0 = M[r5 + 1];
0x001A63        DD00000B                 if EQ jump $M.sbcdec.frame_decode.no_left_buffer;
0x001A64        E1F0F752                 call $cbuffer.get_write_address_and_size;
0x001A65        5010002F                 I1 = Null + r0;
0x001A66        50D0003F                 L1 = Null + r1;
0x001A67        01700000                 r5 = Null + 0;
0x001A68        E1F0008D                 call $sbcdec.synthesis_subband_filter;
0x001A69        0970004B                 r5 = Null + M[$sbcdec.codec_struc];
0x001A6A        4430001F                 r1 = Null + I1;
0x001A6B        D1270001                 r0 = M[r5 + 1];
0x001A6C        E1F0F75D                 call $cbuffer.set_write_address;
0x001A6D        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.no_left_buffer>
0x001A6E        0970004B                 r5 = Null + M[$sbcdec.codec_struc];
0x001A6F        D1270002                 r0 = M[r5 + 2];
0x001A70        DD00000B                 if EQ jump $M.sbcdec.frame_decode.all_done;
0x001A71        E1F0F745                 call $cbuffer.get_write_address_and_size;
0x001A72        5010002F                 I1 = Null + r0;
0x001A73        50D0003F                 L1 = Null + r1;
0x001A74        E470002F                 r5 = Null + 1;
0x001A75        E1F00080                 call $sbcdec.synthesis_subband_filter;
0x001A76        0970004B                 r5 = Null + M[$sbcdec.codec_struc];
0x001A77        4430001F                 r1 = Null + I1;
0x001A78        D1270002                 r0 = M[r5 + 2];
0x001A79        E1F0F750                 call $cbuffer.set_write_address;
0x001A7A        51D00000                 L1 = Null + 0;

 <$M.sbcdec.frame_decode.all_done>
0x001A7B        01200000                 r0 = Null + 0;
0x001A7C        D5270003                 M[r5 + 3] = r0;
0x001A7D        D12B001D                 r0 = M[r9 + 29];
0x001A7E        D13B0021                 r1 = M[r9 + 33];
0x001A7F        9B230000                 r0 = r0 * r1 (int);
0x001A80        D5270004                 M[r5 + 4] = r0;

 <$M.sbcdec.frame_decode.exit>
0x001A81        51C00000                 L0 = Null + 0;
0x001A82        DDF0F769                 jump $pop_rLink_and_rts;

 <$codec.av_decode>
0x001A83        F3D00000                 push rLink;
0x001A84        FD0000FF 19705A63        M[$M.codec_av_decode.data_ptr] = r5 + Null;
0x001A86        E420002F                 r0 = Null + 1;
0x001A87        D5270006                 M[r5 + 6] = r0;
0x001A88        0980FE71                 r6 = Null + M[0xfffe71];
0x001A89        D1270013                 r0 = M[r5 + 19];
0x001A8A        D5870013                 M[r5 + 19] = r6;
0x001A8B        23820000                 r6 = r6 - r0;
0x001A8C        20800084                 if NEG r6 = Null - r6;
0x001A8D        D1270003                 r0 = M[r5 + 3];
0x001A8E        E1F0F728                 call $cbuffer.get_write_address_and_size;
0x001A8F        D137000F                 r1 = M[r5 + 15];
0x001A90        D527000F                 M[r5 + 15] = r0;
0x001A91        FD00007F 0110FFFF        rMAC = Null + 8388607;
0x001A93        D1570010                 r3 = M[r5 + 16];
0x001A94        0045008F                 r2 = r3 + r6;
0x001A95        00410006                 if V r2 = rMAC + Null;
0x001A96        2093002F                 r7 = r1 - r0;
0x001A97        00400001                 if NE r2 = Null + Null;
0x001A98        D5470010                 M[r5 + 16] = r2;
0x001A99        D107000D                 Null = M[r5 + 13];
0x001A9A        DD000007                 if EQ jump $M.codec_av_decode.no_pause_handling;
0x001A9B        FD000002 210449F0        Null = r2 - 150000;
0x001A9D        DD400004                 if NEG jump $M.codec_av_decode.no_pause_handling;
0x001A9E        FD000002 210549F0        Null = r3 - 150000;
0x001AA0        DD40003B                 if NEG jump $M.codec_av_decode.cleare_buffers;

 <$M.codec_av_decode.no_pause_handling>
0x001AA1        D1070011                 Null = M[r5 + 17];
0x001AA2        DD100023                 if NE jump $M.codec_av_decode.decoding_proc;

 <$M.codec_av_decode.process_stalled>
0x001AA3        E420002F                 r0 = Null + 1;
0x001AA4        D1370012                 r1 = M[r5 + 18];
0x001AA5        0004000F                 Null = r2 + Null;
0x001AA6        00320000                 if EQ r1 = r0 + Null;
0x001AA7        D5370012                 M[r5 + 18] = r1;
0x001AA8        DD000013                 if EQ jump $M.codec_av_decode.check_buf_level;
0x001AA9        FD000001 21041170        Null = r2 - 70000;
0x001AAB        DD400005                 if NEG jump $M.codec_av_decode.check_stall_time;
0x001AAC        FD000001 21051170        Null = r3 - 70000;
0x001AAE        DD400014                 if NEG jump $M.codec_av_decode.switchto_decode;
0x001AAF        DDF0000C                 jump $M.codec_av_decode.check_buf_level;

 <$M.codec_av_decode.check_stall_time>
0x001AB0        D1570014                 r3 = M[r5 + 20];
0x001AB1        DD100005                 if NE jump $M.codec_av_decode.update_stall_timer;
0x001AB2        0009000F                 Null = r7 + Null;
0x001AB3        E4550021                 if NE r3 = r3 + 1;
0x001AB4        D5570014                 M[r5 + 20] = r3;
0x001AB5        DDF00006                 jump $M.codec_av_decode.check_buf_level;

 <$M.codec_av_decode.update_stall_timer>
0x001AB6        0045008F                 r2 = r3 + r6;
0x001AB7        D5470014                 M[r5 + 20] = r2;
0x001AB8        FD000002 210422E0        Null = r2 - 140000;
0x001ABA        DD500008                 if POS jump $M.codec_av_decode.switchto_decode;

 <$M.codec_av_decode.check_buf_level>
0x001ABB        D1270003                 r0 = M[r5 + 3];
0x001ABC        D1620000                 r4 = M[r0 + 0];
0x001ABD        E1F0F6CE                 call $cbuffer.calc_amount_data;
0x001ABE        D147000B                 r2 = M[r5 + 11];
0x001ABF        97460000                 r2 = r2 * r4 (frac);
0x001AC0        2002004F                 Null = r0 - r2;
0x001AC1        DD400033                 if NEG jump $M.codec_av_decode.end;

 <$M.codec_av_decode.switchto_decode>
0x001AC2        D5070012                 M[r5 + 18] = Null;
0x001AC3        E430002F                 r1 = Null + 1;
0x001AC4        D5370011                 M[r5 + 17] = r1;

 <$M.codec_av_decode.decoding_proc>
0x001AC5        D5070014                 M[r5 + 20] = Null;
0x001AC6        01200000                 r0 = Null + 0;
0x001AC7        D5270006                 M[r5 + 6] = r0;
0x001AC8        D1270000                 r0 = M[r5 + 0];
0x001AC9        01770003                 r5 = r5 + 3;
0x001ACA        E002000F                 call r0;
0x001ACB        FD0000FF 09705A63        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001ACD        D1370010                 r1 = M[r5 + 16];
0x001ACE        D1270006                 r0 = M[r5 + 6];
0x001ACF        21020000                 Null = r0 - 0;
0x001AD0        DD100003                 if NE jump $M.codec_av_decode.check_not_enough_input_data;
0x001AD1        00300000                 if EQ r1 = Null + Null;
0x001AD2        D5370010                 M[r5 + 16] = r1;

 <$M.codec_av_decode.check_not_enough_input_data>
0x001AD3        D1270006                 r0 = M[r5 + 6];
0x001AD4        E402003F                 Null = r0 - 1;
0x001AD5        DD10001F                 if NE jump $M.codec_av_decode.end;
0x001AD6        D1370010                 r1 = M[r5 + 16];
0x001AD7        D127000A                 r0 = M[r5 + 10];
0x001AD8        2003002F                 Null = r1 - r0;
0x001AD9        DD50001A                 if POS jump $M.codec_av_decode.switchto_stall;
0x001ADA        DDF0001A                 jump $M.codec_av_decode.end;

 <$M.codec_av_decode.cleare_buffers>
0x001ADB        D5070014                 M[r5 + 20] = Null;
0x001ADC        E1F0F6C7                 call $block_interrupts;
0x001ADD        D1370003                 r1 = M[r5 + 3];
0x001ADE        D1230002                 r0 = M[r1 + 2];
0x001ADF        D5230001                 M[r1 + 1] = r0;
0x001AE0        D527000F                 M[r5 + 15] = r0;
0x001AE1        D1370004                 r1 = M[r5 + 4];
0x001AE2        D1230001                 r0 = M[r1 + 1];
0x001AE3        D5230002                 M[r1 + 2] = r0;
0x001AE4        D1370005                 r1 = M[r5 + 5];
0x001AE5        D1230001                 r0 = M[r1 + 1];
0x001AE6        D5230002                 M[r1 + 2] = r0;
0x001AE7        01770003                 r5 = r5 + 3;
0x001AE8        D127FFFE                 r0 = M[r5 + -2];
0x001AE9        E0020001                 if NE call r0;
0x001AEA        FD0000FF 09705A63        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001AEC        D127000E                 r0 = M[r5 + 14];
0x001AED        E0020001                 if NE call r0;
0x001AEE        FD0000FF 09705A63        r5 = Null + M[$M.codec_av_decode.data_ptr];
0x001AF0        E420002F                 r0 = Null + 1;
0x001AF1        19202A64                 M[$master_reset_needed] = r0 + Null;
0x001AF2        E1F0F6A1                 call $interrupt.unblock;

 <$M.codec_av_decode.switchto_stall>
0x001AF3        D5070011                 M[r5 + 17] = Null;

 <$M.codec_av_decode.end>
0x001AF4        DDF0F6F7                 jump $pop_rLink_and_rts;

 <$sbcdec.synthesis_subband_filter>
0x001AF5        F3D00000                 push rLink;
0x001AF6        D13B0021                 r1 = M[r9 + 33];
0x001AF7        5080003F                 M0 = Null + r1;
0x001AF8        D14B001F                 r2 = M[r9 + 31];
0x001AF9        9854003F                 r3 = r2 * r1 (int);
0x001AFA        E455003F                 r3 = r3 - 1;
0x001AFB        9823007F                 r0 = r1 * r5 (int);
0x001AFC        E404003F                 Null = r2 - 1;
0x001AFD        00200000                 if EQ r0 = Null + Null;
0x001AFE        D16B0014                 r4 = M[r9 + 20];
0x001AFF        5022006F                 I2 = r0 + r4;
0x001B00        012B003C                 r0 = r9 + 60;
0x001B01        D027002F                 r0 = M[r5 + r0];
0x001B02        5000002F                 I0 = Null + r0;
0x001B03        D16B001D                 r4 = M[r9 + 29];
0x001B04        69080004                 Null = M0 - 4;
0x001B05        DD000020                 if EQ jump $M.sbcdec.synthesis_subband_filter.M_equals_4;
0x001B06        51C000A0                 L0 = Null + 160;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M8>
0x001B07        D12B0015                 r0 = M[r9 + 21];
0x001B08        5040002F                 I4 = Null + r0;
0x001B09        D12B002E                 r0 = M[r9 + 46];
0x001B0A        5050002F                 I5 = Null + r0;
0x001B0B        51900001                 M1 = Null + 1;
0x001B0C        51A0FFF0                 M2 = Null + -16;
0x001B0D        51B0FFF9                 M3 = Null + -7;
0x001B0E        4CC8008F                 r10 = M0 + M0;
0x001B0F        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x001B10        E5F0000A                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M8;
0x001B11        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B12        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B13        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B14        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B15        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B16        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B17        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x001B18        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B19        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M8>
0x001B1A        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001B1B        5B250000                 I2 = I2 + r3;
0x001B1C        51900018                 M1 = Null + 24;
0x001B1D        51A0FFB9                 M2 = Null + -71;
0x001B1E        51B0FF69                 M3 = Null + -151;
0x001B1F        E1F00025                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x001B20        5190FFD0                 M1 = Null + -48;
0x001B21        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x001B22        E466003F                 r4 = r4 - 1;
0x001B23        DD10FFE4                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M8;
0x001B24        DDF0001B                 jump $M.sbcdec.synthesis_subband_filter.all_done;

 <$M.sbcdec.synthesis_subband_filter.M_equals_4>
0x001B25        51C00050                 L0 = Null + 80;

 <$M.sbcdec.synthesis_subband_filter.block_loop_M4>
0x001B26        D12B0016                 r0 = M[r9 + 22];
0x001B27        5040002F                 I4 = Null + r0;
0x001B28        D12B002F                 r0 = M[r9 + 47];
0x001B29        5050002F                 I5 = Null + r0;
0x001B2A        51900001                 M1 = Null + 1;
0x001B2B        51A0FFF8                 M2 = Null + -8;
0x001B2C        51B0FFFD                 M3 = Null + -3;
0x001B2D        4CC8008F                 r10 = M0 + M0;
0x001B2E        03002935                 Null = Null + Null, r0 = M[I2,1], r1 = M[I5,1];
0x001B2F        E5F00006                 do $M.sbcdec.synthesis_subband_filter.matrix_loop_M4;
0x001B30        CF232935                 rMAC = r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B31        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B32        AE232B35                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,M3], r1 = M[I5,M1];
0x001B33        AF232935                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I2,1], r1 = M[I5,1];
0x001B34        03009100                 Null = Null + Null, M[I0,1] = rMAC;

 <$M.sbcdec.synthesis_subband_filter.matrix_loop_M4>
0x001B35        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001B36        5B250000                 I2 = I2 + r3;
0x001B37        5190000C                 M1 = Null + 12;
0x001B38        51A0FFDD                 M2 = Null + -35;
0x001B39        51B0FFB5                 M3 = Null + -75;
0x001B3A        E1F0000A                 call $M.sbcdec.synthesis_subband_filter.output_code;
0x001B3B        5190FFE8                 M1 = Null + -24;
0x001B3C        02002100                 Null = Null + Null, r0 = M[I0,M1];
0x001B3D        E466003F                 r4 = r4 - 1;
0x001B3E        DD10FFE8                 if NE jump $M.sbcdec.synthesis_subband_filter.block_loop_M4;

 <$M.sbcdec.synthesis_subband_filter.all_done>
0x001B3F        4420000F                 r0 = Null + I0;
0x001B40        016B003C                 r4 = r9 + 60;
0x001B41        D427006F                 M[r5 + r4] = r0;
0x001B42        51C00000                 L0 = Null + 0;
0x001B43        DDF0F6A8                 jump $pop_rLink_and_rts;

 <$M.sbcdec.synthesis_subband_filter.output_code>
0x001B44        44C0008F                 r10 = Null + M0;
0x001B45        02002130                 Null = Null + Null, r0 = M[I0,M1], r1 = M[I4,M0];
0x001B46        E5F0000D                 do $M.sbcdec.synthesis_subband_filter.output_loop;
0x001B47        CE232030                 rMAC = r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001B48        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001B49        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001B4A        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001B4B        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001B4C        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001B4D        AE232030                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M0], r1 = M[I4,M0];
0x001B4E        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001B4F        AE232332                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M3], r1 = M[I4,M2];
0x001B50        AE232130                 rMAC = rMAC + r0 * r1 (SS), r0 = M[I0,M1], r1 = M[I4,M0];
0x001B51        9D41FFFC                 r2 = rMAC * -4 (int) (sat);
0x001B52        0300C500                 Null = Null + Null, M[I1,1] = r2;

 <$M.sbcdec.synthesis_subband_filter.output_loop>
0x001B53        DC0D000F                 rts;

 <$M.music_example_message.MainVolume.update_volumes>
0x001B54        F3D00000                 push rLink;
0x001B55        5000005F                 I0 = Null + r3;
0x001B56        19502A25                 M[$M.music_example_message.MainVolume.temp_msg_ptr] = r3 + Null;
0x001B57        03006100                 Null = Null + Null, r4 = M[I0,1];
0x001B58        FD0000FF 09005A24        Null = Null + M[$multichannel_vol_msg_echo];
0x001B5A        DD000004                 if EQ jump $M.music_example_message.MainVolume.no_system_vol;
0x001B5B        8166000F                 r4 = r4 AND 0xf;
0x001B5C        FD0000FF 19605A32        M[$music_example.SystemVolume] = r4 + Null;

 <$M.music_example_message.MainVolume.no_system_vol>
0x001B5E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001B5F        0002000F                 Null = r0 + Null;
0x001B60        00200005                 if POS r0 = Null + Null;
0x001B61        19202A35                 M[$music_example.Main.MasterVolume] = r0 + Null;
0x001B62        E1F00425                 call $M.music_example_message.vmdB2vol;
0x001B63        91220002                 r0 = r0 ASHIFT 2;
0x001B64        192025FA                 M[0x25fa] = r0 + Null;
0x001B65        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001B66        0002000F                 Null = r0 + Null;
0x001B67        00200005                 if POS r0 = Null + Null;
0x001B68        FD0000FF 19205A35        M[$music_example.Main.ToneVolume] = r0 + Null;
0x001B6A        E1F0041D                 call $M.music_example_message.vmdB2vol;
0x001B6B        91520003                 r3 = r0 ASHIFT 3;
0x001B6C        E1F01BDD                 call $multi_chan_set_prim_tone_mix_ratio;
0x001B6D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001B6E        213202D2                 r1 = r0 - 722;
0x001B6F        20220035                 if POS r0 = r0 - r1;
0x001B70        2132FD2E                 r1 = r0 - -722;
0x001B71        20220034                 if NEG r0 = r0 - r1;
0x001B72        19202A36                 M[$music_example.Main.PrimaryLeftTrimVolume] = r0 + Null;
0x001B73        E1F00414                 call $M.music_example_message.vmdB2vol;
0x001B74        19202603                 M[0x2603] = r0 + Null;
0x001B75        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001B76        213202D2                 r1 = r0 - 722;
0x001B77        20220035                 if POS r0 = r0 - r1;
0x001B78        2132FD2E                 r1 = r0 - -722;
0x001B79        20220034                 if NEG r0 = r0 - r1;
0x001B7A        FD0000FF 19205A36        M[$music_example.Main.PrimaryRightTrimVolume] = r0 + Null;
0x001B7C        E1F0040B                 call $M.music_example_message.vmdB2vol;
0x001B7D        19202608                 M[0x2608] = r0 + Null;
0x001B7E        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001B7F        213202D2                 r1 = r0 - 722;
0x001B80        20220035                 if POS r0 = r0 - r1;
0x001B81        2132FD2E                 r1 = r0 - -722;
0x001B82        20220034                 if NEG r0 = r0 - r1;
0x001B83        19202A37                 M[$music_example.Main.SecondaryLeftTrimVolume] = r0 + Null;
0x001B84        E1F00403                 call $M.music_example_message.vmdB2vol;
0x001B85        1920260D                 M[0x260d] = r0 + Null;
0x001B86        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001B87        213202D2                 r1 = r0 - 722;
0x001B88        20220035                 if POS r0 = r0 - r1;
0x001B89        2132FD2E                 r1 = r0 - -722;
0x001B8A        20220034                 if NEG r0 = r0 - r1;
0x001B8B        FD0000FF 19205A37        M[$music_example.Main.SecondaryRightTrimVolume] = r0 + Null;
0x001B8D        E1F003FA                 call $M.music_example_message.vmdB2vol;
0x001B8E        19202612                 M[0x2612] = r0 + Null;
0x001B8F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001B90        213202D2                 r1 = r0 - 722;
0x001B91        20220035                 if POS r0 = r0 - r1;
0x001B92        2132FD2E                 r1 = r0 - -722;
0x001B93        20220034                 if NEG r0 = r0 - r1;
0x001B94        19202A38                 M[$music_example.Main.SubTrimVolume] = r0 + Null;
0x001B95        E1F003F2                 call $M.music_example_message.vmdB2vol;
0x001B96        19202617                 M[0x2617] = r0 + Null;
0x001B97        FD0000FF 09005A24        Null = Null + M[$multichannel_vol_msg_echo];
0x001B99        DD000005                 if EQ jump $M.music_example_message.MainVolume.done;
0x001B9A        09702A25                 r5 = Null + M[$M.music_example_message.MainVolume.temp_msg_ptr];
0x001B9B        01600008                 r4 = Null + 8;
0x001B9C        0150715A                 r3 = Null + 29018;
0x001B9D        E1F0F15E                 call $message.send_long;

 <$M.music_example_message.MainVolume.done>
0x001B9E        DDF0F64D                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume.func>
0x001B9F        F3D00000                 push rLink;
0x001BA0        E1F0FFB4                 call $M.music_example_message.MainVolume.update_volumes;

 <$M.music_example_message.MainVolume.volume_msg_done>
0x001BA1        DDF0F64A                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MainVolume.tws_func>
0x001BA2        F3D00000                 push rLink;
0x001BA3        E1F0FFB1                 call $M.music_example_message.MainVolume.update_volumes;

 <$sbcdec.read_frame_header>
0x001BA4        F3D00000                 push rLink;
0x001BA5        D50B0036                 M[r9 + 54] = Null;
0x001BA6        E1F00253                 call $sbcdec.get1byte;
0x001BA7        0120000F                 r0 = Null + 15;
0x001BA8        D52B0024                 M[r9 + 36] = r0;
0x001BA9        E1F00254                 call $sbcdec.get2bits;
0x001BAA        E1F003D0                 call $sbc.crc_calc;
0x001BAB        D53B001C                 M[r9 + 28] = r1;
0x001BAC        E1F00251                 call $sbcdec.get2bits;
0x001BAD        E1F003CD                 call $sbc.crc_calc;
0x001BAE        99330004                 r1 = r1 * 4 (int);
0x001BAF        01330004                 r1 = r1 + 4;
0x001BB0        D53B001D                 M[r9 + 29] = r1;
0x001BB1        E1F0024C                 call $sbcdec.get2bits;
0x001BB2        E1F003C8                 call $sbc.crc_calc;
0x001BB3        E420002F                 r0 = Null + 1;
0x001BB4        D53B001E                 M[r9 + 30] = r1;
0x001BB5        00220021                 if NE r0 = r0 + r0;
0x001BB6        D52B001F                 M[r9 + 31] = r0;
0x001BB7        E1F00248                 call $sbcdec.get1bit;
0x001BB8        E1F003C2                 call $sbc.crc_calc;
0x001BB9        D53B0020                 M[r9 + 32] = r1;
0x001BBA        E1F00245                 call $sbcdec.get1bit;
0x001BBB        E1F003BF                 call $sbc.crc_calc;
0x001BBC        99330004                 r1 = r1 * 4 (int);
0x001BBD        01330004                 r1 = r1 + 4;
0x001BBE        D12B0021                 r0 = M[r9 + 33];
0x001BBF        2003002F                 Null = r1 - r0;
0x001BC0        E1100350                 if NE call $sbcdec.silence_decoder;
0x001BC1        D53B0021                 M[r9 + 33] = r1;
0x001BC2        E1F00237                 call $sbcdec.get1byte;
0x001BC3        E1F003B7                 call $sbc.crc_calc;
0x001BC4        D53B0022                 M[r9 + 34] = r1;
0x001BC5        D14B0021                 r2 = M[r9 + 33];
0x001BC6        99440010                 r2 = r2 * 16 (int);
0x001BC7        D12B001E                 r0 = M[r9 + 30];
0x001BC8        21020002                 Null = r0 - 2;
0x001BC9        00440045                 if POS r2 = r2 + r2;
0x001BCA        212400FA                 r0 = r2 - 250;
0x001BCB        2044002C                 if GT r2 = r2 - r0;
0x001BCC        2004003F                 Null = r2 - r1;
0x001BCD        DD400017                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x001BCE        21030002                 Null = r1 - 2;
0x001BCF        DD400015                 if NEG jump $M.sbcdec.read_frame_header.corrupt_frame_error;
0x001BD0        E1F00229                 call $sbcdec.get1byte;
0x001BD1        D53B0023                 M[r9 + 35] = r1;
0x001BD2        D13B001E                 r1 = M[r9 + 30];
0x001BD3        21030003                 Null = r1 - 3;
0x001BD4        DD10000D                 if NE jump $M.sbcdec.read_frame_header.not_jointstereo;
0x001BD5        D1AB0021                 r8 = M[r9 + 33];
0x001BD6        E4AA003F                 r8 = r8 - 1;
0x001BD7        511B0026                 I1 = r9 + 38;

 <$M.sbcdec.read_frame_header.join_loop>
0x001BD8        E1F00227                 call $sbcdec.get1bit;
0x001BD9        E1F003A1                 call $sbc.crc_calc;
0x001BDA        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x001BDB        E4AA003F                 r8 = r8 - 1;
0x001BDC        DD10FFFC                 if NE jump $M.sbcdec.read_frame_header.join_loop;
0x001BDD        01200000                 r0 = Null + 0;
0x001BDE        0300A400                 Null = Null + Null, M[I1,0] = r0;
0x001BDF        E1F00220                 call $sbcdec.get1bit;
0x001BE0        E1F0039A                 call $sbc.crc_calc;

 <$M.sbcdec.read_frame_header.not_jointstereo>
0x001BE1        E1F0030F                 call $sbc.calc_frame_length;
0x001BE2        D52B0039                 M[r9 + 57] = r0;
0x001BE3        DDF0F608                 jump $pop_rLink_and_rts;

 <$M.sbcdec.read_frame_header.corrupt_frame_error>
0x001BE4        E420002F                 r0 = Null + 1;
0x001BE5        D52B0036                 M[r9 + 54] = r0;
0x001BE6        DDF0F605                 jump $pop_rLink_and_rts;

 <$Set_Mode>
0x001BE7        F3D00000                 push rLink;
0x001BE8        FD0000FF 095058BD        r3 = Null + M[$music_example.CurMode];
0x001BEA        21050000                 Null = r3 - 0;
0x001BEB        DD000005                 if EQ jump $M.set_mode_gains.standby_gains;
0x001BEC        FD00007F 0130FFFF        r1 = Null + 8388607;
0x001BEE        0040000F                 r2 = Null + Null;
0x001BEF        DDF00003                 jump $M.set_mode_gains.continue;

 <$M.set_mode_gains.standby_gains>
0x001BF0        0030000F                 r1 = Null + Null;
0x001BF1        E440002F                 r2 = Null + 1;

 <$M.set_mode_gains.continue>
0x001BF2        09502A50                 r3 = Null + M[$M.multi_chan_port_scan_and_routing_config.fp_config_input];
0x001BF3        D1550000                 r3 = M[r3 + 0];
0x001BF4        01600001                 r4 = Null + 1;
0x001BF5        8005006F                 Null = r3 AND r4;
0x001BF6        DD00000B                 if EQ jump $M.set_mode_gains.no_pri_left;
0x001BF7        FD0000FF 01205840        r0 = Null + -42944;
0x001BF9        192029D6                 M[0x29d6] = r0 + Null;
0x001BFA        D5390000                 M[r7 + 0] = r1;
0x001BFB        D5490001                 M[r7 + 1] = r2;
0x001BFC        F1000238                 pushm <r1, r2, r3, r7>;
0x001BFD        019029D5                 r7 = Null + 10709;
0x001BFE        01A00000                 r8 = Null + 0;
0x001BFF        E1F0EFB2                 call $M.audio_proc.stream_gain.Process.func;
0x001C00        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_pri_left>
0x001C01        01600002                 r4 = Null + 2;
0x001C02        8005006F                 Null = r3 AND r4;
0x001C03        DD00000C                 if EQ jump $M.set_mode_gains.no_pri_right;
0x001C04        01202885                 r0 = Null + 10373;
0x001C05        FD0000FF 192059AF        M[0xff59af] = r0 + Null;
0x001C07        D5390002                 M[r7 + 2] = r1;
0x001C08        D5490003                 M[r7 + 3] = r2;
0x001C09        F1000238                 pushm <r1, r2, r3, r7>;
0x001C0A        FD0000FF 019059AE        r7 = Null + -42578;
0x001C0C        01A00000                 r8 = Null + 0;
0x001C0D        E1F0EFA4                 call $M.audio_proc.stream_gain.Process.func;
0x001C0E        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_pri_right>
0x001C0F        01600040                 r4 = Null + 64;
0x001C10        8006005F                 Null = r4 AND r3;
0x001C11        DD00000B                 if EQ jump $M.set_mode_gains.no_wired_sub;
0x001C12        FD0000FF 01205867        r0 = Null + -42905;
0x001C14        192029DA                 M[0x29da] = r0 + Null;
0x001C15        D539000C                 M[r7 + 12] = r1;
0x001C16        D549000D                 M[r7 + 13] = r2;
0x001C17        F1000238                 pushm <r1, r2, r3, r7>;
0x001C18        019029D9                 r7 = Null + 10713;
0x001C19        01A00000                 r8 = Null + 0;
0x001C1A        E1F0EF97                 call $M.audio_proc.stream_gain.Process.func;
0x001C1B        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_wired_sub>
0x001C1C        01600010                 r4 = Null + 16;
0x001C1D        8005006F                 Null = r3 AND r4;
0x001C1E        DD00000D                 if EQ jump $M.set_mode_gains.no_sec_left;
0x001C1F        FD0000FF 0120584D        r0 = Null + -42931;
0x001C21        FD0000FF 192059B3        M[0xff59b3] = r0 + Null;
0x001C23        D5390004                 M[r7 + 4] = r1;
0x001C24        D5490005                 M[r7 + 5] = r2;
0x001C25        F1000238                 pushm <r1, r2, r3, r7>;
0x001C26        FD0000FF 019059B2        r7 = Null + -42574;
0x001C28        01A00000                 r8 = Null + 0;
0x001C29        E1F0EF88                 call $M.audio_proc.stream_gain.Process.func;
0x001C2A        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_sec_left>
0x001C2B        01600020                 r4 = Null + 32;
0x001C2C        8005006F                 Null = r3 AND r4;
0x001C2D        DD00000A                 if EQ jump $M.set_mode_gains.no_sec_right;
0x001C2E        01202892                 r0 = Null + 10386;
0x001C2F        192029DE                 M[0x29de] = r0 + Null;
0x001C30        D5390006                 M[r7 + 6] = r1;
0x001C31        D5490007                 M[r7 + 7] = r2;
0x001C32        F1000238                 pushm <r1, r2, r3, r7>;
0x001C33        019029DD                 r7 = Null + 10717;
0x001C34        01A00000                 r8 = Null + 0;
0x001C35        E1F0EF7C                 call $M.audio_proc.stream_gain.Process.func;
0x001C36        F1040238                 popm <r1, r2, r3, r7>;

 <$M.set_mode_gains.no_sec_right>
0x001C37        DDF0F5B4                 jump $pop_rLink_and_rts;

 <$calc_actual_port_rate>
0x001C38        F3D00000                 push rLink;
0x001C39        D11A0001                 rMAC = M[r8 + 1];
0x001C3A        DD000007                 if EQ jump $M.calc_actual_samples.measure_rate;
0x001C3B        D3100000                 rMAC = M[rMAC + Null];
0x001C3C        DD000005                 if EQ jump $M.calc_actual_samples.measure_rate;
0x001C3D        D50A0004                 M[r8 + 4] = Null;
0x001C3E        D50A000A                 M[r8 + 10] = Null;
0x001C3F        91E10004                 rMAC = rMAC ASHIFT 4 (MI);
0x001C40        DDF00043                 jump $M.calc_actual_samples.set_rate;

 <$M.calc_actual_samples.measure_rate>
0x001C41        D12A0004                 r0 = M[r8 + 4];
0x001C42        D12200ED                 r0 = M[r0 + 237];
0x001C43        DC02000F                 jump r0;

 <$M.calc_actual_samples.reset>
0x001C44        E420002F                 r0 = Null + 1;
0x001C45        D52A0004                 M[r8 + 4] = r0;
0x001C46        D50A0005                 M[r8 + 5] = Null;
0x001C47        D50A000A                 M[r8 + 10] = Null;
0x001C48        0920FE71                 r0 = Null + M[0xfffe71];
0x001C49        D52A0007                 M[r8 + 7] = r0;
0x001C4A        DDF0003D                 jump $M.calc_actual_samples.exit;

 <$M.calc_actual_samples.wait>
0x001C4B        0920FE71                 r0 = Null + M[0xfffe71];
0x001C4C        D13A0007                 r1 = M[r8 + 7];
0x001C4D        2032003F                 r1 = r0 - r1;
0x001C4E        E433004F                 r1 = ABS r1;
0x001C4F        FD000001 015086A0        r3 = Null + 100000;
0x001C51        D14A0003                 r2 = M[r8 + 3];
0x001C52        0045000D                 if LE r2 = r3 + Null;
0x001C53        2003004F                 Null = r1 - r2;
0x001C54        DD400033                 if NEG jump $M.calc_actual_samples.exit;
0x001C55        D52A0007                 M[r8 + 7] = r0;
0x001C56        01200002                 r0 = Null + 2;
0x001C57        D52A0004                 M[r8 + 4] = r0;
0x001C58        D50A0005                 M[r8 + 5] = Null;
0x001C59        D12A0000                 r0 = M[r8 + 0];
0x001C5A        8122001F                 r0 = r0 AND 0x1f;
0x001C5B        D1222707                 r0 = M[r0 + 9991];
0x001C5C        DD00FFE8                 if EQ jump $M.calc_actual_samples.reset;
0x001C5D        D3200000                 r0 = M[r0 + Null];
0x001C5E        D52A0006                 M[r8 + 6] = r0;
0x001C5F        DDF00028                 jump $M.calc_actual_samples.exit;

 <$M.calc_actual_samples.run>
0x001C60        0950FE71                 r3 = Null + M[0xfffe71];
0x001C61        D12A0000                 r0 = M[r8 + 0];
0x001C62        E1F0F519                 call $cbuffer.calc_amount_space;
0x001C63        D12A0000                 r0 = M[r8 + 0];
0x001C64        8122001F                 r0 = r0 AND 0x1f;
0x001C65        D1222707                 r0 = M[r0 + 9991];
0x001C66        DD00FFDE                 if EQ jump $M.calc_actual_samples.reset;
0x001C67        D3200000                 r0 = M[r0 + Null];
0x001C68        D13A0006                 r1 = M[r8 + 6];
0x001C69        2032003F                 r1 = r0 - r1;
0x001C6A        00330044                 if NEG r1 = r1 + r2;
0x001C6B        D52A0006                 M[r8 + 6] = r0;
0x001C6C        8D33007F                 r1 = r1 LSHIFT -1;
0x001C6D        D12A0005                 r0 = M[r8 + 5];
0x001C6E        03230000                 r0 = r0 + r1;
0x001C6F        D52A0005                 M[r8 + 5] = r0;
0x001C70        0035000F                 r1 = r3 + Null;
0x001C71        D14A0007                 r2 = M[r8 + 7];
0x001C72        2053004F                 r3 = r1 - r2;
0x001C73        E455004F                 r3 = ABS r3;
0x001C74        FD00000F 01104240        rMAC = Null + 1000000;
0x001C76        D14A0002                 r2 = M[r8 + 2];
0x001C77        00410000                 if EQ r2 = rMAC + Null;
0x001C78        2005004F                 Null = r3 - r2;
0x001C79        DD40000E                 if NEG jump $M.calc_actual_samples.exit;
0x001C7A        D53A0007                 M[r8 + 7] = r1;
0x001C7B        D14A000A                 r2 = M[r8 + 10];
0x001C7C        01100000                 rMAC = Null + 0;
0x001C7D        8DE40280                 rMAC0 = r2 LSHIFT 0;
0x001C7E        AD127A12                 rMAC = rMAC + r0 * 0.95367431640625 (SS);
0x001C7F        D9050000                 Div = rMAC / r3;
0x001C80        D9200002                 r0 = DivRemainder;
0x001C81        D52A000A                 M[r8 + 10] = r0;
0x001C82        D9100001                 rMAC = DivResult;

 <$M.calc_actual_samples.set_rate>
0x001C83        D51A0009                 M[r8 + 9] = rMAC;
0x001C84        9111007C                 rMAC = rMAC ASHIFT -4 (56bit);
0x001C85        D51A0008                 M[r8 + 8] = rMAC;
0x001C86        D50A0005                 M[r8 + 5] = Null;

 <$M.calc_actual_samples.exit>
0x001C87        DDF0F564                 jump $pop_rLink_and_rts;

 <$conn_init>
0x001C88        F3D00000                 push rLink;
0x001C89        015002D0                 r3 = Null + 720;
0x001C8A        01600400                 r4 = Null + 1024;
0x001C8B        E1F0020F                 call $conn_init_cbuffers;
0x001C8C        09202A28                 r0 = Null + M[$app_config.io];
0x001C8D        21020004                 Null = r0 - 4;
0x001C8E        DD1003DC                 if NE jump $error;
0x001C8F        01200BB8                 r0 = Null + 3000;
0x001C90        1920252F                 M[$sra_struct] = r0 + Null;
0x001C91        FD000080 01200002        r0 = Null + -8388606;
0x001C93        19202530                 M[0x2530] = r0 + Null;
0x001C94        0120006D                 r0 = Null + 109;
0x001C95        19202531                 M[0x2531] = r0 + Null;
0x001C96        012001A5                 r0 = Null + 421;
0x001C97        19202532                 M[0x2532] = r0 + Null;
0x001C98        FD0000FF 09305A28        r1 = Null + M[$current_dac_sampling_rate];
0x001C9A        FD000000 0120A3D7        r0 = Null + 41943;
0x001C9C        19202533                 M[0x2533] = r0 + Null;
0x001C9D        99230003                 r0 = r1 * 3 (int);
0x001C9E        19202534                 M[0x2534] = r0 + Null;
0x001C9F        09302A29                 r1 = Null + M[$current_codec_sampling_rate];
0x001CA0        FD000000 2103AC44        Null = r1 - 44100;
0x001CA2        DD100007                 if NE jump $M.conn_init.not_44100;
0x001CA3        01200144                 r0 = Null + 324;
0x001CA4        19202A2F                 M[$monitor_level] = r0 + Null;
0x001CA5        FD000014 01208F5C        r0 = Null + 1347420;
0x001CA7        19202535                 M[0x2535] = r0 + Null;
0x001CA8        DDF0000B                 jump $M.conn_init.sra_conf_done;

 <$M.conn_init.not_44100>
0x001CA9        FD000000 2103BB80        Null = r1 - 48000;
0x001CAB        DD100007                 if NE jump $M.conn_init.not_48000;
0x001CAC        01200168                 r0 = Null + 360;
0x001CAD        19202A2F                 M[$monitor_level] = r0 + Null;
0x001CAE        FD000016 012060A4        r0 = Null + 1466532;
0x001CB0        19202535                 M[0x2535] = r0 + Null;
0x001CB1        DDF00002                 jump $M.conn_init.sra_conf_done;

 <$M.conn_init.not_48000>
0x001CB2        DDF003B8                 jump $error;

 <$M.conn_init.sra_conf_done>
0x001CB3        012003E8                 r0 = Null + 1000;
0x001CB4        19202A2D                 M[$tmr_period_con_copy] = r0 + Null;
0x001CB5        09202A28                 r0 = Null + M[$app_config.io];
0x001CB6        21020004                 Null = r0 - 4;
0x001CB7        DD10000D                 if NE jump $M.conn_init.skip_sbc;
0x001CB8        01201A07                 r0 = Null + 6663;
0x001CB9        1920037F                 M[$decoder_codec_stream_struc] = r0 + Null;
0x001CBA        01201F95                 r0 = Null + 8085;
0x001CBB        19200380                 M[0x380] = r0 + Null;
0x001CBC        01201F10                 r0 = Null + 7952;
0x001CBD        19200381                 M[0x381] = r0 + Null;
0x001CBE        01700382                 r5 = Null + 898;
0x001CBF        E1F0006A                 call $sbcdec.init_static_decoder;
0x001CC0        FD0000FF 51004ADE        I0 = Null + -46370;
0x001CC2        E1F01A73                 call $copy_codec_stats_pointers;
0x001CC3        DDF00002                 jump $M.conn_init.exit;

 <$M.conn_init.skip_sbc>
0x001CC4        DDF003A6                 jump $error;

 <$M.conn_init.exit>
0x001CC5        DDF0F526                 jump $pop_rLink_and_rts;

 <$M.music_example_message.AuxVolume.update_volumes>
0x001CC6        F3D00000                 push rLink;
0x001CC7        5000005F                 I0 = Null + r3;
0x001CC8        19502A24                 M[$M.music_example_message.AuxVolume.temp_msg_ptr] = r3 + Null;
0x001CC9        03006100                 Null = Null + Null, r4 = M[I0,1];
0x001CCA        FD0000FF 09005A23        Null = Null + M[$aux_vol_msg_echo];
0x001CCC        DD000004                 if EQ jump $M.music_example_message.AuxVolume.no_system_vol;
0x001CCD        8166000F                 r4 = r4 AND 0xf;
0x001CCE        FD0000FF 19605A32        M[$music_example.SystemVolume] = r4 + Null;

 <$M.music_example_message.AuxVolume.no_system_vol>
0x001CD0        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001CD1        0002000F                 Null = r0 + Null;
0x001CD2        00200005                 if POS r0 = Null + Null;
0x001CD3        19202A33                 M[$music_example.Aux.MasterVolume] = r0 + Null;
0x001CD4        E1F002B3                 call $M.music_example_message.vmdB2vol;
0x001CD5        91220002                 r0 = r0 ASHIFT 2;
0x001CD6        19202723                 M[0x2723] = r0 + Null;
0x001CD7        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001CD8        0002000F                 Null = r0 + Null;
0x001CD9        00200005                 if POS r0 = Null + Null;
0x001CDA        FD0000FF 19205A33        M[$music_example.Aux.ToneVolume] = r0 + Null;
0x001CDC        E1F002AB                 call $M.music_example_message.vmdB2vol;
0x001CDD        91520003                 r3 = r0 ASHIFT 3;
0x001CDE        E1F01A6E                 call $multi_chan_set_aux_tone_mix_ratio;
0x001CDF        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001CE0        213202D2                 r1 = r0 - 722;
0x001CE1        20220035                 if POS r0 = r0 - r1;
0x001CE2        2132FD2E                 r1 = r0 - -722;
0x001CE3        20220034                 if NEG r0 = r0 - r1;
0x001CE4        19202A34                 M[$music_example.Aux.LeftTrimVolume] = r0 + Null;
0x001CE5        E1F002A2                 call $M.music_example_message.vmdB2vol;
0x001CE6        1920272C                 M[0x272c] = r0 + Null;
0x001CE7        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001CE8        213202D2                 r1 = r0 - 722;
0x001CE9        20220035                 if POS r0 = r0 - r1;
0x001CEA        2132FD2E                 r1 = r0 - -722;
0x001CEB        20220034                 if NEG r0 = r0 - r1;
0x001CEC        FD0000FF 19205A34        M[$music_example.Aux.RightTrimVolume] = r0 + Null;
0x001CEE        E1F00299                 call $M.music_example_message.vmdB2vol;
0x001CEF        19202731                 M[0x2731] = r0 + Null;
0x001CF0        FD0000FF 09005A23        Null = Null + M[$aux_vol_msg_echo];
0x001CF2        DD000005                 if EQ jump $M.music_example_message.AuxVolume.done;
0x001CF3        09702A24                 r5 = Null + M[$M.music_example_message.AuxVolume.temp_msg_ptr];
0x001CF4        01600005                 r4 = Null + 5;
0x001CF5        0150715D                 r3 = Null + 29021;
0x001CF6        E1F0F005                 call $message.send_long;

 <$M.music_example_message.AuxVolume.done>
0x001CF7        DDF0F4F4                 jump $pop_rLink_and_rts;

 <$M.music_example_message.AuxVolume.func>
0x001CF8        F3D00000                 push rLink;
0x001CF9        E1F0FFCD                 call $M.music_example_message.AuxVolume.update_volumes;

 <$M.music_example_message.AuxVolume.volume_msg_done>
0x001CFA        DDF0F4F1                 jump $pop_rLink_and_rts;

 <$sbcdec.sample_reconstruction>
0x001CFB        01700080                 r5 = Null + 128;
0x001CFC        D1AB0030                 r8 = M[r9 + 48];
0x001CFD        21AA0002                 r8 = r8 - 2;
0x001CFE        D13B0014                 r1 = M[r9 + 20];
0x001CFF        5000003F                 I0 = Null + r1;
0x001D00        D13B001B                 r1 = M[r9 + 27];
0x001D01        5010003F                 I1 = Null + r1;
0x001D02        D13B0018                 r1 = M[r9 + 24];
0x001D03        5020003F                 I2 = Null + r1;
0x001D04        D19B001F                 r7 = M[r9 + 31];
0x001D05        D13B0021                 r1 = M[r9 + 33];
0x001D06        9B390000                 r1 = r1 * r7 (int);
0x001D07        5080003F                 M0 = Null + r1;
0x001D08        70A0003F                 M2 = Null - r1;
0x001D09        50B3003F                 M3 = r1 + r1;
0x001D0A        D14B001D                 r2 = M[r9 + 29];
0x001D0B        9843004F                 r2 = r1 * r2 (int);
0x001D0C        7090004F                 M1 = Null - r2;
0x001D0D        59990001                 M1 = M1 + 1;

 <$M.sbcdec.sample_reconstruction.chan_loop>
0x001D0E        D18B0021                 r6 = M[r9 + 33];

 <$M.sbcdec.sample_reconstruction.subband_loop>
0x001D0F        D1CB001D                 r10 = M[r9 + 29];
0x001D10        03003500                 Null = Null + Null, r1 = M[I1,1];
0x001D11        03034900                 Null = Null + r1, r2 = M[I2,1];
0x001D12        DD00000F                 if EQ jump $M.sbcdec.sample_reconstruction.zero_sample;
0x001D13        E444002F                 r2 = r2 + 1;
0x001D14        D05A003F                 r3 = M[r8 + r1];
0x001D15        2034003F                 r1 = r2 - r1;
0x001D16        9067004F                 r4 = r5 ASHIFT r2;
0x001D17        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x001D18        E5F00007                 do $M.sbcdec.sample_reconstruction.block_loop;
0x001D19        8D220008                 r0 = r0 LSHIFT 8;
0x001D1A        01220080                 r0 = r0 + 128;
0x001D1B        C012005F                 rMAC = r0 * r3 (UU);
0x001D1C        8C21003F                 r0 = rMAC LSHIFT r1;
0x001D1D        2012226F                 rMAC = r0 - r4, r0 = M[I0,M2];
0x001D1E        02009300                 Null = Null + Null, M[I0,M3] = rMAC;

 <$M.sbcdec.sample_reconstruction.block_loop>
0x001D1F        02002200                 Null = Null + Null, r0 = M[I0,M2];
0x001D20        DDF00003                 jump $M.sbcdec.sample_reconstruction.done_block_loop;

 <$M.sbcdec.sample_reconstruction.zero_sample>
0x001D21        E5F00002                 do $M.sbcdec.sample_reconstruction.done_block_loop;
0x001D22        0200B000                 Null = Null + Null, M[I0,M0] = r1;

 <$M.sbcdec.sample_reconstruction.done_block_loop>
0x001D23        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x001D24        E488003F                 r6 = r6 - 1;
0x001D25        DD10FFEA                 if NE jump $M.sbcdec.sample_reconstruction.subband_loop;
0x001D26        E499003F                 r7 = r7 - 1;
0x001D27        DD10FFE7                 if NE jump $M.sbcdec.sample_reconstruction.chan_loop;
0x001D28        DC0D000F                 rts;

 <$sbcdec.init_static_decoder>
0x001D29        F3D00000                 push rLink;
0x001D2A        01B0246C                 r9 = Null + 9324;
0x001D2B        D5B70005                 M[r5 + 5] = r9;
0x001D2C        E1F00283                 call $sbc.init_static_common;
0x001D2D        FD0000FF 01203485        r0 = Null + -52091;
0x001D2F        D52B002E                 M[r9 + 46] = r0;
0x001D30        FD0000FF 0120362C        r0 = Null + -51668;
0x001D32        D52B002F                 M[r9 + 47] = r0;
0x001D33        FD0000FF 012036BF        r0 = Null + -51521;
0x001D35        D52B0030                 M[r9 + 48] = r0;
0x001D36        FD0000FF 012036AE        r0 = Null + -51538;
0x001D38        D52B0031                 M[r9 + 49] = r0;
0x001D39        FD0000FF 01203000        r0 = Null + -53248;
0x001D3B        D52B0032                 M[r9 + 50] = r0;
0x001D3C        FD0000FF 01203100        r0 = Null + -52992;
0x001D3E        D52B0033                 M[r9 + 51] = r0;
0x001D3F        D50B003A                 M[r9 + 58] = Null;
0x001D40        01200010                 r0 = Null + 16;
0x001D41        D52B003B                 M[r9 + 59] = r0;
0x001D42        FD0000FF 01203720        r0 = Null + -51424;
0x001D44        D52B003E                 M[r9 + 62] = r0;
0x001D45        E1F00250                 call $sbcdec.reset_decoder;
0x001D46        E1F00255                 call $sbcdec.init_tables;
0x001D47        013029FD                 r1 = Null + 10749;
0x001D48        01407010                 r2 = Null + 28688;
0x001D49        01501D4C                 r3 = Null + 7500;
0x001D4A        E1F002AC                 call $message.register_handler;
0x001D4B        DDF0F4A0                 jump $pop_rLink_and_rts;

 <$sbcdec.convert_mono_handler>
0x001D4C        D53B0034                 M[r9 + 52] = r1;
0x001D4D        DC0D000F                 rts;

 <$SystemSleep>
0x001D4E        E430002F                 r1 = Null + 1;
0x001D4F        FD0000FF 19305A64        M[$frame_sync.sync_flag] = r1 + Null;
0x001D51        0930FE71                 r1 = Null + M[0xfffe71];
0x001D52        FD0000FF 09605A56        r4 = Null + M[$interrupt.total_time];
0x001D54        0980FE4D                 r6 = Null + M[0xfffe4d];
0x001D55        0120003F                 r0 = Null + 63;
0x001D56        1920FE4D                 M[0xfffe4d] = r0 + Null;

 <$M.Sleep.jp_wait>
0x001D57        FD0000FF 09005A64        Null = Null + M[$frame_sync.sync_flag];
0x001D59        DD10FFFE                 if NE jump $M.Sleep.jp_wait;
0x001D5A        1980FE4D                 M[0xfffe4d] = r6 + Null;
0x001D5B        0950FE71                 r3 = Null + M[0xfffe71];
0x001D5C        2035003F                 r1 = r3 - r1;
0x001D5D        FD0000FF 29665A56        r4 = r4 - M[$interrupt.total_time];
0x001D5F        03360000                 r1 = r1 + r4;
0x001D60        09202A22                 r0 = Null + M[$M.Sleep.TotalTime];
0x001D61        03320000                 r1 = r1 + r0;
0x001D62        19302A22                 M[$M.Sleep.TotalTime] = r1 + Null;
0x001D63        FD0000FF 09205A22        r0 = Null + M[$M.Sleep.LastUpdateTm];
0x001D65        2075002F                 r5 = r3 - r0;
0x001D66        FD00000F 01104240        rMAC = Null + 1000000;
0x001D68        2007001F                 Null = r5 - rMAC;
0x001D69        DC0D0004                 if NEG rts;
0x001D6A        91E1007F                 rMAC = rMAC ASHIFT -1 (MI);
0x001D6B        D9070000                 Div = rMAC / r5;
0x001D6C        2017003F                 rMAC = r5 - r1;
0x001D6D        FD0000FF 19505A22        M[$M.Sleep.LastUpdateTm] = r3 + Null;
0x001D6F        19002A22                 M[$M.Sleep.TotalTime] = Null + Null;
0x001D70        D9500001                 r3 = DivResult;
0x001D71        9415001F                 rMAC = r3 * rMAC (frac);
0x001D72        FD000001 01500625        r3 = Null + 67109;
0x001D74        97150000                 rMAC = rMAC * r3 (frac);
0x001D75        19102A23                 M[$M.Sleep.Mips] = rMAC + Null;
0x001D76        DC0D000F                 rts;

 <$cbops.signal_detect_op.timer_handler>
0x001D77        F3D00000                 push rLink;
0x001D78        D13A0000                 r1 = M[r8 + 0];
0x001D79        DD00001C                 if EQ jump $M.signal_detect_op.timer_handler.detectionDisabled;
0x001D7A        D12A0002                 r0 = M[r8 + 2];
0x001D7B        2002003F                 Null = r0 - r1;
0x001D7C        DD50000E                 if POS jump $M.signal_detect_op.timer_handler.levelOverThreshold;
0x001D7D        D14A0003                 r2 = M[r8 + 3];
0x001D7E        E444002F                 r2 = r2 + 1;
0x001D7F        D54A0003                 M[r8 + 3] = r2;
0x001D80        D13A0001                 r1 = M[r8 + 1];
0x001D81        2004003F                 Null = r2 - r1;
0x001D82        DD400010                 if NEG jump $M.signal_detect_op.timer_handler.exit;
0x001D83        D10A0004                 Null = M[r8 + 4];
0x001D84        DD00000C                 if EQ jump $M.signal_detect_op.timer_handler.resetTimer;
0x001D85        01500000                 r3 = Null + 0;
0x001D86        D55A0004                 M[r8 + 4] = r3;
0x001D87        D14A0005                 r2 = M[r8 + 5];
0x001D88        E1F0F2A8                 call $message.send_short;
0x001D89        DDF00009                 jump $M.signal_detect_op.timer_handler.exit;

 <$M.signal_detect_op.timer_handler.levelOverThreshold>
0x001D8A        D10A0004                 Null = M[r8 + 4];
0x001D8B        DD100005                 if NE jump $M.signal_detect_op.timer_handler.resetTimer;
0x001D8C        E450002F                 r3 = Null + 1;
0x001D8D        D55A0004                 M[r8 + 4] = r3;
0x001D8E        D14A0005                 r2 = M[r8 + 5];
0x001D8F        E1F0F2A1                 call $message.send_short;

 <$M.signal_detect_op.timer_handler.resetTimer>
0x001D90        01400000                 r2 = Null + 0;
0x001D91        D54A0003                 M[r8 + 3] = r2;

 <$M.signal_detect_op.timer_handler.exit>
0x001D92        01200000                 r0 = Null + 0;
0x001D93        D52A0002                 M[r8 + 2] = r0;
0x001D94        DDF0F457                 jump $pop_rLink_and_rts;

 <$M.signal_detect_op.timer_handler.detectionDisabled>
0x001D95        01200000                 r0 = Null + 0;
0x001D96        D52A0003                 M[r8 + 3] = r0;
0x001D97        D52A0002                 M[r8 + 2] = r0;
0x001D98        E420002F                 r0 = Null + 1;
0x001D99        D52A0004                 M[r8 + 4] = r0;
0x001D9A        DDF0F451                 jump $pop_rLink_and_rts;

 <$cbops.soft_mute.main>
0x001D9B        F3D00000                 push rLink;
0x001D9C        00BC000F                 r9 = r10 + Null;
0x001D9D        D17A0002                 r5 = M[r8 + 2];
0x001D9E        511A0003                 I1 = r8 + 3;
0x001D9F        51D00000                 L1 = Null + 0;
0x001DA0        51900001                 M1 = Null + 1;

 <$M.cbops.soft_mute.channelLoop>
0x001DA1        00CB000F                 r10 = r9 + Null;
0x001DA2        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001DA3        D038002F                 r1 = M[r6 + r0];
0x001DA4        5000003F                 I0 = Null + r1;
0x001DA5        D039002F                 r1 = M[r7 + r0];
0x001DA6        50C0003F                 L0 = Null + r1;
0x001DA7        03002500                 Null = Null + Null, r0 = M[I1,1];
0x001DA8        D038002F                 r1 = M[r6 + r0];
0x001DA9        5040003F                 I4 = Null + r1;
0x001DAA        D039002F                 r1 = M[r7 + r0];
0x001DAB        50E0003F                 L4 = Null + r1;
0x001DAC        D12A0001                 r0 = M[r8 + 1];
0x001DAD        D13A0000                 r1 = M[r8 + 0];
0x001DAE        E5F0000C                 do $M.cbops.soft_mute.sampleLoop;
0x001DAF        02234100                 r0 = r0 + r1, r2 = M[I0,M1];
0x001DB0        00200004                 if NEG r0 = Null + Null;
0x001DB1        0160001F                 r4 = Null + 31;
0x001DB2        2006002F                 Null = r4 - r0;
0x001DB3        00260004                 if NEG r0 = r4 + Null;
0x001DB4        0160265C                 r4 = Null + 9820;
0x001DB5        0062006F                 r4 = r0 + r4;
0x001DB6        D3600000                 r4 = M[r4 + Null];
0x001DB7        97460000                 r2 = r2 * r4 (frac);
0x001DB8        2040004F                 r2 = Null - r2;
0x001DB9        020000C1                 Null = Null + Null, M[I4,M1] = r2;

 <$M.cbops.soft_mute.sampleLoop>
0x001DBA        E477003F                 r5 = r5 - 1;
0x001DBB        DD10FFE6                 if NE jump $M.cbops.soft_mute.channelLoop;
0x001DBC        D52A0001                 M[r8 + 1] = r0;
0x001DBD        51C00000                 L0 = Null + 0;
0x001DBE        51E00000                 L4 = Null + 0;
0x001DBF        DDF0F42C                 jump $pop_rLink_and_rts;

 <$M.music_example_message.MultiChannelMainMute.func>
0x001DC0        F3D00000                 push rLink;
0x001DC1        5000005F                 I0 = Null + r3;
0x001DC2        09502A4D                 r3 = Null + M[$M.multi_chan_output.channels_mute_en];
0x001DC3        8155000C                 r3 = r3 AND 0xc;
0x001DC4        E430002F                 r1 = Null + 1;
0x001DC5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001DC6        0002000F                 Null = r0 + Null;
0x001DC7        84550031                 if NE r3 = r3 OR r1;
0x001DC8        01300002                 r1 = Null + 2;
0x001DC9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001DCA        0002000F                 Null = r0 + Null;
0x001DCB        84550031                 if NE r3 = r3 OR r1;
0x001DCC        01300010                 r1 = Null + 16;
0x001DCD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001DCE        0002000F                 Null = r0 + Null;
0x001DCF        84550031                 if NE r3 = r3 OR r1;
0x001DD0        01300020                 r1 = Null + 32;
0x001DD1        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001DD2        0002000F                 Null = r0 + Null;
0x001DD3        84550031                 if NE r3 = r3 OR r1;
0x001DD4        01300040                 r1 = Null + 64;
0x001DD5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001DD6        0002000F                 Null = r0 + Null;
0x001DD7        84550031                 if NE r3 = r3 OR r1;
0x001DD8        F3500000                 push r3;
0x001DD9        E1F01684                 call $multi_chan_soft_mute;
0x001DDA        F3540000                 pop r3;
0x001DDB        E420002F                 r0 = Null + 1;
0x001DDC        E430003F                 r1 = Null - 1;
0x001DDD        81050040                 Null = r3 AND 0x40;
0x001DDE        00320000                 if EQ r1 = r0 + Null;
0x001DDF        FD0000FF 19305A27        M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x001DE1        DDF0F40A                 jump $pop_rLink_and_rts;

 <$sbcdec.private.init_tables>
0x001DE2        F3D00000                 push rLink;
0x001DE3        0940283A                 r2 = Null + M[$flash.windowed_data16.address];
0x001DE4        D12B002E                 r0 = M[r9 + 46];
0x001DE5        5000002F                 I0 = Null + r0;
0x001DE6        01200000                 r0 = Null + 0;
0x001DE7        01300080                 r1 = Null + 128;
0x001DE8        E1F0EE32                 call $flash.copy_to_dm_24;
0x001DE9        D12B002F                 r0 = M[r9 + 47];
0x001DEA        5000002F                 I0 = Null + r0;
0x001DEB        01200174                 r0 = Null + 372;
0x001DEC        01300020                 r1 = Null + 32;
0x001DED        E1F0EE2D                 call $flash.copy_to_dm_24;
0x001DEE        D12B0030                 r0 = M[r9 + 48];
0x001DEF        5000002F                 I0 = Null + r0;
0x001DF0        012001EE                 r0 = Null + 494;
0x001DF1        0130000F                 r1 = Null + 15;
0x001DF2        E1F0EE28                 call $flash.copy_to_dm_24;
0x001DF3        D12B0031                 r0 = M[r9 + 49];
0x001DF4        5000002F                 I0 = Null + r0;
0x001DF5        012001D4                 r0 = Null + 468;
0x001DF6        01300011                 r1 = Null + 17;
0x001DF7        E1F0EE23                 call $flash.copy_to_dm_24;
0x001DF8        DDF0F3F3                 jump $pop_rLink_and_rts;

 <$sbcdec.get1byte>
0x001DF9        01200008                 r0 = Null + 8;
0x001DFA        DDF00006                 jump $sbcdec.getbits;

 <$sbcdec.get4bits>
0x001DFB        01200004                 r0 = Null + 4;
0x001DFC        DDF00004                 jump $sbcdec.getbits;

 <$sbcdec.get2bits>
0x001DFD        01200002                 r0 = Null + 2;
0x001DFE        DDF00002                 jump $sbcdec.getbits;

 <$sbcdec.get1bit>
0x001DFF        E420002F                 r0 = Null + 1;

 <$sbcdec.getbits>
0x001E00        D15B0031                 r3 = M[r9 + 49];
0x001E01        D3520000                 r3 = M[r3 + r0];
0x001E02        D14B003B                 r2 = M[r9 + 59];
0x001E03        2042004F                 r2 = r0 - r2;
0x001E04        DDC00007                 if GT jump $M.sbcdec.getbits.anotherword;
0x001E05        03003000                 Null = Null + Null, r1 = M[I0,0];
0x001E06        8F340000                 r1 = r1 LSHIFT r2;
0x001E07        83350000                 r1 = r1 AND r3;
0x001E08        2040004F                 r2 = Null - r2;
0x001E09        D54B003B                 M[r9 + 59] = r2;
0x001E0A        DC0D000F                 rts;

 <$M.sbcdec.getbits.anotherword>
0x001E0B        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001E0C        8F340000                 r1 = r1 LSHIFT r2;
0x001E0D        83355000                 r1 = r1 AND r3, r3 = M[I0,0];
0x001E0E        21440010                 r2 = r2 - 16;
0x001E0F        8F540000                 r3 = r3 LSHIFT r2;
0x001E10        03350000                 r1 = r1 + r3;
0x001E11        2040004F                 r2 = Null - r2;
0x001E12        D54B003B                 M[r9 + 59] = r2;
0x001E13        DC0D000F                 rts;

 <$sbcdec.joint_stereo_decode>
0x001E14        D15B0014                 r3 = M[r9 + 20];
0x001E15        5010005F                 I1 = Null + r3;
0x001E16        D1CB0021                 r10 = M[r9 + 33];
0x001E17        D15B001D                 r3 = M[r9 + 29];
0x001E18        508000CF                 M0 = Null + r10;
0x001E19        709000CF                 M1 = Null - r10;
0x001E1A        59A90001                 M2 = M1 + 1;
0x001E1B        51B00001                 M3 = Null + 1;
0x001E1C        FD000080 01600000        r4 = Null + -8388608;

 <$M.sbcdec.joint_stereo_decode.blk_loop>
0x001E1E        514B0026                 I4 = r9 + 38;
0x001E1F        E5F0000B                 do $M.sbcdec.joint_stereo_decode.sb_loop;
0x001E20        02002443                 Null = Null + Null, r0 = M[I1,M0], r2 = M[I4,M3];
0x001E21        0004350F                 Null = r2 + Null, r1 = M[I1,M1];
0x001E22        DD000006                 if EQ jump $M.sbcdec.joint_stereo_decode.not_joint;
0x001E23        0042003F                 r2 = r0 + r1;
0x001E24        9C440066                 if V r2 = r2 * r4 (int) (sat);
0x001E25        2032003F                 r1 = r0 - r1;
0x001E26        9C330066                 if V r1 = r1 * r4 (int) (sat);
0x001E27        0024000F                 r0 = r2 + Null;

 <$M.sbcdec.joint_stereo_decode.not_joint>
0x001E28        0200A400                 Null = Null + Null, M[I1,M0] = r0;
0x001E29        0200B600                 Null = Null + Null, M[I1,M2] = r1;

 <$M.sbcdec.joint_stereo_decode.sb_loop>
0x001E2A        D1CB0021                 r10 = M[r9 + 33];
0x001E2B        5B1C0000                 I1 = I1 + r10;
0x001E2C        E455003F                 r3 = r3 - 1;
0x001E2D        DD10FFF1                 if NE jump $M.sbcdec.joint_stereo_decode.blk_loop;
0x001E2E        DC0D000F                 rts;

 <$M.music_example_message.SetOutputDevType.func>
0x001E2F        5000005F                 I0 = Null + r3;
0x001E30        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E31        FD0000FF 192058CB        M[$M.multi_chan_output.wired_out_type_table] = r0 + Null;
0x001E33        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E34        FD0000FF 192058CC        M[0xff58cc] = r0 + Null;
0x001E36        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E37        FD0000FF 192058CF        M[0xff58cf] = r0 + Null;
0x001E39        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E3A        FD0000FF 192058D0        M[0xff58d0] = r0 + Null;
0x001E3C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E3D        FD0000FF 192058D1        M[0xff58d1] = r0 + Null;
0x001E3F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E40        FD0000FF 192058CD        M[0xff58cd] = r0 + Null;
0x001E42        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E43        FD0000FF 192058CE        M[0xff58ce] = r0 + Null;
0x001E45        E420002F                 r0 = Null + 1;
0x001E46        19202A27                 M[$SetOutputDevType_message_received] = r0 + Null;
0x001E47        DC0D000F                 rts;

 <$cbops.signal_detect_op.main>
0x001E48        F3D00000                 push rLink;
0x001E49        00BC000F                 r9 = r10 + Null;
0x001E4A        D17A0000                 r5 = M[r8 + 0];
0x001E4B        D15A0001                 r3 = M[r8 + 1];
0x001E4C        514A0002                 I4 = r8 + 2;
0x001E4D        51E00000                 L4 = Null + 0;
0x001E4E        D1470002                 r2 = M[r5 + 2];

 <$M.cbops.signal_detect_op.main.channelLoop>
0x001E4F        00CB000F                 r10 = r9 + Null;
0x001E50        03000021                 Null = Null + Null, r0 = M[I4,1];
0x001E51        D038002F                 r1 = M[r6 + r0];
0x001E52        5000003F                 I0 = Null + r1;
0x001E53        D039002F                 r1 = M[r7 + r0];
0x001E54        50C0003F                 L0 = Null + r1;
0x001E55        E5F00006                 do $M.cbops.signal_detect_op.main.sampleLoop;
0x001E56        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001E57        0002000F                 Null = r0 + Null;
0x001E58        20200024                 if NEG r0 = Null - r0;
0x001E59        2004002F                 Null = r2 - r0;
0x001E5A        00420004                 if NEG r2 = r0 + Null;

 <$M.cbops.signal_detect_op.main.sampleLoop>
0x001E5B        E455003F                 r3 = r3 - 1;
0x001E5C        DD10FFF3                 if NE jump $M.cbops.signal_detect_op.main.channelLoop;
0x001E5D        D5470002                 M[r5 + 2] = r2;
0x001E5E        51C00000                 L0 = Null + 0;
0x001E5F        DDF0F38C                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetConfig.func>
0x001E60        F3D00000                 push rLink;
0x001E61        8144FFFF                 r2 = r2 AND 0xffff;
0x001E62        8D330010                 r1 = r1 LSHIFT 16;
0x001E63        87340000                 r1 = r1 OR r2;
0x001E64        8166FFFF                 r4 = r4 AND 0xffff;
0x001E65        8D550010                 r3 = r3 LSHIFT 16;
0x001E66        87560000                 r3 = r3 OR r4;
0x001E67        09201E38                 r0 = Null + M[$M.system_config.data.CurParams];
0x001E68        83530000                 r3 = r3 AND r1;
0x001E69        FD00000F 8933FFFF        r1 = r1 XOR 0xfffff;
0x001E6B        83230000                 r0 = r0 AND r1;
0x001E6C        87250000                 r0 = r0 OR r3;
0x001E6D        19201E38                 M[$M.system_config.data.CurParams] = r0 + Null;
0x001E6E        0140100F                 r2 = Null + 4111;
0x001E6F        8D520070                 r3 = r0 LSHIFT -16;
0x001E70        8162FFFF                 r4 = r0 AND 0xffff;
0x001E71        E1F0F1BF                 call $message.send_short;
0x001E72        E430002F                 r1 = Null + 1;
0x001E73        FD0000FF 19305A31        M[$music_example.reinit] = r1 + Null;
0x001E75        DDF0F376                 jump $pop_rLink_and_rts;

 <$M.check_aux_out.process>
0x001E76        F3D00000                 push rLink;
0x001E77        D009000F                 Null = M[r7 + Null];
0x001E78        DD00000F                 if EQ jump $M.check_aux_out.done;
0x001E79        D00A000F                 Null = M[r8 + Null];
0x001E7A        DD000006                 if EQ jump $M.check_aux_out.stereo_copy;
0x001E7B        FD0000FF 01905907        r7 = Null + -42745;
0x001E7D        01A00000                 r8 = Null + 0;
0x001E7E        E1F0F023                 call $M.audio_proc.stream_mixer.Process.func;
0x001E7F        DDF00005                 jump $M.check_aux_out.apply_vol;

 <$M.check_aux_out.stereo_copy>
0x001E80        FD0000FF 019059BA        r7 = Null + -42566;
0x001E82        01A00000                 r8 = Null + 0;
0x001E83        E1F0EF9E                 call $M.audio_proc.stereo_copy.Process.func;

 <$M.check_aux_out.apply_vol>
0x001E84        0190271F                 r7 = Null + 10015;
0x001E85        01A00000                 r8 = Null + 0;
0x001E86        E1F0E582                 call $volume_and_limit.apply_volume;

 <$M.check_aux_out.done>
0x001E87        DDF0F364                 jump $pop_rLink_and_rts;

 <$sbc.private.init_tables_common>
0x001E88        F3D00000                 push rLink;
0x001E89        0940283A                 r2 = Null + M[$flash.windowed_data16.address];
0x001E8A        D12B0015                 r0 = M[r9 + 21];
0x001E8B        5000002F                 I0 = Null + r0;
0x001E8C        012000C0                 r0 = Null + 192;
0x001E8D        01300050                 r1 = Null + 80;
0x001E8E        E1F0ED8C                 call $flash.copy_to_dm_24;
0x001E8F        D12B0016                 r0 = M[r9 + 22];
0x001E90        5000002F                 I0 = Null + r0;
0x001E91        01200138                 r0 = Null + 312;
0x001E92        01300028                 r1 = Null + 40;
0x001E93        E1F0ED87                 call $flash.copy_to_dm_24;
0x001E94        D12B0017                 r0 = M[r9 + 23];
0x001E95        5000002F                 I0 = Null + r0;
0x001E96        012001A4                 r0 = Null + 420;
0x001E97        01300030                 r1 = Null + 48;
0x001E98        E1F0F216                 call $flash.copy_to_dm;
0x001E99        DDF0F352                 jump $pop_rLink_and_rts;

 <$conn_init_cbuffers>
0x001E9A        F3D00000                 push rLink;
0x001E9B        FD0000FF 012059D6        r0 = Null + -42538;
0x001E9D        01300400                 r1 = Null + 1024;
0x001E9E        0045000F                 r2 = r3 + Null;
0x001E9F        E1F0F338                 call $cbuffer.buffer_configure;
0x001EA0        012000AD                 r0 = Null + 173;
0x001EA1        FD0000FF 01304400        r1 = Null + -48128;
0x001EA3        0045000F                 r2 = r3 + Null;
0x001EA4        E1F0F333                 call $cbuffer.buffer_configure;
0x001EA5        0120006D                 r0 = Null + 109;
0x001EA6        FD0000FF 01304000        r1 = Null + -49152;
0x001EA8        0046000F                 r2 = r4 + Null;
0x001EA9        E1F0F32E                 call $cbuffer.buffer_configure;
0x001EAA        DDF0F341                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SoftMute.func>
0x001EAB        F3D00000                 push rLink;
0x001EAC        0043000F                 r2 = r1 + Null;
0x001EAD        81330001                 r1 = r1 AND 0x1;
0x001EAE        0150007F                 r3 = Null + 127;
0x001EAF        0003000F                 Null = r1 + Null;
0x001EB0        00500000                 if EQ r3 = Null + Null;
0x001EB1        F3400000                 push r2;
0x001EB2        E1F015AB                 call $multi_chan_soft_mute;
0x001EB3        F3440000                 pop r2;
0x001EB4        8D34007F                 r1 = r2 LSHIFT -1;
0x001EB5        81330001                 r1 = r1 AND 0x1;
0x001EB6        E420002F                 r0 = Null + 1;
0x001EB7        2030003F                 r1 = Null - r1;
0x001EB8        0003000F                 Null = r1 + Null;
0x001EB9        00320000                 if EQ r1 = r0 + Null;
0x001EBA        FD0000FF 19305A27        M[$M.downsample_sub_to_1k2.mute_direction] = r1 + Null;
0x001EBC        DDF0F32F                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqParamMsg.func>
0x001EBD        F3D00000                 push rLink;
0x001EBE        0023000F                 r0 = r1 + Null;
0x001EBF        FD0000FF 019058FB        r7 = Null + -42757;
0x001EC1        E1F011D2                 call $user_eq.calcParamAddrOffset;
0x001EC2        01221E69                 r0 = r0 + 7785;
0x001EC3        8144FFFF                 r2 = r2 AND 0xffff;
0x001EC4        1824000F                 M[r0] = r2 + Null;
0x001EC5        21050000                 Null = r3 - 0;
0x001EC6        DD00F325                 if EQ jump $pop_rLink_and_rts;
0x001EC7        0023000F                 r0 = r1 + Null;
0x001EC8        0130261A                 r1 = Null + 9754;
0x001EC9        0140263B                 r2 = Null + 9787;
0x001ECA        01501E69                 r3 = Null + 7785;
0x001ECB        E1F0119E                 call $user_eq.calcBandCoefs;
0x001ECC        DDF0F31F                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqGroupParamMsg.func>
0x001ECD        F3D00000                 push rLink;
0x001ECE        5000005F                 I0 = Null + r3;
0x001ECF        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001ED0        FD0000FF 019058FB        r7 = Null + -42757;
0x001ED2        00C3000F                 r10 = r1 + Null;
0x001ED3        E5F00006                 do $M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop;
0x001ED4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001ED5        E1F011BE                 call $user_eq.calcParamAddrOffset;
0x001ED6        01221E69                 r0 = r0 + 7785;
0x001ED7        D3200000                 r0 = M[r0 + Null];
0x001ED8        0300A100                 Null = Null + Null, M[I0,1] = r0;

 <$M.music_example_message.GetUserEqGroupParamMsg.GetParamsLoop>
0x001ED9        0075000F                 r5 = r3 + Null;
0x001EDA        0064000F                 r4 = r2 + Null;
0x001EDB        0150329B                 r3 = Null + 12955;
0x001EDC        E1F0EE1F                 call $message.send_long;
0x001EDD        DDF0F30E                 jump $pop_rLink_and_rts;

 <$sbcdec.read_audio_samples>
0x001EDE        F3D00000                 push rLink;
0x001EDF        D17B0014                 r5 = M[r9 + 20];
0x001EE0        5010007F                 I1 = Null + r5;
0x001EE1        D16B001D                 r4 = M[r9 + 29];

 <$M.sbcdec.read_audio_samples.blk_loop>
0x001EE2        D17B001F                 r5 = M[r9 + 31];
0x001EE3        D1CB001B                 r10 = M[r9 + 27];
0x001EE4        502000CF                 I2 = Null + r10;

 <$M.sbcdec.read_audio_samples.ch_loop>
0x001EE5        D1CB0021                 r10 = M[r9 + 33];
0x001EE6        E5F00005                 do $M.sbcdec.read_audio_samples.sb_loop;
0x001EE7        23332900                 r1 = r1 - r1, r0 = M[I2,1];
0x001EE8        0002000F                 Null = r0 + Null;
0x001EE9        E110FF17                 if NE call $sbcdec.getbits;
0x001EEA        0300B500                 Null = Null + Null, M[I1,1] = r1;

 <$M.sbcdec.read_audio_samples.sb_loop>
0x001EEB        E477003F                 r5 = r5 - 1;
0x001EEC        DD10FFF9                 if NE jump $M.sbcdec.read_audio_samples.ch_loop;
0x001EED        E466003F                 r4 = r4 - 1;
0x001EEE        DD10FFF4                 if NE jump $M.sbcdec.read_audio_samples.blk_loop;
0x001EEF        DDF0F2FC                 jump $pop_rLink_and_rts;

 <$sbc.calc_frame_length>
0x001EF0        D12B0021                 r0 = M[r9 + 33];
0x001EF1        D13B001F                 r1 = M[r9 + 31];
0x001EF2        9862003F                 r4 = r0 * r1 (int);
0x001EF3        8D66007F                 r4 = r4 LSHIFT -1;
0x001EF4        01660005                 r4 = r4 + 5;
0x001EF5        D14B001D                 r2 = M[r9 + 29];
0x001EF6        D15B0022                 r3 = M[r9 + 34];
0x001EF7        9854005F                 r3 = r2 * r3 (int);
0x001EF8        D14B001E                 r2 = M[r9 + 30];
0x001EF9        21440002                 r2 = r2 - 2;
0x001EFA        DD400004                 if NEG jump $M.sbc.calc_frame_length.mono_or_dual_chan;

 <$M.sbc.calc_frame_length.stereo_or_jointstereo>
0x001EFB        9B420000                 r2 = r2 * r0 (int);
0x001EFC        03540000                 r3 = r3 + r2;
0x001EFD        DDF00002                 jump $M.sbc.calc_frame_length.finish_frame_length_calc;

 <$M.sbc.calc_frame_length.mono_or_dual_chan>
0x001EFE        9B530000                 r3 = r3 * r1 (int);

 <$M.sbc.calc_frame_length.finish_frame_length_calc>
0x001EFF        E455003F                 r3 = r3 - 1;
0x001F00        8D55007D                 r3 = r3 LSHIFT -3;
0x001F01        0026005F                 r0 = r4 + r3;
0x001F02        DC0D000F                 rts;

 <$sbcdec.find_sync>
0x001F03        F3D00000                 push rLink;
0x001F04        E1F0009C                 call $sbcdec.byte_align;
0x001F05        E5F00006                 do $M.sbcdec.find_sync.findsyncloop;
0x001F06        D18B003B                 r6 = M[r9 + 59];
0x001F07        5820000F                 I2 = I0 + Null;
0x001F08        E1F0FEF1                 call $sbcdec.get1byte;
0x001F09        2103009C                 Null = r1 - 156;
0x001F0A        DD000003                 if EQ jump $M.sbcdec.find_sync.found_sync;

 <$M.sbcdec.find_sync.findsyncloop>
0x001F0B        01800063                 r6 = Null + 99;
0x001F0C        DDF0F2DF                 jump $pop_rLink_and_rts;

 <$M.sbcdec.find_sync.found_sync>
0x001F0D        5802000F                 I0 = I2 + Null;
0x001F0E        D58B003B                 M[r9 + 59] = r6;
0x001F0F        DDF0F2DC                 jump $pop_rLink_and_rts;

 <$sbcdec.silence_decoder>
0x001F10        D12B0032                 r0 = M[r9 + 50];
0x001F11        D52B003C                 M[r9 + 60] = r0;
0x001F12        D12B0032                 r0 = M[r9 + 50];
0x001F13        5010002F                 I1 = Null + r0;
0x001F14        01C000A0                 r10 = Null + 160;
0x001F15        01200000                 r0 = Null + 0;
0x001F16        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop1;
0x001F17        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop1>
0x001F18        D12B0033                 r0 = M[r9 + 51];
0x001F19        D52B003D                 M[r9 + 61] = r0;
0x001F1A        D12B0033                 r0 = M[r9 + 51];
0x001F1B        5010002F                 I1 = Null + r0;
0x001F1C        01C000A0                 r10 = Null + 160;
0x001F1D        01200000                 r0 = Null + 0;
0x001F1E        E5F00002                 do $M.sbcdec.silence_decoder.ssf_init_loop2;
0x001F1F        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$M.sbcdec.silence_decoder.ssf_init_loop2>
0x001F20        DC0D000F                 rts;

 <$M.music_example_message.MultiChannelAuxMute.func>
0x001F21        F3D00000                 push rLink;
0x001F22        5000005F                 I0 = Null + r3;
0x001F23        09502A4D                 r3 = Null + M[$M.multi_chan_output.channels_mute_en];
0x001F24        81550073                 r3 = r3 AND 0x73;
0x001F25        01300004                 r1 = Null + 4;
0x001F26        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001F27        0002000F                 Null = r0 + Null;
0x001F28        84550031                 if NE r3 = r3 OR r1;
0x001F29        01300008                 r1 = Null + 8;
0x001F2A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001F2B        0002000F                 Null = r0 + Null;
0x001F2C        84550031                 if NE r3 = r3 OR r1;
0x001F2D        E1F01530                 call $multi_chan_soft_mute;
0x001F2E        DDF0F2BD                 jump $pop_rLink_and_rts;

 <$M.music_example_message.GetUserEqParamMsg.func>
0x001F2F        F3D00000                 push rLink;
0x001F30        0053000F                 r3 = r1 + Null;
0x001F31        0023000F                 r0 = r1 + Null;
0x001F32        FD0000FF 019058FB        r7 = Null + -42757;
0x001F34        E1F0115F                 call $user_eq.calcParamAddrOffset;
0x001F35        01221E69                 r0 = r0 + 7785;
0x001F36        D062000F                 r4 = M[r0 + Null];
0x001F37        01700000                 r5 = Null + 0;
0x001F38        01800000                 r6 = Null + 0;
0x001F39        0140329A                 r2 = Null + 12954;
0x001F3A        E1F0F0F6                 call $message.send_short;
0x001F3B        DDF0F2B0                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetUserEqGroupParamMsg.func>
0x001F3C        F3D00000                 push rLink;
0x001F3D        5000005F                 I0 = Null + r3;
0x001F3E        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001F3F        FD0000FF 019058FB        r7 = Null + -42757;
0x001F41        00C3000F                 r10 = r1 + Null;
0x001F42        E5F00007                 do $M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop;
0x001F43        03002100                 Null = Null + Null, r0 = M[I0,1];
0x001F44        E1F0114F                 call $user_eq.calcParamAddrOffset;
0x001F45        01221E69                 r0 = r0 + 7785;
0x001F46        03003100                 Null = Null + Null, r1 = M[I0,1];
0x001F47        8133FFFF                 r1 = r1 AND 0xffff;
0x001F48        1823000F                 M[r0] = r1 + Null;

 <$M.music_example_message.SetUserEqGroupParamMsg.SetParamsLoop>
0x001F49        DDF0F2A2                 jump $pop_rLink_and_rts;

 <$M.check_wired_subwoofer.process>
0x001F4A        F3D00000                 push rLink;
0x001F4B        D009000F                 Null = M[r7 + Null];
0x001F4C        DD000009                 if EQ jump $M.check_wired_subwoofer.done;
0x001F4D        FD0000FF 0190369D        r7 = Null + -51555;
0x001F4F        01A02000                 r8 = Null + 8192;
0x001F50        E1F0171D                 call $music_example.peq.process;
0x001F51        01A0269B                 r8 = Null + 9883;
0x001F52        E1F0E766                 call $cmpd100.analysis;
0x001F53        01A0269B                 r8 = Null + 9883;
0x001F54        E1F0E9B3                 call $cmpd100.applygain;

 <$M.check_wired_subwoofer.done>
0x001F55        DDF0F296                 jump $pop_rLink_and_rts;

 <$sbcdec.read_scale_factors>
0x001F56        F3D00000                 push rLink;
0x001F57        D18B001F                 r6 = M[r9 + 31];
0x001F58        D19B0021                 r7 = M[r9 + 33];
0x001F59        9B890000                 r6 = r6 * r7 (int);
0x001F5A        D12B0018                 r0 = M[r9 + 24];
0x001F5B        5010002F                 I1 = Null + r0;
0x001F5C        51900001                 M1 = Null + 1;
0x001F5D        01200004                 r0 = Null + 4;

 <$M.sbcdec.read_scale_factors.loop>
0x001F5E        E1F0FEA2                 call $sbcdec.getbits;
0x001F5F        E1F0001B                 call $sbc.crc_calc;
0x001F60        6689B500                 r6 = r6 - M1, M[I1,M1] = r1;
0x001F61        DD10FFFD                 if NE jump $M.sbcdec.read_scale_factors.loop;
0x001F62        DDF0F289                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetPlugin.func>
0x001F63        09002A28                 Null = Null + M[$app_config.io];
0x001F64        DC0D0005                 if POS rts;
0x001F65        19302A28                 M[$app_config.io] = r1 + Null;
0x001F66        21030004                 Null = r1 - 4;
0x001F67        DD100007                 if NE jump $M.music_example_message.SetPlugin.skip_faststream;
0x001F68        01200002                 r0 = Null + 2;
0x001F69        19202A2C                 M[$codec_type] = r0 + Null;
0x001F6A        012001D6                 r0 = Null + 470;
0x001F6B        FD0000FF 19205A2C        M[$codec_config] = r0 + Null;
0x001F6D        DDF00002                 jump $M.music_example_message.SetPlugin.exit;

 <$M.music_example_message.SetPlugin.skip_faststream>
0x001F6E        DDF000FC                 jump $error;

 <$M.music_example_message.SetPlugin.exit>
0x001F6F        DC0D000F                 rts;

 <$signal_detect_timer_handler>
0x001F70        F3D00000                 push rLink;
0x001F71        FD0000FF 01A0590D        r8 = Null + -42739;
0x001F73        E1F0FE04                 call $cbops.signal_detect_op.timer_handler;
0x001F74        0130018C                 r1 = Null + 396;
0x001F75        FD00000F 01404240        r2 = Null + 1000000;
0x001F77        01501F70                 r3 = Null + 8048;
0x001F78        E1F0F263                 call $timer.schedule_event_in_period;
0x001F79        DDF0F272                 jump $pop_rLink_and_rts;

 <$sbc.crc_calc>
0x001F7A        D14B0024                 r2 = M[r9 + 36];
0x001F7B        0170001D                 r5 = Null + 29;
0x001F7C        65520008                 r3 = 8 - r0;
0x001F7D        00C2000F                 r10 = r0 + Null;
0x001F7E        8C53005F                 r3 = r1 LSHIFT r3;
0x001F7F        E5F00006                 do $M.sbc.crc_calc.crc_loop;
0x001F80        8865004F                 r4 = r3 XOR r2;
0x001F81        8D440001                 r2 = r2 LSHIFT 1;
0x001F82        81660080                 r4 = r4 AND 0x80;
0x001F83        88440071                 if NE r2 = r2 XOR r5;
0x001F84        8D550001                 r3 = r3 LSHIFT 1;

 <$M.sbc.crc_calc.crc_loop>
0x001F85        D54B0024                 M[r9 + 36] = r2;
0x001F86        DC0D000F                 rts;

 <$M.music_example_message.vmdB2vol>
0x001F87        FD000035 0130F5E3        r1 = Null + 3536355;
0x001F89        991200B5                 rMAC = r0 * 181 (int);
0x001F8A        AC12003F                 rMAC = rMAC + r0 * r1 (SS);
0x001F8B        FD000004 21210000        r0 = rMAC - 262144;
0x001F8D        00200005                 if POS r0 = Null + Null;
0x001F8E        DDF0F10E                 jump $math.pow2_taylor;

 <$M.music_example_message.SignalDetect.func>
0x001F8F        F3D00000                 push rLink;
0x001F90        8D330008                 r1 = r1 LSHIFT 8;
0x001F91        FD0000FF 01A0590D        r8 = Null + -42739;
0x001F93        E1F00012                 call $M.cbops.signal_detect_op.message_handler.func;
0x001F94        DDF0F257                 jump $pop_rLink_and_rts;

 <$sbcdec.reset_decoder>
0x001F95        F3D00000                 push rLink;
0x001F96        01200010                 r0 = Null + 16;
0x001F97        D1B70005                 r9 = M[r5 + 5];
0x001F98        D52B003B                 M[r9 + 59] = r0;
0x001F99        E1F0FF77                 call $sbcdec.silence_decoder;
0x001F9A        DDF0F251                 jump $pop_rLink_and_rts;

 <$sbcdec.init_tables>
0x001F9B        F3D00000                 push rLink;
0x001F9C        D1B70005                 r9 = M[r5 + 5];
0x001F9D        E1F0FE45                 call $sbcdec.private.init_tables;
0x001F9E        E1F0FEEA                 call $sbc.private.init_tables_common;
0x001F9F        DDF0F24C                 jump $pop_rLink_and_rts;

 <$sbcdec.byte_align>
0x001FA0        F3D00000                 push rLink;
0x001FA1        D12B003B                 r0 = M[r9 + 59];
0x001FA2        81220007                 r0 = r0 AND 0x7;
0x001FA3        E1F0FE5D                 call $sbcdec.getbits;
0x001FA4        DDF0F247                 jump $pop_rLink_and_rts;

 <$M.cbops.signal_detect_op.message_handler.func>
0x001FA5        F3D00000                 push rLink;
0x001FA6        D53A0000                 M[r8 + 0] = r1;
0x001FA7        D54A0001                 M[r8 + 1] = r2;
0x001FA8        DDF0F243                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetI2SMode.func>
0x001FA9        FD0000FF 19305A48        M[$M.multi_chan_output.i2s_slave0] = r1 + Null;
0x001FAB        DC0D000F                 rts;

 <$M.music_example_message.SetANCMode.func>
0x001FAC        81330003                 r1 = r1 AND 0x3;
0x001FAD        19302A46                 M[$M.multi_chan_output.chain0_anc_enable] = r1 + Null;
0x001FAE        DC0D000F                 rts;

 <$sbc.init_static_common>
0x001FAF        DC0D000F                 rts;

 <$spi_comm.polled_service_routine>
0x001FB0        FD000000 0120AAAA        r0 = Null + 43690;
0x001FB2        29020046                 Null = r0 - M[$M.spi_block.cmd_ready];
0x001FB3        DC0D0001                 if NE rts;
0x001FB4        F3D00000                 push rLink;
0x001FB5        01C00032                 r10 = Null + 50;
0x001FB6        09302A69                 r1 = Null + M[$M.spi_comm.last_addr];
0x001FB7        09200045                 r0 = Null + M[$M.spi_block.command];
0x001FB8        FD000000 0190AAAA        r7 = Null + 43690;
0x001FBA        E5F00007                 do $M.spi_comm.polled_service_routine.loop;
0x001FBB        E403002F                 Null = r1 + 1;
0x001FBC        DD00000B                 if EQ jump $M.spi_comm.polled_service_routine.no_handler;
0x001FBD        D1430001                 r2 = M[r1 + 1];
0x001FBE        2002004F                 Null = r0 - r2;
0x001FBF        DD000003                 if EQ jump $M.spi_comm.polled_service_routine.found;
0x001FC0        D1330000                 r1 = M[r1 + 0];

 <$M.spi_comm.polled_service_routine.loop>
0x001FC1        E1F000A9                 call $error;

 <$M.spi_comm.polled_service_routine.found>
0x001FC2        D1D30002                 rLink = M[r1 + 2];
0x001FC3        01300005                 r1 = Null + 5;
0x001FC4        09400049                 r2 = Null + M[$M.spi_block.cmd_length];
0x001FC5        E00D000F                 call rLink;
0x001FC6        01905555                 r7 = Null + 21845;

 <$M.spi_comm.polled_service_routine.no_handler>
0x001FC7        01205555                 r0 = Null + 21845;
0x001FC8        FD000000 0130AAAA        r1 = Null + 43690;
0x001FCA        19A00049                 M[$M.spi_block.cmd_length] = r8 + Null;
0x001FCB        19900048                 M[$M.spi_block.cmd_status] = r7 + Null;
0x001FCC        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x001FCD        19300047                 M[$M.spi_block.cmd_complete] = r1 + Null;
0x001FCE        DDF0F21D                 jump $pop_rLink_and_rts;

 <$cmpd100.initialize>
0x001FCF        D12A000A                 r0 = M[r8 + 10];
0x001FD0        D13A000B                 r1 = M[r8 + 11];
0x001FD1        D14A000C                 r2 = M[r8 + 12];
0x001FD2        D15A000E                 r3 = M[r8 + 14];
0x001FD3        D16A000F                 r4 = M[r8 + 15];
0x001FD4        2073002F                 r5 = r1 - r0;
0x001FD5        CC17005F                 rMAC = r5 * r3 (SS);
0x001FD6        D51A0012                 M[r8 + 18] = rMAC;
0x001FD7        2074003F                 r5 = r2 - r1;
0x001FD8        CC17006F                 rMAC = r5 * r4 (SS);
0x001FD9        D51A0013                 M[r8 + 19] = rMAC;
0x001FDA        D15A000D                 r3 = M[r8 + 13];
0x001FDB        D16A0010                 r4 = M[r8 + 16];
0x001FDC        2075004F                 r5 = r3 - r2;
0x001FDD        CC17006F                 rMAC = r5 * r4 (SS);
0x001FDE        D51A0014                 M[r8 + 20] = rMAC;
0x001FDF        01300000                 r1 = Null + 0;
0x001FE0        D16A0007                 r4 = M[r8 + 7];
0x001FE1        1863000F                 M[r4] = r1 + Null;
0x001FE2        DC0D000F                 rts;

 <$message.send_ready_wait_for_go>
0x001FE3        F3D00000                 push rLink;
0x001FE4        013029F1                 r1 = Null + 10737;
0x001FE5        01407000                 r2 = Null + 28672;
0x001FE6        01501FE9                 r3 = Null + 8169;
0x001FE7        E1F0000F                 call $message.register_handler;
0x001FE8        DDF00005                 jump $M.message.send_ready_wait_for_go.go_from_vm_setup_done;

 <$M.message.send_ready_wait_for_go.go_from_vm_handler>
0x001FE9        E420002F                 r0 = Null + 1;
0x001FEA        FD0000FF 19205A59        M[$M.message.send_ready_wait_for_go.go_from_vm] = r0 + Null;
0x001FEC        DC0D000F                 rts;

 <$M.message.send_ready_wait_for_go.go_from_vm_setup_done>
0x001FED        85408000                 r2 = Null OR 0x8000;
0x001FEE        E1F0F042                 call $message.send_short;

 <$M.message.send_ready_wait_for_go.vm_go_wait>
0x001FEF        FD0000FF 09005A59        Null = Null + M[$M.message.send_ready_wait_for_go.go_from_vm];
0x001FF1        DD00FFFE                 if EQ jump $M.message.send_ready_wait_for_go.vm_go_wait;
0x001FF2        DDF0F1F9                 jump $pop_rLink_and_rts;

 <$message.register_handler_with_mask>
0x001FF3        8966FFFF                 r4 = r4 XOR 0xffff;
0x001FF4        D5630003                 M[r1 + 3] = r4;
0x001FF5        DDF00003                 jump $M.message.register_handler.mask_field_set;

 <$message.register_handler>
0x001FF6        8520FFFF                 r0 = Null OR 0xffff;
0x001FF7        D5230003                 M[r1 + 3] = r0;

 <$M.message.register_handler.mask_field_set>
0x001FF8        F3D00000                 push rLink;
0x001FF9        E1F0F1AA                 call $block_interrupts;
0x001FFA        09202A57                 r0 = Null + M[$message.last_addr];
0x001FFB        D5230000                 M[r1 + 0] = r0;
0x001FFC        19302A57                 M[$message.last_addr] = r1 + Null;
0x001FFD        D5430001                 M[r1 + 1] = r2;
0x001FFE        D5530002                 M[r1 + 2] = r3;
0x001FFF        E1F0F194                 call $interrupt.unblock;
0x002000        DDF0F1EB                 jump $pop_rLink_and_rts;

 <$pskey.initialise>
0x002001        F3D00000                 push rLink;
0x002002        FD0000FF 013059CA        r1 = Null + -42550;
0x002004        FD000000 01408007        r2 = Null + 32775;
0x002006        01500EBD                 r3 = Null + 3773;
0x002007        E1F0FFEF                 call $message.register_handler;
0x002008        013029F5                 r1 = Null + 10741;
0x002009        85408008                 r2 = Null OR 0x8008;
0x00200A        01500EBD                 r3 = Null + 3773;
0x00200B        E1F0FFEB                 call $message.register_handler;
0x00200C        DDF0F1DF                 jump $pop_rLink_and_rts;

 <$wall_clock.initialise>
0x00200D        F3D00000                 push rLink;
0x00200E        013029F9                 r1 = Null + 10745;
0x00200F        8540801C                 r2 = Null OR 0x801c;
0x002010        01500C77                 r3 = Null + 3191;
0x002011        E1F0FFE5                 call $message.register_handler;
0x002012        FD0000FF 013059D2        r1 = Null + -42542;
0x002014        8540801D                 r2 = Null OR 0x801d;
0x002015        015011EF                 r3 = Null + 4591;
0x002016        E1F0FFE0                 call $message.register_handler;
0x002017        DDF0F1D4                 jump $pop_rLink_and_rts;

 <$interrupt.initialise>
0x002018        01200015                 r0 = Null + 21;
0x002019        1920FE14                 M[0xfffe14] = r0 + Null;
0x00201A        01200311                 r0 = Null + 785;
0x00201B        1920FE15                 M[0xfffe15] = r0 + Null;
0x00201C        E420002F                 r0 = Null + 1;
0x00201D        1920FE11                 M[0xfffe11] = r0 + Null;
0x00201E        1920FE12                 M[0xfffe12] = r0 + Null;
0x00201F        1920FE13                 M[0xfffe13] = r0 + Null;
0x002020        1900FE4E                 M[0xfffe4e] = Null + Null;
0x002021        85EE0080                 rFlags = rFlags OR 0x80;
0x002022        DC0D000F                 rts;
0x002023        DDF0DFDD                 jump $reset;
0x002024        DDF0DFDE                 jump $interrupt.handler;

 <$audio_proc.hq_peq.initialize>
0x002025        D1A90003                 r8 = M[r7 + 3];
0x002026        D12A0000                 r0 = M[r8 + 0];
0x002027        812200FF                 r0 = r0 AND 0xff;
0x002028        D5290006                 M[r7 + 6] = r0;
0x002029        99C20003                 r10 = r0 * 3 (int);
0x00202A        01CC0002                 r10 = r10 + 2;
0x00202B        D5C90007                 M[r7 + 7] = r10;
0x00202C        01390009                 r1 = r7 + 9;
0x00202D        D5390004                 M[r7 + 4] = r1;
0x00202E        99C20005                 r10 = r0 * 5 (int);
0x00202F        D5C90008                 M[r7 + 8] = r10;
0x002030        012A0003                 r0 = r8 + 3;
0x002031        D5290005                 M[r7 + 5] = r0;
0x002032        DC0D000F                 rts;

 <$_stack_initialise>
0x002033        FD0000FF 01B033D9        r9 = Null + -52263;
0x002035        19B0FE67                 M[0xfffe67] = r9 + Null;
0x002036        FD0000FF 01B0331A        r9 = Null + -52454;
0x002038        19B0FE66                 M[0xfffe66] = r9 + Null;
0x002039        19B0FE68                 M[0xfffe68] = r9 + Null;
0x00203A        19B0FE6A                 M[0xfffe6a] = r9 + Null;
0x00203B        E420002F                 r0 = Null + 1;
0x00203C        1920FE9F                 M[0xfffe9f] = r0 + Null;
0x00203D        DC0D000F                 rts;

 <$audio_proc.peq.zero_delay_data>
0x00203E        F3C00000                 push r10;
0x00203F        D1C90002                 r10 = M[r7 + 2];
0x002040        E4CC002F                 r10 = r10 + 1;
0x002041        91CC0001                 r10 = r10 ASHIFT 1;
0x002042        01390009                 r1 = r7 + 9;
0x002043        5000003F                 I0 = Null + r1;
0x002044        0030000F                 r1 = Null + Null;
0x002045        E5F00002                 do $M.audio_proc.peq.zero_delay_data.init_dly_ln_loop;
0x002046        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.audio_proc.peq.zero_delay_data.init_dly_ln_loop>
0x002047        F3C40000                 pop r10;
0x002048        DC0D000F                 rts;

 <$audio_proc.hq_peq.zero_delay_data>
0x002049        F3C00000                 push r10;
0x00204A        D1C90002                 r10 = M[r7 + 2];
0x00204B        99CC0003                 r10 = r10 * 3 (int);
0x00204C        01CC0002                 r10 = r10 + 2;
0x00204D        01390009                 r1 = r7 + 9;
0x00204E        5000003F                 I0 = Null + r1;
0x00204F        0030000F                 r1 = Null + Null;
0x002050        E5F00002                 do $M.audio_proc.hq_peq.zero_delay_data.init_dly_ln_loop;
0x002051        0300B100                 Null = Null + Null, M[I0,1] = r1;

 <$M.audio_proc.hq_peq.zero_delay_data.init_dly_ln_loop>
0x002052        F3C40000                 pop r10;
0x002053        DC0D000F                 rts;

 <$cbuffer.initialise>
0x002054        F3D00000                 push rLink;
0x002055        013029ED                 r1 = Null + 10733;
0x002056        85408001                 r2 = Null OR 0x8001;
0x002057        01500A64                 r3 = Null + 2660;
0x002058        E1F0FF9E                 call $message.register_handler;
0x002059        DDF0F192                 jump $pop_rLink_and_rts;

 <$timer.1ms_delay>
0x00205A        0930FE4D                 r1 = Null + M[0xfffe4d];
0x00205B        0120003F                 r0 = Null + 63;
0x00205C        1920FE4D                 M[0xfffe4d] = r0 + Null;
0x00205D        0920FE71                 r0 = Null + M[0xfffe71];
0x00205E        012203E7                 r0 = r0 + 999;

 <$M.timer.1ms_delay.wait>
0x00205F        2902FE71                 Null = r0 - M[0xfffe71];
0x002060        DD50FFFF                 if POS jump $M.timer.1ms_delay.wait;
0x002061        1930FE4D                 M[0xfffe4d] = r1 + Null;
0x002062        DC0D000F                 rts;

 <$spi_comm.register_handler>
0x002063        F3D00000                 push rLink;
0x002064        09202A69                 r0 = Null + M[$M.spi_comm.last_addr];
0x002065        D5230000                 M[r1 + 0] = r0;
0x002066        19302A69                 M[$M.spi_comm.last_addr] = r1 + Null;
0x002067        D5430001                 M[r1 + 1] = r2;
0x002068        D5530002                 M[r1 + 2] = r3;
0x002069        DDF0F182                 jump $pop_rLink_and_rts;

 <$error>
0x00206A        81EEFF7F                 rFlags = rFlags AND 0xff7f;
0x00206B        09B02A55                 r9 = Null + M[$error.handler];
0x00206C        DC0B0001                 if NE jump r9;

 <$M.error.error_loop>
0x00206D        E400001F                 break;
0x00206E        DDF0FFFF                 jump $M.error.error_loop;

 <$message.initialise>
0x00206F        0920E000                 r0 = Null + M[0xffe000];
0x002070        FD0000FF 19205A58        M[$message.last_seq_sent] = r0 + Null;
0x002072        DC0D000F                 rts;

 <$MeloD_Expansion.initialize>
0x002073        F3D00000                 push rLink;
0x002074        DDF0F177                 jump $pop_rLink_and_rts;

 <$spi_comm.initialize>
0x002075        01205555                 r0 = Null + 21845;
0x002076        19200046                 M[$M.spi_block.cmd_ready] = r0 + Null;
0x002077        DC0D000F                 rts;
------------------------------------------------------------------------
Region: flash.code
------------------------------------------------------------------------

 <$user_eq.userEqInitialize>
0x003000        F3D00000                 push rLink;
0x003001        09401E38                 r2 = Null + M[$M.system_config.data.CurParams];
0x003002        81440007                 r2 = r2 AND 0x7;
0x003003        D1390000                 r1 = M[r7 + 0];
0x003004        E443005F                 r2 = MIN r1;
0x003005        D1290004                 r0 = M[r7 + 4];
0x003006        D1390005                 r1 = M[r7 + 5];
0x003007        03A40000                 r8 = r8 + r2;
0x003008        D3A00000                 r8 = M[r8 + Null];
0x003009        E45A002F                 r3 = r8 + 1;
0x00300A        DD10002A                 if NE jump $user_eq.calcBankCoefs.jump_entry;
0x00300B        E444003F                 r2 = r2 - 1;
0x00300C        D1590000                 r3 = M[r7 + 0];
0x00300D        09302A29                 r1 = Null + M[$current_codec_sampling_rate];
0x00300E        FD000000 2103BB80        Null = r1 - 48000;
0x003010        00440050                 if EQ r2 = r2 + r3;
0x003011        D1590001                 r3 = M[r7 + 1];
0x003012        99550006                 r3 = r3 * 6 (int);
0x003013        01550003                 r3 = r3 + 3;
0x003014        9B540000                 r3 = r3 * r2 (int);
0x003015        03250000                 r0 = r0 + r3;
0x003016        F1000204                 pushm <r0, r7>;
0x003017        D1990002                 r7 = M[r7 + 2];
0x003018        D5290003                 M[r7 + 3] = r0;
0x003019        E1F0F00C                 call $audio_proc.hq_peq.initialize;
0x00301A        F1040204                 popm <r0, r7>;
0x00301B        D1990003                 r7 = M[r7 + 3];
0x00301C        DD000003                 if EQ jump $user_eq.userEqInitialize.no2ndChannelEq;
0x00301D        D5290003                 M[r7 + 3] = r0;
0x00301E        E1F0F007                 call $audio_proc.hq_peq.initialize;

 <$user_eq.userEqInitialize.no2ndChannelEq>
0x00301F        DDF0E1CC                 jump $pop_rLink_and_rts;

 <$user_eq.eqInitialize>
0x003020        F3D00000                 push rLink;
0x003021        D1290004                 r0 = M[r7 + 4];
0x003022        D1390005                 r1 = M[r7 + 5];
0x003023        D3A00000                 r8 = M[r8 + Null];
0x003024        DD100010                 if NE jump $user_eq.calcBankCoefs.jump_entry;
0x003025        09402A29                 r2 = Null + M[$current_codec_sampling_rate];
0x003026        FD000000 2104BB80        Null = r2 - 48000;
0x003028        00230000                 if EQ r0 = r1 + Null;
0x003029        F1000204                 pushm <r0, r7>;
0x00302A        D1990002                 r7 = M[r7 + 2];
0x00302B        D5290003                 M[r7 + 3] = r0;
0x00302C        E1F0EFF9                 call $audio_proc.hq_peq.initialize;
0x00302D        F1040204                 popm <r0, r7>;
0x00302E        D1990003                 r7 = M[r7 + 3];
0x00302F        DD000003                 if EQ jump $user_eq.eqInitialize.no2ndChannelEq;
0x003030        D5290003                 M[r7 + 3] = r0;
0x003031        E1F0EFF4                 call $audio_proc.hq_peq.initialize;

 <$user_eq.eqInitialize.no2ndChannelEq>
0x003032        DDF0E1B9                 jump $pop_rLink_and_rts;

 <$user_eq.calcBankCoefs.call_entry>
0x003033        F3D00000                 push rLink;

 <$user_eq.calcBankCoefs.jump_entry>
0x003034        D1490002                 r2 = M[r7 + 2];
0x003035        D1440003                 r2 = M[r2 + 3];
0x003036        2004002F                 Null = r2 - r0;
0x003037        00230000                 if EQ r0 = r1 + Null;
0x003038        F1000204                 pushm <r0, r7>;
0x003039        500000AF                 I0 = Null + r8;
0x00303A        5010002F                 I1 = Null + r0;
0x00303B        51C00000                 L0 = Null + 0;
0x00303C        51D00000                 L1 = Null + 0;
0x00303D        000A000F                 Null = r8 + Null;
0x00303E        DD100009                 if NE jump $user_eq.calcBankCoefs.NotNullBank;
0x00303F        01200000                 r0 = Null + 0;
0x003040        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003041        E420002F                 r0 = Null + 1;
0x003042        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003043        FD000040 01200000        r0 = Null + 4194304;
0x003045        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003046        DDF00018                 jump $user_eq.calcBankCoefs.switchToNewCoefs;

 <$user_eq.calcBankCoefs.NotNullBank>
0x003047        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003048        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003049        F3200000                 push r0;
0x00304A        E1F000AE                 call $user_eq.calcPreGain.call_entry;
0x00304B        4420001F                 r0 = Null + I1;
0x00304C        D1390001                 r1 = M[r7 + 1];
0x00304D        99330005                 r1 = r1 * 5 (int);
0x00304E        03230000                 r0 = r0 + r1;
0x00304F        5020002F                 I2 = Null + r0;

 <$user_eq.calcBandLoop>
0x003050        F3240000                 pop r0;
0x003051        E422003F                 r0 = r0 - 1;
0x003052        DD40000C                 if NEG jump $user_eq.calcBankCoefs.switchToNewCoefs;
0x003053        F3200000                 push r0;
0x003054        F1010007                 pushm <I0, I1, I2>;
0x003055        E1F00072                 call $user_eq.coefCalcBiquadBand.call_entry;
0x003056        F104001C                 popm <r0, r1, r2>;
0x003057        01220004                 r0 = r0 + 4;
0x003058        5000002F                 I0 = Null + r0;
0x003059        01330005                 r1 = r1 + 5;
0x00305A        5010003F                 I1 = Null + r1;
0x00305B        E444002F                 r2 = r2 + 1;
0x00305C        5020004F                 I2 = Null + r2;
0x00305D        DDF0FFF3                 jump $user_eq.calcBandLoop;

 <$user_eq.calcBankCoefs.switchToNewCoefs>
0x00305E        F1040204                 popm <r0, r7>;
0x00305F        F1000204                 pushm <r0, r7>;
0x003060        D1990002                 r7 = M[r7 + 2];
0x003061        D5290003                 M[r7 + 3] = r0;
0x003062        E1F0EFC3                 call $audio_proc.hq_peq.initialize;
0x003063        F1040204                 popm <r0, r7>;
0x003064        D1990003                 r7 = M[r7 + 3];
0x003065        DD000003                 if EQ jump $user_eq.calcBankCoefs.no2ndChannelEq;
0x003066        D5290003                 M[r7 + 3] = r0;
0x003067        E1F0EFBE                 call $audio_proc.hq_peq.initialize;

 <$user_eq.calcBankCoefs.no2ndChannelEq>
0x003068        DDF0E183                 jump $pop_rLink_and_rts;

 <$user_eq.calcBandCoefs>
0x003069        F3D00000                 push rLink;
0x00306A        0062000F                 r4 = r0 + Null;
0x00306B        8122FFF0                 r0 = r0 AND 0xfff0;
0x00306C        E1F00027                 call $user_eq.calcParamAddrOffset;
0x00306D        00A2005F                 r8 = r0 + r3;
0x00306E        D1890002                 r6 = M[r7 + 2];
0x00306F        D1880003                 r6 = M[r6 + 3];
0x003070        2008003F                 Null = r6 - r1;
0x003071        DD000004                 if EQ jump $user_eq.calcBandCoefsB;
0x003072        0054000F                 r3 = r2 + Null;
0x003073        0043000F                 r2 = r1 + Null;
0x003074        DDF00002                 jump $user_eq.calcBandCoefsAorB;

 <$user_eq.calcBandCoefsB>
0x003075        0053000F                 r3 = r1 + Null;

 <$user_eq.calcBandCoefsAorB>
0x003076        5000005F                 I0 = Null + r3;
0x003077        5010004F                 I1 = Null + r2;
0x003078        D1C90001                 r10 = M[r7 + 1];
0x003079        99CC0006                 r10 = r10 * 6 (int);
0x00307A        01CC0003                 r10 = r10 + 3;
0x00307B        E5F00003                 do $user_eq.copyCurrentCoefsLoop;
0x00307C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00307D        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$user_eq.copyCurrentCoefsLoop>
0x00307E        500000AF                 I0 = Null + r8;
0x00307F        0026000F                 r0 = r4 + Null;
0x003080        E1F0002B                 call $user_eq.calcCoefAddrOffset;
0x003081        00A2004F                 r8 = r0 + r2;
0x003082        501000AF                 I1 = Null + r8;
0x003083        00A3004F                 r8 = r1 + r2;
0x003084        502000AF                 I2 = Null + r8;
0x003085        F1000210                 pushm <r2, r7>;
0x003086        0026000F                 r0 = r4 + Null;
0x003087        E1F00034                 call $user_eq.coefCalc;
0x003088        F1040210                 popm <r2, r7>;
0x003089        F1000210                 pushm <r2, r7>;
0x00308A        D1990002                 r7 = M[r7 + 2];
0x00308B        D5490003                 M[r7 + 3] = r2;
0x00308C        E1F0EF99                 call $audio_proc.hq_peq.initialize;
0x00308D        F1040210                 popm <r2, r7>;
0x00308E        D1990003                 r7 = M[r7 + 3];
0x00308F        DD000003                 if EQ jump $user_eq.calcBandCoefs.no2ndChannelEq;
0x003090        D5490003                 M[r7 + 3] = r2;
0x003091        E1F0EF94                 call $audio_proc.hq_peq.initialize;

 <$user_eq.calcBandCoefs.no2ndChannelEq>
0x003092        DDF0E159                 jump $pop_rLink_and_rts;

 <$user_eq.calcParamAddrOffset>
0x003093        F1000038                 pushm <r1, r2, r3>;
0x003094        81320F00                 r1 = r0 AND 0xf00;
0x003095        91330078                 r1 = r1 ASHIFT -8;
0x003096        814200F0                 r2 = r0 AND 0xf0;
0x003097        9144007C                 r2 = r2 ASHIFT -4;
0x003098        8152000F                 r3 = r0 AND 0xf;
0x003099        0025000F                 r0 = r3 + Null;
0x00309A        21030000                 Null = r1 - 0;
0x00309B        DD00000E                 if EQ jump $user_eq.completedParamAddrCalculation;
0x00309C        E433003F                 r1 = r1 - 1;
0x00309D        D1290001                 r0 = M[r7 + 1];
0x00309E        99220004                 r0 = r0 * 4 (int);
0x00309F        01220002                 r0 = r0 + 2;
0x0030A0        9B320000                 r1 = r1 * r0 (int);
0x0030A1        0023005F                 r0 = r1 + r3;
0x0030A2        E422002F                 r0 = r0 + 1;
0x0030A3        21040000                 Null = r2 - 0;
0x0030A4        DD000005                 if EQ jump $user_eq.completedParamAddrCalculation;
0x0030A5        E444003F                 r2 = r2 - 1;
0x0030A6        99440004                 r2 = r2 * 4 (int);
0x0030A7        03240000                 r0 = r0 + r2;
0x0030A8        01220002                 r0 = r0 + 2;

 <$user_eq.completedParamAddrCalculation>
0x0030A9        F1040038                 popm <r1, r2, r3>;
0x0030AA        DC0D000F                 rts;

 <$user_eq.calcCoefAddrOffset>
0x0030AB        F1000030                 pushm <r2, r3>;
0x0030AC        814200F0                 r2 = r0 AND 0xf0;
0x0030AD        9144007C                 r2 = r2 ASHIFT -4;
0x0030AE        8152000F                 r3 = r0 AND 0xf;
0x0030AF        0025000F                 r0 = r3 + Null;
0x0030B0        21040000                 Null = r2 - 0;
0x0030B1        DD000008                 if EQ jump $user_eq.completedCoefAddrCalculation;
0x0030B2        E444003F                 r2 = r2 - 1;
0x0030B3        D1290001                 r0 = M[r7 + 1];
0x0030B4        99220005                 r0 = r0 * 5 (int);
0x0030B5        01220003                 r0 = r0 + 3;
0x0030B6        0034002F                 r1 = r2 + r0;
0x0030B7        99240005                 r0 = r2 * 5 (int);
0x0030B8        01220003                 r0 = r0 + 3;

 <$user_eq.completedCoefAddrCalculation>
0x0030B9        F1040030                 popm <r2, r3>;
0x0030BA        DC0D000F                 rts;

 <$user_eq.coefCalc>
0x0030BB        F3D00000                 push rLink;
0x0030BC        814200F0                 r2 = r0 AND 0xf0;
0x0030BD        9144007C                 r2 = r2 ASHIFT -4;
0x0030BE        DD10000A                 if NE jump $user_eq.coefCalcBiquadBand.jump_entry;
0x0030BF        8122000F                 r0 = r0 AND 0xf;
0x0030C0        21020000                 Null = r0 - 0;
0x0030C1        DD000033                 if EQ jump $user_eq.calcNumBands.jump_entry;
0x0030C2        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0030C3        E402003F                 Null = r0 - 1;
0x0030C4        DD000035                 if EQ jump $user_eq.calcPreGain.jump_entry;
0x0030C5        F3D40000                 pop rLink;
0x0030C6        DC0D000F                 rts;

 <$user_eq.coefCalcBiquadBand.call_entry>
0x0030C7        F3D00000                 push rLink;

 <$user_eq.coefCalcBiquadBand.jump_entry>
0x0030C8        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030C9        21020000                 Null = r0 - 0;
0x0030CA        DD000044                 if EQ jump $user_eq.calcBypass.jump_entry;
0x0030CB        01901273                 r7 = Null + 4723;
0x0030CC        E402003F                 Null = r0 - 1;
0x0030CD        DD000044                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030CE        019012A8                 r7 = Null + 4776;
0x0030CF        21020002                 Null = r0 - 2;
0x0030D0        DD000041                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030D1        019012DC                 r7 = Null + 4828;
0x0030D2        21020003                 Null = r0 - 3;
0x0030D3        DD00003E                 if EQ jump $user_eq.calcXP1.jump_entry;
0x0030D4        019013DB                 r7 = Null + 5083;
0x0030D5        21020007                 Null = r0 - 7;
0x0030D6        DD00005B                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030D7        0190142C                 r7 = Null + 5164;
0x0030D8        21020008                 Null = r0 - 8;
0x0030D9        DD000058                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030DA        0190147C                 r7 = Null + 5244;
0x0030DB        21020009                 Null = r0 - 9;
0x0030DC        DD000055                 if EQ jump $user_eq.calcXP2.jump_entry;
0x0030DD        0190137C                 r7 = Null + 4988;
0x0030DE        21020004                 Null = r0 - 4;
0x0030DF        DD00007B                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E0        0190139A                 r7 = Null + 5018;
0x0030E1        21020005                 Null = r0 - 5;
0x0030E2        DD000078                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E3        019013BA                 r7 = Null + 5050;
0x0030E4        21020006                 Null = r0 - 6;
0x0030E5        DD000075                 if EQ jump $user_eq.calcShelf1.jump_entry;
0x0030E6        01901563                 r7 = Null + 5475;
0x0030E7        2102000A                 Null = r0 - 10;
0x0030E8        DD0000A0                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030E9        01901584                 r7 = Null + 5508;
0x0030EA        2102000B                 Null = r0 - 11;
0x0030EB        DD00009D                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030EC        019015A7                 r7 = Null + 5543;
0x0030ED        2102000C                 Null = r0 - 12;
0x0030EE        DD00009A                 if EQ jump $user_eq.calcShelf2.jump_entry;
0x0030EF        2102000D                 Null = r0 - 13;
0x0030F0        DD0000CE                 if EQ jump $user_eq.calcPEQ.jump_entry;

 <$user_eq.coefCalcInvalid>
0x0030F1        F3D40000                 pop rLink;
0x0030F2        DC0D000F                 rts;

 <$user_eq.calcNumBands.call_entry>
0x0030F3        F3D00000                 push rLink;

 <$user_eq.calcNumBands.jump_entry>
0x0030F4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030F5        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0030F6        F3D40000                 pop rLink;
0x0030F7        DC0D000F                 rts;

 <$user_eq.calcPreGain.call_entry>
0x0030F8        F3D00000                 push rLink;

 <$user_eq.calcPreGain.jump_entry>
0x0030F9        0120003C                 r0 = Null + 60;
0x0030FA        E1F0E6FA                 call $kal_float_lib.int_to_float;
0x0030FB        0042000F                 r2 = r0 + Null;
0x0030FC        0053000F                 r3 = r1 + Null;
0x0030FD        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0030FE        8D220008                 r0 = r0 LSHIFT 8;
0x0030FF        91220078                 r0 = r0 ASHIFT -8;
0x003100        0130F790                 r1 = Null + -2160;
0x003101        E423006F                 r0 = MAX r1;
0x003102        013002D0                 r1 = Null + 720;
0x003103        E423005F                 r0 = MIN r1;
0x003104        E1F0E6F0                 call $kal_float_lib.int_to_float;
0x003105        E1F0E746                 call $kal_float_lib.div;
0x003106        E1F0E10A                 call $kal_filter_coef_lib.__db2lin;
0x003107        812200FF                 r0 = r0 AND 0xff;
0x003108        2122007F                 r0 = r0 - 127;
0x003109        8D33007F                 r1 = r1 LSHIFT -1;
0x00310A        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x00310B        0300B500                 Null = Null + Null, M[I1,1] = r1;
0x00310C        F3D40000                 pop rLink;
0x00310D        DC0D000F                 rts;

 <$user_eq.calcBypass.jump_entry>
0x00310E        F1030006                 SP = SP + 6;
0x00310F        E1F0E157                 call $kal_filter_coef_lib.calc_bypass;
0x003110        DDF000E7                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP1.jump_entry>
0x003111        F1030006                 SP = SP + 6;
0x003112        01200003                 r0 = Null + 3;
0x003113        E1F0E6E1                 call $kal_float_lib.int_to_float;
0x003114        0042000F                 r2 = r0 + Null;
0x003115        0053000F                 r3 = r1 + Null;
0x003116        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003117        FD000000 0170BB80        r5 = Null + 48000;
0x003119        09602A29                 r4 = Null + M[$current_codec_sampling_rate];
0x00311A        00670000                 if EQ r4 = r5 + Null;
0x00311B        FD00003A 01700CC8        r5 = Null + 3804360;
0x00311D        CC66007F                 r4 = r4 * r5 (SS);
0x00311E        99660003                 r4 = r4 * 3 (int);
0x00311F        2002006F                 Null = r0 - r4;
0x003120        DDC000D5                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003121        E430002F                 r1 = Null + 1;
0x003122        E423006F                 r0 = MAX r1;
0x003123        FD000000 0130EA60        r1 = Null + 60000;
0x003125        E423005F                 r0 = MIN r1;
0x003126        E1F0E6CE                 call $kal_float_lib.int_to_float;
0x003127        E1F0E724                 call $kal_float_lib.div;
0x003128        F100000C                 pushm <r0, r1>;
0x003129        FD000000 0130BB80        r1 = Null + 48000;
0x00312B        09202A29                 r0 = Null + M[$current_codec_sampling_rate];
0x00312C        00230000                 if EQ r0 = r1 + Null;
0x00312D        E1F0E6C7                 call $kal_float_lib.int_to_float;
0x00312E        F100000C                 pushm <r0, r1>;
0x00312F        E009000F                 call r7;
0x003130        DDF000C7                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcXP2.jump_entry>
0x003131        F1030006                 SP = SP + 6;
0x003132        01200003                 r0 = Null + 3;
0x003133        E1F0E6C1                 call $kal_float_lib.int_to_float;
0x003134        0042000F                 r2 = r0 + Null;
0x003135        0053000F                 r3 = r1 + Null;
0x003136        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003137        FD000000 0170BB80        r5 = Null + 48000;
0x003139        09602A29                 r4 = Null + M[$current_codec_sampling_rate];
0x00313A        00670000                 if EQ r4 = r5 + Null;
0x00313B        FD00003A 01700CC8        r5 = Null + 3804360;
0x00313D        CC66007F                 r4 = r4 * r5 (SS);
0x00313E        99660003                 r4 = r4 * 3 (int);
0x00313F        2002006F                 Null = r0 - r4;
0x003140        DDC000B5                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003141        01300078                 r1 = Null + 120;
0x003142        E423006F                 r0 = MAX r1;
0x003143        FD000000 0130EA60        r1 = Null + 60000;
0x003145        E423005F                 r0 = MIN r1;
0x003146        E1F0E6AE                 call $kal_float_lib.int_to_float;
0x003147        E1F0E704                 call $kal_float_lib.div;
0x003148        F100000C                 pushm <r0, r1>;
0x003149        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314A        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00314B        01300400                 r1 = Null + 1024;
0x00314C        E423006F                 r0 = MAX r1;
0x00314D        01302000                 r1 = Null + 8192;
0x00314E        E423005F                 r0 = MIN r1;
0x00314F        0130000C                 r1 = Null + 12;
0x003150        E1F0E689                 call $kal_float_lib.q_to_float;
0x003151        F100000C                 pushm <r0, r1>;
0x003152        FD000000 0130BB80        r1 = Null + 48000;
0x003154        09202A29                 r0 = Null + M[$current_codec_sampling_rate];
0x003155        00230000                 if EQ r0 = r1 + Null;
0x003156        E1F0E69E                 call $kal_float_lib.int_to_float;
0x003157        F100000C                 pushm <r0, r1>;
0x003158        E009000F                 call r7;
0x003159        DDF0009E                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf1.jump_entry>
0x00315A        F1030006                 SP = SP + 6;
0x00315B        01200003                 r0 = Null + 3;
0x00315C        E1F0E698                 call $kal_float_lib.int_to_float;
0x00315D        0042000F                 r2 = r0 + Null;
0x00315E        0053000F                 r3 = r1 + Null;
0x00315F        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003160        FD000000 0170BB80        r5 = Null + 48000;
0x003162        09602A29                 r4 = Null + M[$current_codec_sampling_rate];
0x003163        00670000                 if EQ r4 = r5 + Null;
0x003164        FD00003A 01700CC8        r5 = Null + 3804360;
0x003166        CC66007F                 r4 = r4 * r5 (SS);
0x003167        99660003                 r4 = r4 * 3 (int);
0x003168        2002006F                 Null = r0 - r4;
0x003169        DDC0008C                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x00316A        0130003C                 r1 = Null + 60;
0x00316B        E423006F                 r0 = MAX r1;
0x00316C        FD000000 0130EA60        r1 = Null + 60000;
0x00316E        E423005F                 r0 = MIN r1;
0x00316F        E1F0E685                 call $kal_float_lib.int_to_float;
0x003170        E1F0E6DB                 call $kal_float_lib.div;
0x003171        F100000C                 pushm <r0, r1>;
0x003172        0120003C                 r0 = Null + 60;
0x003173        E1F0E681                 call $kal_float_lib.int_to_float;
0x003174        0042000F                 r2 = r0 + Null;
0x003175        0053000F                 r3 = r1 + Null;
0x003176        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003177        8D220008                 r0 = r0 LSHIFT 8;
0x003178        91220078                 r0 = r0 ASHIFT -8;
0x003179        0130FD30                 r1 = Null + -720;
0x00317A        E423006F                 r0 = MAX r1;
0x00317B        013002D0                 r1 = Null + 720;
0x00317C        E423005F                 r0 = MIN r1;
0x00317D        E1F0E677                 call $kal_float_lib.int_to_float;
0x00317E        E1F0E6CD                 call $kal_float_lib.div;
0x00317F        F100000C                 pushm <r0, r1>;
0x003180        FD000000 0130BB80        r1 = Null + 48000;
0x003182        09202A29                 r0 = Null + M[$current_codec_sampling_rate];
0x003183        00230000                 if EQ r0 = r1 + Null;
0x003184        E1F0E670                 call $kal_float_lib.int_to_float;
0x003185        F100000C                 pushm <r0, r1>;
0x003186        E009000F                 call r7;
0x003187        DDF00070                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcShelf2.jump_entry>
0x003188        F1030006                 SP = SP + 6;
0x003189        01200003                 r0 = Null + 3;
0x00318A        E1F0E66A                 call $kal_float_lib.int_to_float;
0x00318B        0042000F                 r2 = r0 + Null;
0x00318C        0053000F                 r3 = r1 + Null;
0x00318D        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00318E        FD000000 0170BB80        r5 = Null + 48000;
0x003190        09602A29                 r4 = Null + M[$current_codec_sampling_rate];
0x003191        00670000                 if EQ r4 = r5 + Null;
0x003192        FD00003A 01700CC8        r5 = Null + 3804360;
0x003194        CC66007F                 r4 = r4 * r5 (SS);
0x003195        99660003                 r4 = r4 * 3 (int);
0x003196        2002006F                 Null = r0 - r4;
0x003197        DDC0005E                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x003198        01300078                 r1 = Null + 120;
0x003199        E423006F                 r0 = MAX r1;
0x00319A        FD000000 0130EA60        r1 = Null + 60000;
0x00319C        E423005F                 r0 = MIN r1;
0x00319D        E1F0E657                 call $kal_float_lib.int_to_float;
0x00319E        E1F0E6AD                 call $kal_float_lib.div;
0x00319F        F100000C                 pushm <r0, r1>;
0x0031A0        0120003C                 r0 = Null + 60;
0x0031A1        E1F0E653                 call $kal_float_lib.int_to_float;
0x0031A2        0042000F                 r2 = r0 + Null;
0x0031A3        0053000F                 r3 = r1 + Null;
0x0031A4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031A5        8D220008                 r0 = r0 LSHIFT 8;
0x0031A6        91220078                 r0 = r0 ASHIFT -8;
0x0031A7        0130FD30                 r1 = Null + -720;
0x0031A8        E423006F                 r0 = MAX r1;
0x0031A9        013002D0                 r1 = Null + 720;
0x0031AA        E423005F                 r0 = MIN r1;
0x0031AB        E1F0E649                 call $kal_float_lib.int_to_float;
0x0031AC        E1F0E69F                 call $kal_float_lib.div;
0x0031AD        F100000C                 pushm <r0, r1>;
0x0031AE        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031AF        01300400                 r1 = Null + 1024;
0x0031B0        E423006F                 r0 = MAX r1;
0x0031B1        01302000                 r1 = Null + 8192;
0x0031B2        E423005F                 r0 = MIN r1;
0x0031B3        0130000C                 r1 = Null + 12;
0x0031B4        E1F0E625                 call $kal_float_lib.q_to_float;
0x0031B5        F100000C                 pushm <r0, r1>;
0x0031B6        FD000000 0130BB80        r1 = Null + 48000;
0x0031B8        09202A29                 r0 = Null + M[$current_codec_sampling_rate];
0x0031B9        00230000                 if EQ r0 = r1 + Null;
0x0031BA        E1F0E63A                 call $kal_float_lib.int_to_float;
0x0031BB        F100000C                 pushm <r0, r1>;
0x0031BC        E009000F                 call r7;
0x0031BD        DDF0003A                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.calcPEQ.jump_entry>
0x0031BE        F1030006                 SP = SP + 6;
0x0031BF        01200003                 r0 = Null + 3;
0x0031C0        E1F0E634                 call $kal_float_lib.int_to_float;
0x0031C1        0042000F                 r2 = r0 + Null;
0x0031C2        0053000F                 r3 = r1 + Null;
0x0031C3        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031C4        FD000000 0170BB80        r5 = Null + 48000;
0x0031C6        09602A29                 r4 = Null + M[$current_codec_sampling_rate];
0x0031C7        00670000                 if EQ r4 = r5 + Null;
0x0031C8        FD00003A 01700CC8        r5 = Null + 3804360;
0x0031CA        CC66007F                 r4 = r4 * r5 (SS);
0x0031CB        99660003                 r4 = r4 * 3 (int);
0x0031CC        2002006F                 Null = r0 - r4;
0x0031CD        DDC00028                 if GT jump $user_eq.substituteBypassFilter.jump_entry;
0x0031CE        0130003C                 r1 = Null + 60;
0x0031CF        E423006F                 r0 = MAX r1;
0x0031D0        FD000000 0130EA60        r1 = Null + 60000;
0x0031D2        E423005F                 r0 = MIN r1;
0x0031D3        E1F0E621                 call $kal_float_lib.int_to_float;
0x0031D4        E1F0E677                 call $kal_float_lib.div;
0x0031D5        F100000C                 pushm <r0, r1>;
0x0031D6        0120003C                 r0 = Null + 60;
0x0031D7        E1F0E61D                 call $kal_float_lib.int_to_float;
0x0031D8        0042000F                 r2 = r0 + Null;
0x0031D9        0053000F                 r3 = r1 + Null;
0x0031DA        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031DB        8D220008                 r0 = r0 LSHIFT 8;
0x0031DC        91220078                 r0 = r0 ASHIFT -8;
0x0031DD        0130F790                 r1 = Null + -2160;
0x0031DE        E423006F                 r0 = MAX r1;
0x0031DF        013002D0                 r1 = Null + 720;
0x0031E0        E423005F                 r0 = MIN r1;
0x0031E1        E1F0E613                 call $kal_float_lib.int_to_float;
0x0031E2        E1F0E669                 call $kal_float_lib.div;
0x0031E3        F100000C                 pushm <r0, r1>;
0x0031E4        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0031E5        01300400                 r1 = Null + 1024;
0x0031E6        E423006F                 r0 = MAX r1;
0x0031E7        FD000000 01308000        r1 = Null + 32768;
0x0031E9        E423005F                 r0 = MIN r1;
0x0031EA        0130000C                 r1 = Null + 12;
0x0031EB        E1F0E5EE                 call $kal_float_lib.q_to_float;
0x0031EC        F100000C                 pushm <r0, r1>;
0x0031ED        FD000000 0130BB80        r1 = Null + 48000;
0x0031EF        09202A29                 r0 = Null + M[$current_codec_sampling_rate];
0x0031F0        00230000                 if EQ r0 = r1 + Null;
0x0031F1        E1F0E603                 call $kal_float_lib.int_to_float;
0x0031F2        F100000C                 pushm <r0, r1>;
0x0031F3        E1F0E3D8                 call $kal_filter_coef_lib.calc_peq;
0x0031F4        DDF00003                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.substituteBypassFilter.jump_entry>
0x0031F5        E1F0E071                 call $kal_filter_coef_lib.calc_bypass;
0x0031F6        DDF00001                 jump $user_eq.pop_biquad_coefs_and_rts;

 <$user_eq.pop_biquad_coefs_and_rts>
0x0031F7        F3240000                 pop r0;
0x0031F8        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031F9        F3240000                 pop r0;
0x0031FA        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FB        F3240000                 pop r0;
0x0031FC        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FD        F3240000                 pop r0;
0x0031FE        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x0031FF        F3240000                 pop r0;
0x003200        0300A500                 Null = Null + Null, M[I1,1] = r0;
0x003201        F3240000                 pop r0;
0x003202        0300A900                 Null = Null + Null, M[I2,1] = r0;
0x003203        F3D40000                 pop rLink;
0x003204        DC0D000F                 rts;

 <$main>
0x003205        E1F0EE2E                 call $_stack_initialise;
0x003206        E1F0EE12                 call $interrupt.initialise;
0x003207        E1F0EE68                 call $message.initialise;
0x003208        E1F0EE4C                 call $cbuffer.initialise;
0x003209        E1F0EDF8                 call $pskey.initialise;
0x00320A        E1F0EE03                 call $wall_clock.initialise;
0x00320B        E1F0CE32                 call $flash.init_dmconst;
0x00320C        FD0000FF 013059A6        r1 = Null + -42586;
0x00320E        01401070                 r2 = Null + 4208;
0x00320F        01503688                 r3 = Null + 13960;
0x003210        E1F0EDE6                 call $message.register_handler;
0x003211        013029D1                 r1 = Null + 10705;
0x003212        01401071                 r2 = Null + 4209;
0x003213        0150372F                 r3 = Null + 14127;
0x003214        E1F0EDE2                 call $message.register_handler;
0x003215        FD0000FF 013059C2        r1 = Null + -42558;
0x003217        01401072                 r2 = Null + 4210;
0x003218        01500E62                 r3 = Null + 3682;
0x003219        E1F0EDDD                 call $message.register_handler;
0x00321A        E1F0EE5B                 call $spi_comm.initialize;
0x00321B        E1F00507                 call $music_example.power_up_reset;
0x00321C        01401000                 r2 = Null + 4096;
0x00321D        FD000000 0150E00B        r3 = Null + 57355;
0x00321F        FD0000FF 09605A30        r4 = Null + M[$music_example.Version];
0x003221        8D660078                 r4 = r4 LSHIFT -8;
0x003222        E1F0DE0E                 call $message.send_short;
0x003223        E1F0EDC0                 call $message.send_ready_wait_for_go;

 <$M.main.wait_for_long_message_workaround>
0x003224        09002A27                 Null = Null + M[$SetOutputDevType_message_received];
0x003225        DD00FFFF                 if EQ jump $M.main.wait_for_long_message_workaround;
0x003226        E1F0EA62                 call $conn_init;
0x003227        FD0000FF 015059BE        r3 = Null + -42562;
0x003229        E1F002A0                 call $multi_chan_port_scan_and_routing_config;
0x00322A        E1F003D9                 call $multi_chan_config_tone_mixing;
0x00322B        E1F0026C                 call $codec_resampler.config;
0x00322C        E1F001F7                 call $config_rate_matching;
0x00322D        E1F00121                 call $codec_rate_adj.config_buffers;
0x00322E        E1F0015B                 call $codec_rate_adj.config_quality;
0x00322F        E1F004F8                 call $set_output_handler_timer;
0x003230        019000C8                 r7 = Null + 200;

 <$M.main.loop_discard_all_codec_data>
0x003231        E1F0EE29                 call $timer.1ms_delay;
0x003232        FD000080 01200002        r0 = Null + -8388606;
0x003234        E1F0DF57                 call $cbuffer.calc_amount_data;
0x003235        00C2000F                 r10 = r0 + Null;
0x003236        FD000080 01200002        r0 = Null + -8388606;
0x003238        E1F0DF79                 call $cbuffer.get_read_address_and_size;
0x003239        5000002F                 I0 = Null + r0;
0x00323A        50C0003F                 L0 = Null + r1;
0x00323B        E5F00003                 do $M.main.lp_read_port_data;
0x00323C        03002100                 Null = Null + Null, r0 = M[I0,1];
0x00323D        03000000                 Null = Null + Null;

 <$M.main.lp_read_port_data>
0x00323E        51C00000                 L0 = Null + 0;
0x00323F        FD000080 01200002        r0 = Null + -8388606;
0x003241        4430000F                 r1 = Null + I0;
0x003242        E1F0DF83                 call $cbuffer.set_read_address;
0x003243        E499003F                 r7 = r7 - 1;
0x003244        DDC0FFED                 if GT jump $M.main.loop_discard_all_codec_data;

 <$M.main.wait_for_some_codec_data>
0x003245        E1F0EE15                 call $timer.1ms_delay;
0x003246        FD000080 01200002        r0 = Null + -8388606;
0x003248        E1F0DF43                 call $cbuffer.calc_amount_data;
0x003249        21C200D8                 r10 = r0 - 216;
0x00324A        DD40FFFB                 if NEG jump $M.main.wait_for_some_codec_data;
0x00324B        0130017C                 r1 = Null + 380;
0x00324C        09402A2D                 r2 = Null + M[$tmr_period_con_copy];
0x00324D        01500AA2                 r3 = Null + 2722;
0x00324E        E1F0DF90                 call $timer.schedule_event_in;
0x00324F        013029E9                 r1 = Null + 10729;
0x003250        FD0000FF 09405A51        r2 = Null + M[$tmr_period_tone_copy];
0x003252        01500B85                 r3 = Null + 2949;
0x003253        E1F0DF8B                 call $timer.schedule_event_in;
0x003254        0130018C                 r1 = Null + 396;
0x003255        FD00000F 01404240        r2 = Null + 1000000;
0x003257        01501F70                 r3 = Null + 8048;
0x003258        E1F0DF86                 call $timer.schedule_event_in;

 <$M.main.wait_for_dac_buffer_wraparound>
0x003259        FD000080 01200011        r0 = Null + -8388591;
0x00325B        E1F0DF20                 call $cbuffer.calc_amount_space;
0x00325C        21020010                 Null = r0 - 16;
0x00325D        DD50FFFC                 if POS jump $M.main.wait_for_dac_buffer_wraparound;
0x00325E        FD0000FF 013059A2        r1 = Null + -42590;
0x003260        FD0000FF 09405A2D        r2 = Null + M[$tmr_period_audio_copy];
0x003262        01500DC2                 r3 = Null + 3522;
0x003263        E1F0DF7B                 call $timer.schedule_event_in;

 <$M.main.frame_loop>
0x003264        E1F0ED4C                 call $spi_comm.polled_service_routine;
0x003265        09202A28                 r0 = Null + M[$app_config.io];
0x003266        21020004                 Null = r0 - 4;
0x003267        DD10EE03                 if NE jump $error;
0x003268        01A00F76                 r8 = Null + 3958;
0x003269        E1F0D97E                 call $M.mips_profile.mainstart;
0x00326A        0170037F                 r5 = Null + 895;
0x00326B        E1F0E818                 call $codec.av_decode;
0x00326C        E1F00490                 call $M.music_example.extract_faststream_info.func;
0x00326D        FD0000FF 09005A43        Null = Null + M[$codec_resampler.resampler_active];
0x00326F        E1100254                 if NE call $codec_resampler.run_resampler;
0x003270        FD0000FF 09005A4E        Null = Null + M[$chain0_hw_warp_enable];
0x003272        E1000111                 if EQ call $codec_rate_adj.run_rate_adjustment;
0x003273        E1F0D4B4                 call $sra_calcrate;

 <$M.main.skip_decode>
0x003274        01A00F76                 r8 = Null + 3958;
0x003275        E1F0D97F                 call $M.mips_profile.mainend;
0x003276        D12A0006                 r0 = M[r8 + 6];
0x003277        FD0000FF 192058BF        M[$music_example.PeakMipsDecoder] = r0 + Null;
0x003279        0170037F                 r5 = Null + 895;
0x00327A        D1270006                 r0 = M[r5 + 6];
0x00327B        21020000                 Null = r0 - 0;
0x00327C        E110EAD2                 if NE call $SystemSleep;
0x00327D        09502A32                 r3 = Null + M[$music_example.frame_processing_size];
0x00327E        FD0000FF 09204AEB        r0 = Null + M[$M.system_config.data.stream_map_left_in];
0x003280        E1F0DF0B                 call $cbuffer.calc_amount_data;
0x003281        2002005F                 Null = r0 - r3;
0x003282        DD40FFE2                 if NEG jump $M.main.frame_loop;
0x003283        FD0000FF 09205840        r0 = Null + M[$M.system_config.data.stream_map_primary_left_out];
0x003285        E1F0DEF6                 call $cbuffer.calc_amount_space;
0x003286        2002005F                 Null = r0 - r3;
0x003287        DD40FFDD                 if NEG jump $M.main.frame_loop;
0x003288        E150026F                 if POS call $music_example_process;
0x003289        FD0000FF 01A04AD0        r8 = Null + -46384;
0x00328B        FD0000FF 09005A44        Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x00328D        E110D5C6                 if NE call $pcm_sync_calc_rate;
0x00328E        DDF0FFD6                 jump $M.main.frame_loop;

 <$multi_chan_config_cbops_copy_strucs>
0x00328F        F3D00000                 push rLink;
0x003290        09002A44                 Null = Null + M[$M.multi_chan_output.num_chain0_channels];
0x003291        DD00003C                 if EQ jump $M.multi_chan_config_cbops_copy_strucs.skip_chain0_config;
0x003292        FD0000FF 092059BE        r0 = Null + M[$interface_map_struc];
0x003294        FD0000FF 093059C0        r1 = Null + M[0xff59c0];
0x003296        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x003298        83230000                 r0 = r0 AND r1;
0x003299        0130000F                 r1 = Null + 15;
0x00329A        E1F0044A                 call $multi_chan_calc_cbops_channel_enables;
0x00329B        FD0000FF 19505A46        M[$M.multi_chan_output.chain0_tone_mix_en] = r3 + Null;
0x00329D        09202A45                 r0 = Null + M[$M.multi_chan_output.chain0_enables];
0x00329E        8122003F                 r0 = r0 AND 0x3f;
0x00329F        E422009F                 r0 = ONEBITCOUNT r0;
0x0032A0        FD0000FF 192047F9        M[0xff47f9] = r0 + Null;
0x0032A2        09502A46                 r3 = Null + M[$M.multi_chan_output.chain0_anc_enable];
0x0032A3        FD0000FF 09405A28        r2 = Null + M[$current_dac_sampling_rate];
0x0032A5        21050002                 Null = r3 - 2;
0x0032A6        DD00000B                 if EQ jump $M.multi_chan_config_cbops_copy_strucs.anc_192k;
0x0032A7        FD0000FF 01203FD6        r0 = Null + -49194;
0x0032A9        FD0000FF 013046D0        r1 = Null + -47408;
0x0032AB        FD000000 2104BB80        Null = r2 - 48000;
0x0032AD        00230000                 if EQ r0 = r1 + Null;
0x0032AE        192017AF                 M[0x17af] = r0 + Null;
0x0032AF        19201908                 M[0x1908] = r0 + Null;
0x0032B0        DDF0000A                 jump $M.multi_chan_config_cbops_copy_strucs.anc_rate_configured;

 <$M.multi_chan_config_cbops_copy_strucs.anc_192k>
0x0032B1        FD0000FF 0120494B        r0 = Null + -46773;
0x0032B3        FD0000FF 01304904        r1 = Null + -46844;
0x0032B5        FD000000 2104BB80        Null = r2 - 48000;
0x0032B7        00230000                 if EQ r0 = r1 + Null;
0x0032B8        192017AF                 M[0x17af] = r0 + Null;
0x0032B9        19201908                 M[0x1908] = r0 + Null;

 <$M.multi_chan_config_cbops_copy_strucs.anc_rate_configured>
0x0032BA        09202A44                 r0 = Null + M[$M.multi_chan_output.num_chain0_channels];
0x0032BB        192017AE                 M[0x17ae] = r0 + Null;
0x0032BC        E422002F                 r0 = r0 + 1;
0x0032BD        19201907                 M[0x1907] = r0 + Null;
0x0032BE        09202A44                 r0 = Null + M[$M.multi_chan_output.num_chain0_channels];
0x0032BF        FD0000FF 192049FB        M[0xff49fb] = r0 + Null;
0x0032C1        E422002F                 r0 = r0 + 1;
0x0032C2        192028F6                 M[0x28f6] = r0 + Null;
0x0032C3        E422002F                 r0 = r0 + 1;
0x0032C4        FD0000FF 19204AFB        M[0xff4afb] = r0 + Null;
0x0032C6        E422002F                 r0 = r0 + 1;
0x0032C7        192028FE                 M[0x28fe] = r0 + Null;
0x0032C8        E422002F                 r0 = r0 + 1;
0x0032C9        FD0000FF 192058A9        M[0xff58a9] = r0 + Null;
0x0032CB        E422002F                 r0 = r0 + 1;
0x0032CC        19202906                 M[0x2906] = r0 + Null;

 <$M.multi_chan_config_cbops_copy_strucs.skip_chain0_config>
0x0032CD        FD0000FF 09005A44        Null = Null + M[$M.multi_chan_output.num_chain1_channels];
0x0032CF        DD00001F                 if EQ jump $M.multi_chan_config_cbops_copy_strucs.skip_chain1_config;
0x0032D0        FD0000FF 092059BE        r0 = Null + M[$interface_map_struc];
0x0032D2        FD0000FF 093059C0        r1 = Null + M[0xff59c0];
0x0032D4        83230000                 r0 = r0 AND r1;
0x0032D5        0130000F                 r1 = Null + 15;
0x0032D6        E1F0040E                 call $multi_chan_calc_cbops_channel_enables;
0x0032D7        19502A47                 M[$M.multi_chan_output.chain1_tone_mix_en] = r3 + Null;
0x0032D8        FD0000FF 09205A45        r0 = Null + M[$M.multi_chan_output.chain1_enables];
0x0032DA        81220003                 r0 = r0 AND 0x3;
0x0032DB        E422009F                 r0 = ONEBITCOUNT r0;
0x0032DC        192028DB                 M[0x28db] = r0 + Null;
0x0032DD        E440002F                 r2 = Null + 1;
0x0032DE        E450003F                 r3 = Null - 1;
0x0032DF        E460003F                 r4 = Null - 1;
0x0032E0        E470002F                 r5 = Null + 1;
0x0032E1        FD0000FF 09205A44        r0 = Null + M[$M.multi_chan_output.num_chain1_channels];
0x0032E3        21020002                 Null = r0 - 2;
0x0032E4        DD400005                 if NEG jump $M.multi_chan_config_cbops_copy_strucs.conf_chai1_sra_op;
0x0032E5        01400002                 r2 = Null + 2;
0x0032E6        E450002F                 r3 = Null + 1;
0x0032E7        01600003                 r4 = Null + 3;
0x0032E8        01700002                 r5 = Null + 2;

 <$M.multi_chan_config_cbops_copy_strucs.conf_chai1_sra_op>
0x0032E9        19402761                 M[0x2761] = r2 + Null;
0x0032EA        19502762                 M[0x2762] = r3 + Null;
0x0032EB        19602763                 M[0x2763] = r4 + Null;
0x0032EC        FD0000FF 197058B1        M[0xff58b1] = r5 + Null;

 <$M.multi_chan_config_cbops_copy_strucs.skip_chain1_config>
0x0032EE        01500000                 r3 = Null + 0;
0x0032EF        E1F0016E                 call $multi_chan_soft_mute;
0x0032F0        09302A41                 r1 = Null + M[$M.system_config.data.dithertype];
0x0032F1        E1F0032C                 call $multi_chan_config_dither_type;
0x0032F2        DDF0DEF9                 jump $pop_rLink_and_rts;

 <$M.music_example.GetControl.func>
0x0032F3        F3D00000                 push rLink;
0x0032F4        FD0000FF 514046F6        I4 = Null + -47370;
0x0032F6        5000003F                 I0 = Null + r1;
0x0032F7        01C0000A                 r10 = Null + 10;
0x0032F8        E5F00003                 do $M.music_example.GetControl.lp_copy_control;
0x0032F9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0032FA        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.music_example.GetControl.lp_copy_control>
0x0032FB        FD0000FF 09305A32        r1 = Null + M[$music_example.SystemVolume];
0x0032FD        FD0000FF 19305A3A        M[$M.music_example.GetControl.local_sys_vol] = r1 + Null;
0x0032FF        FD0000FF 092046F6        r0 = Null + M[$music_example.SpiSysControl];
0x003301        81028000                 Null = r0 AND 0x8000;
0x003302        DD00000B                 if EQ jump $M.music_example.GetControl.dontupdateDAC;
0x003303        FD0000FF 093046F7        r1 = Null + M[$music_example.OvrSystemVolume];
0x003305        8133000F                 r1 = r1 AND 0xf;
0x003306        FD0000FF 19305A3A        M[$M.music_example.GetControl.local_sys_vol] = r1 + Null;
0x003308        FD0000FF 09605A3A        r4 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x00330A        0056000F                 r3 = r4 + Null;
0x00330B        01401006                 r2 = Null + 4102;
0x00330C        E1F0DD24                 call $message.send_short;

 <$M.music_example.GetControl.dontupdateDAC>
0x00330D        FD0000FF 092046F6        r0 = Null + M[$music_example.SpiSysControl];
0x00330F        81021000                 Null = r0 AND 0x1000;
0x003310        DD000015                 if EQ jump $M.music_example.GetControl.dontupdateAUX;
0x003311        FD0000FF 09305A3A        r1 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x003313        FD0000FF 094046FA        r2 = Null + M[$music_example.AuxOvrMasterVolumes];
0x003315        FD0000FF 09505A35        r3 = Null + M[$music_example.Main.ToneVolume];
0x003317        FD0000FF 096046FB        r4 = Null + M[$music_example.AuxOvrTrimVolumes];
0x003319        91760074                 r5 = r4 ASHIFT -12;
0x00331A        8D66000C                 r4 = r4 LSHIFT 12;
0x00331B        91660074                 r4 = r4 ASHIFT -12;
0x00331C        510029C2                 I0 = Null + 10690;
0x00331D        0300B100                 Null = Null + Null, M[I0,1] = r1;
0x00331E        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x00331F        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x003320        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x003321        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x003322        5000000F                 I0 = Null + Null;
0x003323        015029C2                 r3 = Null + 10690;
0x003324        E1F0E9A2                 call $M.music_example_message.AuxVolume.update_volumes;

 <$M.music_example.GetControl.dontupdateAUX>
0x003325        FD0000FF 092046F6        r0 = Null + M[$music_example.SpiSysControl];
0x003327        81020800                 Null = r0 AND 0x800;
0x003328        DD000024                 if EQ jump $M.music_example.GetControl.dontupdateDAC1;
0x003329        FD0000FF 09305A3A        r1 = Null + M[$M.music_example.GetControl.local_sys_vol];
0x00332B        FD0000FF 094046FC        r2 = Null + M[$music_example.MainOvrMasterVolumes];
0x00332D        FD0000FF 09505A35        r3 = Null + M[$music_example.Main.ToneVolume];
0x00332F        FD0000FF 096046FD        r4 = Null + M[$music_example.PriOvrTrimVolumes];
0x003331        91760074                 r5 = r4 ASHIFT -12;
0x003332        8D66000C                 r4 = r4 LSHIFT 12;
0x003333        91660074                 r4 = r4 ASHIFT -12;
0x003334        FD0000FF 098046FE        r6 = Null + M[$music_example.SecOvrTrimVolumes];
0x003336        91980074                 r7 = r6 ASHIFT -12;
0x003337        8D88000C                 r6 = r6 LSHIFT 12;
0x003338        91880074                 r6 = r6 ASHIFT -12;
0x003339        FD0000FF 09A046FF        r8 = Null + M[$music_example.SubOvrTrimVolumes];
0x00333B        8DAA000C                 r8 = r8 LSHIFT 12;
0x00333C        91AA0074                 r8 = r8 ASHIFT -12;
0x00333D        510028EB                 I0 = Null + 10475;
0x00333E        0300B100                 Null = Null + Null, M[I0,1] = r1;
0x00333F        0300C100                 Null = Null + Null, M[I0,1] = r2;
0x003340        0300D100                 Null = Null + Null, M[I0,1] = r3;
0x003341        0300E100                 Null = Null + Null, M[I0,1] = r4;
0x003342        0300F100                 Null = Null + Null, M[I0,1] = r5;
0x003343        0028000F                 r0 = r6 + Null;
0x003344        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003345        0029000F                 r0 = r7 + Null;
0x003346        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003347        002A000F                 r0 = r8 + Null;
0x003348        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x003349        5000000F                 I0 = Null + Null;
0x00334A        015028EB                 r3 = Null + 10475;
0x00334B        E1F0E809                 call $M.music_example_message.MainVolume.update_volumes;

 <$M.music_example.GetControl.dontupdateDAC1>
0x00334C        01A00000                 r8 = Null + 0;
0x00334D        DDF0DE9E                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.config_buffers>
0x00334E        F3D00000                 push rLink;
0x00334F        E1F0DE54                 call $block_interrupts;
0x003350        0160019D                 r4 = Null + 413;
0x003351        FD0000FF 017059E8        r5 = Null + -42520;
0x003353        FD0000FF 09005A43        Null = Null + M[$codec_resampler.resampler_active];
0x003355        DD100009                 if NE jump $codec_rate_adj.resampler_done;
0x003356        0120019D                 r0 = Null + 413;
0x003357        E1F0DCFD                 call $cbuffer.empty_buffer;
0x003358        FD0000FF 012059E8        r0 = Null + -42520;
0x00335A        E1F0DCFA                 call $cbuffer.empty_buffer;
0x00335B        FD0000FF 016059D6        r4 = Null + -42538;
0x00335D        017000AD                 r5 = Null + 173;

 <$codec_rate_adj.resampler_done>
0x00335E        FD0000FF 09205A4E        r0 = Null + M[$chain0_hw_warp_enable];
0x003360        09222A2E                 r0 = r0 + M[$rate_match_disable];
0x003361        DD000007                 if EQ jump $codec_rate_adj.chain0_sw_rate_matching;
0x003362        01200195                 r0 = Null + 405;
0x003363        E1F0DCF1                 call $cbuffer.empty_buffer;
0x003364        FD0000FF 012059E5        r0 = Null + -42523;
0x003366        E1F0DCEE                 call $cbuffer.empty_buffer;
0x003367        DDF00006                 jump $codec_rate_adj.rate_adj_done;

 <$codec_rate_adj.chain0_sw_rate_matching>
0x003368        196027EB                 M[$codec_rate_adj.stereo] = r4 + Null;
0x003369        197027ED                 M[0x27ed] = r5 + Null;
0x00336A        01600195                 r4 = Null + 405;
0x00336B        FD0000FF 017059E5        r5 = Null + -42523;

 <$codec_rate_adj.rate_adj_done>
0x00336D        FD0000FF 19604AEB        M[$M.system_config.data.stream_map_left_in] = r4 + Null;
0x00336F        19702878                 M[$M.system_config.data.stream_map_right_in] = r5 + Null;
0x003370        01202541                 r0 = Null + 9537;
0x003371        FD0000FF 01304AD8        r1 = Null + -46376;
0x003373        09002A4F                 Null = Null + M[$chain1_hw_warp_enable];
0x003374        00230001                 if NE r0 = r1 + Null;
0x003375        FD0000FF 19205979        M[0xff5979] = r0 + Null;
0x003377        E1F0DE1C                 call $interrupt.unblock;
0x003378        FD0000FF 09205A4E        r0 = Null + M[$chain0_hw_warp_enable];
0x00337A        FD0000FF 09225A4E        r0 = r0 + M[$chain0_hw_warp_enable];
0x00337C        DD10DE6F                 if NE jump $pop_rLink_and_rts;
0x00337D        01600000                 r4 = Null + 0;
0x00337E        FD000000 01408004        r2 = Null + 32772;
0x003380        01500003                 r3 = Null + 3;
0x003381        E1F0DCAF                 call $message.send_short;
0x003382        DDF0DE69                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.run_rate_adjustment>
0x003383        09002A2E                 Null = Null + M[$rate_match_disable];
0x003384        DC0D0001                 if NE rts;
0x003385        F3D00000                 push rLink;
0x003386        01A027EB                 r8 = Null + 10219;
0x003387        E1F0D150                 call $cbops.rate_adjustment_and_shift.Process;

 <$codec_rate_adj.done>
0x003388        DDF0DE63                 jump $pop_rLink_and_rts;

 <$codec_rate_adj.config_quality>
0x003389        FD0000FF 01403505        r2 = Null + -51963;
0x00338B        0150000C                 r3 = Null + 12;
0x00338C        09002016                 Null = Null + M[0x2016];
0x00338D        DD000004                 if EQ jump $codec_rate_adj.set_warp_operator;
0x00338E        FD0000FF 014031A0        r2 = Null + -52832;
0x003390        01500024                 r3 = Null + 36;

 <$codec_rate_adj.set_warp_operator>
0x003391        194027F0                 M[0x27f0] = r2 + Null;
0x003392        195027F6                 M[0x27f6] = r3 + Null;
0x003393        DC0D000F                 rts;

 <$codec_rate_adj.clear_history_buffers>
0x003394        01C00024                 r10 = Null + 36;
0x003395        01200080                 r0 = Null + 128;
0x003396        5000002F                 I0 = Null + r0;
0x003397        012000C0                 r0 = Null + 192;
0x003398        5010002F                 I1 = Null + r0;
0x003399        01200000                 r0 = Null + 0;
0x00339A        E5F00003                 do $codec_rate_adj.audio_fill_loop1;
0x00339B        0300A100                 Null = Null + Null, M[I0,1] = r0;
0x00339C        0300A500                 Null = Null + Null, M[I1,1] = r0;

 <$codec_rate_adj.audio_fill_loop1>
0x00339D        DC0D000F                 rts;

 <$M.music_example.PsKeyReadHandler.func>
0x00339E        F3D00000                 push rLink;
0x00339F        E404002F                 Null = r2 + 1;
0x0033A0        DD10000A                 if NE jump $M.music_example.PsKeyReadHandler.No_Retry;
0x0033A1        09202A26                 r0 = Null + M[$M.music_example.LoadParams.Pskey_fetch_flg];
0x0033A2        DD000005                 if EQ jump $M.music_example.PsKeyReadHandler.No_2nd_Retry;
0x0033A3        19002A26                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = Null + Null;
0x0033A4        FD0000FF 09405A26        r2 = Null + M[$M.music_example.LoadParams.Last_PsKey];
0x0033A6        DDF001C5                 jump $M.music_example.LoadParams.TestPsKey;

 <$M.music_example.PsKeyReadHandler.No_2nd_Retry>
0x0033A7        E420002F                 r0 = Null + 1;
0x0033A8        19202A26                 M[$M.music_example.LoadParams.Pskey_fetch_flg] = r0 + Null;
0x0033A9        DDF001C8                 jump $M.music_example.LoadParams.done;

 <$M.music_example.PsKeyReadHandler.No_Retry>
0x0033AA        51050001                 I0 = r3 + 1;
0x0033AB        E4C4003F                 r10 = r2 - 1;
0x0033AC        5820000F                 I2 = I0 + Null;
0x0033AD        FD000000 0150FFFF        r3 = Null + 65535;
0x0033AF        E5F00004                 do $M.music_example.PsKeyReadHandler.loop1;
0x0033B0        03002800                 Null = Null + Null, r0 = M[I2,0];
0x0033B1        83250000                 r0 = r0 AND r3;
0x0033B2        0300A900                 Null = Null + Null, M[I2,1] = r0;

 <$M.music_example.PsKeyReadHandler.loop1>
0x0033B3        01C00100                 r10 = Null + 256;
0x0033B4        79220001                 I2 = I2 - 1;
0x0033B5        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0033B6        2003002F                 Null = r1 - r0;
0x0033B7        DD1001BA                 if NE jump $M.music_example.LoadParams.done;
0x0033B8        03007100                 Null = Null + Null, r5 = M[I0,1];
0x0033B9        03002100                 Null = Null + Null, r0 = M[I0,1];
0x0033BA        816200FF                 r4 = r0 AND 0xff;
0x0033BB        006C0000                 if EQ r4 = r10 + Null;
0x0033BC        8D220078                 r0 = r0 LSHIFT -8;
0x0033BD        00A0000F                 r8 = Null + Null;

 <$M.music_example.PsKeyReadHandler.start_loop>
0x0033BE        8DAA007F                 r8 = r8 LSHIFT -1;
0x0033BF        DD100007                 if NE jump $M.music_example.PsKeyReadHandler.withinGroup;
0x0033C0        6C02000F                 Null = I2 - I0;
0x0033C1        DD400017                 if NEG jump $M.music_example.PsKeyReadHandler.endOfBuffer;
0x0033C2        03005100                 Null = Null + Null, r3 = M[I0,1];
0x0033C3        FD000000 01A08000        r8 = Null + 32768;
0x0033C5        0090000F                 r7 = Null + Null;

 <$M.music_example.PsKeyReadHandler.withinGroup>
0x0033C6        800500AF                 Null = r3 AND r8;
0x0033C7        DD00000E                 if EQ jump $M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue;
0x0033C8        FD0000FF 8999FFFF        r7 = r7 XOR 0xffffff;
0x0033CA        DD000004                 if EQ jump $M.music_example.PsKeyReadHandler.SomeWhere;
0x0033CB        03004100                 Null = Null + Null, r2 = M[I0,1];
0x0033CC        8D840078                 r6 = r2 LSHIFT -8;
0x0033CD        DDF00002                 jump $M.music_example.PsKeyReadHandler.SomeWhereElse;

 <$M.music_example.PsKeyReadHandler.SomeWhere>
0x0033CE        818400FF                 r6 = r2 AND 0xff;

 <$M.music_example.PsKeyReadHandler.SomeWhereElse>
0x0033CF        03003100                 Null = Null + Null, r1 = M[I0,1];
0x0033D0        8D880010                 r6 = r6 LSHIFT 16;
0x0033D1        87380000                 r1 = r1 OR r6;
0x0033D2        FD0000FF 09825A25        r6 = r0 + M[$M.music_example.LoadParams.paramoffset];
0x0033D4        D5381E38                 M[r6 + 7736] = r1;

 <$M.music_example.PsKeyReadHandler.dontOverwriteCurrentValue>
0x0033D5        E422002F                 r0 = r0 + 1;
0x0033D6        2002006F                 Null = r0 - r4;
0x0033D7        DD40FFE7                 if NEG jump $M.music_example.PsKeyReadHandler.start_loop;

 <$M.music_example.PsKeyReadHandler.endOfBuffer>
0x0033D8        FD0000FF 09405A25        r2 = Null + M[$M.music_example.LoadParams.paramoffset];
0x0033DA        200600CF                 Null = r4 - r10;
0x0033DB        004400C0                 if EQ r2 = r2 + r10;
0x0033DC        FD0000FF 19405A25        M[$M.music_example.LoadParams.paramoffset] = r2 + Null;
0x0033DE        0047000F                 r2 = r5 + Null;
0x0033DF        DDF0018C                 jump $M.music_example.LoadParams.TestPsKey;

 <$multi_chan_adjust_tone_cbuffers>
0x0033E0        FD0000FF 094059F7        r2 = Null + M[$tone_in_left_resample_cbuffer_struc];
0x0033E2        01500000                 r3 = Null + 0;
0x0033E3        FD0000FF 096059F9        r4 = Null + M[0xff59f9];
0x0033E5        FD0000FF 092059FB        r0 = Null + M[0xff59fb];
0x0033E7        29022A4A                 Null = r0 - M[$M.multi_chan_output.tone0_in_left_read_ptr];
0x0033E8        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_left;
0x0033E9        2026002F                 r0 = r4 - r0;
0x0033EA        00220044                 if NEG r0 = r0 + r2;
0x0033EB        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_left>
0x0033EC        FD0000FF 092059FE        r0 = Null + M[0xff59fe];
0x0033EE        FD0000FF 29025A4A        Null = r0 - M[$M.multi_chan_output.tone1_in_left_read_ptr];
0x0033F0        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_left;
0x0033F1        2026002F                 r0 = r4 - r0;
0x0033F2        00220044                 if NEG r0 = r0 + r2;
0x0033F3        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_left>
0x0033F4        FD0000FF 09205A01        r0 = Null + M[0xff5a01];
0x0033F6        29022A4B                 Null = r0 - M[$M.multi_chan_output.tone2_in_left_read_ptr];
0x0033F7        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_left;
0x0033F8        2026002F                 r0 = r4 - r0;
0x0033F9        00220044                 if NEG r0 = r0 + r2;
0x0033FA        E452006F                 r3 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_left>
0x0033FB        01700000                 r5 = Null + 0;
0x0033FC        098007FF                 r6 = Null + M[0x7ff];
0x0033FD        092015FE                 r0 = Null + M[0x15fe];
0x0033FE        FD0000FF 29025A4B        Null = r0 - M[$M.multi_chan_output.tone0_in_right_read_ptr];
0x003400        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_right;
0x003401        2028002F                 r0 = r6 - r0;
0x003402        00220044                 if NEG r0 = r0 + r2;
0x003403        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone0_in_right>
0x003404        092019FE                 r0 = Null + M[0x19fe];
0x003405        29022A4C                 Null = r0 - M[$M.multi_chan_output.tone1_in_right_read_ptr];
0x003406        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_right;
0x003407        2028002F                 r0 = r6 - r0;
0x003408        00220044                 if NEG r0 = r0 + r2;
0x003409        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone1_in_right>
0x00340A        09201AFE                 r0 = Null + M[0x1afe];
0x00340B        FD0000FF 29025A4C        Null = r0 - M[$M.multi_chan_output.tone2_in_right_read_ptr];
0x00340D        DD000004                 if EQ jump $M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_right;
0x00340E        2028002F                 r0 = r6 - r0;
0x00340F        00220044                 if NEG r0 = r0 + r2;
0x003410        E472006F                 r5 = MAX r0;

 <$M.multi_chan_adjust_tone_cbuffers.skip_tone2_in_right>
0x003411        0005000F                 Null = r3 + Null;
0x003412        00570000                 if EQ r3 = r5 + Null;
0x003413        0007000F                 Null = r5 + Null;
0x003414        00750000                 if EQ r5 = r3 + Null;
0x003415        50C0004F                 L0 = Null + r2;
0x003416        7080005F                 M0 = Null - r3;
0x003417        5000006F                 I0 = Null + r4;
0x003418        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x003419        4420000F                 r0 = Null + I0;
0x00341A        FD0000FF 192059F8        M[0xff59f8] = r0 + Null;
0x00341C        7080007F                 M0 = Null - r5;
0x00341D        5000008F                 I0 = Null + r6;
0x00341E        02002000                 Null = Null + Null, r0 = M[I0,M0];
0x00341F        4420000F                 r0 = Null + I0;
0x003420        192007FE                 M[0x7fe] = r0 + Null;
0x003421        51C00000                 L0 = Null + 0;
0x003422        DC0D000F                 rts;

 <$config_rate_matching>
0x003423        F3D00000                 push rLink;
0x003424        FD0000FF 09305A28        r1 = Null + M[$current_dac_sampling_rate];
0x003426        99330003                 r1 = r1 * 3 (int);
0x003427        19302534                 M[0x2534] = r1 + Null;
0x003428        09402A2A                 r2 = Null + M[$max_clock_mismatch];
0x003429        8D240079                 r0 = r2 LSHIFT -7;
0x00342A        81220001                 r0 = r0 AND 0x1;
0x00342B        19202A2E                 M[$rate_match_disable] = r0 + Null;
0x00342C        FD0000FF 09605A29        r4 = Null + M[$local_play_back];
0x00342E        DD10EC3C                 if NE jump $error;
0x00342F        09002A2E                 Null = Null + M[$rate_match_disable];
0x003430        DD10002C                 if NE jump $M.config_rate_matching.end;
0x003431        8144007F                 r2 = r2 AND 0x7f;
0x003432        21340003                 r1 = r2 - 3;
0x003433        20440034                 if NEG r2 = r2 - r1;
0x003434        994420C5                 r2 = r2 * 8389 (int);
0x003435        95342000                 r1 = r2 * 0.25 (frac);
0x003436        03430000                 r2 = r2 + r1;
0x003437        FD000003 2134D70A        r1 = r2 - 251658;
0x003439        20440035                 if POS r2 = r2 - r1;
0x00343A        19402533                 M[0x2533] = r2 + Null;
0x00343B        FD000040 01400000        r2 = Null + 4194304;
0x00343D        19402549                 M[0x2549] = r2 + Null;
0x00343E        FD0000FF 09505A2A        r3 = Null + M[$long_term_mismatch];
0x003440        81250001                 r0 = r3 AND 0x1;
0x003441        DD00001B                 if EQ jump $M.config_rate_matching.end;
0x003442        9155007F                 r3 = r3 ASHIFT -1;
0x003443        91550006                 r3 = r3 ASHIFT 6;
0x003444        29052533                 Null = r3 - M[0x2533];
0x003445        DD500017                 if POS jump $M.config_rate_matching.end;
0x003446        09052533                 Null = r3 + M[0x2533];
0x003447        DD400015                 if NEG jump $M.config_rate_matching.end;
0x003448        19502548                 M[0x2548] = r3 + Null;
0x003449        19502541                 M[0x2541] = r3 + Null;
0x00344A        09202534                 r0 = Null + M[0x2534];
0x00344B        97250000                 r0 = r0 * r3 (frac);
0x00344C        1920254C                 M[0x254c] = r0 + Null;
0x00344D        1920254D                 M[0x254d] = r0 + Null;
0x00344E        01200002                 r0 = Null + 2;
0x00344F        19202543                 M[0x2543] = r0 + Null;
0x003450        E420002F                 r0 = Null + 1;
0x003451        1920254A                 M[0x254a] = r0 + Null;
0x003452        FD0000FF 09005A4E        Null = Null + M[$chain0_hw_warp_enable];
0x003454        DD000008                 if EQ jump $M.config_rate_matching.end;
0x003455        FD0000FF 1950597C        M[0xff597c] = r3 + Null;
0x003457        9565FE00                 r4 = r3 * -0.015625 (frac);
0x003458        FD000000 01408004        r2 = Null + 32772;
0x00345A        01500003                 r3 = Null + 3;
0x00345B        E1F0DBD5                 call $message.send_short;

 <$M.config_rate_matching.end>
0x00345C        DDF0DD8F                 jump $pop_rLink_and_rts;

 <$multi_chan_soft_mute>
0x00345D        F3D00000                 push rLink;
0x00345E        19502A4D                 M[$M.multi_chan_output.channels_mute_en] = r3 + Null;
0x00345F        FD0000FF 092059BE        r0 = Null + M[$interface_map_struc];
0x003461        FD0000FF 093059C0        r1 = Null + M[0xff59c0];
0x003463        FD0000FF 8933FFFF        r1 = r1 XOR 0xffffff;
0x003465        83230000                 r0 = r0 AND r1;
0x003466        0035000F                 r1 = r3 + Null;
0x003467        E1F0027D                 call $multi_chan_calc_cbops_channel_enables;
0x003468        FD0000FF 19505A4D        M[$M.multi_chan_output.chain0_mute_en] = r3 + Null;
0x00346A        E430002F                 r1 = Null + 1;
0x00346B        81050001                 Null = r3 AND 0x1;
0x00346C        20300031                 if NE r1 = Null - r1;
0x00346D        19302923                 M[$M.multi_chan_output.chain0_ch0_mute_op.param] = r1 + Null;
0x00346E        E430002F                 r1 = Null + 1;
0x00346F        81050002                 Null = r3 AND 0x2;
0x003470        20300031                 if NE r1 = Null - r1;
0x003471        FD0000FF 193058DB        M[$M.multi_chan_output.chain0_ch1_mute_op.param] = r1 + Null;
0x003473        E430002F                 r1 = Null + 1;
0x003474        81050004                 Null = r3 AND 0x4;
0x003475        20300031                 if NE r1 = Null - r1;
0x003476        1930292A                 M[$M.multi_chan_output.chain0_ch2_mute_op.param] = r1 + Null;
0x003477        E430002F                 r1 = Null + 1;
0x003478        81050008                 Null = r3 AND 0x8;
0x003479        20300031                 if NE r1 = Null - r1;
0x00347A        FD0000FF 193058E2        M[$M.multi_chan_output.chain0_ch3_mute_op.param] = r1 + Null;
0x00347C        E430002F                 r1 = Null + 1;
0x00347D        81050010                 Null = r3 AND 0x10;
0x00347E        20300031                 if NE r1 = Null - r1;
0x00347F        19302931                 M[$M.multi_chan_output.chain0_ch4_mute_op.param] = r1 + Null;
0x003480        E430002F                 r1 = Null + 1;
0x003481        81050020                 Null = r3 AND 0x20;
0x003482        20300031                 if NE r1 = Null - r1;
0x003483        FD0000FF 193058E9        M[$M.multi_chan_output.chain0_ch5_mute_op.param] = r1 + Null;
0x003485        FD0000FF 092059BE        r0 = Null + M[$interface_map_struc];
0x003487        FD0000FF 093059C0        r1 = Null + M[0xff59c0];
0x003489        83230000                 r0 = r0 AND r1;
0x00348A        09302A4D                 r1 = Null + M[$M.multi_chan_output.channels_mute_en];
0x00348B        E1F00259                 call $multi_chan_calc_cbops_channel_enables;
0x00348C        19502A4E                 M[$M.multi_chan_output.chain1_mute_en] = r3 + Null;
0x00348D        E430002F                 r1 = Null + 1;
0x00348E        81050001                 Null = r3 AND 0x1;
0x00348F        20300031                 if NE r1 = Null - r1;
0x003490        19302938                 M[$M.multi_chan_output.chain1_ch0_mute_op.param] = r1 + Null;
0x003491        E430002F                 r1 = Null + 1;
0x003492        81050002                 Null = r3 AND 0x2;
0x003493        20300031                 if NE r1 = Null - r1;
0x003494        FD0000FF 193058F0        M[$M.multi_chan_output.chain1_ch1_mute_op.param] = r1 + Null;
0x003496        DDF0DD55                 jump $pop_rLink_and_rts;

 <$codec_resampler.config>
0x003497        F3D00000                 push rLink;
0x003498        013003DB                 r1 = Null + 987;

 <$codec_resampler.lookup_loop>
0x003499        D023000F                 r0 = M[r1 + Null];
0x00349A        DD000009                 if EQ jump $codec_resampler.rates_not_supported;
0x00349B        29022A29                 Null = r0 - M[$current_codec_sampling_rate];
0x00349C        DD100005                 if NE jump $codec_resampler.skip;
0x00349D        D1230001                 r0 = M[r1 + 1];
0x00349E        FD0000FF 29025A28        Null = r0 - M[$current_dac_sampling_rate];
0x0034A0        DD000016                 if EQ jump $codec_resampler.done;

 <$codec_resampler.skip>
0x0034A1        01330003                 r1 = r1 + 3;
0x0034A2        DDF0FFF7                 jump $codec_resampler.lookup_loop;

 <$codec_resampler.rates_not_supported>
0x0034A3        09502A29                 r3 = Null + M[$current_codec_sampling_rate];
0x0034A4        FD0000FF 09605A28        r4 = Null + M[$current_dac_sampling_rate];
0x0034A6        0120000A                 r0 = Null + 10;
0x0034A7        0015000F                 rMAC = r3 + Null;
0x0034A8        D9020000                 Div = rMAC / r0;
0x0034A9        D9500001                 r3 = DivResult;
0x0034AA        0016000F                 rMAC = r4 + Null;
0x0034AB        D9020000                 Div = rMAC / r0;
0x0034AC        D9600001                 r4 = DivResult;
0x0034AD        01401090                 r2 = Null + 4240;
0x0034AE        E1F0DB82                 call $message.send_short;
0x0034AF        E1F0EBBB                 call $error;
0x0034B0        013003DB                 r1 = Null + 987;
0x0034B1        D023000F                 r0 = M[r1 + Null];
0x0034B2        19202A29                 M[$current_codec_sampling_rate] = r0 + Null;
0x0034B3        D1230001                 r0 = M[r1 + 1];
0x0034B4        FD0000FF 19205A28        M[$current_dac_sampling_rate] = r0 + Null;

 <$codec_resampler.done>
0x0034B6        E1F0DCED                 call $block_interrupts;
0x0034B7        E440002F                 r2 = Null + 1;
0x0034B8        1900195F                 M[0x195f] = Null + Null;
0x0034B9        190019A9                 M[0x19a9] = Null + Null;
0x0034BA        D1230002                 r0 = M[r1 + 2];
0x0034BB        19201952                 M[0x1952] = r0 + Null;
0x0034BC        1920199C                 M[0x199c] = r0 + Null;
0x0034BD        00400000                 if EQ r2 = Null + Null;
0x0034BE        FD0000FF 19405A43        M[$codec_resampler.resampler_active] = r2 + Null;
0x0034C0        E1F00128                 call $calc_sra_resampling_adjustment;
0x0034C1        E1F0DCD2                 call $interrupt.unblock;
0x0034C2        DDF0DD29                 jump $pop_rLink_and_rts;

 <$codec_resampler.run_resampler>
0x0034C3        F3D00000                 push rLink;
0x0034C4        01A01950                 r8 = Null + 6480;
0x0034C5        E1F0D341                 call $iir_resamplev2.Process;
0x0034C6        01A0199A                 r8 = Null + 6554;
0x0034C7        E1F0D33F                 call $iir_resamplev2.Process;

 <$codec_resampler.run_resampler_done>
0x0034C8        DDF0DD23                 jump $pop_rLink_and_rts;

 <$multi_chan_port_scan_and_routing_config>
0x0034C9        F3D00000                 push rLink;
0x0034CA        01202913                 r0 = Null + 10515;
0x0034CB        01C00007                 r10 = Null + 7;
0x0034CC        E1F00200                 call $multi_chan_build_channel_enable_mask;
0x0034CD        D5650000                 M[r3 + 0] = r4;
0x0034CE        FD0000FF 012058CB        r0 = Null + -42805;
0x0034D0        E430002F                 r1 = Null + 1;
0x0034D1        01C00007                 r10 = Null + 7;
0x0034D2        E1F00247                 call $multi_chan_build_channel_type_mask;
0x0034D3        D5750001                 M[r3 + 1] = r5;
0x0034D4        E1F001D9                 call $multi_chan_select_chain_usage;
0x0034D5        FD0000FF 012058CB        r0 = Null + -42805;
0x0034D7        01300003                 r1 = Null + 3;
0x0034D8        01C00007                 r10 = Null + 7;
0x0034D9        E1F00240                 call $multi_chan_build_channel_type_mask;
0x0034DA        D5750003                 M[r3 + 3] = r5;
0x0034DB        19502A50                 M[$M.multi_chan_port_scan_and_routing_config.fp_config_input] = r3 + Null;
0x0034DC        0075000F                 r5 = r3 + Null;
0x0034DD        E1F000EE                 call $multi_chan_select_rate_matching;
0x0034DE        E1F0003F                 call $multi_chan_build_all_cbops_copy_strucs;
0x0034DF        E1F0FDB0                 call $multi_chan_config_cbops_copy_strucs;
0x0034E0        09202775                 r0 = Null + M[0x2775];
0x0034E1        FD0000FF 192058D2        M[$M.multi_chan_output.chain0_pcm_cbuffers_latency_measure] = r0 + Null;
0x0034E3        09202A49                 r0 = Null + M[$M.multi_chan_output.chain0_sync_port];
0x0034E4        FD0000FF 192058D5        M[0xff58d5] = r0 + Null;
0x0034E6        FD0000FF 19205874        M[$calc_chain0_actual_port_rate_struc] = r0 + Null;
0x0034E8        092028BA                 r0 = Null + M[0x28ba];
0x0034E9        1920291A                 M[$M.multi_chan_output.chain1_pcm_cbuffers_latency_measure] = r0 + Null;
0x0034EA        FD0000FF 09205A49        r0 = Null + M[$M.multi_chan_output.chain1_sync_port];
0x0034EC        1920291D                 M[0x291d] = r0 + Null;
0x0034ED        FD0000FF 1920587F        M[$calc_chain1_actual_port_rate_struc] = r0 + Null;
0x0034EF        09502A50                 r3 = Null + M[$M.multi_chan_port_scan_and_routing_config.fp_config_input];
0x0034F0        E1F0E394                 call $M.frame_proc_stream_configure.func;
0x0034F1        FD0000FF 09205A48        r0 = Null + M[$M.multi_chan_output.i2s_slave0];
0x0034F3        FD0000FF 01305874        r1 = Null + -42892;
0x0034F5        E1F00246                 call $config_calc_port_rate;
0x0034F6        DDF0DCF5                 jump $pop_rLink_and_rts;

 <$music_example_process>
0x0034F7        F3D00000                 push rLink;
0x0034F8        1900FE93                 M[0xfffe93] = Null + Null;
0x0034F9        01A028C4                 r8 = Null + 10436;
0x0034FA        E1F0D6ED                 call $M.mips_profile.mainstart;
0x0034FB        FD0000FF 09005A31        Null = Null + M[$music_example.reinit];
0x0034FD        E1100137                 if NE call $music_example_reinitialize;
0x0034FE        09302A41                 r1 = Null + M[$M.system_config.data.dithertype];
0x0034FF        E1F0011E                 call $multi_chan_config_dither_type;
0x003500        09302A31                 r1 = Null + M[$music_example.sys_mode];
0x003501        FD0000FF 092046F6        r0 = Null + M[$music_example.SpiSysControl];
0x003503        FD0000FF 096046F9        r4 = Null + M[$music_example.OvrMode];
0x003505        81022000                 Null = r0 AND 0x2000;
0x003506        00360001                 if NE r1 = r4 + Null;
0x003507        E440002F                 r2 = Null + 1;
0x003508        09202A29                 r0 = Null + M[$current_codec_sampling_rate];
0x003509        FD000000 2102AC44        Null = r0 - 44100;
0x00350B        DD000005                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x00350C        FD000000 2102BB80        Null = r0 - 48000;
0x00350E        DD000002                 if EQ jump $M.music_example_process.no_fs_force_passthru;
0x00350F        0034000F                 r1 = r2 + Null;

 <$M.music_example_process.no_fs_force_passthru>
0x003510        FD0000FF 193058BD        M[$music_example.CurMode] = r1 + Null;
0x003512        D16329E5                 r4 = M[r1 + 10725];
0x003513        E1F0DC5E                 call $frame_sync.run_function_table;
0x003514        01A028C4                 r8 = Null + 10436;
0x003515        E1F0D6DF                 call $M.mips_profile.mainend;
0x003516        D12A0006                 r0 = M[r8 + 6];
0x003517        FD0000FF 192058BE        M[$music_example.PeakMipsFunc] = r0 + Null;
0x003519        09202A29                 r0 = Null + M[$current_codec_sampling_rate];
0x00351A        FD0000FF 192058C0        M[$music_example.SamplingRate] = r0 + Null;
0x00351C        DDF0DCCF                 jump $pop_rLink_and_rts;

 <$multi_chan_build_all_cbops_copy_strucs>
0x00351D        F3D00000                 push rLink;
0x00351E        D1670000                 r4 = M[r5 + 0];
0x00351F        D1770002                 r5 = M[r5 + 2];
0x003520        FD0000FF 8927FFFF        r0 = r5 XOR 0xffffff;
0x003522        F3600000                 push r4;
0x003523        83620000                 r4 = r4 AND r0;
0x003524        E426009F                 r0 = ONEBITCOUNT r4;
0x003525        19202A44                 M[$M.multi_chan_output.num_chain0_channels] = r0 + Null;
0x003526        E9220001                 r0 = 0x1 LSHIFT r0;
0x003527        E422003F                 r0 = r0 - 1;
0x003528        19202A45                 M[$M.multi_chan_output.chain0_enables] = r0 + Null;
0x003529        01202773                 r0 = Null + 10099;
0x00352A        FD0000FF 013058C4        r1 = Null + -42812;
0x00352C        01802A49                 r6 = Null + 10825;
0x00352D        E1F00192                 call $multi_chan_build_cbops_copy_struc;
0x00352E        F3640000                 pop r4;
0x00352F        83670000                 r4 = r4 AND r5;
0x003530        E426009F                 r0 = ONEBITCOUNT r4;
0x003531        FD0000FF 19205A44        M[$M.multi_chan_output.num_chain1_channels] = r0 + Null;
0x003533        E9220001                 r0 = 0x1 LSHIFT r0;
0x003534        E422003F                 r0 = r0 - 1;
0x003535        FD0000FF 19205A45        M[$M.multi_chan_output.chain1_enables] = r0 + Null;
0x003537        012028B8                 r0 = Null + 10424;
0x003538        FD0000FF 013058C4        r1 = Null + -42812;
0x00353A        FD0000FF 01805A49        r6 = Null + -42423;
0x00353C        E1F00183                 call $multi_chan_build_cbops_copy_struc;
0x00353D        DDF0DCAE                 jump $pop_rLink_and_rts;

 <$M.music_example_message.SetMode.func>
0x00353E        0004000F                 Null = r2 + Null;
0x00353F        DD000017                 if EQ jump $M.music_example_message.SetMode.do_not_advance_to_next_eq_bank;
0x003540        01600007                 r4 = Null + 7;
0x003541        09701E69                 r5 = Null + M[0x1e69];
0x003542        83760000                 r5 = r5 AND r4;
0x003543        09201E38                 r0 = Null + M[$M.system_config.data.CurParams];
0x003544        8082006F                 r6 = r0 AND r4;
0x003545        E488002F                 r6 = r6 + 1;
0x003546        21040002                 Null = r2 - 2;
0x003547        00850000                 if EQ r6 = r3 + Null;
0x003548        01A00200                 r8 = Null + 512;
0x003549        01500000                 r3 = Null + 0;
0x00354A        E490002F                 r7 = Null + 1;
0x00354B        800200AF                 Null = r0 AND r8;
0x00354C        00590000                 if EQ r3 = r7 + Null;
0x00354D        2007008F                 Null = r5 - r6;
0x00354E        0085000B                 if LT r6 = r3 + Null;
0x00354F        21080000                 Null = r6 - 0;
0x003550        00850000                 if EQ r6 = r3 + Null;
0x003551        FD0000FF 8996FFFF        r7 = r4 XOR 0xffffff;
0x003553        8092009F                 r7 = r0 AND r7;
0x003554        8489008F                 r6 = r7 OR r6;
0x003555        19801E38                 M[$M.system_config.data.CurParams] = r6 + Null;

 <$M.music_example_message.SetMode.do_not_advance_to_next_eq_bank>
0x003556        01500003                 r3 = Null + 3;
0x003557        2005003F                 Null = r3 - r1;
0x003558        00350004                 if NEG r1 = r3 + Null;
0x003559        01500000                 r3 = Null + 0;
0x00355A        2005003F                 Null = r3 - r1;
0x00355B        00350005                 if POS r1 = r3 + Null;
0x00355C        19302A31                 M[$music_example.sys_mode] = r1 + Null;
0x00355D        E430002F                 r1 = Null + 1;
0x00355E        FD0000FF 19305A31        M[$music_example.reinit] = r1 + Null;
0x003560        DC0D000F                 rts;

 <$M.music_example.LoadParams.func>
0x003561        F3D00000                 push rLink;
0x003562        01A00000                 r8 = Null + 0;
0x003563        19A02A31                 M[$music_example.sys_mode] = r8 + Null;
0x003564        F3300000                 push r1;
0x003565        E1F00135                 call $M.music_example.load_default_params.func;
0x003566        FD0000FF 19005A25        M[$M.music_example.LoadParams.paramoffset] = Null + Null;
0x003568        F3440000                 pop r2;
0x003569        FD0000FF 19405A26        M[$M.music_example.LoadParams.Last_PsKey] = r2 + Null;

 <$M.music_example.LoadParams.TestPsKey>
0x00356B        DD000006                 if EQ jump $M.music_example.LoadParams.done;
0x00356C        FD0000FF 01303CFD        r1 = Null + -49923;
0x00356E        0150339E                 r3 = Null + 13214;
0x00356F        E1F0DAD3                 call $pskey.read_key;
0x003570        DDF0DC7B                 jump $pop_rLink_and_rts;

 <$M.music_example.LoadParams.done>
0x003571        FD0000FF 09205A2C        r0 = Null + M[$codec_config];
0x003573        D1221E38                 r0 = M[r0 + 7736];
0x003574        19201E38                 M[$M.system_config.data.CurParams] = r0 + Null;
0x003575        E1F001CC                 call $M.music_example.ReInit.func;
0x003576        01401015                 r2 = Null + 4117;
0x003577        E1F0DAB9                 call $message.send_short;
0x003578        DDF0DC73                 jump $pop_rLink_and_rts;

 <$master_app_reset>
0x003579        F3D00000                 push rLink;
0x00357A        FD0000FF 09005A29        Null = Null + M[$local_play_back];
0x00357C        DD000007                 if EQ jump $M.master_app_reset.pause_happened;
0x00357D        01401080                 r2 = Null + 4224;
0x00357E        01500000                 r3 = Null + 0;
0x00357F        01600000                 r4 = Null + 0;
0x003580        01700000                 r5 = Null + 0;
0x003581        01800000                 r6 = Null + 0;
0x003582        E1F0DAAE                 call $message.send_short;

 <$M.master_app_reset.pause_happened>
0x003583        E1F0DC20                 call $block_interrupts;
0x003584        E1F000EF                 call $multi_chan_purge_buffers;
0x003585        E1F000C5                 call $purge_input_pcm_cbuffers;
0x003586        0160267C                 r4 = Null + 9852;
0x003587        E1F0DBEA                 call $frame_sync.run_function_table;
0x003588        FD0000FF 01605A41        r4 = Null + -42431;
0x00358A        E1F0DBE7                 call $frame_sync.run_function_table;
0x00358B        016019E4                 r4 = Null + 6628;
0x00358C        E1F0DBE5                 call $frame_sync.run_function_table;
0x00358D        E1F0DC06                 call $interrupt.unblock;
0x00358E        DDF0DC5D                 jump $pop_rLink_and_rts;

 <$multi_chan_clone_tone_cbuffers>
0x00358F        FD0000FF 092059FB        r0 = Null + M[0xff59fb];
0x003591        19202A4A                 M[$M.multi_chan_output.tone0_in_left_read_ptr] = r0 + Null;
0x003592        FD0000FF 092059FE        r0 = Null + M[0xff59fe];
0x003594        FD0000FF 19205A4A        M[$M.multi_chan_output.tone1_in_left_read_ptr] = r0 + Null;
0x003596        FD0000FF 09205A01        r0 = Null + M[0xff5a01];
0x003598        19202A4B                 M[$M.multi_chan_output.tone2_in_left_read_ptr] = r0 + Null;
0x003599        FD0000FF 092059F9        r0 = Null + M[0xff59f9];
0x00359B        FD0000FF 192059FC        M[0xff59fc] = r0 + Null;
0x00359D        FD0000FF 192059FF        M[0xff59ff] = r0 + Null;
0x00359F        FD0000FF 19205A02        M[0xff5a02] = r0 + Null;
0x0035A1        092015FE                 r0 = Null + M[0x15fe];
0x0035A2        FD0000FF 19205A4B        M[$M.multi_chan_output.tone0_in_right_read_ptr] = r0 + Null;
0x0035A4        092019FE                 r0 = Null + M[0x19fe];
0x0035A5        19202A4C                 M[$M.multi_chan_output.tone1_in_right_read_ptr] = r0 + Null;
0x0035A6        09201AFE                 r0 = Null + M[0x1afe];
0x0035A7        FD0000FF 19205A4C        M[$M.multi_chan_output.tone2_in_right_read_ptr] = r0 + Null;
0x0035A9        092007FF                 r0 = Null + M[0x7ff];
0x0035AA        192015FF                 M[0x15ff] = r0 + Null;
0x0035AB        192019FF                 M[0x19ff] = r0 + Null;
0x0035AC        19201AFF                 M[0x1aff] = r0 + Null;
0x0035AD        DC0D000F                 rts;

 <$M.music_example.GetStatus.func>
0x0035AE        5010003F                 I1 = Null + r1;
0x0035AF        01C00032                 r10 = Null + 50;
0x0035B0        00AC000F                 r8 = r10 + Null;
0x0035B1        5140256C                 I4 = Null + 9580;
0x0035B2        03000031                 Null = Null + Null, r1 = M[I4,1];
0x0035B3        E5F00004                 do $M.music_example.GetStatus.lp_copy_status;
0x0035B4        D3300000                 r1 = M[r1 + Null];
0x0035B5        0300B531                 Null = Null + Null, M[I1,1] = r1, r1 = M[I4,1];
0x0035B6        03000000                 Null = Null + Null;

 <$M.music_example.GetStatus.lp_copy_status>
0x0035B7        01C00007                 r10 = Null + 7;
0x0035B8        FD0000FF 514058BD        I4 = Null + -42819;
0x0035BA        8B440000                 r2 = r2 XOR r2;
0x0035BB        E5F00002                 do $M.music_example.GetStatus.loop_clr_statistics;
0x0035BC        030000C1                 Null = Null + Null, M[I4,1] = r2;

 <$M.music_example.GetStatus.loop_clr_statistics>
0x0035BD        1900005F                 M[0x5f] = Null + Null;
0x0035BE        FD0000FF 19003FFF        M[0xff3fff] = Null + Null;
0x0035C0        19002A17                 M[0x2a17] = Null + Null;
0x0035C1        FD0000FF 19005A19        M[0xff5a19] = Null + Null;
0x0035C3        19002A19                 M[0x2a19] = Null + Null;
0x0035C4        FD0000FF 19005A1B        M[0xff5a1b] = Null + Null;
0x0035C6        19002A1B                 M[0x2a1b] = Null + Null;
0x0035C7        FD0000FF 19005A1D        M[0xff5a1d] = Null + Null;
0x0035C9        19002A1D                 M[0x2a1d] = Null + Null;
0x0035CA        DC0D000F                 rts;

 <$multi_chan_select_rate_matching>
0x0035CB        FD0000FF 19005A4E        M[$chain0_hw_warp_enable] = Null + Null;
0x0035CD        19002A4F                 M[$chain1_hw_warp_enable] = Null + Null;
0x0035CE        09002A2E                 Null = Null + M[$rate_match_disable];
0x0035CF        DD100018                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x0035D0        D1270000                 r0 = M[r5 + 0];
0x0035D1        D1370001                 r1 = M[r5 + 1];
0x0035D2        D1470002                 r2 = M[r5 + 2];
0x0035D3        FD0000FF 8954FFFF        r3 = r2 XOR 0xffffff;
0x0035D5        83520000                 r3 = r3 AND r0;
0x0035D6        83420000                 r2 = r2 AND r0;
0x0035D7        FD0000FF 8963FFFF        r4 = r1 XOR 0xffffff;
0x0035D9        8005003F                 Null = r3 AND r1;
0x0035DA        DD000007                 if EQ jump $M.multi_chan_select_rate_matching.check_chain1;
0x0035DB        8005006F                 Null = r3 AND r4;
0x0035DC        DD10000B                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x0035DD        E420002F                 r0 = Null + 1;
0x0035DE        FD0000FF 19205A4E        M[$chain0_hw_warp_enable] = r0 + Null;
0x0035E0        DDF00007                 jump $M.multi_chan_select_rate_matching.exit;

 <$M.multi_chan_select_rate_matching.check_chain1>
0x0035E1        8004003F                 Null = r2 AND r1;
0x0035E2        DD000005                 if EQ jump $M.multi_chan_select_rate_matching.exit;
0x0035E3        8004006F                 Null = r2 AND r4;
0x0035E4        DD100003                 if NE jump $M.multi_chan_select_rate_matching.exit;
0x0035E5        E420002F                 r0 = Null + 1;
0x0035E6        19202A4F                 M[$chain1_hw_warp_enable] = r0 + Null;

 <$M.multi_chan_select_rate_matching.exit>
0x0035E7        DC0D000F                 rts;

 <$calc_sra_resampling_adjustment>
0x0035E8        F100003E                 pushm <rMAC, r0, r1, r2, r3>;
0x0035E9        09202A29                 r0 = Null + M[$current_codec_sampling_rate];
0x0035EA        FD0000FF 09305A28        r1 = Null + M[$current_dac_sampling_rate];
0x0035EC        E440002F                 r2 = Null + 1;
0x0035ED        01500000                 r3 = Null + 0;
0x0035EE        2002003F                 Null = r0 - r1;
0x0035EF        DD00000F                 if EQ jump $M.calc_sra_resampling_adjustment.done;
0x0035F0        DD40000A                 if NEG jump $M.calc_sra_resampling_adjustment.upsampling;
0x0035F1        8D22007E                 r0 = r0 LSHIFT -2;
0x0035F2        8DE2007F                 rMAC = r0 LSHIFT -1 (MI);
0x0035F3        D9030000                 Div = rMAC / r1;
0x0035F4        D9200001                 r0 = DivResult;
0x0035F5        8D42006B                 r2 = r0 LSHIFT -21;
0x0035F6        FD00001F 8122FFFF        r0 = r0 AND 0x1fffff;
0x0035F8        8D520002                 r3 = r0 LSHIFT 2;
0x0035F9        DDF00005                 jump $M.calc_sra_resampling_adjustment.done;

 <$M.calc_sra_resampling_adjustment.upsampling>
0x0035FA        8DE2007F                 rMAC = r0 LSHIFT -1 (MI);
0x0035FB        D9030000                 Div = rMAC / r1;
0x0035FC        01400000                 r2 = Null + 0;
0x0035FD        D9500001                 r3 = DivResult;

 <$M.calc_sra_resampling_adjustment.done>
0x0035FE        FD0000FF 19405A2F        M[$sra_resamp_adjust_int] = r2 + Null;
0x003600        19502A30                 M[$sra_resamp_adjust_frac] = r3 + Null;
0x003601        F104003E                 popm <rMAC, r0, r1, r2, r3>;
0x003602        DC0D000F                 rts;

 <$multi_chan_config_tone_mixing>
0x003603        FD0000FF 095059BE        r3 = Null + M[$interface_map_struc];
0x003605        FD0000FF 096059C0        r4 = Null + M[0xff59c0];
0x003607        FD0000FF 8936FFFF        r1 = r4 XOR 0xffffff;
0x003609        8025003F                 r0 = r3 AND r1;
0x00360A        FD0000FF 09305A47        r1 = Null + M[$M.multi_chan_output.prim_tone_mix_ratio];
0x00360C        09402A48                 r2 = Null + M[$M.multi_chan_output.aux_tone_mix_ratio];
0x00360D        194027B8                 M[0x27b8] = r2 + Null;
0x00360E        194027CC                 M[0x27cc] = r2 + Null;
0x00360F        81020003                 Null = r0 AND 0x3;
0x003610        00340000                 if EQ r1 = r2 + Null;
0x003611        19302790                 M[0x2790] = r1 + Null;
0x003612        193027A4                 M[0x27a4] = r1 + Null;
0x003613        8025006F                 r0 = r3 AND r4;
0x003614        FD0000FF 09305A47        r1 = Null + M[$M.multi_chan_output.prim_tone_mix_ratio];
0x003616        09402A48                 r2 = Null + M[$M.multi_chan_output.aux_tone_mix_ratio];
0x003617        81020003                 Null = r0 AND 0x3;
0x003618        00340000                 if EQ r1 = r2 + Null;
0x003619        193027E0                 M[0x27e0] = r1 + Null;
0x00361A        FD0000FF 1930498E        M[0xff498e] = r1 + Null;
0x00361C        DC0D000F                 rts;

 <$multi_chan_config_dither_type>
0x00361D        F3D00000                 push rLink;
0x00361E        E1F0DB85                 call $block_interrupts;
0x00361F        0023000F                 r0 = r1 + Null;
0x003620        01400000                 r2 = Null + 0;
0x003621        FD0000FF 09305A28        r1 = Null + M[$current_dac_sampling_rate];
0x003623        FD000000 2103AC44        Null = r1 - 44100;
0x003625        00240004                 if NEG r0 = r2 + Null;
0x003626        FD0000FF 192049FD        M[0xff49fd] = r0 + Null;
0x003628        192028F8                 M[0x28f8] = r0 + Null;
0x003629        FD0000FF 19204AFD        M[0xff4afd] = r0 + Null;
0x00362B        19202900                 M[0x2900] = r0 + Null;
0x00362C        FD0000FF 192058AB        M[0xff58ab] = r0 + Null;
0x00362E        19202908                 M[0x2908] = r0 + Null;
0x00362F        FD0000FF 192058B3        M[0xff58b3] = r0 + Null;
0x003631        19202910                 M[0x2910] = r0 + Null;
0x003632        E1F0DB61                 call $interrupt.unblock;
0x003633        DDF0DBB8                 jump $pop_rLink_and_rts;

 <$music_example_reinitialize>
0x003634        F3D00000                 push rLink;
0x003635        51900001                 M1 = Null + 1;
0x003636        FD0000FF 510033DA        I0 = Null + -52262;
0x003638        02002100                 Null = Null + Null, r0 = M[I0,M1];

 <$M.music_example_reinitialize.lp_param_copy>
0x003639        02003100                 Null = Null + Null, r1 = M[I0,M1];
0x00363A        D3200000                 r0 = M[r0 + Null];
0x00363B        1832210F                 M[r1] = r0 + Null, r0 = M[I0,M1];
0x00363C        0002000F                 Null = r0 + Null;
0x00363D        DD10FFFC                 if NE jump $M.music_example_reinitialize.lp_param_copy;
0x00363E        09201E38                 r0 = Null + M[$M.system_config.data.CurParams];
0x00363F        FD0000FF 09405A2C        r2 = Null + M[$codec_config];
0x003641        D5241E38                 M[r2 + 7736] = r0;
0x003642        01401014                 r2 = Null + 4116;
0x003643        81520007                 r3 = r0 AND 0x7;
0x003644        E1F0D9EC                 call $message.send_short;
0x003645        0160267C                 r4 = Null + 9852;
0x003646        E1F0DB2B                 call $frame_sync.run_function_table;
0x003647        FD0000FF 19005A31        M[$music_example.reinit] = Null + Null;
0x003649        DDF0DBA2                 jump $pop_rLink_and_rts;

 <$purge_input_pcm_cbuffers>
0x00364A        F3D00000                 push rLink;
0x00364B        FD0000FF 092059D8        r0 = Null + M[0xff59d8];
0x00364D        FD0000FF 192059D7        M[0xff59d7] = r0 + Null;
0x00364F        092000AF                 r0 = Null + M[0xaf];
0x003650        192000AE                 M[0xae] = r0 + Null;
0x003651        0920019F                 r0 = Null + M[0x19f];
0x003652        1920019E                 M[0x19e] = r0 + Null;
0x003653        FD0000FF 092059EA        r0 = Null + M[0xff59ea];
0x003655        FD0000FF 192059E9        M[0xff59e9] = r0 + Null;
0x003657        09200197                 r0 = Null + M[0x197];
0x003658        19200196                 M[0x196] = r0 + Null;
0x003659        FD0000FF 092059E7        r0 = Null + M[0xff59e7];
0x00365B        FD0000FF 192059E6        M[0xff59e6] = r0 + Null;
0x00365D        E1F0FD37                 call $codec_rate_adj.clear_history_buffers;
0x00365E        DDF0DB8D                 jump $pop_rLink_and_rts;

 <$music_example.peq.initialize>
0x00365F        09201E38                 r0 = Null + M[$M.system_config.data.CurParams];
0x003660        D07A000F                 r5 = M[r8 + Null];
0x003661        81520007                 r3 = r0 AND 0x7;
0x003662        E407003F                 Null = r5 - 1;
0x003663        00500000                 if EQ r3 = Null + Null;
0x003664        09302A29                 r1 = Null + M[$current_codec_sampling_rate];
0x003665        FD000000 2103BB80        Null = r1 - 48000;
0x003667        00550070                 if EQ r3 = r3 + r5;
0x003668        E4AA002F                 r8 = r8 + 1;
0x003669        D02A005F                 r0 = M[r8 + r3];
0x00366A        D5290003                 M[r7 + 3] = r0;
0x00366B        DC0D0000                 if EQ rts;
0x00366C        DDF0E9B9                 jump $audio_proc.hq_peq.initialize;

 <$music_example.peq.process>
0x00366D        09201E38                 r0 = Null + M[$M.system_config.data.CurParams];
0x00366E        800200AF                 Null = r0 AND r8;
0x00366F        DC0D0001                 if NE rts;
0x003670        D1090003                 Null = M[r7 + 3];
0x003671        DC0D0000                 if EQ rts;
0x003672        DDF0D329                 jump $audio_proc.hq_peq.process;

 <$multi_chan_purge_buffers>
0x003673        092001A7                 r0 = Null + M[0x1a7];
0x003674        192001A6                 M[0x1a6] = r0 + Null;
0x003675        FD0000FF 092059ED        r0 = Null + M[0xff59ed];
0x003677        FD0000FF 192059EC        M[0xff59ec] = r0 + Null;
0x003679        092001AF                 r0 = Null + M[0x1af];
0x00367A        192001AE                 M[0x1ae] = r0 + Null;
0x00367B        FD0000FF 092059F0        r0 = Null + M[0xff59f0];
0x00367D        FD0000FF 192059EF        M[0xff59ef] = r0 + Null;
0x00367F        092001B7                 r0 = Null + M[0x1b7];
0x003680        192001B6                 M[0x1b6] = r0 + Null;
0x003681        FD0000FF 092059F3        r0 = Null + M[0xff59f3];
0x003683        FD0000FF 192059F2        M[0xff59f2] = r0 + Null;
0x003685        092001BF                 r0 = Null + M[0x1bf];
0x003686        192001BE                 M[0x1be] = r0 + Null;
0x003687        DC0D000F                 rts;

 <$set_dac_rate_from_vm>
0x003688        8133FFFF                 r1 = r1 AND 0xffff;
0x003689        9933000A                 r1 = r1 * 10 (int);
0x00368A        FD0000FF 19305A28        M[$current_dac_sampling_rate] = r1 + Null;
0x00368C        19402A2A                 M[$max_clock_mismatch] = r2 + Null;
0x00368D        FD0000FF 19505A2A        M[$long_term_mismatch] = r3 + Null;
0x00368F        81260100                 r0 = r4 AND 0x100;
0x003690        FD0000FF 19205A29        M[$local_play_back] = r0 + Null;
0x003692        F3D00000                 push rLink;
0x003693        FD0000FF 09205A28        r0 = Null + M[$current_dac_sampling_rate];
0x003695        E1F0DB3D                 call $latency.calc_inv_fs;
0x003696        FD0000FF 19205A2B        M[$inv_dac_fs] = r0 + Null;
0x003698        F3D40000                 pop rLink;
0x003699        DC0D000F                 rts;

 <$M.music_example.load_default_params.func>
0x00369A        51C00005                 L0 = Null + 5;
0x00369B        510000A8                 I0 = Null + 168;
0x00369C        FD0000D0 51400000        I4 = Null + -3145728;
0x00369E        51101E38                 I1 = Null + 7736;
0x00369F        01C001E0                 r10 = Null + 480;
0x0036A0        91CC007F                 r10 = r10 ASHIFT -1;
0x0036A1        03006121                 Null = Null + Null, r4 = M[I0,1], r0 = M[I4,1];
0x0036A2        E5F00009                 do $M.music_example.load_default_params.three16_to_two24_loop;
0x0036A3        8F266140                 r0 = r0 LSHIFT r4, r4 = M[I0,1], r2 = M[I4,0];
0x0036A4        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x0036A5        8F466151                 r2 = r2 LSHIFT r4, r4 = M[I0,1], r3 = M[I4,1];
0x0036A6        87240041                 r0 = r0 OR r2, r2 = M[I4,1];
0x0036A7        83466100                 r2 = r2 AND r4, r4 = M[I0,1];
0x0036A8        8F56A500                 r3 = r3 LSHIFT r4, M[I1,1] = r0;
0x0036A9        87546121                 r3 = r3 OR r2, r4 = M[I0,1], r0 = M[I4,1];
0x0036AA        0300D500                 Null = Null + Null, M[I1,1] = r3;

 <$M.music_example.load_default_params.three16_to_two24_loop>
0x0036AB        51C00000                 L0 = Null + 0;
0x0036AC        DC0D000F                 rts;

 <$multi_chan_select_chain_usage>
0x0036AD        01300000                 r1 = Null + 0;
0x0036AE        8006007F                 Null = r4 AND r5;
0x0036AF        DD00000E                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;
0x0036B0        FD0000FF 8927FFFF        r0 = r5 XOR 0xffffff;
0x0036B2        8006002F                 Null = r4 AND r0;
0x0036B3        DD00000A                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;
0x0036B4        FD0000FF 09205A28        r0 = Null + M[$current_dac_sampling_rate];
0x0036B6        FD000000 2102AC44        Null = r0 - 44100;
0x0036B8        DD000004                 if EQ jump $M.multi_chan_select_chain_usage.chain0_and_chain1;
0x0036B9        FD0000FF 09205A48        r0 = Null + M[$M.multi_chan_output.i2s_slave0];
0x0036BB        DD000002                 if EQ jump $M.multi_chan_select_chain_usage.only_chain0;

 <$M.multi_chan_select_chain_usage.chain0_and_chain1>
0x0036BC        0037000F                 r1 = r5 + Null;

 <$M.multi_chan_select_chain_usage.only_chain0>
0x0036BD        D5350002                 M[r3 + 2] = r1;
0x0036BE        DC0D000F                 rts;

 <$multi_chan_build_cbops_copy_struc>
0x0036BF        F3D00000                 push rLink;
0x0036C0        E456009F                 r3 = ONEBITCOUNT r4;
0x0036C1        51320001                 I3 = r0 + 1;
0x0036C2        0300DD00                 Null = Null + Null, M[I3,1] = r3;
0x0036C3        0023000F                 r0 = r1 + Null;
0x0036C4        01C00007                 r10 = Null + 7;
0x0036C5        E1F0002B                 call $multi_chan_copy_enabled_channels;
0x0036C6        1880000F                 M[r6] = Null + Null;
0x0036C7        0300DD00                 Null = Null + Null, M[I3,1] = r3;
0x0036C8        01202913                 r0 = Null + 10515;
0x0036C9        01C00007                 r10 = Null + 7;
0x0036CA        E1F00026                 call $multi_chan_copy_enabled_channels;
0x0036CB        DDF0DB20                 jump $pop_rLink_and_rts;

 <$multi_chan_build_channel_enable_mask>
0x0036CC        F3D00000                 push rLink;
0x0036CD        5020002F                 I2 = Null + r0;
0x0036CE        E430002F                 r1 = Null + 1;
0x0036CF        01600000                 r4 = Null + 0;
0x0036D0        E5F00006                 do $M.multi_chan_build_channel_enable_mask.channel_loop;
0x0036D1        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0036D2        E1F0DAE9                 call $cbuffer.is_it_enabled;
0x0036D3        DD000002                 if EQ jump $M.multi_chan_build_channel_enable_mask.not_enabled;
0x0036D4        87630000                 r4 = r4 OR r1;

 <$M.multi_chan_build_channel_enable_mask.not_enabled>
0x0036D5        8D330001                 r1 = r1 LSHIFT 1;

 <$M.multi_chan_build_channel_enable_mask.channel_loop>
0x0036D6        DDF0DB15                 jump $pop_rLink_and_rts;

 <$multi_chan_tones_active>
0x0036D7        09202798                 r0 = Null + M[0x2798];
0x0036D8        093027AC                 r1 = Null + M[0x27ac];
0x0036D9        87230000                 r0 = r0 OR r1;
0x0036DA        093027C0                 r1 = Null + M[0x27c0];
0x0036DB        87230000                 r0 = r0 OR r1;
0x0036DC        093027D4                 r1 = Null + M[0x27d4];
0x0036DD        87230000                 r0 = r0 OR r1;
0x0036DE        093027E8                 r1 = Null + M[0x27e8];
0x0036DF        87230000                 r0 = r0 OR r1;
0x0036E0        FD0000FF 09304996        r1 = Null + M[0xff4996];
0x0036E2        87230000                 r0 = r0 OR r1;
0x0036E3        DC0D000F                 rts;

 <$multi_chan_calc_cbops_channel_enables>
0x0036E4        01C00007                 r10 = Null + 7;
0x0036E5        E440002F                 r2 = Null + 1;
0x0036E6        01500000                 r3 = Null + 0;
0x0036E7        E460002F                 r4 = Null + 1;
0x0036E8        E5F00007                 do $M.multi_chan_calc_cbops_channel_enables.loop_over_channels;
0x0036E9        8002006F                 Null = r0 AND r4;
0x0036EA        DD000004                 if EQ jump $M.multi_chan_calc_cbops_channel_enables.skip_en;
0x0036EB        8003006F                 Null = r1 AND r4;
0x0036EC        84550041                 if NE r3 = r3 OR r2;
0x0036ED        8D440001                 r2 = r2 LSHIFT 1;

 <$M.multi_chan_calc_cbops_channel_enables.skip_en>
0x0036EE        8D660001                 r4 = r4 LSHIFT 1;

 <$M.multi_chan_calc_cbops_channel_enables.loop_over_channels>
0x0036EF        DC0D000F                 rts;

 <$multi_chan_copy_enabled_channels>
0x0036F0        5020002F                 I2 = Null + r0;
0x0036F1        E430002F                 r1 = Null + 1;
0x0036F2        E5F00009                 do $M.multi_chan_copy_enabled_channels.channel_loop;
0x0036F3        03002900                 Null = Null + Null, r0 = M[I2,1];
0x0036F4        8006003F                 Null = r4 AND r1;
0x0036F5        DD000005                 if EQ jump $M.multi_chan_copy_enabled_channels.not_enabled;
0x0036F6        D048000F                 r2 = M[r6 + Null];
0x0036F7        00420000                 if EQ r2 = r0 + Null;
0x0036F8        1884000F                 M[r6] = r2 + Null;
0x0036F9        0300AD00                 Null = Null + Null, M[I3,1] = r0;

 <$M.multi_chan_copy_enabled_channels.not_enabled>
0x0036FA        8D330001                 r1 = r1 LSHIFT 1;

 <$M.multi_chan_copy_enabled_channels.channel_loop>
0x0036FB        DC0D000F                 rts;

 <$M.music_example.extract_faststream_info.func>
0x0036FC        09200385                 r0 = Null + M[0x385];
0x0036FD        21020000                 Null = r0 - 0;
0x0036FE        DC0D0001                 if NE rts;
0x0036FF        0920004C                 r0 = Null + M[$sbc.sampling_freq];
0x003700        FD0000FF 192058C1        M[$music_example.dec_sampling_freq] = r0 + Null;
0x003702        0920004D                 r0 = Null + M[$sbc.bitpool];
0x003703        FD0000FF 192058C2        M[$music_example.dec_bitpool] = r0 + Null;
0x003705        DC0D000F                 rts;

 <$M.music_example.GetVersion.func>
0x003706        FD000000 0150E00B        r3 = Null + 57355;
0x003708        FD0000FF 09705A30        r5 = Null + M[$music_example.Version];
0x00370A        09802A29                 r6 = Null + M[$current_codec_sampling_rate];
0x00370B        1835000F                 M[r1] = r3 + Null;
0x00370C        D5730001                 M[r1 + 1] = r5;
0x00370D        D5830002                 M[r1 + 2] = r6;
0x00370E        01A00003                 r8 = Null + 3;
0x00370F        DC0D000F                 rts;

 <$M.music_example.GetParams.func>
0x003710        01501E38                 r3 = Null + 7736;
0x003711        016001DF                 r4 = Null + 479;
0x003712        FD0000D0 01700000        r5 = Null + -3145728;
0x003714        1835000F                 M[r1] = r3 + Null;
0x003715        D5630001                 M[r1 + 1] = r4;
0x003716        D5730002                 M[r1 + 2] = r5;
0x003717        01A00003                 r8 = Null + 3;
0x003718        DC0D000F                 rts;

 <$multi_chan_build_channel_type_mask>
0x003719        5020002F                 I2 = Null + r0;
0x00371A        01700000                 r5 = Null + 0;
0x00371B        E440002F                 r2 = Null + 1;
0x00371C        E5F00005                 do $M.multi_chan_build_channel_type_mask.channel_loop;
0x00371D        03002900                 Null = Null + Null, r0 = M[I2,1];
0x00371E        23230000                 r0 = r0 - r1;
0x00371F        84770040                 if EQ r5 = r5 OR r2;
0x003720        8D440001                 r2 = r2 LSHIFT 1;

 <$M.multi_chan_build_channel_type_mask.channel_loop>
0x003721        DC0D000F                 rts;

 <$music_example.power_up_reset>
0x003722        F3D00000                 push rLink;
0x003723        E1F0FF77                 call $M.music_example.load_default_params.func;
0x003724        01601480                 r4 = Null + 5248;
0x003725        E1F0DA29                 call $frame_sync.register_handlers;
0x003726        DDF0DAC5                 jump $pop_rLink_and_rts;

 <$set_output_handler_timer>
0x003727        09502A46                 r3 = Null + M[$M.multi_chan_output.chain0_anc_enable];
0x003728        012001F4                 r0 = Null + 500;
0x003729        0130012C                 r1 = Null + 300;
0x00372A        21050002                 Null = r3 - 2;
0x00372B        00230000                 if EQ r0 = r1 + Null;
0x00372C        FD0000FF 19205A2D        M[$tmr_period_audio_copy] = r0 + Null;
0x00372E        DC0D000F                 rts;

 <$set_codec_rate_from_vm>
0x00372F        8133FFFF                 r1 = r1 AND 0xffff;
0x003730        9933000A                 r1 = r1 * 10 (int);
0x003731        8144FFFF                 r2 = r2 AND 0xffff;
0x003732        9944000A                 r2 = r2 * 10 (int);
0x003733        19302A29                 M[$current_codec_sampling_rate] = r1 + Null;
0x003734        DC0D000F                 rts;

 <$copy_codec_stats_pointers>
0x003735        01C0000D                 r10 = Null + 13;
0x003736        51402591                 I4 = Null + 9617;
0x003737        E5F00003                 do $M.copy_codec_stats_pointers.assign_loop;
0x003738        03002100                 Null = Null + Null, r0 = M[I0,1];
0x003739        030000A1                 Null = Null + Null, M[I4,1] = r0;

 <$M.copy_codec_stats_pointers.assign_loop>
0x00373A        DC0D000F                 rts;

 <$config_calc_port_rate>
0x00373B        FD0000FF 01405A28        r2 = Null + -42456;
0x00373D        0002000F                 Null = r0 + Null;
0x00373E        00400001                 if NE r2 = Null + Null;
0x00373F        D5430001                 M[r1 + 1] = r2;
0x003740        DC0D000F                 rts;

 <$M.music_example.ReInit.func>
0x003741        E4A0002F                 r8 = Null + 1;
0x003742        FD0000FF 19A05A31        M[$music_example.reinit] = r8 + Null;
0x003744        01A00000                 r8 = Null + 0;
0x003745        DC0D000F                 rts;

 <$apply_sra_resampling_adjustment>
0x003746        99220003                 r0 = r0 * 3 (int);
0x003747        19202534                 M[0x2534] = r0 + Null;
0x003748        DC0D000F                 rts;

 <$multi_chan_set_prim_tone_mix_ratio>
0x003749        FD0000FF 19505A47        M[$M.multi_chan_output.prim_tone_mix_ratio] = r3 + Null;
0x00374B        DC0D000F                 rts;

 <$multi_chan_set_aux_tone_mix_ratio>
0x00374C        19502A48                 M[$M.multi_chan_output.aux_tone_mix_ratio] = r3 + Null;
0x00374D        DC0D000F                 rts;
========================================================================
datadump
========================================================================

------------------------------------------------------------------------
Region: DM1_REGION
------------------------------------------------------------------------
0x000000	$M.spi_block.signature
0x000000	$M.spi_block.SPI_BLOCK
        435352 204356 432043 4F4E54 
        524F4C 

0x000005	$M.spi_block.payload
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000045	$M.spi_block.command
        000000 

0x000046	$M.spi_block.cmd_ready
        00AAAA 

0x000047	$M.spi_block.cmd_complete
        005555 

0x000048	$M.spi_block.cmd_status
        005555 

0x000049	$M.spi_block.cmd_length
        000000 

0x00004A	$interrupt.start_time
        000000 

0x00004B	$sbcdec.codec_struc
        000000 

0x00004C	$sbc.sampling_freq
        000000 

0x00004D	$sbc.bitpool
        000000 000000 000000 

0x000050	$codec_tones.tone_left_resample_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00005E	$M.system_config.data.pcmin_l_pk_dtct
        FF4AEB 000000 

0x000060	$codec_tones.tone_right_resample_hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x00006D	$codec_in_cbuffer_struc
        000400 FF4000 FF4000 

0x000070	$M.multi_chan_output.chain0_ch0_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00007C	$M.music_example_message.set_mode_message_struc
        000000 000000 000000 000000 

0x000080	$codec_rate_adj.hist_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000A4	$M.music_example_message.aux_volume_message_struc
        000000 000000 000000 000000 

0x0000A8	$M.music_example.load_default_params.operatorvals
        000008 00FF00 FFFFF8 00FFFF 
        000010 

0x0000AD	$audio_out_right_cbuffer_struc
        0002D0 FF4400 FF4400 

0x0000B0	$M.multi_chan_output.chain0_ch1_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000BC	$M.music_example_message.load_params_message_struc
        000000 000000 000000 000000 

0x0000C0	$codec_rate_adj.hist_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000E4	$M.music_example_message.set_i2s_mode_message_struc
        000000 000000 000000 000000 

0x0000E8	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0000ED	$M.calc_actual_samples.state_tab
        001C44 001C4B 001C60 

0x0000F0	$M.multi_chan_output.chain0_ch2_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0000FC	$M.music_example_message.multi_channel_main_mute_message_struc
        000000 000000 000000 000000 

0x000100	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift._sr_hist0
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000124	$M.music_example_message.signal_detect_message_struct
        000000 000000 000000 000000 

0x000128	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00012D	$M.music_example_spi.version_message_struc
        000000 000000 000000 

0x000130	$M.multi_chan_output.chain0_ch3_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00013C	$M.music_example_message.set_user_eq_param_message_struct
        000000 000000 000000 000000 

0x000140	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift._sr_hist1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000164	$M.music_example_message.set_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0x000168	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00016D	$M.music_example_spi.parameter_message_struc
        000000 000000 000000 

0x000170	$M.multi_chan_output.chain1_ch0_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00017C	$codec_timer_struc
        000000 000000 000000 000000 

0x000180	$M.multi_chan_output.chain1_ch1_mix_op._hist
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00018C	$signal_detect_timer_struc
        000000 000000 000000 000000 

0x000190	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x000195	$codec_rate_adj_out_left_cbuffer_struc
        000104 001600 001600 

0x000198	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x00019D	$codec_resamp_out_left_cbuffer_struc
        000104 001800 001800 

0x0001A0	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001A5	$multi_chan_primary_left_out_cbuffer_struc
        0000D0 000700 000700 

0x0001A8	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001AD	$multi_chan_secondary_left_out_cbuffer_struc
        0000D0 001500 001500 

0x0001B0	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.dither_hist
        000000 000000 000000 000000 
        000000 

0x0001B5	$multi_chan_aux_left_out_cbuffer_struc
        0000D0 001A00 001A00 

0x0001B8	$M.cbops.rate_adjustment_and_shift.main.dith_hist_left
        000000 000000 000000 000000 
        000000 

0x0001BD	$multi_chan_sub_out_cbuffer_struc
        000708 000800 000800 

0x0001C0	$M.cbops.rate_adjustment_and_shift.main.dith_hist_right
        000000 000000 000000 000000 
        000000 

0x0001C5	$sbc.audio_sample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0002C5	$sbc.win_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000315	$sbc.win_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00033D	$M.math.log2_table.tab32_log2
        000000 000B5E 001664 002119 
        002B80 00359F 003F78 004910 
        00526A 005B88 00646F 006D20 
        00759E 007DEA 008608 008DFA 
        0095C0 009D5E 00A4D4 00AC24 
        00B350 00BA59 00C141 00C807 
        00CEAF 00D538 00DBA4 00E1F5 
        00E82A 00EE45 00F446 00FA2F 
        010000 

0x00035E	$M.math.pow2_table.tab32_pow2
        3FFFFF 4166C2 42D561 444C06 
        45CAE0 47521C 48E1E9 4A7A77 
        4C1BF7 4DC69C 4F7A98 513821 
        52FF6A 54D0AC 56AC1E 5891FA 
        5A8279 5C7DD7 5E8451 609625 
        62B394 64DCDE 671245 69540E 
        6BA27D 6DFDDB 70666E 72DC82 
        756062 77F25C 7A92BE 7D41D8 
        7FFFFF 

0x00037F	$decoder_codec_stream_struc
        000000 000000 000000 00006D 
        FF59D6 0000AD 000000 000000 
        000000 007530 133333 000000 
        000001 003579 000000 000000 
        000000 000000 000000 000000 
        000000 

0x000394	$sbc.scale_factor
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003A4	$sbc.scale_factor_js
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003B4	$sbc.bitneed
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003C4	$sbc.bits
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0003D4	$M.math.pow2_taylor.pow2_coefs
        000291 001641 009D90 038D32 
        0F5FE0 2C5C8C 400000 

0x0003DB	$codec_resampler.filter_spec_lookup_table
        00BB80 00BB80 000000 00AC44 
        00AC44 000000 007D00 007D00 
        000000 005622 005622 000000 
        003E80 003E80 000000 001F40 
        001F40 000000 003E80 00BB80 
        FF3FAE 007D00 00BB80 FF47D0 
        00AC44 00BB80 FF3DD0 003E80 
        00AC44 FF3F5C 007D00 00AC44 
        FF3F30 00BB80 00AC44 FF3F04 
        000000 

0x000400	$audio_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0006D0	$M.system_config.data.spkr_ctrl_pri_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x0006FD	$tone_in_right_cbuffer_struc
        0000C0 FF4B00 FF4B00 

0x000700	$multi_chan_primary_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0007D0	$M.system_config.data.spkr_ctrl_pri_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x0007FD	$tone_in_right_resample_cbuffer_struc
        000480 001000 001000 

0x000800	$multi_chan_sub_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x000F08	$message.queue
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000F76	$DecoderMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x000F80	$M.cbops.av_copy.left_silence_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x000FF9	$M.system_config.data.spkr_ctrl_init_struct
        0028AC 00294A FF3701 000000 
        000000 002950 FF3707 

0x001000	$tone_in_right_resample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001480	$M.music_example.power_up_reset.message_handlers
        FF3DFC 001020 001F63 001FF6 
        00007C 001001 00353E 001FF6 
        FF5986 00100E 001E60 001FF6 
        FF5982 001002 001B9F 001FF6 
        0000A4 00101B 001CF8 001FF6 
        0000BC 001012 003561 001FF6 
        000124 001018 001F8F 001FF6 
        FF5996 00101A 001EAB 001FF6 
        00013C 00121A 001EBD 001FF6 
        FF599A 00129A 001F2F 001FF6 
        000164 00121B 001F3C 001FF6 
        FF599E 00129B 001ECD 001FF6 
        FF598A 0010A0 001E2F 001FF6 
        0000E4 0010A1 001FA9 001FF6 
        FF598E 0010A4 001FAC 001FF6 
        0000FC 0010A2 001DC0 001FF6 
        FF5992 0010A3 001F21 001FF6 
        FF59DC 001007 0035AE 002063 
        00012D 00100A 003706 002063 
        FF59E2 00100B 0032F3 002063 
        FF59DF 001009 003741 002063 
        00016D 001008 003710 002063 
        000000 

0x0014D9	$M.system_config.data.spkr_ctrl_bass_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 

0x001500	$multi_chan_secondary_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0015D0	$M.system_config.data.spkr_ctrl_sec_eq_coefs_A
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x0015FD	$tone0_in_right_resample_cbuffer_struc
        000480 001000 001000 

0x001600	$codec_rate_adj_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001704	$message.long_message_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00175C	$M.system_config.data.full_proc_funcs
        001007 0028CE 000000 0010FE 
        00005E 000000 0010FE FF3FFE 
        000000 000BB1 FF59B6 000000 
        000BB1 0029E1 000000 001E76 
        002A3E FF5A3E 0006B8 000000 
        0026B9 000907 000000 0026B9 
        00366D FF3669 000100 00366D 
        FF3683 000100 00366D FF36CE 
        000080 00366D FF36DC 000080 
        00366D FF30D0 000400 00366D 
        FF3583 000400 00064A FF36EA 
        000000 0001CC 0028AC 000000 
        001F4A 002A3F 000000 000408 
        0025F6 000000 0010FE 002A16 
        000000 0010FE FF5A18 000000 
        0010FE 002A18 000000 0010FE 
        FF5A1A 000000 0010FE 002A1A 
        000000 0010FE FF5A1C 000000 
        0010FE 002A1C 000000 000F96 
        0028CE 000000 000000 

0x0017AB	$M.multi_chan_output.chain0_ch0_resamp_op.next
0x0017AB	$chain0_ch0_resamp_op
        FF5931 

0x0017AC	$M.multi_chan_output.chain0_ch0_resamp_op.func
        FF5A0C 

0x0017AD	$M.multi_chan_output.chain0_ch0_resamp_op.param
        000000 000000 000000 FFFFF8 
        000000 002018 00018A 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0017F7	$M.system_config.data.BoostEqCoefsA
        000001 000001 400000 000000 
        000000 400000 000000 000000 
        000001 

0x001800	$codec_resamp_out_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001904	$M.multi_chan_output.chain0_ch1_resamp_op.next
0x001904	$chain0_ch1_resamp_op
        FFFFFF 

0x001905	$M.multi_chan_output.chain0_ch1_resamp_op.func
        FF5A0C 

0x001906	$M.multi_chan_output.chain0_ch1_resamp_op.param
        000001 000000 000000 FFFFF8 
        000000 0021A2 00018A 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x001950	$codec_resampler.left
        FF59D6 00019D 000000 FFFFF8 
        000008 001BC0 000278 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00199A	$codec_resampler.right
        0000AD FF59E8 000000 FFFFF8 
        000008 001BC0 000278 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0019E4	$M.system_config.data.filter_reset_table
        002049 FF30D0 000000 002049 
        FF3583 000000 002049 FF36CE 
        000000 002049 FF36DC 000000 
        002049 FF3669 000000 002049 
        FF3683 000000 000B7B 00232C 
        000140 00203E FF369D 000000 
        000000 

0x0019FD	$tone1_in_right_resample_cbuffer_struc
        000480 001000 001000 

0x001A00	$multi_chan_aux_left_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001AD0	$M.system_config.data.spkr_ctrl_sec_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 000001 000001 000001 
        000001 

0x001AFD	$tone2_in_right_resample_cbuffer_struc
        000480 001000 001000 

0x001B00	$tone_in_left
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001BC0	$codec_resampler.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x001E38	$M.system_config.data.CurParams
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002018	$M.multi_chan_output.chain0_ch0_resamp_op.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0021A2	$M.multi_chan_output.chain0_ch1_resamp_op.iir_temp
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00232C	$M.system_config.data.spkr_ctrl_bass_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00246C	$sbc.sbc_common_data_array
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        0001C5 0002C5 000315 FF30A0 
        000394 0003A4 0003B4 0003C4 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x0024B1	$M.system_config.data.SpkrEqCoefsA
        00000A 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 000001 
        000001 000001 000001 

0x0024F0	$M.system_config.data.SpkrEqCoefsB
        00000A 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 000001 
        000001 000001 000001 

0x00252F	$sra_struct
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0x00256C	$M.system_config.data.StatisticsPtrs
        FF58BD FF46F6 FF58BE FF58BF 
        002A23 00005F FF3FFF 002A3B 
        FF5A1D 002A1D 002A17 FF5A19 
        FF5A1B 002A1B 002A19 002A19 
        FF5A32 002A33 002A34 FF5A34 
        002A35 002A36 FF5A36 002A37 
        FF5A37 002A38 001E38 FF58B9 
        002A3C FF5A38 002A39 FF5A39 
        002A3A FF58C0 FF5A28 002A29 
        002A2C 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00259E	$M.system_config.data.copy_proc_funcs
        001007 0028CE 000000 0010FE 
        00005E 000000 0010FE FF3FFE 
        000000 000BB1 FF59B6 000000 
        000BB1 0029E1 000000 001BE7 
        00285C 000000 001E76 002A3E 
        FF5A3E 000408 0025F6 000000 
        0010FE 002A16 000000 0010FE 
        FF5A18 000000 0010FE 002A18 
        000000 0010FE FF5A1A 000000 
        0010FE 002A1A 000000 0010FE 
        FF5A1C 000000 0010FE 002A1C 
        000000 000F96 0028CE 000000 
        000000 

0x0025CF	$M.system_config.data.spkr_ctrl_bass_eq_coefs_B
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000001 000001 000001 
        000001 000001 000001 

0x0025F6	$M.system_config.data.multichannel_volume_and_limit_obj
0x0025F6	$M.system_config.data.multichannel_volume_and_limit_block
        000000 001000 000005 002A29 
        000000 FBD57B 072148 79999A 
        000000 000000 000000 

0x002601	$M.system_config.data.left_primary_channel_vol_struc
        FF5840 FF5840 080000 000000 
        000000 

0x002606	$M.system_config.data.right_primary_channel_vol_struc
        002885 002885 080000 000000 
        000000 

0x00260B	$M.system_config.data.left_secondary_channel_vol_struc
        FF584D FF584D 080000 000000 
        000000 

0x002610	$M.system_config.data.right_secondary_channel_vol_struc
        002892 002892 080000 000000 
        000000 

0x002615	$M.system_config.data.wired_sub_channel_vol_struc
        FF5867 FF5867 080000 000000 
        000000 

0x00261A	$M.system_config.data.UserEqCoefsA
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x00263B	$M.system_config.data.UserEqCoefsB
        000000 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000000 000000 
        400000 000000 000000 000000 
        000000 400000 000000 000000 
        000001 000001 000001 000001 
        000001 

0x00265C	$M.cbops.soft_mute.mute_coefs
        000000 FFABF1 FEB09F FD109F 
        FAD035 F7F54C F48764 F08F7F 
        EC1809 E72CBF E1DA8C DC2F6B 
        D63A40 D00AB1 C9B0FF C33DD7 
        BCC22A B64F02 AFF550 A9C5C1 
        A3D096 9E2575 98D342 93E7F8 
        8F7082 8B789D 880AB5 852FCC 
        82EF62 814F62 805410 800000 

0x00267C	$M.system_config.data.reinitialize_table
        003020 FF58F5 002A3D 003020 
        002944 FF5A3D 003000 FF58FB 
        FF30F9 002073 FF36EA 000000 
        001FCF 000000 0026B9 001165 
        0025F6 0025F6 001165 00271F 
        00271F 000B4C 000FF9 000000 
        003020 002956 FF5A3F 001FCF 
        000000 00269B 000000 

0x00269B	$M.system_config.data.cmpd100_obj_wired_sub
        000040 004000 FF5867 FF5867 
        FF5867 FF5867 080000 002A40 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0x0026B9	$M.system_config.data.cmpd100_obj
        000040 000020 FF4AEB 002878 
        FF4AEB 002878 080000 FF5A40 
        800000 080000 F9B037 FA0541 
        FE56CB FF8070 100000 080000 
        015555 00CCCD 000000 000000 
        000000 420B8C 030F11 420B8C 
        00ECE9 62032E 009E22 7C997B 
        0076AC 020000 

0x0026D7	$cbuffer.port_buffer_size
0x0026D7	$cbuffer.read_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0026E3	$cbuffer.write_port_buffer_size
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0026EF	$cbuffer.port_offset_addr
0x0026EF	$cbuffer.read_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0026FB	$cbuffer.write_port_offset_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002707	$cbuffer.read_port_limit_addr
0x002707	$cbuffer.port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002713	$cbuffer.write_port_limit_addr
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00271F	$M.system_config.data.aux_stereo_volume_and_limit_obj
0x00271F	$M.system_config.data.aux_stereo_volume_and_limit_block
        000000 001000 000002 002A29 
        000000 FBD57B 072148 79999A 
        000000 000000 000000 

0x00272A	$M.system_config.data.aux_left_channel_vol_struc
        FF585A FF585A 080000 000000 
        000000 

0x00272F	$M.system_config.data.aux_right_channel_vol_struc
        00289F 00289F 080000 000000 
        000000 

0x002734	$M.system_config.data.SubEqCoefsA
        000003 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 

0x002749	$M.system_config.data.SubEqCoefsB
        000003 000001 400000 000000 
        000000 400000 000000 000000 
        000000 000000 400000 000000 
        000000 000000 000000 400000 
        000000 000000 000001 000001 
        000001 

0x00275E	$chain1_sync_rate_adjustment_and_shift
0x00275E	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.next
        FFFFFF 

0x00275F	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.func
        FF5A09 

0x002760	$M.multi_chan_output.chain1_sync_rate_adjustment_and_shift.param
        000000 000000 000000 000000 
        FFFFF8 FF3505 000100 000140 
        FF4AD8 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0x002773	$M.multi_chan_output.chain0_copy_struc
        00295C 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x002787	$chain0_ch0_mix_op
0x002787	$M.multi_chan_output.chain0_ch0_mix_op.next
        002962 

0x002788	$M.multi_chan_output.chain0_ch0_mix_op.func
        002A0A 

0x002789	$M.multi_chan_output.chain0_ch0_mix_op.param
        000000 FFFFFF FF59FA FF3505 
        FF5A28 000070 FF5A28 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00279B	$chain0_ch1_mix_op
0x00279B	$M.multi_chan_output.chain0_ch1_mix_op.next
        FF5919 

0x00279C	$M.multi_chan_output.chain0_ch1_mix_op.func
        002A0A 

0x00279D	$M.multi_chan_output.chain0_ch1_mix_op.param
        000001 FFFFFF 0015FD FF3505 
        FF5A28 0000B0 FF5A28 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0027AF	$chain0_ch2_mix_op
0x0027AF	$M.multi_chan_output.chain0_ch2_mix_op.next
        002968 

0x0027B0	$M.multi_chan_output.chain0_ch2_mix_op.func
        002A0A 

0x0027B1	$M.multi_chan_output.chain0_ch2_mix_op.param
        000002 FFFFFF FF59FD FF3505 
        FF5A28 0000F0 FF5A28 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0027C3	$chain0_ch3_mix_op
0x0027C3	$M.multi_chan_output.chain0_ch3_mix_op.next
        FF47F6 

0x0027C4	$M.multi_chan_output.chain0_ch3_mix_op.func
        002A0A 

0x0027C5	$M.multi_chan_output.chain0_ch3_mix_op.param
        000003 FFFFFF 0019FD FF3505 
        FF5A28 000130 FF5A28 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0027D7	$chain1_ch0_mix_op
0x0027D7	$M.multi_chan_output.chain1_ch0_mix_op.next
        0029A4 

0x0027D8	$M.multi_chan_output.chain1_ch0_mix_op.func
        002A0A 

0x0027D9	$M.multi_chan_output.chain1_ch0_mix_op.param
        000000 FFFFFF FF5A00 FF3505 
        FF5A28 000170 FF5A28 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0027EB	$codec_rate_adj.stereo
        00019D 000195 FF59E8 FF59E5 
        000000 FF3505 000080 0000C0 
        002541 000000 000000 000024 
        000000 000000 000000 000000 
        000000 000000 000000 

0x0027FE	$M.system_config.data.spkr_ctrl_gain_coefs_A
        200000 000000 000000 000000 
        200000 000000 200000 000000 
        000000 000000 200000 000000 
        000000 000000 000000 000000 

0x00280E	$M.system_config.data.spkr_ctrl_gain_coefs_B
        200000 000000 000000 000000 
        200000 000000 200000 000000 
        000000 000000 200000 000000 
        100000 100000 000000 200000 

0x00281E	$cbops.buffer_addresses
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x00282E	$flash.code.address
	-------- [0x000C octets]

0x002832	$flash.data16.address
	-------- [0x000C octets]

0x002836	$flash.data24.address
	-------- [0x000C octets]

0x00283A	$flash.windowed_data16.address
	-------- [0x000C octets]

0x00283E	$mono_tone_in_left_resample_op
0x00283E	$mono_tone_in_left_resample_op.next
        FF49DA 

0x00283F	$mono_tone_in_left_resample_op.func
        FF5A15 

0x002840	$mono_tone_in_left_resample_op.param
        000000 000001 FF3505 FF5A50 
        FF5A28 000050 000000 000000 
        000000 000000 000000 000000 
        000000 

0x00284D	$tone_in_left_resample_op.next
0x00284D	$tone_in_left_resample_op
        FF49E9 

0x00284E	$tone_in_left_resample_op.func
        FF5A15 

0x00284F	$tone_in_left_resample_op.param
        000000 000002 FF3505 FF5A50 
        FF5A28 000050 000000 000000 
        000000 000000 000000 000000 
        000000 

0x00285C	$M.system_config.data.ModeControl
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x00286A	$kal_filter_coef_lib.__warp.constants
        000081 C90FDB 00007D BE76C9 
        80007D E24DD3 80007D AC0831 
        00007F 8624DD 00007D EB851F 
        000080 800000 

0x002878	$M.system_config.data.stream_map_right_in
        000000 000000 000000 0000A0 
        000BB8 001184 001135 000000 
        000000 000000 000000 000000 
        000000 

0x002885	$M.system_config.data.stream_map_primary_right_out
        FF59EB 000000 000000 0000A0 
        000BB8 001159 00101B 000000 
        000000 000000 000000 000000 
        000000 

0x002892	$M.system_config.data.stream_map_secondary_right_out
        FF59EE 000000 000000 0000A0 
        000BB8 001159 00101B 000000 
        000000 000000 000000 000000 
        000000 

0x00289F	$M.system_config.data.stream_map_aux_right_out
        FF59F1 000000 000000 0000A0 
        000BB8 001159 00101B 000000 
        000000 000000 000000 000000 
        000000 

0x0028AC	$M.system_config.data.spkr_ctrl_struct
        FF4AEB 002878 000000 000000 
        000000 000000 000000 000000 
        00232C 001E38 000800 0028E2 

0x0028B8	$M.multi_chan_output.chain1_copy_struc
        00299E 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0028C4	$FunctionMips_data_block
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0x0028CE	$M.system_config.data.rcv_process_streams
        FF4AEB 002878 FF5840 002885 
        FF584D 002892 FF585A 00289F 
        FF5867 000000 

0x0028D8	$chain1_ch0_1_signal_detect_op
0x0028D8	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.next
        002936 

0x0028D9	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.func
        FF5A0F 

0x0028DA	$M.multi_chan_output.chain1_ch0_1_signal_detect_op.param
        FF590D 000000 000000 000001 
        000002 000003 000004 000005 

0x0028E2	$M.system_config.data.spkr_ctrl_coefs
        000001 FF35AC FF35CC 000000 
        000000 FF364C 0027FE 0027FE 
        00280E 

0x0028EB	$ufe_main.message_volume_struc
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0x0028F3	$chain0_ch1_dither_and_shift_op
0x0028F3	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.next
        002986 

0x0028F4	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.func
        FF5A06 

0x0028F5	$M.multi_chan_output.chain0_ch1_dither_and_shift_op.param
        000001 000000 FFFFF8 000000 
        000128 000000 

0x0028FB	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.next
0x0028FB	$chain0_ch3_dither_and_shift_op
        002992 

0x0028FC	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.func
        FF5A06 

0x0028FD	$M.multi_chan_output.chain0_ch3_dither_and_shift_op.param
        000003 000000 FFFFF8 000000 
        000190 000000 

0x002903	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.next
0x002903	$chain0_ch5_dither_and_shift_op
        FFFFFF 

0x002904	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.func
        FF5A06 

0x002905	$M.multi_chan_output.chain0_ch5_dither_and_shift_op.param
        000005 000000 FFFFF8 000000 
        0001A0 000000 

0x00290B	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.next
0x00290B	$chain1_ch1_dither_and_shift_op
        FFFFFF 

0x00290C	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.func
        FF5A06 

0x00290D	$M.multi_chan_output.chain1_ch1_dither_and_shift_op.param
        000001 000003 FFFFF8 000000 
        0001B0 000000 

0x002913	$M.multi_chan_output.wired_out_port_table
        800011 800012 800015 800016 
        800013 800014 800010 

0x00291A	$M.multi_chan_output.chain1_pcm_cbuffers_latency_measure
        000000 FF5A2B FF5A4F 000000 
        FF5A2B 000000 000000 

0x002921	$chain0_ch0_mute_op
0x002921	$M.multi_chan_output.chain0_ch0_mute_op.next
        00296E 

0x002922	$M.multi_chan_output.chain0_ch0_mute_op.func
        002A0D 

0x002923	$M.multi_chan_output.chain0_ch0_mute_op.param
        000000 000000 000001 000000 
        000000 

0x002928	$M.multi_chan_output.chain0_ch2_mute_op.next
0x002928	$chain0_ch2_mute_op
        FF593D 

0x002929	$M.multi_chan_output.chain0_ch2_mute_op.func
        002A0D 

0x00292A	$M.multi_chan_output.chain0_ch2_mute_op.param
        000000 000000 000001 000002 
        000002 

0x00292F	$chain0_ch4_mute_op
0x00292F	$M.multi_chan_output.chain0_ch4_mute_op.next
        FF5949 

0x002930	$M.multi_chan_output.chain0_ch4_mute_op.func
        002A0D 

0x002931	$M.multi_chan_output.chain0_ch4_mute_op.param
        000000 000000 000001 000004 
        000004 

0x002936	$chain1_ch0_mute_op
0x002936	$M.multi_chan_output.chain1_ch0_mute_op.next
        FF595B 

0x002937	$M.multi_chan_output.chain1_ch0_mute_op.func
        002A0D 

0x002938	$M.multi_chan_output.chain1_ch0_mute_op.param
        000000 000000 000001 000000 
        000000 

0x00293D	$stereo_tone_in_resample_copy_struc
        00284D 000002 FF59F4 0006FD 
        000002 FF59F7 0007FD 

0x002944	$M.system_config.data.BoostEqDefnTable
        000001 000001 FF36CE FF36DC 
        0017F7 FF5894 

0x00294A	$M.system_config.data.spkr_ctrl_pri_eq_defn_table
        000002 000007 FF35AC FF35CC 
        0006D0 0007D0 

0x002950	$M.system_config.data.spkr_ctrl_bass_eq_defn_table
        000002 000006 FF364C 000000 
        0014D9 0025CF 

0x002956	$M.system_config.data.WiredSubEqDefnTable
        000001 000003 FF369D 000000 
        002734 002749 

0x00295C	$M.multi_chan_output.chain0_processing_switch_op.next
0x00295C	$chain0_processing_switch_op
        FF5913 

0x00295D	$M.multi_chan_output.chain0_processing_switch_op.func
        FF5A12 

0x00295E	$M.multi_chan_output.chain0_processing_switch_op.param
        002A45 FFFFFF 000001 000000 

0x002962	$chain0_ch1_tone_switch_op
0x002962	$M.multi_chan_output.chain0_ch1_tone_switch_op.next
        00279B 

0x002963	$M.multi_chan_output.chain0_ch1_tone_switch_op.func
        FF5A12 

0x002964	$M.multi_chan_output.chain0_ch1_tone_switch_op.param
        FF5A46 FF5919 000002 000000 

0x002968	$chain0_ch3_tone_switch_op
0x002968	$M.multi_chan_output.chain0_ch3_tone_switch_op.next
        0027C3 

0x002969	$M.multi_chan_output.chain0_ch3_tone_switch_op.func
        FF5A12 

0x00296A	$M.multi_chan_output.chain0_ch3_tone_switch_op.param
        FF5A46 FF47F6 000008 000000 

0x00296E	$chain0_ch0_dc_remove_op
0x00296E	$M.multi_chan_output.chain0_ch0_dc_remove_op.next
        FF5925 

0x00296F	$M.multi_chan_output.chain0_ch0_dc_remove_op.func
        002A01 

0x002970	$M.multi_chan_output.chain0_ch0_dc_remove_op.param
        000000 000000 000000 000000 

0x002974	$chain0_ch1_dc_remove_op
0x002974	$M.multi_chan_output.chain0_ch1_dc_remove_op.next
        FF592B 

0x002975	$M.multi_chan_output.chain0_ch1_dc_remove_op.func
        002A01 

0x002976	$M.multi_chan_output.chain0_ch1_dc_remove_op.param
        000001 000001 000000 000000 

0x00297A	$M.multi_chan_output.chain0_ch0_resamp_switch_op.next
0x00297A	$chain0_ch0_resamp_switch_op
        0017AB 

0x00297B	$M.multi_chan_output.chain0_ch0_resamp_switch_op.func
        FF5A12 

0x00297C	$M.multi_chan_output.chain0_ch0_resamp_switch_op.param
        002A45 FF5931 000001 000000 

0x002980	$chain0_ch0_dither_switch_op
0x002980	$M.multi_chan_output.chain0_ch0_dither_switch_op.next
        FF49F8 

0x002981	$M.multi_chan_output.chain0_ch0_dither_switch_op.func
        FF5A12 

0x002982	$M.multi_chan_output.chain0_ch0_dither_switch_op.param
        002A45 FF5937 000001 000000 

0x002986	$M.multi_chan_output.chain0_ch2_switch_op.next
0x002986	$chain0_ch2_switch_op
        002928 

0x002987	$M.multi_chan_output.chain0_ch2_switch_op.func
        FF5A12 

0x002988	$M.multi_chan_output.chain0_ch2_switch_op.param
        002A45 00298C 000004 000000 

0x00298C	$M.multi_chan_output.chain0_ch3_switch_op.next
0x00298C	$chain0_ch3_switch_op
        FF58E0 

0x00298D	$M.multi_chan_output.chain0_ch3_switch_op.func
        FF5A12 

0x00298E	$M.multi_chan_output.chain0_ch3_switch_op.param
        002A45 002992 000008 000000 

0x002992	$chain0_ch4_switch_op
0x002992	$M.multi_chan_output.chain0_ch4_switch_op.next
        00292F 

0x002993	$M.multi_chan_output.chain0_ch4_switch_op.func
        FF5A12 

0x002994	$M.multi_chan_output.chain0_ch4_switch_op.param
        002A45 002998 000010 000000 

0x002998	$M.multi_chan_output.chain0_ch5_switch_op.next
0x002998	$chain0_ch5_switch_op
        FF58E7 

0x002999	$M.multi_chan_output.chain0_ch5_switch_op.func
        FF5A12 

0x00299A	$M.multi_chan_output.chain0_ch5_switch_op.param
        002A45 FFFFFF 000020 000000 

0x00299E	$chain1_processing_switch_op
0x00299E	$M.multi_chan_output.chain1_processing_switch_op.next
        FF5955 

0x00299F	$M.multi_chan_output.chain1_processing_switch_op.func
        FF5A12 

0x0029A0	$M.multi_chan_output.chain1_processing_switch_op.param
        FF5A45 FFFFFF 000001 000000 

0x0029A4	$chain1_ch1_tone_switch_op
0x0029A4	$M.multi_chan_output.chain1_ch1_tone_switch_op.next
        FF4985 

0x0029A5	$M.multi_chan_output.chain1_ch1_tone_switch_op.func
        FF5A12 

0x0029A6	$M.multi_chan_output.chain1_ch1_tone_switch_op.param
        002A47 0028D8 000002 000000 

0x0029AA	$M.multi_chan_output.chain1_ch1_switch_op.next
0x0029AA	$chain1_ch1_switch_op
        FF58EE 

0x0029AB	$M.multi_chan_output.chain1_ch1_switch_op.func
        FF5A12 

0x0029AC	$M.multi_chan_output.chain1_ch1_switch_op.param
        FF5A45 0029B0 000002 000000 

0x0029B0	$chain1_rm_type_switch_op
0x0029B0	$M.multi_chan_output.chain1_rm_type_switch_op.next
        FF58AE 

0x0029B1	$M.multi_chan_output.chain1_rm_type_switch_op.func
        FF5A12 

0x0029B2	$M.multi_chan_output.chain1_rm_type_switch_op.param
        002A4F 00275E 000000 000000 

0x0029B6	$mono_tone_in_resample_copy_struc
        00283E 000001 FF59F4 000002 
        FF59F7 0007FD 

0x0029BC	$stereo_tone_in_copy_op
0x0029BC	$stereo_tone_in_copy_op.next
        FFFFFF 

0x0029BD	$stereo_tone_in_copy_op.func
        002A10 

0x0029BE	$stereo_tone_in_copy_op.param
        000000 000001 000002 000008 

0x0029C2	$ufe_aux.message_volume_struc
        000000 000000 000000 000000 
        000000 

0x0029C7	$mono_tone_in_copy_struc
        FF597D 000001 946003 000001 
        FF59F4 

0x0029CC	$M.cbops.dac_av_copy.default_dac_av_copy_srtuct
        000000 000000 000000 000000 
        000000 

0x0029D1	$set_codec_rate_from_vm_message_struc
        000000 000000 000000 000000 

0x0029D5	$M.system_config.data.passthru_primary_left
        FF4AEB 000000 00285C 00285D 

0x0029D9	$M.system_config.data.passthru_sub
        FF4AEB 000000 002868 002869 

0x0029DD	$M.system_config.data.passthru_secondary_right
        002878 000000 002862 002863 

0x0029E1	$M.system_config.data.right_headroom_obj
        002878 002878 FF5A3C 002A3B 

0x0029E5	$M.system_config.data.mode_table
        00259E 00259E 00175C 000000 

0x0029E9	$tone_copy_timer_struc
        000000 000000 000000 000000 

0x0029ED	$cbuffer.configure_port_message_struc
        000000 000000 000000 000000 

0x0029F1	$M.message.send_ready_wait_for_go.go_from_vm_message_struc
        000000 000000 000000 000000 

0x0029F5	$pskey.result_fail_message_struc
        000000 000000 000000 000000 

0x0029F9	$wall_clock.message_struc
        000000 000000 000000 000000 

0x0029FD	$sbcdec.convert_mono_message_struc
        000000 000000 000000 000000 

0x002A01	$cbops.dc_remove
        0011ED 000000 000EDA 

0x002A04	$M.cbops.dither_and_shift.main.dither_func
        0008C7 0008D4 0008E3 

0x002A07	$cbops.shift
        000000 000000 001064 

0x002A0A	$cbops.auto_upsample_and_mix
        000000 000000 000307 

0x002A0D	$cbops.soft_mute
        000000 000000 001D9B 

0x002A10	$cbops.deinterleave
        000000 0011CD 000EF8 

0x002A13	$cbops_fir_resample_complete
        000000 000000 0011E6 

0x002A16	$M.system_config.data.primout_l_pk_dtct
        FF5840 000000 

0x002A18	$M.system_config.data.sub_pk_dtct
        FF5867 000000 

0x002A1A	$M.system_config.data.scndout_r_pk_dtct
        002892 000000 

0x002A1C	$M.system_config.data.auxout_r_pk_dtct
        00289F 000000 

0x002A1E	$M.multi_chan_output.chain0_pcm_latency_input_struct
        FF58D2 000000 

0x002A20	$cbuffer.tmp
        000000 000000 

0x002A22	$M.Sleep.TotalTime
        000000 

0x002A23	$M.Sleep.Mips
        000000 

0x002A24	$M.music_example_message.AuxVolume.temp_msg_ptr
        000000 

0x002A25	$M.music_example_message.MainVolume.temp_msg_ptr
        000000 

0x002A26	$M.music_example.LoadParams.Pskey_fetch_flg
        000001 

0x002A27	$SetOutputDevType_message_received
        000000 

0x002A28	$app_config.io
        FFFFFF 

0x002A29	$current_codec_sampling_rate
        000000 

0x002A2A	$max_clock_mismatch
        000000 

0x002A2B	$aux_input_stream_available
        000000 

0x002A2C	$codec_type
        FFFFFF 

0x002A2D	$tmr_period_con_copy
        000000 

0x002A2E	$rate_match_disable
        000000 

0x002A2F	$monitor_level
        000144 

0x002A30	$sra_resamp_adjust_frac
        000000 

0x002A31	$music_example.sys_mode
        000002 

0x002A32	$music_example.frame_processing_size
        0000A0 

0x002A33	$music_example.Aux.MasterVolume
        000000 

0x002A34	$music_example.Aux.LeftTrimVolume
        000000 

0x002A35	$music_example.Main.MasterVolume
        000000 

0x002A36	$music_example.Main.PrimaryLeftTrimVolume
        000000 

0x002A37	$music_example.Main.SecondaryLeftTrimVolume
        000000 

0x002A38	$music_example.Main.SubTrimVolume
        000000 

0x002A39	$music_example.SPDIF_IF_Connections
        000000 

0x002A3A	$music_example.OTA_IF_Connections
        000000 

0x002A3B	$M.system_config.data.ZeroValue
        000000 

0x002A3C	$M.system_config.data.MinusOne
        FFFFFF 

0x002A3D	$M.system_config.data.SpkrEqParams
        001E39 

0x002A3E	$M.system_config.data.uses_aux_out
        000000 

0x002A3F	$M.system_config.data.uses_wired_sub
        000000 

0x002A40	$cmpd_subwoofer_gain
        000000 

0x002A41	$M.system_config.data.dithertype
        000000 

0x002A42	$DAC_conn_main
        000000 

0x002A43	$M.frame_proc_stream_configure.if_struc_temp
        000000 

0x002A44	$M.multi_chan_output.num_chain0_channels
        000000 

0x002A45	$M.multi_chan_output.chain0_enables
        000000 

0x002A46	$M.multi_chan_output.chain0_anc_enable
        000000 

0x002A47	$M.multi_chan_output.chain1_tone_mix_en
        000000 

0x002A48	$M.multi_chan_output.aux_tone_mix_ratio
        000000 

0x002A49	$M.multi_chan_output.chain0_sync_port
        000000 

0x002A4A	$M.multi_chan_output.tone0_in_left_read_ptr
        000000 

0x002A4B	$M.multi_chan_output.tone2_in_left_read_ptr
        000000 

0x002A4C	$M.multi_chan_output.tone1_in_right_read_ptr
        000000 

0x002A4D	$M.multi_chan_output.channels_mute_en
        000000 

0x002A4E	$M.multi_chan_output.chain1_mute_en
        000000 

0x002A4F	$chain1_hw_warp_enable
        000000 

0x002A50	$M.multi_chan_port_scan_and_routing_config.fp_config_input
        000000 

0x002A51	$stereo_tone
        000000 

0x002A52	$no_tone_timer
        000000 

0x002A53	$cbuffer.write_port_disconnect_address
        000000 

0x002A54	$cbuffer.read_port_disconnect_address
        000000 

0x002A55	$error.handler
        000000 

0x002A56	$interrupt.block_count
        000000 

0x002A57	$message.last_addr
        FFFFFF 

0x002A58	$message.queue_write_ptr
        000000 

0x002A59	$message.long_message_size
        000000 

0x002A5A	$pskey.request_in_progress
        000000 

0x002A5B	$timer.id
        000001 

0x002A5C	$wall_clock.last_addr
        FFFFFF 

0x002A5D	$cbops.amount_to_use
        000000 

0x002A5E	$M.cbops.av_copy.control_port
        000000 

0x002A5F	$M.cbops.dac_av_copy.buffer_level
        000000 

0x002A60	$M.cbops.dither_and_shift.main.rand_num
        005555 

0x002A61	$M.cbops.rate_adjustment_and_shift.main.dither_function
        000000 

0x002A62	$M.cbops.iir_resamplev2.amount_used
        000000 

0x002A63	$M.cbops.fir_resample.amount_used
        000000 

0x002A64	$master_reset_needed
        000001 

0x002A65	$M.frame_sync.handlers.LOOP_COUNT
        000000 

0x002A66	$M.cmpd100.analysis.MusicComp_Peak_log
        000000 

0x002A67	$M.cmpd100.analysis.inst_gain
        000000 

0x002A68	$M.cmpd100.applygain.old_lin_gain
        000000 

0x002A69	$M.spi_comm.last_addr
        FFFFFF 


------------------------------------------------------------------------
Region: DM2_REGION
------------------------------------------------------------------------
0xFF3000	$sbcdec.synthesis_vch1
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30A0	$sbc.loudness_offset_ram
0xFF30A0	$sbc.loudness_offset_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30B0	$sbc.loudness_offset_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF30D0	$M.system_config.data.spkr_eq_left_dm2
        FF4AEB FF4AEB 00000A 0024B1 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF30F9	$M.system_config.data.user_eq_bank_select
        000000 001E6A 001E80 001E96 
        001EAC 001EC2 001ED8 

0xFF3100	$sbcdec.synthesis_vch2
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF31A0	$sra_coeffs_hd_quality
        7649F5 7587F0 740625 71C90F 
        6ED751 6B399F 66FA9F 6226C4 
        5CCC23 56FA3E 50C1D1 4A3496 
        436505 3C661B 354B11 2E2720 
        270D3E 200FDE 1940B9 12B08B 
        0C6EE9 068A09 010E9C FC07A6 
        F77E66 F37A3C F00099 ED14FA 
        EAB8E5 E8EBF3 E7ABDA E6F485 
        E6C02E E7077E E7C1B4 E8E4D1 
        EA65C3 EC389A EE50B9 F0A10E 
        F31C43 F5B4F9 F85DF6 FB0A5D 
        FDADD7 003CC6 02AC66 04F2F6 
        0707D3 08E391 0A8013 0BD890 
        0CE9A2 0DB144 0E2ED0 0E62F2 
        0E4F9B 0DF7EE 0D6024 0C8D75 
        0B85F2 0A5068 08F438 077932 
        05E770 04472A 02A097 00FBC1 
        FF6067 FDD5DA FC62DE FB0D92 
        F9DB57 F8D0BD F7F178 F7404F 
        F6BF1D F66ECD F64F59 F65FD8 
        F69E86 F708CE F79B66 F85259 
        F92926 FA1AD7 FB2219 FC395A 
        FD5AE7 FE8103 FFA605 00C473 
        01D71A 02D922 03C626 049A46 
        055231 05EB37 06634D 06B915 
        06EBDE 06FBA5 06E90E 06B55E 
        066270 05F2AA 0568ED 04C880 
        041506 035263 0284AB 01B00D 
        00D8BB 0002DD FF3274 FE6B4F 
        FDB0F8 FD06A3 FC6F20 FBECD5 
        FB81B1 FB2F24 FAF620 FAD715 
        FAD1F1 FAE627 FB12B1 FB561A 
        FBAE86 FC19C3 FC954C FD1E61 
        FDB211 FE4D48 FEECE4 FF8DBF 
        002CC3 00C6F5 015985 01E1D9 
        025D9B 02CAC0 032791 0372B2 
        03AB26 03D04F 03E1F5 03E03D 
        03CBAA 03A51B 036DBD 03270B 
        02D2BE 0272CB 02094E 019889 
        0122D1 00AA85 003200 FFBB90 
        FF496C FEDDA4 FE7A1F FE208D 
        FDD264 FD90D8 FD5CD7 FD3708 
        FD1FC8 FD1728 FD1CF4 FD30B0 
        FD51A1 FD7ECE FDB70B FDF8F9 
        FE4318 FE93C4 FEE949 FF41E2 
        FF9BC8 FFF53C 004C89 00A012 
        00EE58 0135FD 0175D0 01ACCD 
        01DA22 01FD34 02159C 02232C 
        0225EC 021E1A 020C26 01F0AE 
        01CC7B 01A07D 016DC3 013575 
        00F8CF 00B91A 0077A6 0035C0 
        FFF4AF FFB5AF FF79E5 FF4260 
        FF1012 FEE3CD FEBE3F FE9FED 
        FE8939 FE7A5A FE735D FE742A 
        FE7C84 FE8C06 FEA22F FEBE5E 
        FEDFDA FF05D6 FF2F72 FF5BC5 
        FF89E0 FFB8D1 FFE7A9 001581 
        004180 006ADA 0090D8 00B2DA 
        00D058 00E8E5 00FC2F 010A04 
        01124B 01150B 011263 010A90 
        00FDE2 00ECC4 00D7AF 00BF2E 
        00A3DA 008652 00673C 004741 
        002707 000732 FFE85B FFCB13 
        FFAFDE FF9731 FF816E FF6EE7 
        FF5FDB FF5473 FF4CC6 FF48D7 
        FF4895 FF4BDF FF5280 FF5C37 
        FF68B5 FF77A0 FF8894 FF9B28 
        FFAEEE FFC376 FFD852 FFED15 
        000158 0014BB 0026E4 003785 
        00465C 005330 005DD8 006635 
        006C37 006FDA 007127 007032 
        006D1A 006807 00612C 0058C0 
        004F01 004431 003894 002C6F 
        002008 0013A2 00077B FFFBD0 
        FFF0D5 FFE6BC FFDDAB FFD5C4 
        FFCF21 FFC9D1 FFC5DF FFC34C 
        FFC212 FFC223 FFC36D FFC5D7 
        FFC944 FFCD92 FFD29D FFD83F 
        FFDE51 FFE4AB FFEB28 FFF1A3 
        FFF7F8 FFFE08 0003B7 0008ED 
        000D96 0011A1 001504 0017B9 
        0019BB 001B0F 001BB8 001BC1 
        001B36 001A24 00189D 0016B3 
        001479 001202 000F63 000CAD 
        0009F3 000746 0004B5 00024C 
        000016 FFFE1C FFFC65 FFFAF4 
        FFF9CC FFF8EC FFF852 FFF7FB 
        FFF7E1 FFF7FE FFF84B FFF8BF 
        FFF953 FFF9FE FFFAB9 FFFB7B 
        FFFC3E FFFCFB FFFDAD FFFE50 
        FFFEE0 FFFF5C FFFFC2 000013 
        00004E 000075 00008B 000093 
        00008E 000080 00006C 000056 
        00003E 000029 000017 00000A 
        000002 000000 

0xFF331A	$stack.buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF33DA	$M.system_config.data.ParameterMap
        001EFF FF49CB 001F00 FF49CC 
        001F01 FF49CD 001F02 FF49CE 
        001F03 FF49CF 001F04 FF49D0 
        001F05 FF49D1 001F06 FF49D2 
        001F07 FF49D3 001F08 FF49D4 
        001F09 FF49D5 001F0A FF49D6 
        001F0B FF49D7 001F0C FF49D8 
        001F0D FF49D9 001FBD 0027FE 
        001FBE 0027FF 001FBF 002800 
        001FC0 002801 001FC1 002802 
        001FC2 002803 001FC3 002804 
        001FC4 002805 001FC5 002806 
        001FC6 002807 001FC7 002808 
        001FC8 002809 001FC9 00280A 
        001FCA 00280B 001FCB 00280C 
        001FCC 00280D 001FCD 00280E 
        001FCE 00280F 001FCF 002810 
        001FD0 002811 001FD1 002812 
        001FD2 002813 001FD3 002814 
        001FD4 002815 001FD5 002816 
        001FD6 002817 001FD7 002818 
        001FD8 002819 001FD9 00281A 
        001FDA 00281B 001FDB 00281C 
        001FDC 00281D 001E38 0026B9 
        001FDD 0026C3 001FDE 0026C4 
        001FDF 0026C5 001FE0 0026C6 
        001FE1 0026C7 001FE2 0026C8 
        001FE3 0026C9 001FE4 0026CA 
        001FE5 0026CE 001FE6 0026CF 
        001FE7 0026D0 001FE8 0026D1 
        001FE9 0026D2 001FEA 0026D3 
        001FEB 0026D4 001FEC 0026D5 
        001FED 0026BF 001E38 00269B 
        001FEE 0026A5 001FEF 0026A6 
        001FF0 0026A7 001FF1 0026A8 
        001FF2 0026A9 001FF3 0026AA 
        001FF4 0026AB 001FF5 0026AC 
        001FF6 0026B0 001FF7 0026B1 
        001FF8 0026B2 001FF9 0026B3 
        001FFA 0026B4 001FFB 0026B5 
        001FFC 0026B6 001FFD 0026B7 
        001FFE 0026A1 002001 002A41 
        001E38 0025F6 000000 

0xFF3485	$sbcdec.synthesis_coefs_m8_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3505	$sra_coeffs
        7898E8 77C2D9 76198F 73A2A2 
        70665A 6C6F8E 67CB70 62895B 
        5CBA95 567200 4FC3D4 48C549 
        418C41 3A2EF1 32C38B 2B5FE5 
        241928 1D037D 1631CA 0FB568 
        099DEE 03F8FD FED216 FA3281 
        F62134 F2A2CE EFB995 ED6585 
        EBA464 EA71E0 E9C7B7 E99DE7 
        E9EADD EAA3B6 EBBC77 ED2852 
        EED9E3 F0C377 F2D748 F507BF 
        F747AC F98A80 FBC47A FDEAD4 
        FFF3E8 01D74D 038DEB 05120A 
        065F5C 0772F6 084B4E 08E82B 
        094A90 0974A2 09698F 092D67 
        08C4F9 0835B0 078568 06BA47 
        05DA99 04ECAA 03F6A0 02FE61 
        02096F 011CD7 003D16 FF6E0D 
        FEB2F5 FE0E56 FD8207 FD0F2C 
        FCB642 FC7723 FC5112 FC42D0 
        FC4AA7 FC6680 FC93F9 FCD074 
        FD1930 FD6B5E FDC42E FE20E8 
        FE7EF5 FEDBF3 FF35BD FF8A72 
        FFD881 001EA9 005BFE 008FE3 
        00BA0C 00DA76 00F165 00FF56 
        0104F8 010327 00FADC 00ED23 
        00DB17 00C5D0 00AE63 0095D1 
        007D09 0064DC 004DFE 0038FF 
        00264C 00162F 0008CE FFFE32 
        FFF645 FFF0D8 FFEDA9 FFEC68 
        FFECB9 FFEE3B FFF091 FFF35D 
        FFF64F FFF920 FFFB98 FFFD91 
        FFFEF6 FFFFC1 

0xFF3583	$M.system_config.data.spkr_eq_right_dm2
        002878 002878 00000A 0024B1 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF35AC	$M.system_config.data.spkr_ctrl_left_pri_eq_dm
        FF5840 FF5840 000007 0006D0 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF35CC	$M.system_config.data.spkr_ctrl_right_pri_eq_dm
        002885 002885 000007 0006D0 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF35EC	$M.system_config.data.spkr_ctrl_left_sec_eq_dm
        FF584D FF584D 000007 0015D0 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF360C	$M.system_config.data.spkr_ctrl_right_sec_eq_dm
        002892 002892 000007 0015D0 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF362C	$sbcdec.synthesis_coefs_m4_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF364C	$M.system_config.data.spkr_ctrl_bass_eq_dm
        00232C 00232C 000006 0014D9 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF3669	$M.system_config.data.user_eq_left_dm2
        FF4AEB FF4AEB 000005 00261A 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF3683	$M.system_config.data.user_eq_right_dm2
        002878 002878 000005 00261A 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF369D	$M.system_config.data.sub_eq_dm2
        FF5867 FF5867 000003 002734 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF36AE	$sbcdec.bitmask_lookup_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF36BF	$sbcdec.levelrecip_coefs_ram
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF36CE	$M.system_config.data.boost_eq_left_dm2
        FF4AEB FF4AEB 000001 0017F7 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF36DC	$M.system_config.data.boost_eq_right_dm2
        002878 002878 000001 0017F7 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF36EA	$M.system_config.data.MeloD_Expansion_struct
        FF4AEB 002878 FF4AEB 002878 
        001E38 000040 000000 FF4999 
        FF49CB 

0xFF36F3	$cbops.dither_and_shift.coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF36FA	$M.cbops.rate_adjustment_and_shift.main.dither_coeffs
        45E430 AE5D7D 45580B D37E72 
        0EE9D5 000000 000000 

0xFF3701	$M.system_config.data.spkr_ctrl_pri_eq_bank_select
        000000 001F0F 001F2D 

0xFF3704	$M.system_config.data.spkr_ctrl_sec_eq_bank_select
        000000 001F4C 001F6A 

0xFF3707	$M.system_config.data.spkr_ctrl_bass_eq_bank_select
        000000 001F89 001FA3 

0xFF370A	$M.iir_resamplev2.fir_L4_M7_K10.coeffs
        FF9963 FFE4F0 FFFDB6 000000 
        FBF807 FCFD2B FE1B51 FF0328 
        06CD1E 001DD0 FCAD66 FB9A3F 
        458F80 31ABA5 1FD2E4 11569E 
        7FFFFF 78CBEF 6B62A4 598F18 

0xFF371E	$M.sra_tagtimes.mode_funtion_table
        0005B6 0005C0 

0xFF3720	$M.wbs.decoder.frame_buffer
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF373E	$M.iir_resamplev2.fir_L40_M21_K6.coeffs
        00192B 0045FD 006BC5 008AE8 
        00A3D9 00B70E 00C503 00CE37 
        00D329 00D459 00D241 00CD5B 
        00C61B 00BCEE 00B23D 00A668 
        0099C8 008CAE 007F61 007223 
        00652B 0058A9 004CC4 00419D 
        00374C 002DE3 00256D 001DEF 
        001769 0011D7 000D2D 00095F 
        00065C 00040F 000263 000140 
        00008C 00002C 000007 000000 
        FF052E FD3502 FB9622 FA2780 
        F8E7CC F7D575 F6EEB4 F63190 
        F59BE4 F52B67 F4DDB2 F4B048 
        F4A09A F4AC0F F4D00A F509EF 
        F5572A F5B532 F62191 F699E4 
        F71BE2 F7A55F F8344D F8C6C3 
        F95AF8 F9EF4A FA823E FB1280 
        FB9EE0 FC2659 FCA809 FD2335 
        FD9744 FE03C2 FE6858 FEC4D1 
        FF1912 FF6519 FFA900 FFE4F1 
        7FFFFF 7FAA20 7EFEE4 7DFF4D 
        7CACD9 7B0985 7917C1 76DA72 
        7454E8 718AD7 6E8051 6B39BE 
        67BBD2 640B83 602E00 5C28A8 
        5800FD 53BC9B 4F612C 4AF460 
        467BDF 41FD40 3D7E00 39037A 
        3492D8 303111 2BE2DD 27ACB0 
        2392B3 1F98BE 1BC253 18129B 
        148C63 113217 0E05C6 0B091B 
        083D64 05A38E 033C28 010769 

0xFF37B6	$M.iir_resamplev2.fir_L21_M10_K6.coeffs
        002D83 007554 00A5E9 00C270 
        00CE4C 00CCE3 00C17C 00AF1E 
        00987C 007FE4 00673A 004FF5 
        003B20 002966 001B1A 001040 
        0008A0 0003CD 000135 00002E 
        000000 FE2E6C FB11F8 F8A2C3 
        F6D640 F59F18 F4EDD2 F4B176 
        F4D832 F54FF9 F6070F F6EC87 
        F7F0B0 F90565 FA1E4B FB30F8 
        FC3500 FD23F6 FDF952 FEB24D 
        FF4DB4 FFCBAF 7FFFFF 7EC8AD 
        7C60AF 78D51B 743918 6EA54C 
        683727 611005 595441 512A2D 
        48B907 4027F1 379CEA 2F3BE0 
        2725DC 1F7845 184C53 11B69D 
        0BC6DC 0687CE 01FF49 

0xFF37F5	$M.iir_resamplev2.fir_L2_M1_K10.coeffs
        002B5A 000000 FF9B87 009B13 
        F534D2 FAC27C 1E52F5 FC63A7 
        7FFFFF 54CFE6 

0xFF37FF	$M.mips_profile.evalinterval_us
        0186A0 

0xFF3800	$tone_in_left_resample
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3C80	$M.iir_resamplev2.fir_L21_M8_K10.coeffs
        FF69FF FF7082 FF7879 FF8191 
        FF8B7B FF95F3 FFA0B8 FFAB92 
        FFB64F FFC0C0 FFCABF FFD428 
        FFDCDE FFE4C5 FFEBC9 FFF1D7 
        FFF6E0 FFFAD6 FFFDB2 FFFF6C 
        000000 03BF9F 032646 029BD1 
        021F73 01B05D 014DBF 00F6CC 
        00AAB9 0068BD 003014 000000 
        FFD7C6 FFB6B5 FF9C1F FF875F 
        FF77D9 FF6CF7 FF662C FF62F3 
        FF62D0 FF654D 22079B 1FBD31 
        1D87E8 1B6846 195EB8 176B8C 
        158EFB 13C920 1219FF 108185 
        0EFF88 0D93CA 0C3DF7 0AFDAA 
        09D26E 08BBBD 07B903 06C9A1 
        05ECEA 05222C 0468AA 5D268F 
        5A508D 576E4D 548206 518DE7 
        4E941C 4B96CA 489808 4599E4 
        429E5B 3FA75A 3CB6BB 39CE45 
        36EFA7 341C79 31563D 2E9E58 
        2BF617 295EA9 26D925 246681 
        7FFFFF 7FD3C8 7F7B83 7EF780 
        7E4838 7D6E4A 7C6A7D 7B3DBC 
        79E916 786DBD 76CD04 75085D 
        732157 71199E 6EF2F5 6CAF37 
        6A5052 67D847 654926 62A50D 
        5FEE20 

0xFF3CE9	$M.iir_resamplev2.fir_L4_M1_K10.coeffs
        004B72 0010FA FFFFD6 000000 
        004F1B 012883 011C49 00B23D 
        F39204 F67313 FA8E7F FE1C72 
        21F045 0AE75B FBAB6D F47264 
        7FFFFF 72A641 5AFFA0 3E31F4 

0xFF3CFD	$M.music_example_message.ps_key_struc
        000000 000000 000000 

0xFF3D00	$multi_chan_primary_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3DD0	$M.iir_resamplev2.Up_160_Down_147.int_ratio
0xFF3DD0	$M.iir_resamplev2.Up_160_Down_147.filter
        000000 

0xFF3DD1	$M.iir_resamplev2.Up_160_Down_147.frac_ratio
        75999A 

0xFF3DD2	$M.iir_resamplev2.Up_160_Down_147.int_ratio_s1
        000000 

0xFF3DD3	$M.iir_resamplev2.Up_160_Down_147.frac_ratio_s1
        433333 

0xFF3DD4	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s1
        000CCF 

0xFF3DD5	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s1
        000006 

0xFF3DD6	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s1
        000000 

0xFF3DD7	$M.iir_resamplev2.Up_160_Down_147.Rout_s1
        000028 

0xFF3DD8	$M.iir_resamplev2.Up_160_Down_147.input_scale_s1
        000007 

0xFF3DD9	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s1
        FF373E 

0xFF3DDA	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s1
        433334 

0xFF3DDB	$M.iir_resamplev2.Up_160_Down_147.func_ptr1_s2
        00094E 

0xFF3DDC	$M.iir_resamplev2.Up_160_Down_147.FIR_Size_s2
        00000A 

0xFF3DDD	$M.iir_resamplev2.Up_160_Down_147.IIR_Size_s2
        000013 

0xFF3DDE	$M.iir_resamplev2.Up_160_Down_147.Rout_s2
        000004 

0xFF3DDF	$M.iir_resamplev2.Up_160_Down_147.input_scale_s2
        FFFFF9 

0xFF3DE0	$M.iir_resamplev2.Up_160_Down_147.output_scale_s2
        FFFFF9 

0xFF3DE1	$M.iir_resamplev2.Up_160_Down_147.FirFilter_s2
        FF370A 

0xFF3DE2	$M.iir_resamplev2.Up_160_Down_147.FracRatio_s2
        600001 

0xFF3DE3	$M.iir_resamplev2.Up_160_Down_147.IntRatio_s2
        000001 

0xFF3DE4	$M.iir_resamplev2.Up_160_Down_147.IIRFunction_s2
        000F4C 

0xFF3DE5	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s21
        126DE1 012549 F936BB 158A93 
        D14CB0 4B88F6 A147C2 5D47B7 
        B8581F 29A476 EF0696 

0xFF3DF0	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s21
        000005 

0xFF3DF1	$M.iir_resamplev2.Up_160_Down_147.IIRCoeffs_s22
        002DBC FEDAB7 06B358 EB875C 
        29E241 C16137 46C3C6 C359EA 
        2668A0 EF5323 

0xFF3DFB	$M.iir_resamplev2.Up_160_Down_147.IIRScale_s22
        000005 

0xFF3DFC	$M.music_example_message.set_plugin_message_struc
        000000 000000 000000 000000 

0xFF3E00	$codec_rate_adj_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF3F04	$M.iir_resamplev2.Up_147_Down_160.filter
0xFF3F04	$M.iir_resamplev2.Up_147_Down_160.int_ratio
        000001 

0xFF3F05	$M.iir_resamplev2.Up_147_Down_160.frac_ratio
        0B51DA 

0xFF3F06	$M.iir_resamplev2.Up_147_Down_160.int_ratio_s1
        000000 

0xFF3F07	$M.iir_resamplev2.Up_147_Down_160.frac_ratio_s1
        3CF3CF 

0xFF3F08	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s1
        000CCF 

0xFF3F09	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s1
        000006 

0xFF3F0A	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s1
        000000 

0xFF3F0B	$M.iir_resamplev2.Up_147_Down_160.Rout_s1
        000015 

0xFF3F0C	$M.iir_resamplev2.Up_147_Down_160.input_scale_s1
        000007 

0xFF3F0D	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s1
        FF37B6 

0xFF3F0E	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s1
        3CF3D0 

0xFF3F0F	$M.iir_resamplev2.Up_147_Down_160.func_ptr1_s2
        00094E 

0xFF3F10	$M.iir_resamplev2.Up_147_Down_160.FIR_Size_s2
        00000A 

0xFF3F11	$M.iir_resamplev2.Up_147_Down_160.IIR_Size_s2
        000013 

0xFF3F12	$M.iir_resamplev2.Up_147_Down_160.Rout_s2
        000007 

0xFF3F13	$M.iir_resamplev2.Up_147_Down_160.input_scale_s2
        FFFFF9 

0xFF3F14	$M.iir_resamplev2.Up_147_Down_160.output_scale_s2
        FFFFF8 

0xFF3F15	$M.iir_resamplev2.Up_147_Down_160.FirFilter_s2
        FF4928 

0xFF3F16	$M.iir_resamplev2.Up_147_Down_160.FracRatio_s2
        24924A 

0xFF3F17	$M.iir_resamplev2.Up_147_Down_160.IntRatio_s2
        000002 

0xFF3F18	$M.iir_resamplev2.Up_147_Down_160.IIRFunction_s2
        000F4C 

0xFF3F19	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s21
        010EA0 00B4A5 FAEC08 124FF2 
        D4F5F1 48910C A4811A 576A65 
        C14A41 2090F8 F4CADB 

0xFF3F24	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s21
        000006 

0xFF3F25	$M.iir_resamplev2.Up_147_Down_160.IIRCoeffs_s22
        002BB9 FE96B6 09B4B6 DF1AC6 
        476E88 92F341 7944E0 9D8C40 
        38983F EADC4F 

0xFF3F2F	$M.iir_resamplev2.Up_147_Down_160.IIRScale_s22
        000005 

0xFF3F30	$M.iir_resamplev2.Up_441_Down_320.int_ratio
0xFF3F30	$M.iir_resamplev2.Up_441_Down_320.filter
        000000 

0xFF3F31	$M.iir_resamplev2.Up_441_Down_320.frac_ratio
        5CE13C 

0xFF3F32	$M.iir_resamplev2.Up_441_Down_320.int_ratio_s1
        000000 

0xFF3F33	$M.iir_resamplev2.Up_441_Down_320.frac_ratio_s1
        3CF3CF 

0xFF3F34	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s1
        000CCF 

0xFF3F35	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s1
        000006 

0xFF3F36	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s1
        000000 

0xFF3F37	$M.iir_resamplev2.Up_441_Down_320.Rout_s1
        000015 

0xFF3F38	$M.iir_resamplev2.Up_441_Down_320.input_scale_s1
        000007 

0xFF3F39	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s1
        FF37B6 

0xFF3F3A	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s1
        3CF3D0 

0xFF3F3B	$M.iir_resamplev2.Up_441_Down_320.func_ptr1_s2
        00094E 

0xFF3F3C	$M.iir_resamplev2.Up_441_Down_320.FIR_Size_s2
        00000A 

0xFF3F3D	$M.iir_resamplev2.Up_441_Down_320.IIR_Size_s2
        000013 

0xFF3F3E	$M.iir_resamplev2.Up_441_Down_320.Rout_s2
        000015 

0xFF3F3F	$M.iir_resamplev2.Up_441_Down_320.input_scale_s2
        FFFFF9 

0xFF3F40	$M.iir_resamplev2.Up_441_Down_320.output_scale_s2
        FFFFF9 

0xFF3F41	$M.iir_resamplev2.Up_441_Down_320.FirFilter_s2
        FF3C80 

0xFF3F42	$M.iir_resamplev2.Up_441_Down_320.FracRatio_s2
        430C32 

0xFF3F43	$M.iir_resamplev2.Up_441_Down_320.IntRatio_s2
        000001 

0xFF3F44	$M.iir_resamplev2.Up_441_Down_320.IIRFunction_s2
        000F4C 

0xFF3F45	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s21
        01DAA0 00A5D4 FBB33F 0EB2F6 
        DE9B31 375325 BA6945 43543C 
        CE4C70 1B0E4C F6015A 

0xFF3F50	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s21
        000006 

0xFF3F51	$M.iir_resamplev2.Up_441_Down_320.IIRCoeffs_s22
        003057 FEB458 085037 E50E02 
        39048E A9C4E7 6080C7 AFDCE6 
        2FFD13 ECE4FB 

0xFF3F5B	$M.iir_resamplev2.Up_441_Down_320.IIRScale_s22
        000005 

0xFF3F5C	$M.iir_resamplev2.Up_441_Down_160.int_ratio
0xFF3F5C	$M.iir_resamplev2.Up_441_Down_160.filter
        000000 

0xFF3F5D	$M.iir_resamplev2.Up_441_Down_160.frac_ratio
        2E709E 

0xFF3F5E	$M.iir_resamplev2.Up_441_Down_160.int_ratio_s1
        000000 

0xFF3F5F	$M.iir_resamplev2.Up_441_Down_160.frac_ratio_s1
        3CF3CF 

0xFF3F60	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s1
        000CCF 

0xFF3F61	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s1
        000006 

0xFF3F62	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s1
        000000 

0xFF3F63	$M.iir_resamplev2.Up_441_Down_160.Rout_s1
        000015 

0xFF3F64	$M.iir_resamplev2.Up_441_Down_160.input_scale_s1
        000007 

0xFF3F65	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s1
        FF37B6 

0xFF3F66	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s1
        3CF3D0 

0xFF3F67	$M.iir_resamplev2.Up_441_Down_160.func_ptr1_s2
        000AD7 

0xFF3F68	$M.iir_resamplev2.Up_441_Down_160.FIR_Size_s2
        00000A 

0xFF3F69	$M.iir_resamplev2.Up_441_Down_160.IIR_Size_s2
        00000F 

0xFF3F6A	$M.iir_resamplev2.Up_441_Down_160.Rout_s2
        000015 

0xFF3F6B	$M.iir_resamplev2.Up_441_Down_160.input_scale_s2
        FFFFF9 

0xFF3F6C	$M.iir_resamplev2.Up_441_Down_160.output_scale_s2
        FFFFF9 

0xFF3F6D	$M.iir_resamplev2.Up_441_Down_160.FirFilter_s2
        FF3C80 

0xFF3F6E	$M.iir_resamplev2.Up_441_Down_160.FracRatio_s2
        618619 

0xFF3F6F	$M.iir_resamplev2.Up_441_Down_160.IntRatio_s2
        000000 

0xFF3F70	$M.iir_resamplev2.Up_441_Down_160.IIRFunction_s2
        000F7F 

0xFF3F71	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s21
        0B6A70 043DED EAE08C 31263F 
        BBDB01 3B4FC8 E0DBA9 

0xFF3F78	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s21
        000004 

0xFF3F79	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s22
        01CA86 F70BCC 25E520 B60E9A 
        522202 CBB779 

0xFF3F7F	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s22
        000003 

0xFF3F80	$M.iir_resamplev2.Up_441_Down_160.IIRCoeffs_s23
        022E26 134B43 BCED2E 68FE06 
        AB1AB0 

0xFF3F85	$M.iir_resamplev2.Up_441_Down_160.IIRScale_s23
        000002 

0xFF3F86	$M.iir_resamplev2.fir_L8_M7_K10.coeffs
        FF3E47 FF6C7F FF97C1 FFBD1B 
        FFDABF FFEFCA FFFC13 000000 
        00D48D FFEC08 FF5441 FEFCEA 
        FED700 FED522 FEEBCC FF1168 
        1AC598 154C35 10815E 0C64D1 
        08F14F 061D65 03DC4E 021EE5 
        578E06 4F5F8F 470F3E 3EC897 
        36B3B7 2EF438 27A84B 20E821 
        7FFFFF 7EB058 7C1A04 784E9D 
        7367A9 6D859E 66CEA1 5F6D15 

0xFF3FAE	$M.iir_resamplev2.Up_3_Down_1.int_ratio
0xFF3FAE	$M.iir_resamplev2.Up_3_Down_1.filter
        000000 

0xFF3FAF	$M.iir_resamplev2.Up_3_Down_1.frac_ratio
        2AAAAA 

0xFF3FB0	$M.iir_resamplev2.Up_3_Down_1.int_ratio_s1
        000000 

0xFF3FB1	$M.iir_resamplev2.Up_3_Down_1.frac_ratio_s1
        000000 

0xFF3FB2	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s1
        000000 

0xFF3FB3	$M.iir_resamplev2.Up_3_Down_1.func_ptr1_s2
        000AD7 

0xFF3FB4	$M.iir_resamplev2.Up_3_Down_1.FIR_Size_s2
        00000A 

0xFF3FB5	$M.iir_resamplev2.Up_3_Down_1.IIR_Size_s2
        000013 

0xFF3FB6	$M.iir_resamplev2.Up_3_Down_1.Rout_s2
        000003 

0xFF3FB7	$M.iir_resamplev2.Up_3_Down_1.input_scale_s2
        000000 

0xFF3FB8	$M.iir_resamplev2.Up_3_Down_1.output_scale_s2
        FFFFF9 

0xFF3FB9	$M.iir_resamplev2.Up_3_Down_1.FirFilter_s2
        FF4967 

0xFF3FBA	$M.iir_resamplev2.Up_3_Down_1.FracRatio_s2
        2AAAAC 

0xFF3FBB	$M.iir_resamplev2.Up_3_Down_1.IntRatio_s2
        000000 

0xFF3FBC	$M.iir_resamplev2.Up_3_Down_1.IIRFunction_s2
        000F2F 

0xFF3FBD	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s21
        01D0BF FDA0AE 0DEAC7 D9D456 
        3F01E9 BC83FF 2F0233 EC2249 

0xFF3FC5	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s21
        000005 

0xFF3FC6	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s22
        00320F 04E927 E6F590 3AF29B 
        AEF1B1 44AE60 DDCC80 

0xFF3FCD	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s22
        000004 

0xFF3FCE	$M.iir_resamplev2.Up_3_Down_1.IIRCoeffs_s23
        002858 048911 E72FCB 3CD517 
        AA724C 48E472 DC297B 

0xFF3FD5	$M.iir_resamplev2.Up_3_Down_1.IIRScale_s23
        000004 

0xFF3FD6	$M.iir_resamplev2.Up_320_Down_147.int_ratio
0xFF3FD6	$M.iir_resamplev2.Up_320_Down_147.filter
        000000 

0xFF3FD7	$M.iir_resamplev2.Up_320_Down_147.frac_ratio
        3ACCCD 

0xFF3FD8	$M.iir_resamplev2.Up_320_Down_147.int_ratio_s1
        000000 

0xFF3FD9	$M.iir_resamplev2.Up_320_Down_147.frac_ratio_s1
        433333 

0xFF3FDA	$M.iir_resamplev2.Up_320_Down_147.func_ptr1_s1
        000CCF 

0xFF3FDB	$M.iir_resamplev2.Up_320_Down_147.FIR_Size_s1
        000006 

0xFF3FDC	$M.iir_resamplev2.Up_320_Down_147.IIR_Size_s1
        000000 

0xFF3FDD	$M.iir_resamplev2.Up_320_Down_147.Rout_s1
        000028 

0xFF3FDE	$M.iir_resamplev2.Up_320_Down_147.input_scale_s1
        000007 

0xFF3FDF	$M.iir_resamplev2.Up_320_Down_147.FirFilter_s1
        FF373E 

0xFF3FE0	$M.iir_resamplev2.Up_320_Down_147.FracRatio_s1
        433334 

0xFF3FE1	$M.iir_resamplev2.Up_320_Down_147.func_ptr1_s2
        000AD7 

0xFF3FE2	$M.iir_resamplev2.Up_320_Down_147.FIR_Size_s2
        00000A 

0xFF3FE3	$M.iir_resamplev2.Up_320_Down_147.IIR_Size_s2
        00000F 

0xFF3FE4	$M.iir_resamplev2.Up_320_Down_147.Rout_s2
        000008 

0xFF3FE5	$M.iir_resamplev2.Up_320_Down_147.input_scale_s2
        FFFFF9 

0xFF3FE6	$M.iir_resamplev2.Up_320_Down_147.output_scale_s2
        FFFFF9 

0xFF3FE7	$M.iir_resamplev2.Up_320_Down_147.FirFilter_s2
        FF3F86 

0xFF3FE8	$M.iir_resamplev2.Up_320_Down_147.FracRatio_s2
        700001 

0xFF3FE9	$M.iir_resamplev2.Up_320_Down_147.IntRatio_s2
        000000 

0xFF3FEA	$M.iir_resamplev2.Up_320_Down_147.IIRFunction_s2
        000FF2 

0xFF3FEB	$M.iir_resamplev2.Up_320_Down_147.IIRCoeffs_s21
        18C7CD 02B0D1 F0FCD2 2AEC7D 
        AFEE7F 69B8DD 9ABF37 455530 
        E055ED 

0xFF3FF4	$M.iir_resamplev2.Up_320_Down_147.IIRScale_s21
        000004 

0xFF3FF5	$M.iir_resamplev2.Up_320_Down_147.IIRCoeffs_s22
        00922C FD4F31 0E501A DA0D01 
        3FDC01 B69DAF 39EA2A E26A76 

0xFF3FFD	$M.iir_resamplev2.Up_320_Down_147.IIRScale_s22
        000004 

0xFF3FFE	$M.system_config.data.pcmin_r_pk_dtct
        002878 000000 

0xFF4000	$codec_in
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4400	$audio_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF46D0	$M.iir_resamplev2.Up_2_Down_1.filter
0xFF46D0	$M.iir_resamplev2.Up_2_Down_1.int_ratio
        000000 

0xFF46D1	$M.iir_resamplev2.Up_2_Down_1.frac_ratio
        400000 

0xFF46D2	$M.iir_resamplev2.Up_2_Down_1.int_ratio_s1
        000000 

0xFF46D3	$M.iir_resamplev2.Up_2_Down_1.frac_ratio_s1
        000000 

0xFF46D4	$M.iir_resamplev2.Up_2_Down_1.func_ptr1_s1
        000000 

0xFF46D5	$M.iir_resamplev2.Up_2_Down_1.func_ptr1_s2
        000AD7 

0xFF46D6	$M.iir_resamplev2.Up_2_Down_1.FIR_Size_s2
        00000A 

0xFF46D7	$M.iir_resamplev2.Up_2_Down_1.IIR_Size_s2
        000013 

0xFF46D8	$M.iir_resamplev2.Up_2_Down_1.Rout_s2
        000002 

0xFF46D9	$M.iir_resamplev2.Up_2_Down_1.input_scale_s2
        000000 

0xFF46DA	$M.iir_resamplev2.Up_2_Down_1.output_scale_s2
        FFFFF9 

0xFF46DB	$M.iir_resamplev2.Up_2_Down_1.FirFilter_s2
        FF37F5 

0xFF46DC	$M.iir_resamplev2.Up_2_Down_1.FracRatio_s2
        400001 

0xFF46DD	$M.iir_resamplev2.Up_2_Down_1.IntRatio_s2
        000000 

0xFF46DE	$M.iir_resamplev2.Up_2_Down_1.IIRFunction_s2
        000F4C 

0xFF46DF	$M.iir_resamplev2.Up_2_Down_1.IIRCoeffs_s21
        21DB4E 0137A2 F88329 186193 
        CA4BC2 5782B3 9253BA 6B1360 
        AF2393 2DC17E EE0E49 

0xFF46EA	$M.iir_resamplev2.Up_2_Down_1.IIRScale_s21
        000005 

0xFF46EB	$M.iir_resamplev2.Up_2_Down_1.IIRCoeffs_s22
        001AF3 FEC85E 074E34 E94E97 
        2ED3E6 B9EB60 4EB089 BD7CF5 
        2934A5 EEA788 

0xFF46F5	$M.iir_resamplev2.Up_2_Down_1.IIRScale_s22
        000005 

0xFF46F6	$music_example.SpiSysControl
0xFF46F6	$music_example.SysControl
        000000 

0xFF46F7	$music_example.OvrSystemVolume
        000009 

0xFF46F8	$music_example.OvrCallState
        000000 

0xFF46F9	$music_example.OvrMode
        000000 

0xFF46FA	$music_example.AuxOvrMasterVolumes
        000000 

0xFF46FB	$music_example.AuxOvrTrimVolumes
        000000 

0xFF46FC	$music_example.MainOvrMasterVolumes
        000000 

0xFF46FD	$music_example.PriOvrTrimVolumes
        000000 

0xFF46FE	$music_example.SecOvrTrimVolumes
        000000 

0xFF46FF	$music_example.SubOvrTrimVolumes
        000000 

0xFF4700	$multi_chan_secondary_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF47D0	$M.iir_resamplev2.Up_3_Down_2.int_ratio
0xFF47D0	$M.iir_resamplev2.Up_3_Down_2.filter
        000000 

0xFF47D1	$M.iir_resamplev2.Up_3_Down_2.frac_ratio
        555556 

0xFF47D2	$M.iir_resamplev2.Up_3_Down_2.int_ratio_s1
        000000 

0xFF47D3	$M.iir_resamplev2.Up_3_Down_2.frac_ratio_s1
        000000 

0xFF47D4	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s1
        000000 

0xFF47D5	$M.iir_resamplev2.Up_3_Down_2.func_ptr1_s2
        000AD7 

0xFF47D6	$M.iir_resamplev2.Up_3_Down_2.FIR_Size_s2
        00000A 

0xFF47D7	$M.iir_resamplev2.Up_3_Down_2.IIR_Size_s2
        000013 

0xFF47D8	$M.iir_resamplev2.Up_3_Down_2.Rout_s2
        000003 

0xFF47D9	$M.iir_resamplev2.Up_3_Down_2.input_scale_s2
        000000 

0xFF47DA	$M.iir_resamplev2.Up_3_Down_2.output_scale_s2
        FFFFF9 

0xFF47DB	$M.iir_resamplev2.Up_3_Down_2.FirFilter_s2
        FF4976 

0xFF47DC	$M.iir_resamplev2.Up_3_Down_2.FracRatio_s2
        555556 

0xFF47DD	$M.iir_resamplev2.Up_3_Down_2.IntRatio_s2
        000000 

0xFF47DE	$M.iir_resamplev2.Up_3_Down_2.IIRFunction_s2
        000F4C 

0xFF47DF	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s21
        420971 033E5F F4C4FC 1AC226 
        CF9D10 46ECC6 A94E63 5931C8 
        B277E2 37BEFB E2336B 

0xFF47EA	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s21
        000003 

0xFF47EB	$M.iir_resamplev2.Up_3_Down_2.IIRCoeffs_s22
        28FA23 FCC1A1 0C4D5C E29ED9 
        34251A B6936E 544FDF B08851 
        3C37C6 DCEA2E 

0xFF47F5	$M.iir_resamplev2.Up_3_Down_2.IIRScale_s22
        000003 

0xFF47F6	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.next
0xFF47F6	$chain0_ch0_5_signal_detect_op
        FF591F 

0xFF47F7	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.func
        FF5A0F 

0xFF47F8	$M.multi_chan_output.chain0_ch0_5_signal_detect_op.param
        FF590D 000000 000000 000001 
        000002 000003 000004 000005 

0xFF4800	$codec_resamp_out_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4904	$M.iir_resamplev2.Up_4_Down_1.filter
0xFF4904	$M.iir_resamplev2.Up_4_Down_1.int_ratio
        000000 

0xFF4905	$M.iir_resamplev2.Up_4_Down_1.frac_ratio
        200000 

0xFF4906	$M.iir_resamplev2.Up_4_Down_1.int_ratio_s1
        000000 

0xFF4907	$M.iir_resamplev2.Up_4_Down_1.frac_ratio_s1
        000000 

0xFF4908	$M.iir_resamplev2.Up_4_Down_1.func_ptr1_s1
        000000 

0xFF4909	$M.iir_resamplev2.Up_4_Down_1.func_ptr1_s2
        000AD7 

0xFF490A	$M.iir_resamplev2.Up_4_Down_1.FIR_Size_s2
        00000A 

0xFF490B	$M.iir_resamplev2.Up_4_Down_1.IIR_Size_s2
        00000F 

0xFF490C	$M.iir_resamplev2.Up_4_Down_1.Rout_s2
        000004 

0xFF490D	$M.iir_resamplev2.Up_4_Down_1.input_scale_s2
        000000 

0xFF490E	$M.iir_resamplev2.Up_4_Down_1.output_scale_s2
        FFFFF9 

0xFF490F	$M.iir_resamplev2.Up_4_Down_1.FirFilter_s2
        FF3CE9 

0xFF4910	$M.iir_resamplev2.Up_4_Down_1.FracRatio_s2
        200001 

0xFF4911	$M.iir_resamplev2.Up_4_Down_1.IntRatio_s2
        000000 

0xFF4912	$M.iir_resamplev2.Up_4_Down_1.IIRFunction_s2
        000F7F 

0xFF4913	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s21
        033C6B 052949 E31869 474710 
        9CF8AD 51D4D7 D9B4BC 

0xFF491A	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s21
        000004 

0xFF491B	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s22
        00617A F54FFD 3274C8 99FD54 
        6E2517 C045F6 

0xFF4921	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s22
        000003 

0xFF4922	$M.iir_resamplev2.Up_4_Down_1.IIRCoeffs_s23
        00510B 0B350E D4FA26 4380DC 
        CCF071 

0xFF4927	$M.iir_resamplev2.Up_4_Down_1.IIRScale_s23
        000003 

0xFF4928	$M.iir_resamplev2.fir_L7_M16_K10.coeffs
        FF2CF7 FF72C3 FFAAA0 FFD384 
        FFEE0E FFFC05 000000 FE74F5 
        FE00B7 FDE03C FDF9C3 FE3765 
        FE8776 FEDC7F 14483A 0E7B7A 
        09B0FB 05DE46 02F05A 00CDF0 
        FF59CB 52E19F 48C9F7 3EAD7C 
        34D440 2B7D33 22DBE6 1B171E 
        7FFFFF 7E16B5 7A56D9 74E4CF 
        6DF49C 65C711 5CA640 

0xFF494B	$M.iir_resamplev2.Up_640_Down_147_low_mips.filter
0xFF494B	$M.iir_resamplev2.Up_640_Down_147_low_mips.int_ratio
        000000 

0xFF494C	$M.iir_resamplev2.Up_640_Down_147_low_mips.frac_ratio
        1D6666 

0xFF494D	$M.iir_resamplev2.Up_640_Down_147_low_mips.int_ratio_s1
        000000 

0xFF494E	$M.iir_resamplev2.Up_640_Down_147_low_mips.frac_ratio_s1
        000000 

0xFF494F	$M.iir_resamplev2.Up_640_Down_147_low_mips.func_ptr1_s1
        000000 

0xFF4950	$M.iir_resamplev2.Up_640_Down_147_low_mips.func_ptr1_s2
        000AD7 

0xFF4951	$M.iir_resamplev2.Up_640_Down_147_low_mips.FIR_Size_s2
        00000A 

0xFF4952	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIR_Size_s2
        000009 

0xFF4953	$M.iir_resamplev2.Up_640_Down_147_low_mips.Rout_s2
        000280 

0xFF4954	$M.iir_resamplev2.Up_640_Down_147_low_mips.input_scale_s2
        000000 

0xFF4955	$M.iir_resamplev2.Up_640_Down_147_low_mips.output_scale_s2
        FFFFF9 

0xFF4956	$M.iir_resamplev2.Up_640_Down_147_low_mips.FirFilter_s2
        FF4BC0 

0xFF4957	$M.iir_resamplev2.Up_640_Down_147_low_mips.FracRatio_s2
        1D6667 

0xFF4958	$M.iir_resamplev2.Up_640_Down_147_low_mips.IntRatio_s2
        000000 

0xFF4959	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRFunction_s2
        0010D0 

0xFF495A	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRCoeffs_s21
        14FC55 F6EB95 2CC675 A21BBE 
        688DFC C1E3AF 

0xFF4960	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRScale_s21
        000003 

0xFF4961	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRCoeffs_s22
        00FB50 12B98E B2B669 7F732B 
        9BED20 

0xFF4966	$M.iir_resamplev2.Up_640_Down_147_low_mips.IIRScale_s22
        000002 

0xFF4967	$M.iir_resamplev2.fir_L3_M1_K10.coeffs
        FE8D2F FF79F6 004647 043253 
        004510 FE5DAC F946D5 03EAF1 
        0702B8 00F96E EBE55D ED1295 
        7FFFFF 5E4D6D 2C305E 

0xFF4976	$M.iir_resamplev2.fir_L3_M2_K10.coeffs
        004CBB 000DB7 000000 FF0BD3 
        0082B5 00A27E F4FD59 F74DCC 
        FBB02D 25DF93 0996C2 F99AB5 
        7FFFFF 6B7916 49BEBE 

0xFF4985	$M.multi_chan_output.chain1_ch1_mix_op.next
0xFF4985	$chain1_ch1_mix_op
        0028D8 

0xFF4986	$M.multi_chan_output.chain1_ch1_mix_op.func
        002A0A 

0xFF4987	$M.multi_chan_output.chain1_ch1_mix_op.param
        000001 FFFFFF 001AFD FF3505 
        FF5A28 000180 FF5A28 400000 
        400000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4999	$M.system_config.data.MeloD_Expansion_filter_data
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF49AB	$cbops.buffer_sizes
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF49BB	$cbops.buffer_pointers
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF49CB	$M.system_config.data.MeloD_Expansion_coefficients
        B1AA81 571F3E C3ECED 400000 
        84DA2F 3B3194 400000 D53FA4 
        FEA000 400000 81543A 3EB7E0 
        400000 BB3B4C 24BC7F 

0xFF49DA	$mono_tone_in_right_resample_op.next
0xFF49DA	$mono_tone_in_right_resample_op
        FF5A20 

0xFF49DB	$mono_tone_in_right_resample_op.func
        FF5A15 

0xFF49DC	$mono_tone_in_right_resample_op.param
        000000 000002 FF3505 FF5A50 
        FF5A28 000060 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF49E9	$tone_in_right_resample_op
0xFF49E9	$tone_in_right_resample_op.next
        FF5A20 

0xFF49EA	$tone_in_right_resample_op.func
        FF5A15 

0xFF49EB	$tone_in_right_resample_op.param
        000001 000003 FF3505 FF5A50 
        FF5A28 000060 000000 000000 
        000000 000000 000000 000000 
        000000 

0xFF49F8	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.next
0xFF49F8	$chain0_ch0_dither_and_shift_op
        FF5937 

0xFF49F9	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.func
        FF5A06 

0xFF49FA	$M.multi_chan_output.chain0_ch0_dither_and_shift_op.param
        000000 000000 FFFFF8 000000 
        0000E8 000000 

0xFF4A00	$multi_chan_aux_right_out
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4AD0	$chain1_to_chain0_pcm_sync_struct
        0147AE 001388 FF5A1E 002A1E 
        FF5887 FF587C 000000 000000 
        000000 000000 000000 000000 
        000000 000000 

0xFF4ADE	$sbc_stats
        002488 00248A 00248E 002489 
        00248B 00248D 00248C 002A3B 
        002A3B 002A3B 002A3B 002A3B 
        002A3B 

0xFF4AEB	$M.system_config.data.stream_map_left_in
        000000 000000 000000 0000A0 
        000BB8 001184 001135 000000 
        000000 000000 000000 000000 
        000000 

0xFF4AF8	$chain0_ch2_dither_and_shift_op
0xFF4AF8	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.next
        00298C 

0xFF4AF9	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.func
        FF5A06 

0xFF4AFA	$M.multi_chan_output.chain0_ch2_dither_and_shift_op.param
        000002 000000 FFFFF8 000000 
        000168 000000 

0xFF4B00	$tone_in_right
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 

0xFF4BC0	$M.iir_resamplev2.fir_L640_M147_K10.coeffs
        FFB301 FFB2E3 FFB2C7 FFB2AB 
        FFB290 FFB276 FFB25D FFB245 
        FFB22D FFB217 FFB201 FFB1EC 
        FFB1D8 FFB1C5 FFB1B3 FFB1A2 
        FFB192 FFB182 FFB173 FFB165 
        FFB158 FFB14C FFB140 FFB136 
        FFB12C FFB123 FFB11A FFB113 
        FFB10C FFB106 FFB101 FFB0FD 
        FFB0F9 FFB0F7 FFB0F4 FFB0F3 
        FFB0F3 FFB0F3 FFB0F4 FFB0F5 
        FFB0F8 FFB0FB FFB0FF FFB103 
        FFB109 FFB10F FFB115 FFB11D 
        FFB125 FFB12D FFB137 FFB141 
        FFB14C FFB157 FFB163 FFB170 
        FFB17D FFB18C FFB19A FFB1AA 
        FFB1BA FFB1CA FFB1DC FFB1ED 
        FFB200 FFB213 FFB227 FFB23B 
        FFB250 FFB265 FFB27B FFB292 
        FFB2A9 FFB2C1 FFB2DA FFB2F3 
        FFB30C FFB326 FFB341 FFB35C 
        FFB378 FFB394 FFB3B1 FFB3CE 
        FFB3EC FFB40A FFB429 FFB448 
        FFB468 FFB488 FFB4A9 FFB4CB 
        FFB4ED FFB50F FFB532 FFB555 
        FFB579 FFB59D FFB5C2 FFB5E7 
        FFB60C FFB632 FFB659 FFB680 
        FFB6A7 FFB6CF FFB6F7 FFB720 
        FFB749 FFB772 FFB79C FFB7C6 
        FFB7F1 FFB81C FFB847 FFB873 
        FFB89F FFB8CC FFB8F9 FFB926 
        FFB954 FFB982 FFB9B0 FFB9DF 
        FFBA0E FFBA3D FFBA6D FFBA9D 
        FFBACE FFBAFE FFBB2F FFBB61 
        FFBB93 FFBBC5 FFBBF7 FFBC29 
        FFBC5C FFBC90 FFBCC3 FFBCF7 
        FFBD2B FFBD5F FFBD94 FFBDC9 
        FFBDFE FFBE33 FFBE69 FFBE9F 
        FFBED5 FFBF0C FFBF42 FFBF79 
        FFBFB0 FFBFE8 FFC01F FFC057 
        FFC08F FFC0C8 FFC100 FFC139 
        FFC172 FFC1AB FFC1E4 FFC21E 
        FFC257 FFC291 FFC2CB FFC305 
        FFC340 FFC37A FFC3B5 FFC3F0 
        FFC42B FFC466 FFC4A2 FFC4DD 
        FFC519 FFC555 FFC591 FFC5CD 
        FFC609 FFC645 FFC682 FFC6BE 
        FFC6FB FFC738 FFC775 FFC7B2 
        FFC7EF FFC82C FFC86A FFC8A7 
        FFC8E5 FFC922 FFC960 FFC99E 
        FFC9DC FFCA1A FFCA58 FFCA96 
        FFCAD4 FFCB12 FFCB51 FFCB8F 
        FFCBCD FFCC0C FFCC4A FFCC89 
        FFCCC8 FFCD06 FFCD45 FFCD84 
        FFCDC2 FFCE01 FFCE40 FFCE7F 
        FFCEBE FFCEFC FFCF3B FFCF7A 
        FFCFB9 FFCFF8 FFD037 FFD076 
        FFD0B5 FFD0F4 FFD132 FFD171 
        FFD1B0 FFD1EF FFD22E FFD26D 
        FFD2AB FFD2EA FFD329 FFD368 
        FFD3A6 FFD3E5 FFD423 FFD462 
        FFD4A0 FFD4DF FFD51D FFD55C 
        FFD59A FFD5D8 FFD616 FFD654 
        FFD692 FFD6D0 FFD70E FFD74C 
        FFD78A FFD7C8 FFD805 FFD843 
        FFD880 FFD8BD FFD8FB FFD938 
        FFD975 FFD9B2 FFD9EF FFDA2C 
        FFDA68 FFDAA5 FFDAE1 FFDB1E 
        FFDB5A FFDB96 FFDBD2 FFDC0E 
        FFDC4A FFDC86 FFDCC2 FFDCFD 
        FFDD38 FFDD74 FFDDAF FFDDEA 
        FFDE24 FFDE5F FFDE9A FFDED4 
        FFDF0E FFDF49 FFDF83 FFDFBD 
        FFDFF6 FFE030 FFE069 FFE0A3 
        FFE0DC FFE115 FFE14E FFE186 
        FFE1BF FFE1F7 FFE22F FFE267 
        FFE29F FFE2D7 FFE30E FFE346 
        FFE37D FFE3B4 FFE3EB FFE422 
        FFE458 FFE48E FFE4C5 FFE4FA 
        FFE530 FFE566 FFE59B FFE5D1 
        FFE606 FFE63B FFE66F FFE6A4 
        FFE6D8 FFE70C FFE740 FFE774 
        FFE7A7 FFE7DB FFE80E FFE841 
        FFE874 FFE8A6 FFE8D8 FFE90B 
        FFE93C FFE96E FFE9A0 FFE9D1 
        FFEA02 FFEA33 FFEA64 FFEA94 
        FFEAC5 FFEAF5 FFEB25 FFEB54 
        FFEB84 FFEBB3 FFEBE2 FFEC11 
        FFEC3F FFEC6E FFEC9C FFECCA 
        FFECF7 FFED25 FFED52 FFED7F 
        FFEDAC FFEDD9 FFEE05 FFEE31 
        FFEE5D FFEE89 FFEEB4 FFEEE0 
        FFEF0B FFEF35 FFEF60 FFEF8A 
        FFEFB4 FFEFDE FFF008 FFF031 
        FFF05B FFF084 FFF0AC FFF0D5 
        FFF0FD FFF125 FFF14D FFF175 
        FFF19C FFF1C3 FFF1EA FFF211 
        FFF237 FFF25D FFF283 FFF2A9 
        FFF2CE FFF2F4 FFF319 FFF33D 
        FFF362 FFF386 FFF3AA FFF3CE 
        FFF3F2 FFF415 FFF438 FFF45B 
        FFF47E FFF4A0 FFF4C3 FFF4E5 
        FFF506 FFF528 FFF549 FFF56A 
        FFF58B FFF5AB FFF5CC FFF5EC 
        FFF60C FFF62B FFF64B FFF66A 
        FFF689 FFF6A8 FFF6C6 FFF6E4 
        FFF702 FFF720 FFF73E FFF75B 
        FFF778 FFF795 FFF7B1 FFF7CE 
        FFF7EA FFF806 FFF822 FFF83D 
        FFF858 FFF873 FFF88E FFF8A9 
        FFF8C3 FFF8DD FFF8F7 FFF911 
        FFF92A FFF943 FFF95C FFF975 
        FFF98D FFF9A6 FFF9BE FFF9D6 
        FFF9ED FFFA05 FFFA1C FFFA33 
        FFFA4A FFFA60 FFFA76 FFFA8D 
        FFFAA2 FFFAB8 FFFACE FFFAE3 
        FFFAF8 FFFB0D FFFB21 FFFB36 
        FFFB4A FFFB5E FFFB72 FFFB85 
        FFFB98 FFFBAC FFFBBF FFFBD1 
        FFFBE4 FFFBF6 FFFC08 FFFC1A 
        FFFC2C FFFC3D FFFC4F FFFC60 
        FFFC71 FFFC81 FFFC92 FFFCA2 
        FFFCB2 FFFCC2 FFFCD2 FFFCE2 
        FFFCF1 FFFD00 FFFD0F FFFD1E 
        FFFD2C FFFD3B FFFD49 FFFD57 
        FFFD65 FFFD73 FFFD80 FFFD8D 
        FFFD9A FFFDA7 FFFDB4 FFFDC1 
        FFFDCD FFFDD9 FFFDE5 FFFDF1 
        FFFDFD FFFE09 FFFE14 FFFE1F 
        FFFE2A FFFE35 FFFE40 FFFE4A 
        FFFE55 FFFE5F FFFE69 FFFE73 
        FFFE7D FFFE86 FFFE90 FFFE99 
        FFFEA2 FFFEAB FFFEB4 FFFEBD 
        FFFEC5 FFFECD FFFED6 FFFEDE 
        FFFEE6 FFFEEE FFFEF5 FFFEFD 
        FFFF04 FFFF0B FFFF12 FFFF19 
        FFFF20 FFFF27 FFFF2D FFFF34 
        FFFF3A FFFF40 FFFF46 FFFF4C 
        FFFF52 FFFF58 FFFF5D FFFF62 
        FFFF68 FFFF6D FFFF72 FFFF77 
        FFFF7C FFFF80 FFFF85 FFFF8A 
        FFFF8E FFFF92 FFFF96 FFFF9A 
        FFFF9E FFFFA2 FFFFA6 FFFFAA 
        FFFFAD FFFFB1 FFFFB4 FFFFB7 
        FFFFBA FFFFBD FFFFC0 FFFFC3 
        FFFFC6 FFFFC9 FFFFCB FFFFCE 
        FFFFD0 FFFFD3 FFFFD5 FFFFD7 
        FFFFD9 FFFFDB FFFFDD FFFFDF 
        FFFFE1 FFFFE3 FFFFE5 FFFFE6 
        FFFFE8 FFFFE9 FFFFEB FFFFEC 
        FFFFEE FFFFEF FFFFF0 FFFFF1 
        FFFFF2 FFFFF3 FFFFF4 FFFFF5 
        FFFFF6 FFFFF7 FFFFF8 FFFFF8 
        FFFFF9 FFFFFA FFFFFA FFFFFB 
        FFFFFB FFFFFC FFFFFC FFFFFD 
        FFFFFD FFFFFE FFFFFE FFFFFE 
        FFFFFE FFFFFF FFFFFF FFFFFF 
        FFFFFF FFFFFF FFFFFF 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        033CEA 033BFA 033B07 033A11 
        033916 033819 033717 033613 
        03350B 0333FF 0332F0 0331DE 
        0330C8 032FAF 032E92 032D73 
        032C50 032B29 032A00 0328D3 
        0327A3 032670 03253A 032400 
        0322C4 032184 032041 031EFC 
        031DB3 031C67 031B18 0319C6 
        031872 03171A 0315C0 031462 
        031302 03119F 031039 030ED0 
        030D65 030BF7 030A86 030912 
        03079C 030623 0304A7 030329 
        0301A8 030024 02FE9E 02FD15 
        02FB8A 02F9FD 02F86D 02F6DA 
        02F545 02F3AD 02F214 02F077 
        02EED9 02ED38 02EB95 02E9EF 
        02E847 02E69D 02E4F1 02E342 
        02E192 02DFDF 02DE2A 02DC72 
        02DAB9 02D8FE 02D740 02D581 
        02D3BF 02D1FB 02D036 02CE6E 
        02CCA5 02CAD9 02C90C 02C73D 
        02C56C 02C399 02C1C4 02BFED 
        02BE15 02BC3B 02BA5F 02B881 
        02B6A1 02B4C0 02B2DD 02B0F9 
        02AF13 02AD2B 02AB42 02A957 
        02A76A 02A57C 02A38D 02A19C 
        029FA9 029DB5 029BBF 0299C9 
        0297D0 0295D6 0293DB 0291DF 
        028FE1 028DE2 028BE1 0289E0 
        0287DD 0285D9 0283D3 0281CC 
        027FC5 027DBB 027BB1 0279A6 
        027799 02758C 02737D 02716E 
        026F5D 026D4B 026B38 026924 
        026710 0264FA 0262E3 0260CB 
        025EB3 025C99 025A7F 025864 
        025648 02542B 02520E 024FEF 
        024DD0 024BB0 02498F 02476E 
        02454C 024329 024105 023EE1 
        023CBD 023A97 023871 02364B 
        023423 0231FC 022FD3 022DAB 
        022B81 022958 02272D 022503 
        0222D7 0220AC 021E80 021C53 
        021A26 0217F9 0215CC 02139E 
        021170 020F41 020D13 020AE3 
        0208B4 020685 020455 020225 
        01FFF5 01FDC4 01FB94 01F963 
        01F732 01F501 01F2D0 01F09F 
        01EE6D 01EC3C 01EA0B 01E7D9 
        01E5A8 01E376 01E145 01DF13 
        01DCE2 01DAB0 01D87F 01D64E 
        01D41D 01D1EC 01CFBB 01CD8A 
        01CB59 01C928 01C6F8 01C4C8 
        01C298 01C068 01BE38 01BC09 
        01B9DA 01B7AB 01B57C 01B34E 
        01B120 01AEF2 01ACC5 01AA98 
        01A86B 01A63E 01A412 01A1E7 
        019FBC 019D91 019B66 01993C 
        019713 0194EA 0192C1 019099 
        018E71 018C4A 018A23 0187FD 
        0185D7 0183B2 01818E 017F6A 
        017D46 017B24 017901 0176E0 
        0174BF 01729E 01707F 016E60 
        016C41 016A24 016806 0165EA 
        0163CF 0161B4 015F99 015D80 
        015B67 01594F 015738 015522 
        01530C 0150F7 014EE3 014CD0 
        014ABE 0148AC 01469B 01448B 
        01427C 01406E 013E61 013C55 
        013A49 01383F 013635 01342C 
        013224 01301E 012E18 012C13 
        012A0F 01280C 01260A 012409 
        012209 01200A 011E0C 011C0F 
        011A13 011818 01161E 011425 
        01122D 011037 010E41 010C4D 
        010A59 010867 010676 010486 
        010297 0100A9 00FEBC 00FCD1 
        00FAE6 00F8FD 00F715 00F52E 
        00F348 00F164 00EF81 00ED9E 
        00EBBE 00E9DE 00E7FF 00E622 
        00E446 00E26B 00E092 00DEB9 
        00DCE2 00DB0C 00D938 00D765 
        00D593 00D3C2 00D1F2 00D024 
        00CE58 00CC8C 00CAC2 00C8F9 
        00C731 00C56B 00C3A6 00C1E3 
        00C020 00BE60 00BCA0 00BAE2 
        00B925 00B76A 00B5B0 00B3F7 
        00B240 00B08A 00AED5 00AD22 
        00AB70 00A9C0 00A811 00A663 
        00A4B7 00A30D 00A163 009FBB 
        009E15 009C70 009ACC 00992A 
        00978A 0095EB 00944D 0092B0 
        009116 008F7C 008DE4 008C4E 
        008AB9 008925 008793 008603 
        008474 0082E6 00815A 007FD0 
        007E46 007CBF 007B39 0079B4 
        007831 0076B0 007530 0073B1 
        007234 0070B8 006F3E 006DC6 
        006C4F 006ADA 006966 0067F3 
        006683 006513 0063A5 006239 
        0060CF 005F65 005DFE 005C98 
        005B33 0059D0 00586F 00570F 
        0055B1 005454 0052F9 00519F 
        005047 004EF1 004D9C 004C48 
        004AF6 0049A6 004857 00470A 
        0045BF 004475 00432C 0041E5 
        0040A0 003F5C 003E1A 003CD9 
        003B9A 003A5D 003921 0037E6 
        0036AE 003576 003441 00330D 
        0031DA 0030A9 002F7A 002E4C 
        002D20 002BF5 002ACC 0029A4 
        00287E 00275A 002637 002516 
        0023F6 0022D8 0021BB 0020A0 
        001F87 001E6F 001D59 001C44 
        001B31 001A1F 00190F 001801 
        0016F4 0015E8 0014DE 0013D6 
        0012CF 0011CA 0010C6 000FC4 
        000EC4 000DC5 000CC7 000BCB 
        000AD1 0009D8 0008E1 0007EB 
        0006F7 000604 000513 000423 
        000335 000249 00015E 000074 
        FFFF8C FFFEA6 FFFDC1 FFFCDD 
        FFFBFB FFFB1B FFFA3C FFF95F 
        FFF883 FFF7A8 FFF6CF FFF5F8 
        FFF522 FFF44E FFF37B FFF2A9 
        FFF1DA FFF10B FFF03E FFEF73 
        FFEEA9 FFEDE0 FFED19 FFEC53 
        FFEB8F FFEACD FFEA0C FFE94C 
        FFE88E FFE7D1 FFE715 FFE65B 
        FFE5A3 FFE4EC FFE436 FFE382 
        FFE2CF FFE21E FFE16E FFE0C0 
        FFE013 FFDF67 FFDEBD FFDE14 
        FFDD6D FFDCC7 FFDC22 FFDB7F 
        FFDADD FFDA3D FFD99E FFD901 
        FFD864 FFD7CA FFD730 FFD698 
        FFD601 FFD56C FFD4D8 FFD445 
        FFD3B4 FFD324 FFD296 FFD208 
        FFD17C FFD0F2 FFD069 FFCFE1 
        FFCF5A FFCED5 FFCE51 FFCDCF 
        FFCD4D FFCCCD FFCC4F FFCBD1 
        FFCB55 FFCADA FFCA61 FFC9E9 
        FFC972 FFC8FC FFC888 FFC815 
        FFC7A3 FFC732 FFC6C3 FFC655 
        FFC5E8 FFC57C FFC512 FFC4A9 
        FFC441 FFC3DA FFC375 FFC310 
        FFC2AD FFC24C FFC1EB FFC18C 
        FFC12D FFC0D0 FFC075 FFC01A 
        FFBFC1 FFBF68 FFBF11 FFBEBB 
        FFBE66 FFBE13 FFBDC0 FFBD6F 
        FFBD1F FFBCD0 FFBC82 FFBC35 
        FFBBEA FFBB9F FFBB56 FFBB0E 
        FFBAC6 FFBA80 FFBA3B FFB9F8 
        FFB9B5 FFB973 FFB932 FFB8F3 
        FFB8B4 FFB877 FFB83B FFB800 
        FFB7C5 FFB78C FFB754 FFB71D 
        FFB6E7 FFB6B2 FFB67E FFB64B 
        FFB619 FFB5E8 FFB5B8 FFB589 
        FFB55C FFB52F FFB503 FFB4D8 
        FFB4AE FFB485 FFB45D FFB436 
        FFB410 FFB3EB FFB3C6 FFB3A3 
        FFB381 FFB360 FFB33F FFB320 
        F3AD09 F3B707 F3C10B F3CB15 
        F3D524 F3DF39 F3E954 F3F375 
        F3FD9B F407C6 F411F7 F41C2D 
        F42669 F430A9 F43AEF F4453A 
        F44F89 F459DE F46437 F46E95 
        F478F8 F48360 F48DCC F4983C 
        F4A2B1 F4AD2A F4B7A8 F4C22A 
        F4CCAF F4D739 F4E1C7 F4EC59 
        F4F6EF F50188 F50C26 F516C7 
        F5216B F52C13 F536BF F5416E 
        F54C20 F556D5 F5618E F56C4A 
        F57709 F581CB F58C90 F59757 
        F5A222 F5ACEF F5B7BF F5C292 
        F5CD67 F5D83E F5E318 F5EDF5 
        F5F8D3 F603B4 F60E97 F6197C 
        F62464 F62F4D F63A38 F64525 
        F65013 F65B04 F665F6 F670EA 
        F67BDF F686D6 F691CE F69CC7 
        F6A7C2 F6B2BE F6BDBC F6C8BA 
        F6D3B9 F6DEBA F6E9BB F6F4BD 
        F6FFC0 F70AC4 F715C9 F720CE 
        F72BD3 F736DA F741E0 F74CE7 
        F757EF F762F7 F76DFF F77907 
        F7840F F78F17 F79A20 F7A528 
        F7B030 F7BB38 F7C640 F7D148 
        F7DC4F F7E756 F7F25C F7FD62 
        F80867 F8136C F81E70 F82973 
        F83476 F83F78 F84A79 F85579 
        F86078 F86B76 F87673 F8816E 
        F88C69 F89762 F8A25A F8AD51 
        F8B846 F8C33A F8CE2C F8D91D 
        F8E40C F8EEFA F8F9E5 F904CF 
        F90FB8 F91A9E F92583 F93065 
        F93B46 F94624 F95101 F95BDB 
        F966B3 F97189 F97C5C F9872D 
        F991FC F99CC9 F9A792 F9B25A 
        F9BD1F F9C7E1 F9D2A0 F9DD5D 
        F9E817 F9F2CE F9FD83 FA0834 
        FA12E3 FA1D8F FA2837 FA32DD 
        FA3D7F FA481E FA52BA FA5D53 
        FA67E9 FA727B FA7D0A FA8795 
        FA921D FA9CA2 FAA722 FAB1A0 
        FABC1A FAC690 FAD102 FADB71 
        FAE5DB FAF042 FAFAA5 FB0505 
        FB0F60 FB19B7 FB240B FB2E5A 
        FB38A5 FB42EC FB4D2F FB576D 
        FB61A8 FB6BDE FB760F FB803D 
        FB8A66 FB948A FB9EAA FBA8C6 
        FBB2DD FBBCEF FBC6FD FBD106 
        FBDB0B FBE50A FBEF05 FBF8FC 
        FC02ED FC0CD9 FC16C1 FC20A4 
        FC2A81 FC345A FC3E2E FC47FC 
        FC51C6 FC5B8A FC654A FC6F04 
        FC78B9 FC8268 FC8C13 FC95B8 
        FC9F57 FCA8F2 FCB286 FCBC16 
        FCC5A0 FCCF24 FCD8A3 FCE21D 
        FCEB91 FCF4FF FCFE68 FD07CA 
        FD1128 FD1A7F FD23D1 FD2D1D 
        FD3663 FD3FA3 FD48DE FD5213 
        FD5B41 FD646A FD6D8D FD76AA 
        FD7FC0 FD88D1 FD91DC FD9AE0 
        FDA3DF FDACD7 FDB5C9 FDBEB5 
        FDC79B FDD07B FDD954 FDE227 
        FDEAF4 FDF3BA FDFC7A FE0534 
        FE0DE7 FE1694 FE1F3A FE27DA 
        FE3074 FE3907 FE4193 FE4A19 
        FE5299 FE5B11 FE6384 FE6BEF 
        FE7454 FE7CB2 FE850A FE8D5B 
        FE95A5 FE9DE8 FEA625 FEAE5B 
        FEB68A FEBEB2 FEC6D4 FECEEF 
        FED702 FEDF0F FEE715 FEEF15 
        FEF70D FEFEFE FF06E8 FF0ECC 
        FF16A8 FF1E7D FF264C FF2E13 
        FF35D3 FF3D8D FF453F FF4CEA 
        FF548E FF5C2A FF63C0 FF6B4F 
        FF72D6 FF7A56 FF81CF FF8941 
        FF90AC FF980F FF9F6C FFA6C1 
        FFAE0E FFB555 FFBC94 FFC3CC 
        FFCAFD FFD226 FFD948 FFE063 
        FFE776 FFEE82 FFF587 FFFC84 
        00037A 000A69 001150 001830 
        001F08 0025D9 002CA2 003365 
        003A1F 0040D2 00477E 004E23 
        0054BF 005B55 0061E3 006869 
        006EE8 007560 007BCF 008238 
        008899 008EF2 009544 009B8F 
        00A1D1 00A80D 00AE40 00B46D 
        00BA91 00C0AF 00C6C4 00CCD2 
        00D2D9 00D8D8 00DECF 00E4BF 
        00EAA7 00F087 00F661 00FC32 
        0101FC 0107BE 010D79 01132C 
        0118D8 011E7C 012418 0129AD 
        012F3A 0134C0 013A3E 013FB4 
        014523 014A8A 014FEA 015542 
        015A93 015FDC 01651D 016A57 
        016F89 0174B4 0179D7 017EF2 
        018406 018913 018E18 019315 
        01980A 019CF9 01A1DF 01A6BE 
        01AB96 01B066 01B52E 01B9EF 
        01BEA8 01C35A 01C804 01CCA7 
        01D142 01D5D6 01DA62 01DEE7 
        01E364 01E7DA 01EC48 01F0AF 
        01F50E 01F966 01FDB7 020200 
        020641 020A7B 020EAE 0212D9 
        0216FD 021B19 021F2E 02233C 
        022742 022B41 022F38 023328 
        023711 023AF2 023ECC 02429F 
        02466A 024A2E 024DEB 0251A0 
        02554E 0258F5 025C95 02602D 
        0263BE 026748 026ACA 026E46 
        0271BA 027527 02788D 027BEB 
        027F43 028293 0285DC 02891E 
        028C59 028F8C 0292B9 0295DE 
        0298FD 029C14 029F24 02A22E 
        02A530 02A82B 02AB1F 02AE0C 
        02B0F3 02B3D2 02B6AA 02B97B 
        02BC46 02BF09 02C1C6 02C47B 
        02C72A 02C9D2 02CC73 02CF0D 
        02D1A0 02D42D 02D6B3 02D931 
        02DBAA 02DE1B 02E086 02E2E9 
        02E547 02E79D 02E9ED 02EC36 
        02EE79 02F0B4 02F2EA 02F518 
        02F740 02F961 02FB7C 02FD91 
        02FF9E 0301A6 0303A6 0305A0 
        030794 030981 030B68 030D49 
        030F23 0310F6 0312C4 03148A 
        03164B 031805 0319B9 031B67 
        031D0E 031EAF 03204A 0321DE 
        03236D 0324F5 032677 0327F3 
        032968 032AD8 032C41 032DA5 
        032F02 033059 0331AB 0332F6 
        03343B 03357A 0336B3 0337E7 
        033914 033A3C 033B5D 033C79 
        033D8F 033E9F 033FA9 0340AE 
        0341AC 0342A5 034398 034486 
        03456D 03464F 03472C 034803 
        0348D4 03499F 034A65 034B25 
        034BE0 034C95 034D45 034DEF 
        034E94 034F34 034FCD 035062 
        0350F1 03517B 0351FF 03527E 
        0352F8 03536C 0353DC 035446 
        0354AA 03550A 035564 0355B9 
        035609 035654 03569A 0356DA 
        035716 03574C 03577E 0357AA 
        0357D2 0357F4 035812 03582A 
        03583E 03584D 035857 03585C 
        03585C 035858 03584F 035841 
        03582E 035816 0357FA 0357D9 
        0357B4 03578A 03575B 035728 
        0356F0 0356B3 035672 03562D 
        0355E3 035594 035541 0354EA 
        03548E 03542E 0353CA 035361 
        0352F4 035283 03520D 035193 
        035115 035092 03500C 034F81 
        034EF2 034E5F 034DC8 034D2D 
        034C8E 034BEA 034B43 034A98 
        0349E9 034935 03487E 0347C3 
        034704 034642 03457B 0344B0 
        0343E2 034310 03423A 034161 
        034084 033FA3 033EBE 033DD6 
        19536D 1922CF 18F248 18C1D6 
        18917A 186134 183104 1800EA 
        17D0E7 17A0FA 177123 174163 
        1711BA 16E228 16B2AC 168347 
        1653FA 1624C3 15F5A4 15C69B 
        1597AB 1568D1 153A10 150B65 
        14DCD3 14AE58 147FF6 1451AB 
        142378 13F55D 13C75B 139971 
        136B9F 133DE5 131045 12E2BC 
        12B54D 1287F6 125AB8 122D93 
        120087 11D394 11A6BA 1179FA 
        114D52 1120C4 10F450 10C7F5 
        109BB4 106F8C 10437E 10178A 
        0FEBB0 0FBFEF 0F9449 0F68BD 
        0F3D4B 0F11F3 0EE6B6 0EBB93 
        0E908A 0E659C 0E3AC8 0E100F 
        0DE571 0DBAEE 0D9085 0D6638 
        0D3C05 0D11ED 0CE7F1 0CBE0F 
        0C9449 0C6A9E 0C410E 0C179A 
        0BEE42 0BC504 0B9BE3 0B72DD 
        0B49F3 0B2124 0AF871 0ACFDB 
        0AA760 0A7F01 0A56BE 0A2E97 
        0A068D 09DE9E 09B6CC 098F16 
        09677D 094000 09189F 08F15B 
        08CA34 08A329 087C3B 085569 
        082EB5 08081D 07E1A2 07BB44 
        079503 076EDF 0748D8 0722EE 
        06FD21 06D771 06B1DF 068C6A 
        066712 0641D8 061CBB 05F7BB 
        05D2D9 05AE15 05896E 0564E5 
        054079 051C2B 04F7FB 04D3E8 
        04AFF4 048C1D 046864 0444C9 
        04214C 03FDED 03DAAC 03B789 
        039484 03719D 034ED4 032C2A 
        03099E 02E730 02C4E0 02A2AF 
        02809C 025EA7 023CD1 021B19 
        01F97F 01D805 01B6A8 01956A 
        01744B 01534A 013268 0111A5 
        00F100 00D07A 00B013 008FCA 
        006FA0 004F95 002FA9 000FDB 
        FFF02D FFD09D FFB12C FF91DA 
        FF72A7 FF5393 FF349D FF15C7 
        FEF710 FED878 FEB9FF FE9BA5 
        FE7D69 FE5F4D FE4150 FE2373 
        FE05B4 FDE814 FDCA94 FDAD32 
        FD8FF0 FD72CD FD55C9 FD38E5 
        FD1C1F FCFF79 FCE2F2 FCC68A 
        FCAA42 FC8E18 FC720E FC5623 
        FC3A58 FC1EAB FC031E FBE7B1 
        FBCC62 FBB133 FB9623 FB7B32 
        FB6061 FB45AF FB2B1C FB10A8 
        FAF654 FADC1F FAC20A FAA813 
        FA8E3C FA7484 FA5AEC FA4173 
        FA2819 FA0EDE F9F5C3 F9DCC7 
        F9C3EA F9AB2C F9928E F97A0F 
        F961AF F9496F F9314D F9194B 
        F90168 F8E9A5 F8D200 F8BA7B 
        F8A315 F88BCE F874A6 F85D9D 
        F846B3 F82FE9 F8193E F802B1 
        F7EC44 F7D5F6 F7BFC7 F7A9B7 
        F793C6 F77DF4 F76841 F752AD 
        F73D38 F727E2 F712AB F6FD93 
        F6E899 F6D3BF F6BF03 F6AA66 
        F695E8 F68189 F66D49 F65927 
        F64524 F63140 F61D7A F609D3 
        F5F64B F5E2E1 F5CF96 F5BC6A 
        F5A95C F5966D F5839C F570E9 
        F55E55 F54BE0 F53989 F52750 
        F51535 F50339 F4F15B F4DF9C 
        F4CDFB F4BC77 F4AB12 F499CB 
        F488A3 F47798 F466AB F455DD 
        F4452C F43499 F42425 F413CE 
        F40395 F3F379 F3E37C F3D39C 
        F3C3DA F3B436 F3A4AF F39546 
        F385FA F376CC F367BC F358C9 
        F349F3 F33B3B F32CA0 F31E22 
        F30FC2 F3017F F2F359 F2E550 
        F2D765 F2C996 F2BBE5 F2AE50 
        F2A0D8 F2937E F28640 F2791F 
        F26C1B F25F33 F25268 F245BA 
        F23928 F22CB3 F2205B F2141F 
        F207FF F1FBFC F1F015 F1E44A 
        F1D89B F1CD09 F1C193 F1B639 
        F1AAFB F19FD9 F194D3 F189E9 
        F17F1A F17468 F169D1 F15F56 
        F154F7 F14AB3 F1408B F1367E 
        F12C8D F122B7 F118FC F10F5D 
        F105D9 F0FC70 F0F322 F0E9EF 
        F0E0D8 F0D7DB F0CEF9 F0C632 
        F0BD86 F0B4F5 F0AC7E F0A422 
        F09BE1 F093BA F08BAE F083BC 
        F07BE4 F07427 F06C83 F064FB 
        F05D8C F05637 F04EFC F047DC 
        F040D5 F039E8 F03314 F02C5B 
        F025BB F01F35 F018C8 F01275 
        F00C3B F0061A F00013 EFFA25 
        EFF450 EFEE95 EFE8F2 EFE368 
        EFDDF8 EFD8A0 EFD361 EFCE3A 
        EFC92D EFC438 EFBF5B EFBA97 
        EFB5EB EFB158 EFACDD EFA87A 
        EFA42F EF9FFD EF9BE2 EF97E0 
        EF93F5 EF9022 EF8C67 EF88C3 
        EF8538 EF81C3 EF7E67 EF7B21 
        EF77F3 EF74DD EF71DD EF6EF5 
        EF6C23 EF6969 EF66C6 EF643A 
        EF61C4 EF5F65 EF5D1D EF5AEB 
        EF58D0 EF56CC EF54DD EF5305 
        EF5144 EF4F98 EF4E03 EF4C84 
        EF4B1A EF49C7 EF4889 EF4761 
        EF464F EF4553 EF446C EF439A 
        EF42DE EF4237 EF41A6 EF4129 
        EF40C2 EF4070 EF4032 EF400A 
        EF3FF6 EF3FF8 EF400D EF4038 
        EF4077 EF40CA EF4132 EF41AE 
        EF423E EF42E3 EF439B EF4468 
        EF4548 EF463C EF4744 EF4860 
        EF4990 EF4AD3 EF4C29 EF4D93 
        EF4F10 EF50A0 EF5244 EF53FB 
        EF55C4 EF57A1 EF5991 EF5B93 
        EF5DA8 EF5FD0 EF620A EF6457 
        EF66B6 EF6927 EF6BAB EF6E41 
        EF70E9 EF73A3 EF766F EF794D 
        EF7C3D EF7F3F EF8252 EF8576 
        EF88AD EF8BF4 EF8F4D EF92B7 
        EF9633 EF99BF EF9D5D EFA10B 
        EFA4CA EFA89A EFAC7B EFB06D 
        EFB46F EFB881 EFBCA4 EFC0D7 
        EFC51B EFC96E EFCDD2 EFD246 
        EFD6C9 EFDB5D EFE000 EFE4B3 
        EFE976 EFEE48 EFF32A EFF81B 
        EFFD1B F0022A F00749 F00C77 
        F011B4 F016FF F01C5A F021C3 
        F0273B F02CC1 F03256 F037FA 
        F03DAC F0436C F0493A F04F17 
        F05501 F05AFA F06100 F06714 
        F06D36 F07365 F079A3 F07FED 
        F08645 F08CAA F0931D F0999D 
        F0A02A F0A6C4 F0AD6B F0B41E 
        F0BADF F0C1AC F0C886 F0CF6C 
        F0D65F F0DD5E F0E46A F0EB82 
        F0F2A6 F0F9D6 F10112 F1085A 
        F10FAE F1170D F11E78 F125EF 
        F12D72 F13500 F13C99 F1443E 
        F14BED F153A8 F15B6E F1633F 
        F16B1B F17302 F17AF3 F182EF 
        F18AF6 F19307 F19B23 F1A349 
        F1AB7A F1B3B4 F1BBF9 F1C448 
        F1CCA1 F1D503 F1DD70 F1E5E6 
        F1EE66 F1F6EF F1FF82 F2081F 
        F210C5 F21974 F2222C F22AEE 
        F233B8 F23C8C F24568 F24E4E 
        F2573C F26033 F26932 F2723A 
        F27B4A F28463 F28D84 F296AD 
        F29FDF F2A918 F2B25A F2BBA3 
        F2C4F5 F2CE4E F2D7AE F2E117 
        F2EA87 F2F3FE F2FD7D F30704 
        F31091 F31A26 F323C2 F32D64 
        F3370E F340BF F34A77 F35435 
        F35DFA F367C5 F37198 F37B70 
        F3854F F38F34 F39920 F3A312 
        7FFFFF 7FFFCD 7FFF6A 7FFED4 
        7FFE0D 7FFD15 7FFBEA 7FFA8E 
        7FF900 7FF740 7FF54F 7FF32C 
        7FF0D7 7FEE50 7FEB98 7FE8AE 
        7FE593 7FE245 7FDEC6 7FDB16 
        7FD733 7FD320 7FCEDA 7FCA63 
        7FC5BA 7FC0E0 7FBBD4 7FB697 
        7FB128 7FAB88 7FA5B6 7F9FB3 
        7F997E 7F9318 7F8C80 7F85B7 
        7F7EBD 7F7792 7F7035 7F68A6 
        7F60E7 7F58F6 7F50D4 7F4881 
        7F3FFC 7F3747 7F2E60 7F2549 
        7F1C00 7F1286 7F08DB 7EFEFF 
        7EF4F3 7EEAB5 7EE047 7ED5A7 
        7ECAD7 7EBFD6 7EB4A4 7EA942 
        7E9DAF 7E91EB 7E85F7 7E79D2 
        7E6D7D 7E60F7 7E5441 7E475B 
        7E3A44 7E2CFC 7E1F85 7E11DD 
        7E0405 7DF5FD 7DE7C5 7DD95C 
        7DCAC4 7DBBFC 7DAD04 7D9DDC 
        7D8E84 7D7EFC 7D6F45 7D5F5E 
        7D4F48 7D3F01 7D2E8C 7D1DE6 
        7D0D12 7CFC0E 7CEADB 7CD978 
        7CC7E7 7CB626 7CA436 7C9217 
        7C7FC9 7C6D4C 7C5AA0 7C47C6 
        7C34BD 7C2185 7C0E1E 7BFA89 
        7BE6C5 7BD2D3 7BBEB3 7BAA64 
        7B95E7 7B813C 7B6C63 7B575C 
        7B4227 7B2CC3 7B1732 7B0174 
        7AEB87 7AD56D 7ABF25 7AA8B0 
        7A920D 7A7B3D 7A6440 7A4D16 
        7A35BE 7A1E39 7A0688 79EEA9 
        79D69E 79BE65 79A600 798D6F 
        7974B1 795BC6 7942AF 79296C 
        790FFC 78F661 78DC99 78C2A5 
        78A886 788E3A 7873C3 785920 
        783E52 782358 780833 77ECE2 
        77D166 77B5BF 7799ED 777DF0 
        7761C8 774576 7728F8 770C50 
        76EF7E 76D281 76B559 769808 
        767A8C 765CE6 763F16 76211C 
        7602F9 75E4AB 75C635 75A794 
        7588CA 7569D7 754ABB 752B75 
        750C07 74EC6F 74CCAF 74ACC6 
        748CB4 746C7A 744C17 742B8C 
        740AD9 73E9FD 73C8FA 73A7CF 
        73867B 736500 73435E 732194 
        72FFA2 72DD89 72BB49 7298E2 
        727654 72539F 7230C4 720DC1 
        71EA98 71C749 71A3D3 718037 
        715C75 71388C 71147E 70F04B 
        70CBF1 70A772 7082CD 705E03 
        703914 701400 6FEEC7 6FC969 
        6FA3E6 6F7E3E 6F5872 6F3281 
        6F0C6D 6EE633 6EBFD6 6E9955 
        6E72B0 6E4BE8 6E24FB 6DFDEC 
        6DD6B9 6DAF62 6D87E9 6D604C 
        6D388D 6D10AB 6CE8A6 6CC07F 
        6C9835 6C6FCA 6C473B 6C1E8B 
        6BF5B9 6BCCC6 6BA3B0 6B7A79 
        6B5121 6B27A8 6AFE0D 6AD451 
        6AAA74 6A8077 6A5659 6A2C1A 
        6A01BC 69D73C 69AC9D 6981DE 
        6956FF 692C00 6900E1 68D5A3 
        68AA46 687EC9 68532E 682773 
        67FB9A 67CFA2 67A38B 677756 
        674B03 671E92 66F202 66C555 
        66988A 666BA1 663E9B 661177 
        65E437 65B6D9 65895E 655BC6 
        652E12 650042 64D254 64A44B 
        647626 6447E4 641987 63EB0E 
        63BC7A 638DCA 635EFE 633018 
        630117 62D1FA 62A2C4 627372 
        624406 621480 61E4E0 61B525 
        618551 615563 61255B 60F53A 
        60C500 6094AD 606440 6033BB 
        60031D 5FD266 5FA197 5F70B0 
        5F3FB0 5F0E99 5EDD69 5EAC22 
        5E7AC3 5E494D 5E17C0 5DE61B 
        5DB460 5D828E 5D50A5 5D1EA5 
        5CEC8F 5CBA63 5C8821 5C55C8 
        5C235A 5BF0D7 5BBE3D 5B8B8F 
        5B58CB 5B25F2 5AF304 5AC002 
        5A8CEA 5A59BF 5A267F 59F32A 
        59BFC2 598C46 5958B6 592513 
        58F15C 58BD92 5889B5 5855C4 
        5821C1 57EDAC 57B983 578549 
        5750FC 571C9D 56E82C 56B3AA 
        567F15 564A70 5615B9 55E0F1 
        55AC17 55772D 554233 550D27 
        54D80C 54A2E0 546DA3 543857 
        5402FC 53CD90 539815 53628B 
        532CF1 52F749 52C192 528BCB 
        5255F7 522014 51EA22 51B423 
        517E15 5147FA 5111D1 50DB9B 
        50A557 506F06 5038A8 50023D 
        4FCBC6 4F9541 4F5EB1 4F2814 
        4EF16B 4EBAB6 4E83F5 4E4D29 
        4E1651 4DDF6D 4DA87F 4D7185 
        4D3A81 4D0372 4CCC58 4C9534 
        4C5E05 4C26CD 4BEF8A 4BB83E 
        4B80E8 4B4988 4B121F 4ADAAD 
        4AA332 4A6BAE 4A3421 49FC8B 
        49C4EE 498D48 495599 491DE3 
        48E625 48AE5F 487692 483EBE 
        4806E2 47CEFF 479715 475F25 
        47272E 46EF30 46B72C 467F22 
        464712 460EFC 45D6E1 459EC0 
        45669A 452E6E 44F63D 44BE08 
        4485CD 444D8E 44154B 43DD03 
        43A4B7 436C67 433413 42FBBC 
        42C361 428B02 4252A1 421A3C 
        41E1D4 41A969 4170FC 41388C 
        41001A 40C7A6 408F30 4056B7 
        401E3D 3FE5C2 3FAD45 3F74C6 
        3F3C47 3F03C6 3ECB45 3E92C3 
        3E5A40 3E21BD 3DE93A 3DB0B6 
        3D7833 3D3FB0 3D072D 3CCEAA 
        3C9628 3C5DA7 3C2527 3BECA8 
        3BB42A 3B7BAE 3B4333 3B0AB9 
        3AD242 3A99CC 3A6159 3A28E7 
        39F078 39B80C 397FA2 39473B 
        390ED7 38D677 389E19 3865BF 
        382D68 37F515 37BCC6 37847B 
        374C33 3713F1 36DBB2 36A378 
        366B43 363312 35FAE7 35C2C0 
        358A9F 355283 351A6D 34E25C 
        34AA51 34724C 343A4E 340255 
        33CA63 339277 335A92 3322B4 
        32EADC 32B30C 327B43 324381 
        320BC6 31D413 319C68 3164C5 
        312D2A 30F597 30BE0C 30868A 
        304F10 30179F 2FE036 2FA8D7 
        2F7181 2F3A34 2F02F0 2ECBB6 
        2E9485 2E5D5E 2E2641 2DEF2E 
        2DB825 2D8127 2D4A33 2D1349 
        2CDC6A 2CA596 2C6ECD 2C380E 
        2C015C 2BCAB4 2B9418 2B5D87 
        2B2702 2AF089 2ABA1C 2A83BB 
        2A4D66 2A171D 29E0E1 29AAB2 
        29748F 293E79 290870 28D274 
        289C86 2866A4 2830D0 27FB0A 
        27C551 278FA7 275A0A 27247B 
        26EEFB 26B988 268424 264ECF 
        261989 25E451 25AF28 257A0E 
        254503 251008 24DB1C 24A63F 
        247172 243CB5 240808 23D36A 
        239EDD 236A60 2335F3 230197 
        22CD4B 229910 2264E5 2230CC 
        21FCC3 21C8CC 2194E6 216111 
        212D4D 20F99B 20C5FB 20926D 
        205EF0 202B86 1FF82D 1FC4E7 
        1F91B3 1F5E91 1F2B82 1EF886 
        1EC59C 1E92C6 1E6002 1E2D51 
        1DFAB4 1DC829 1D95B2 1D634F 
        1D30FF 1CFEC3 1CCC9A 1C9A86 
        1C6885 1C3699 1C04C1 1BD2FD 
        1BA14D 1B6FB2 1B3E2C 1B0CBA 
        1ADB5D 1AAA15 1A78E2 1A47C4 
        1A16BB 19E5C7 19B4E9 198420 

0xFF5840	$M.system_config.data.stream_map_primary_left_out
        0001A5 000000 000000 0000A0 
        000BB8 001159 00101B 000000 
        000000 000000 000000 000000 
        000000 

0xFF584D	$M.system_config.data.stream_map_secondary_left_out
        0001AD 000000 000000 0000A0 
        000BB8 001159 00101B 000000 
        000000 000000 000000 000000 
        000000 

0xFF585A	$M.system_config.data.stream_map_aux_left_out
        0001B5 000000 000000 0000A0 
        000BB8 001159 00101B 000000 
        000000 000000 000000 000000 
        000000 

0xFF5867	$M.system_config.data.stream_map_sub_out
        0001BD 000000 000000 0000A0 
        000BB8 001159 00101B 000000 
        000000 000000 000000 000000 
        000000 

0xFF5874	$calc_chain0_actual_port_rate_struc
        800011 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF587F	$calc_chain1_actual_port_rate_struc
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF588A	$kal_filter_coef_lib.__db2lin.constants
        000082 C0A8C1 000074 BBFFCB 
        000078 CC9A78 00007C EC8E69 
        000080 800000 

0xFF5894	$M.system_config.data.BoostEqCoefsB
        000001 000001 400000 000000 
        000000 400000 000000 000000 
        000001 

0xFF589D	$interrupt.isr_call_table
        000F65 00206A 0009DF 00206A 
        00206A 00206A 00206A 00206A 
        00206A 

0xFF58A6	$chain0_ch4_dither_and_shift_op
0xFF58A6	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.next
        002998 

0xFF58A7	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.func
        FF5A06 

0xFF58A8	$M.multi_chan_output.chain0_ch4_dither_and_shift_op.param
        000004 000000 FFFFF8 000000 
        000198 000000 

0xFF58AE	$chain1_ch0_dither_and_shift_op
0xFF58AE	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.next
        FF5967 

0xFF58AF	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.func
        FF5A06 

0xFF58B0	$M.multi_chan_output.chain1_ch0_dither_and_shift_op.param
        000000 000000 FFFFF8 000000 
        0001A8 000000 

0xFF58B6	$M.MUSIC_EXAMPLE_MODULES_STAMP.s1
0xFF58B6	$M.MUSIC_EXAMPLE_MODULES_STAMP.ModulesStamp
        00FEEB 

0xFF58B7	$M.MUSIC_EXAMPLE_MODULES_STAMP.s2
        00FEEB 

0xFF58B8	$M.MUSIC_EXAMPLE_MODULES_STAMP.s3
        00FEEB 

0xFF58B9	$M.MUSIC_EXAMPLE_MODULES_STAMP.CompConfig
        07BBC0 

0xFF58BA	$M.MUSIC_EXAMPLE_MODULES_STAMP.s4
        00FEEB 

0xFF58BB	$M.MUSIC_EXAMPLE_MODULES_STAMP.s5
        00FEEB 

0xFF58BC	$M.MUSIC_EXAMPLE_MODULES_STAMP.s6
        00FEEB 

0xFF58BD	$music_example.Statistics
0xFF58BD	$music_example.CurMode
        000000 

0xFF58BE	$music_example.PeakMipsFunc
        000000 

0xFF58BF	$music_example.PeakMipsDecoder
        000000 

0xFF58C0	$music_example.SamplingRate
        000000 

0xFF58C1	$music_example.dec_sampling_freq
        000000 

0xFF58C2	$music_example.dec_bitpool
        000000 

0xFF58C3	$music_example.PeakMipsEncoder
        000000 

0xFF58C4	$M.multi_chan_output.wired_in_buffer_table
        0001A5 FF59EB 0001B5 FF59F1 
        0001AD FF59EE 0001BD 

0xFF58CB	$M.multi_chan_output.wired_out_type_table
        000000 000000 000000 000000 
        000000 000000 000000 

0xFF58D2	$M.multi_chan_output.chain0_pcm_cbuffers_latency_measure
        000000 FF5A2B 000000 000000 
        FF5A2B 000000 000000 

0xFF58D9	$chain0_ch1_mute_op
0xFF58D9	$M.multi_chan_output.chain0_ch1_mute_op.next
        002974 

0xFF58DA	$M.multi_chan_output.chain0_ch1_mute_op.func
        002A0D 

0xFF58DB	$M.multi_chan_output.chain0_ch1_mute_op.param
        000000 000000 000001 000001 
        000001 

0xFF58E0	$M.multi_chan_output.chain0_ch3_mute_op.next
0xFF58E0	$chain0_ch3_mute_op
        FF5943 

0xFF58E1	$M.multi_chan_output.chain0_ch3_mute_op.func
        002A0D 

0xFF58E2	$M.multi_chan_output.chain0_ch3_mute_op.param
        000000 000000 000001 000003 
        000003 

0xFF58E7	$chain0_ch5_mute_op
0xFF58E7	$M.multi_chan_output.chain0_ch5_mute_op.next
        FF594F 

0xFF58E8	$M.multi_chan_output.chain0_ch5_mute_op.func
        002A0D 

0xFF58E9	$M.multi_chan_output.chain0_ch5_mute_op.param
        000000 000000 000001 000005 
        000005 

0xFF58EE	$M.multi_chan_output.chain1_ch1_mute_op.next
0xFF58EE	$chain1_ch1_mute_op
        FF5961 

0xFF58EF	$M.multi_chan_output.chain1_ch1_mute_op.func
        002A0D 

0xFF58F0	$M.multi_chan_output.chain1_ch1_mute_op.param
        000000 000000 000001 000001 
        000001 

0xFF58F5	$M.system_config.data.SpkrEqDefnTable
        000001 00000A FF30D0 FF3583 
        0024B1 0024F0 

0xFF58FB	$M.system_config.data.UserEqDefnTable
        000006 000005 FF3669 FF3683 
        00261A 00263B 

0xFF5901	$M.system_config.data.spkr_ctrl_sec_eq_defn_table
        000002 000007 FF35EC FF360C 
        0015D0 001AD0 

0xFF5907	$M.system_config.data.aux_mix_obj
        FF4AEB 002878 FF585A FF5A3B 
        FF5A3B 002A3B 

0xFF590D	$M.multi_chan_output.signal_detect_coeffs
        000A5B 000258 000000 000000 
        000001 001019 

0xFF5913	$M.multi_chan_output.chain0_ch0_tone_switch_op.next
0xFF5913	$chain0_ch0_tone_switch_op
        002787 

0xFF5914	$M.multi_chan_output.chain0_ch0_tone_switch_op.func
        FF5A12 

0xFF5915	$M.multi_chan_output.chain0_ch0_tone_switch_op.param
        FF5A46 002962 000001 000000 

0xFF5919	$chain0_ch2_tone_switch_op
0xFF5919	$M.multi_chan_output.chain0_ch2_tone_switch_op.next
        0027AF 

0xFF591A	$M.multi_chan_output.chain0_ch2_tone_switch_op.func
        FF5A12 

0xFF591B	$M.multi_chan_output.chain0_ch2_tone_switch_op.param
        FF5A46 002968 000004 000000 

0xFF591F	$chain0_ch0_switch_op
0xFF591F	$M.multi_chan_output.chain0_ch0_switch_op.next
        002921 

0xFF5920	$M.multi_chan_output.chain0_ch0_switch_op.func
        FF5A12 

0xFF5921	$M.multi_chan_output.chain0_ch0_switch_op.param
        002A45 FF5925 000001 000000 

0xFF5925	$M.multi_chan_output.chain0_ch1_switch_op.next
0xFF5925	$chain0_ch1_switch_op
        FF58D9 

0xFF5926	$M.multi_chan_output.chain0_ch1_switch_op.func
        FF5A12 

0xFF5927	$M.multi_chan_output.chain0_ch1_switch_op.param
        002A45 FF592B 000002 000000 

0xFF592B	$M.multi_chan_output.chain0_anc_switch_op.next
0xFF592B	$chain0_anc_switch_op
        00297A 

0xFF592C	$M.multi_chan_output.chain0_anc_switch_op.func
        FF5A12 

0xFF592D	$M.multi_chan_output.chain0_anc_switch_op.param
        002A46 002980 000003 000000 

0xFF5931	$chain0_ch1_resamp_switch_op
0xFF5931	$M.multi_chan_output.chain0_ch1_resamp_switch_op.next
        001904 

0xFF5932	$M.multi_chan_output.chain0_ch1_resamp_switch_op.func
        FF5A12 

0xFF5933	$M.multi_chan_output.chain0_ch1_resamp_switch_op.param
        002A45 FFFFFF 000002 000000 

0xFF5937	$M.multi_chan_output.chain0_ch1_dither_switch_op.next
0xFF5937	$chain0_ch1_dither_switch_op
        0028F3 

0xFF5938	$M.multi_chan_output.chain0_ch1_dither_switch_op.func
        FF5A12 

0xFF5939	$M.multi_chan_output.chain0_ch1_dither_switch_op.param
        002A45 002986 000002 000000 

0xFF593D	$chain0_ch2_dc_remove_op
0xFF593D	$M.multi_chan_output.chain0_ch2_dc_remove_op.next
        FF4AF8 

0xFF593E	$M.multi_chan_output.chain0_ch2_dc_remove_op.func
        002A01 

0xFF593F	$M.multi_chan_output.chain0_ch2_dc_remove_op.param
        000002 000002 000000 000000 

0xFF5943	$M.multi_chan_output.chain0_ch3_dc_remove_op.next
0xFF5943	$chain0_ch3_dc_remove_op
        0028FB 

0xFF5944	$M.multi_chan_output.chain0_ch3_dc_remove_op.func
        002A01 

0xFF5945	$M.multi_chan_output.chain0_ch3_dc_remove_op.param
        000003 000003 000000 000000 

0xFF5949	$M.multi_chan_output.chain0_ch4_dc_remove_op.next
0xFF5949	$chain0_ch4_dc_remove_op
        FF58A6 

0xFF594A	$M.multi_chan_output.chain0_ch4_dc_remove_op.func
        002A01 

0xFF594B	$M.multi_chan_output.chain0_ch4_dc_remove_op.param
        000004 000004 000000 000000 

0xFF594F	$M.multi_chan_output.chain0_ch5_dc_remove_op.next
0xFF594F	$chain0_ch5_dc_remove_op
        002903 

0xFF5950	$M.multi_chan_output.chain0_ch5_dc_remove_op.func
        002A01 

0xFF5951	$M.multi_chan_output.chain0_ch5_dc_remove_op.param
        000005 000005 000000 000000 

0xFF5955	$M.multi_chan_output.chain1_ch0_tone_switch_op.next
0xFF5955	$chain1_ch0_tone_switch_op
        0027D7 

0xFF5956	$M.multi_chan_output.chain1_ch0_tone_switch_op.func
        FF5A12 

0xFF5957	$M.multi_chan_output.chain1_ch0_tone_switch_op.param
        002A47 0029A4 000001 000000 

0xFF595B	$chain1_ch0_dc_remove_op
0xFF595B	$M.multi_chan_output.chain1_ch0_dc_remove_op.next
        0029AA 

0xFF595C	$M.multi_chan_output.chain1_ch0_dc_remove_op.func
        002A01 

0xFF595D	$M.multi_chan_output.chain1_ch0_dc_remove_op.param
        000000 000000 000000 000000 

0xFF5961	$M.multi_chan_output.chain1_ch1_dc_remove_op.next
0xFF5961	$chain1_ch1_dc_remove_op
        0029B0 

0xFF5962	$M.multi_chan_output.chain1_ch1_dc_remove_op.func
        002A01 

0xFF5963	$M.multi_chan_output.chain1_ch1_dc_remove_op.param
        000001 000001 000000 000000 

0xFF5967	$chain1_ch1_switch2_op
0xFF5967	$M.multi_chan_output.chain1_ch1_switch2_op.next
        00290B 

0xFF5968	$M.multi_chan_output.chain1_ch1_switch2_op.func
        FF5A12 

0xFF5969	$M.multi_chan_output.chain1_ch1_switch2_op.param
        FF5A45 FFFFFF 000002 000000 

0xFF596D	$stereo_tone_in_copy_struc
        0029BC 000001 946003 000002 
        FF59F4 0006FD 

0xFF5973	$codec_in_copy_struc
        FF59AA 000001 800002 000001 
        00006D 

0xFF5978	$hw_warp_struct
        007D00 002541 000080 000000 
        000000 

0xFF597D	$tone_in_copy_op.next
0xFF597D	$tone_in_copy_op
        FFFFFF 

0xFF597E	$tone_in_copy_op.func
        002A07 

0xFF597F	$tone_in_copy_op.param
        000000 000001 00000B 

0xFF5982	$M.music_example_message.multi_volume_message_struc
        000000 000000 000000 000000 

0xFF5986	$M.music_example_message.set_config_message_struc
        000000 000000 000000 000000 

0xFF598A	$M.music_example_message.set_output_dev_type_message_struc
        000000 000000 000000 000000 

0xFF598E	$M.music_example_message.set_anc_mode_message_struc
        000000 000000 000000 000000 

0xFF5992	$M.music_example_message.multi_channel_aux_mute_message_struc
        000000 000000 000000 000000 

0xFF5996	$M.music_example_message.soft_mute_message_struct
        000000 000000 000000 000000 

0xFF599A	$M.music_example_message.get_user_eq_param_message_struct
        000000 000000 000000 000000 

0xFF599E	$M.music_example_message.get_user_eq_group_param_message_struct
        000000 000000 000000 000000 

0xFF59A2	$audio_out_timer_struc
        000000 000000 000000 000000 

0xFF59A6	$set_dac_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF59AA	$codec_in_copy_op
0xFF59AA	$codec_in_copy_op.next
        FFFFFF 

0xFF59AB	$codec_in_copy_op.func
        FF5A03 

0xFF59AC	$codec_in_copy_op.param
        000000 000001 

0xFF59AE	$M.system_config.data.passthru_primary_right
        002878 000000 00285E 00285F 

0xFF59B2	$M.system_config.data.passthru_secondary_left
        FF4AEB 000000 002860 002861 

0xFF59B6	$M.system_config.data.left_headroom_obj
        FF4AEB FF4AEB FF5A3C 002A3B 

0xFF59BA	$M.system_config.data.aux_stereo_copy_obj
        FF4AEB 002878 FF585A 00289F 

0xFF59BE	$interface_map_struc
        000000 000000 000000 000000 

0xFF59C2	$set_tone_rate_from_vm_message_struc
        000000 000000 000000 000000 

0xFF59C6	$message.reattempt_timer_struc
        000000 000000 000000 000000 

0xFF59CA	$pskey.result_pass_message_struc
        000000 000000 000000 000000 

0xFF59CE	$pskey.reattempt_timer_struc
        000000 000000 000000 000000 

0xFF59D2	$wall_clock.message_failed_struc
        000000 000000 000000 000000 

0xFF59D6	$audio_out_left_cbuffer_struc
        0002D0 000400 000400 

0xFF59D9	$M.sra_calcrate.mode_funtion_table
        00072E 000732 00073E 

0xFF59DC	$M.music_example_spi.status_message_struc
        000000 000000 000000 

0xFF59DF	$M.music_example_spi.reinit_message_struc
        000000 000000 000000 

0xFF59E2	$M.music_example_spi.control_message_struc
        000000 000000 000000 

0xFF59E5	$codec_rate_adj_out_right_cbuffer_struc
        000104 FF3E00 FF3E00 

0xFF59E8	$codec_resamp_out_right_cbuffer_struc
        000104 FF4800 FF4800 

0xFF59EB	$multi_chan_primary_right_out_cbuffer_struc
        0000D0 FF3D00 FF3D00 

0xFF59EE	$multi_chan_secondary_right_out_cbuffer_struc
        0000D0 FF4700 FF4700 

0xFF59F1	$multi_chan_aux_right_out_cbuffer_struc
        0000D0 FF4A00 FF4A00 

0xFF59F4	$tone_in_left_cbuffer_struc
        0000C0 001B00 001B00 

0xFF59F7	$tone_in_left_resample_cbuffer_struc
        000480 FF3800 FF3800 

0xFF59FA	$tone0_in_left_resample_cbuffer_struc
        000480 FF3800 FF3800 

0xFF59FD	$tone1_in_left_resample_cbuffer_struc
        000480 FF3800 FF3800 

0xFF5A00	$tone2_in_left_resample_cbuffer_struc
        000480 FF3800 FF3800 

0xFF5A03	$cbops.copy_op
        000000 000000 0010BD 

0xFF5A06	$cbops.dither_and_shift
        000000 000000 0008B1 

0xFF5A09	$cbops.rate_adjustment_and_shift
        000000 001142 000047 

0xFF5A0C	$cbops_iir_resamplev2
        000000 000D75 000A20 

0xFF5A0F	$cbops.signal_detect_op
        000000 000000 001E48 

0xFF5A12	$cbops.switch_op
        0011E0 0011E2 0011E4 

0xFF5A15	$cbops.fir_resample
        000000 000D9A 0005D4 

0xFF5A18	$M.system_config.data.primout_r_pk_dtct
        002885 000000 

0xFF5A1A	$M.system_config.data.scndout_l_pk_dtct
        FF584D 000000 

0xFF5A1C	$M.system_config.data.auxout_l_pk_dtct
        FF585A 000000 

0xFF5A1E	$M.multi_chan_output.chain1_pcm_latency_input_struct
        00291A 000000 

0xFF5A20	$tone_in_resample_complete_op
0xFF5A20	$tone_in_resample_complete_op.next
        FFFFFF 

0xFF5A21	$tone_in_resample_complete_op.func
        002A13 

0xFF5A22	$M.Sleep.LastUpdateTm
        000000 

0xFF5A23	$aux_vol_msg_echo
        000000 

0xFF5A24	$multichannel_vol_msg_echo
        000000 

0xFF5A25	$M.music_example.LoadParams.paramoffset
        000000 

0xFF5A26	$M.music_example.LoadParams.Last_PsKey
        000000 

0xFF5A27	$M.downsample_sub_to_1k2.mute_direction
        000000 

0xFF5A28	$current_dac_sampling_rate
        000000 

0xFF5A29	$local_play_back
        000000 

0xFF5A2A	$long_term_mismatch
        000000 

0xFF5A2B	$inv_dac_fs
        14D555 

0xFF5A2C	$codec_config
        FFFFFF 

0xFF5A2D	$tmr_period_audio_copy
        0001F4 

0xFF5A2E	$glob_counter_removeframe
        000000 

0xFF5A2F	$sra_resamp_adjust_int
        000001 

0xFF5A30	$music_example.Version
        000001 

0xFF5A31	$music_example.reinit
        000001 

0xFF5A32	$music_example.SystemVolume
        00000B 

0xFF5A33	$music_example.Aux.ToneVolume
        000000 

0xFF5A34	$music_example.Aux.RightTrimVolume
        000000 

0xFF5A35	$music_example.Main.ToneVolume
        000000 

0xFF5A36	$music_example.Main.PrimaryRightTrimVolume
        000000 

0xFF5A37	$music_example.Main.SecondaryRightTrimVolume
        000000 

0xFF5A38	$music_example.DAC_IF_Connections
        000000 

0xFF5A39	$music_example.I2S_IF_Connections
        000000 

0xFF5A3A	$M.music_example.GetControl.local_sys_vol
        000000 

0xFF5A3B	$M.system_config.data.HalfValue
        400000 

0xFF5A3C	$M.system_config.data.headroom_mant
        200000 

0xFF5A3D	$M.system_config.data.BoostEqParams
        001E63 

0xFF5A3E	$M.system_config.data.aux_downmix
        000000 

0xFF5A3F	$M.system_config.data.WiredSubEqParams
        001EEE 

0xFF5A40	$cmpd_gain
        000000 

0xFF5A41	$M.system_config.data.delay_reinitialize_table
        000000 

0xFF5A42	$DAC_conn_aux
        000000 

0xFF5A43	$codec_resampler.resampler_active
        000000 

0xFF5A44	$M.multi_chan_output.num_chain1_channels
        000000 

0xFF5A45	$M.multi_chan_output.chain1_enables
        000000 

0xFF5A46	$M.multi_chan_output.chain0_tone_mix_en
        000000 

0xFF5A47	$M.multi_chan_output.prim_tone_mix_ratio
        000000 

0xFF5A48	$M.multi_chan_output.i2s_slave0
        000000 

0xFF5A49	$M.multi_chan_output.chain1_sync_port
        000000 

0xFF5A4A	$M.multi_chan_output.tone1_in_left_read_ptr
        000000 

0xFF5A4B	$M.multi_chan_output.tone0_in_right_read_ptr
        000000 

0xFF5A4C	$M.multi_chan_output.tone2_in_right_read_ptr
        000000 

0xFF5A4D	$M.multi_chan_output.chain0_mute_en
        000000 

0xFF5A4E	$chain0_hw_warp_enable
        000000 

0xFF5A4F	$M.multi_chan_output.chain1_warp_ptr
        00276C 

0xFF5A50	$current_tone_sampling_rate
        001F40 

0xFF5A51	$tmr_period_tone_copy
        001770 

0xFF5A52	$cbuffer.write_port_connect_address
        000000 

0xFF5A53	$cbuffer.read_port_connect_address
        000000 

0xFF5A54	$cbuffer.auto_mcu_message
        000001 000000 

0xFF5A56	$interrupt.total_time
        000000 

0xFF5A57	$message.queue_read_ptr
        000000 

0xFF5A58	$message.last_seq_sent
        000000 

0xFF5A59	$M.message.send_ready_wait_for_go.go_from_vm
        000000 

0xFF5A5A	$pskey.last_addr
        FFFFFF 

0xFF5A5B	$timer.last_addr
        FFFFFF 

0xFF5A5C	$cbops.struc_ptr
        000000 

0xFF5A5D	$cbops.amount_written
        000000 

0xFF5A5E	$M.cbops.av_copy.control_cbuffer
        000000 

0xFF5A5F	$M.cbops.dac_av_copy.dac_av_struct
        000000 

0xFF5A60	$M.cbops.rate_adjustment_and_shift.amount_used
        000000 

0xFF5A61	$M.cbops.rate_adjustment_and_shift.main.rand_num
        005555 

0xFF5A62	$M.cbops.auto_upsample_and_mix.main.right_temp
        000000 

0xFF5A63	$M.codec_av_decode.data_ptr
        000000 

0xFF5A64	$frame_sync.sync_flag
        000000 

0xFF5A65	$M.cmpd100.analysis.MusicComp_Peak
        000000 

0xFF5A66	$M.cmpd100.analysis.region
        000000 

0xFF5A67	$M.cmpd100.applygain.lin_gain
        000000 

0xFF5A68	$M.cmpd100.applygain.remaninder_samples
        000000 


------------------------------------------------------------------------
Region: flash.data16
------------------------------------------------------------------------
0xD00000	$M.system_config.data.DefaultParameters
        000017 00F000 000000 000000 
        000000 00000D 000000 006000 
        000000 000016 00A000 00000D 
        000000 00C000 000000 000016 
        00A000 00000D 000001 007700 
        000000 000016 00A000 00000D 
        000002 00EE00 000000 000016 
        00A000 00000D 000005 00DC00 
        000000 000016 00A000 00000D 
        00000B 00B800 000000 000016 
        00A000 00000D 000017 007000 
        000000 000016 00A000 00000D 
        00002E 00E000 000000 000016 
        00A000 00000D 00005D 00C000 
        000000 000016 00A000 00000D 
        0000BB 008000 000000 000016 
        00A000 000001 000000 000000 
        00000A 000004 00B000 000000 
        00000B 005000 000006 000000 
        000000 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000000 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000000 000000 
        000000 000D00 00012C 000000 
        000000 000B50 000000 000D00 
        0003B1 000000 000000 000B50 
        000000 000D00 000BB8 000000 
        000000 000B50 000000 000D00 
        0024EA 000000 000000 000B50 
        000000 000D00 007530 000000 
        000000 000B50 000000 000000 
        000000 000000 000D00 00012C 
        000000 000000 000B50 000000 
        000D00 0003B1 000000 000000 
        000B50 000000 000D00 000BB8 
        000000 000000 000B50 000000 
        000D00 0024EA 000000 000000 
        000B50 000000 000D00 007530 
        000000 000000 000B50 000000 
        000000 000000 000000 000D00 
        00012C 000000 000000 000B50 
        000000 000D00 0003B1 000000 
        000000 000B50 000000 000D00 
        000BB8 000000 000000 000B50 
        000000 000D00 0024EA 000000 
        000000 000B50 000000 000D00 
        007530 000000 000000 000B50 
        000000 000000 000000 000000 
        000D00 00012C 000000 000000 
        000B50 000000 000D00 0003B1 
        000000 000000 000B50 000000 
        000D00 000BB8 000000 000000 
        000B50 000000 000D00 0024EA 
        000000 000000 000B50 000000 
        000D00 007530 000000 000000 
        000B50 000000 000000 000000 
        000000 000D00 000060 000000 
        000000 0016A0 000000 000D00 
        0000C0 000000 000000 0016A0 
        000000 000D00 000177 000000 
        000000 0016A0 000000 000000 
        00000F 000000 000FB1 00AA81 
        00571F 003EC3 00ECED 004000 
        000084 00DA2F 003B31 009440 
        000000 00D53F 00A4FE 00A000 
        004000 000081 00543A 003EB7 
        00E040 000000 00BB3B 004C24 
        00BC7F 000000 000200 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000005 000000 000000 000008 
        000001 006800 000000 000009 
        00E300 000008 000001 006800 
        000000 000008 000000 000008 
        000001 006800 000000 000019 
        00E300 000008 000001 006800 
        000000 000009 00E300 000008 
        000001 006800 000000 000019 
        00E300 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000002 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000200 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000006 000000 000000 
        000007 000001 006800 000000 
        000008 004800 000007 000001 
        006800 000000 00000B 005000 
        000007 000001 006800 000000 
        00001E 00E800 000007 000001 
        006800 000000 000008 004800 
        000007 000001 006800 000000 
        00000B 005000 000007 000001 
        006800 000000 00001E 00E820 
        000000 000000 000000 000000 
        000000 000020 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000020 
        000000 000000 000010 0009B9 
        000000 000020 000000 001009 
        00B900 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000010 0009B9 001009 
        00B920 000000 002000 0000F9 
        00B037 00FA05 0042FE 0056CC 
        00FF80 007110 000000 000800 
        000001 005555 0000CC 00CC40 
        0028FD 0002EF 001840 0028FD 
        0000E3 002960 0028F0 000097 
        009D7C 000CBE 000071 00C708 
        000000 00F9B0 0037FA 000542 
        00FE56 00CCFF 008071 001000 
        000008 000000 000155 005500 
        00CCCC 004028 00FD02 00EF18 
        004028 00FD00 00E329 006028 
        00F000 00979D 007C0C 00BE00 
        0071C7 000800 000000 000A5D 
        000002 005800 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000003 00E000 
        0003E0 000003 00E000 0003E0 
        000003 00E000 0003E0 000003 
        00E000 0003E0 000003 00E000 
        0003E0 000000 000000 


------------------------------------------------------------------------
Region: flash.windowed_data16
------------------------------------------------------------------------
0x000000	$sbcdec.synthesis_coefs_m8
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 005A82 007AA5 
        007D86 00A57D 00865A 00827A 
        00471C 00ED82 0075A1 0018F8 
        00B86A 006D99 009592 0067E7 
        000748 007D8A 005FB8 00E313 
        0030FB 00C589 00BE51 007641 
        00AFCF 00043B 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        0018F8 00B8B8 00E313 006A6D 
        009982 0075A1 007D8A 005F95 
        009267 00471C 00EDE7 000748 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        000000 000000 000000 000000 
        00E707 004847 001CED 009592 
        00677D 008A5F 008275 00A16A 
        006D99 00B8E3 001318 00F8B8 
        00CF04 003B76 0041AF 0089BE 
        005130 00FBC5 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        00B8E3 00137D 008A5F 00E707 
        004895 009267 006A6D 009918 
        00F8B8 008275 00A147 001CED 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 00A57D 00865A 
        00827A 005A82 007AA5 007D86 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        008000 000080 000000 008000 
        000080 000000 008000 000080 
        000000 008000 000080 000000 
        008275 00A195 009267 00B8E3 
        0013E7 000748 0018F8 00B847 
        001CED 006A6D 00997D 008A5F 
        0089BE 0051CF 00043B 0030FB 
        00C576 0041AF 007641 00AF30 
        00FBC5 00CF04 003B89 00BE51 
        009592 006718 00F8B8 007D8A 
        005F47 001CED 00B8E3 001382 
        0075A1 00E707 00486A 006D99 

0x0000C0	$sbc.win_coefs_m8
        000000 000000 001486 00002C 
        00FE00 0048B2 00006B 00FE00 
        00956A 0000C1 008400 00E9CC 
        000107 00B201 0013BD 000105 
        006E00 00D3E3 000076 003FFF 
        00E890 00FF27 00C4FE 00359E 
        0002E5 00CD04 001C6E 00055A 
        00CF06 0086CE 000780 008908 
        0024A4 00084E 001907 00D7D1 
        00069F 00B404 0088FB 00017F 
        0044FD 007BAE 00F881 000DF2 
        00A1BA 00EBFE 0058E4 00C4A2 
        0022D0 00C22A 007CFA 0031F5 
        006738 00EEC6 003F1C 008844 
        003B3C 004810 00D84A 00708A 
        004B3D 00B24A 00708A 004810 
        00D844 003B3C 003F1C 008838 
        00EEC6 0031F5 00672A 007CFA 
        00DD2F 003EE4 00C4A2 00EBFE 
        0058F2 00A1BA 00F881 000DFD 
        007BAE 00017F 004404 0088FB 
        00069F 00B407 00D7D1 00084E 
        001908 0024A4 000780 008906 
        0086CE 00055A 00CF04 001C6E 
        00FD1A 0033FE 00359E 00FF27 
        00C4FF 00E890 000076 003F00 
        00D3E3 000105 006E01 0013BD 
        000107 00B200 00E9CC 0000C1 
        008400 00956A 00006B 00FE00 
        0048B2 00002C 00FE00 001486 

0x000138	$sbc.win_coefs_m4
        000000 000000 00232A 000061 
        00C600 00B328 0000FB 007A00 
        00FF12 00007A 0047FF 003774 
        0002CB 003F05 003B75 000764 
        006708 003DDD 00069F 00DC01 
        0091E5 00F89F 0024EC 001F5E 
        0022B6 003E31 00EAB9 003F23 
        009548 0025E5 004B58 004048 
        0025E5 003F23 009531 00EAB9 
        00DD49 00C2EC 001F5E 00F89F 
        002401 0091E5 00069F 00DC08 
        003DDD 000764 006705 003B75 
        00FD34 00C1FF 003774 00007A 
        004700 00FF12 0000FB 007A00 
        00B328 000061 00C600 00232A 

0x000174	$sbcdec.synthesis_coefs_m4
        005A82 007AA5 007D86 00A57D 
        00865A 00827A 0030FB 00C589 
        00BE51 007641 00AFCF 00043B 
        000000 000000 000000 000000 
        000000 000000 00CF04 003B76 
        0041AF 0089BE 005130 00FBC5 
        00A57D 00865A 00827A 005A82 
        007AA5 007D86 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 
        008000 000080 000000 008000 
        000080 000000 0089BE 0051CF 
        00043B 0030FB 00C576 0041AF 

0x0001A4	$sbc.loudness_offset
0x0001A4	$sbc.loudness_offset_m4
        FFFFFF 000000 000000 000000 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 
        FFFFFE 000000 000000 000001 

0x0001B4	$sbc.loudness_offset_m8
        FFFFFE 000000 000000 000000 
        000000 000000 000000 000001 
        FFFFFD 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 
        FFFFFC 000000 000000 000000 
        000000 000000 000001 000002 

0x0001D4	$sbcdec.bitmask_lookup
        000000 000000 000001 000000 
        000300 000007 000000 000F00 
        00001F 000000 003F00 00007F 
        000000 00FF00 0001FF 000003 
        00FF00 0007FF 00000F 00FF00 
        001FFF 00003F 00FF00 007FFF 
        0000FF 00FF00 

0x0001EE	$sbcdec.levelrecip_coefs
        00AAAA 00AB92 004925 008888 
        008984 002108 008208 002181 
        000204 008080 008180 004020 
        008020 000880 001002 008008 
        000180 000400 008002 000080 
        000100 008000 008000 

========================================================================
memusage
========================================================================
DATA:
  DM1_REGION: 10858 of 32768 words used, 21910 words available in 1 blocks
  DM2_REGION: 10857 of 32768 words used, 21911 words available in 1 blocks
  flash.data16: 719 of 1048576 words used, 1047857 words available in 1 blocks
  flash.windowed_data16: 517 of 16777216 words used, 16776699 words available in 1 blocks
TOTAL: 22951 of 17891328 words used, 17868377 words available in 4 blocks

CODE:
  PM_REGION: 8312 of 11264 words used, 2952 words available in 1 blocks
  flash.code: 1870 of 16764928 words used, 16763058 words available in 1 blocks
TOTAL: 10182 of 16776192 words used, 16766010 words available in 2 blocks

